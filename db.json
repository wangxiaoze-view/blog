{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"cbf3a76d4c550b41e2fe77a5883cd4c3421822d0","modified":1741768443295},{"_id":"source/tags/index.md","hash":"ee7896f4fcc35f414ba0c289ae1181b9ca53bd01","modified":1741768440294},{"_id":"source/_posts/关于/关于博主.md","hash":"01955e48c6e5507031e2a12f2ed559bdb17b7f7a","modified":1741776636031},{"_id":"source/_posts/关于/版本升级.md","hash":"d8af04604d39414a709e4c72f35ced113ff2ffb8","modified":1741921141329},{"_id":"source/_posts/我的项目/index.md","hash":"f222fb40842fe963449c7a7b92689d6fc619e465","modified":1741849219506},{"_id":"source/_posts/总结/个人总结/2019.06 - 2022-07.md","hash":"ba1afbb5c3d71277f36655037cf608b420dd9162","modified":1741860976905},{"_id":"source/_posts/总结/个人总结/2022-08 - 2024-07.md","hash":"c7a36daad9e1e45bb75aa8a85c09b62e210ecfb4","modified":1741773096323},{"_id":"source/_posts/总结/技术调研/nvm1.1.12版本的一个问题.md","hash":"c83af3e7586e5a9bbcb10564cf33165022065003","modified":1741860977039},{"_id":"source/_posts/总结/技术调研/github-pacakges.md","hash":"0fe9a46e5959dffada0d1310cd97d0b64d7b1a45","modified":1741860977134},{"_id":"source/_posts/总结/技术调研/nvm替换为fnm.md","hash":"2b1c6a12c05f6904cb5013d4786ef96b06112c24","modified":1741773170225},{"_id":"source/_posts/总结/技术调研/rust-env没有继承问题.md","hash":"0c27c81717cbd5e6ccc51f8893a7a00e2d769607","modified":1741773261641},{"_id":"source/_posts/总结/技术调研/开发远程组件的介绍.md","hash":"3c97a1df8e5f0e09e5a7c940190d6a945b5ac459","modified":1741773117160},{"_id":"source/_posts/总结/技术调研/开发远程组件的实践.md","hash":"17b7ef82bb5b3d6c712713f2053e7eeafc08ba1e","modified":1741860977829},{"_id":"source/_posts/总结/技术调研/浅谈跨端技术的局限性.md","hash":"4ae8b69a8f64b107a5617a87feb62cbfb798fb7f","modified":1741773214461},{"_id":"source/_posts/总结/技术调研/网站更新一.md","hash":"39f132ad8707e9f78ef132a54659caf573ebbaba","modified":1741860977510},{"_id":"source/_posts/总结/技术调研/网站更新二.md","hash":"c30022fa7bcdd5d18d7b32189fa29d23c434e2c1","modified":1741773341246},{"_id":"source/_posts/总结/技术调研/记录使用1Panel遇到的问题.md","hash":"cd256fd168c88e8591de231ec23fecaae76d9076","modified":1741860977338},{"_id":"source/_posts/总结/技术调研/跨端之多端系统.md","hash":"85dab3d39713b6da8ff056c78bffed16fcab4675","modified":1741860977268},{"_id":"source/_posts/总结/项目总结/GridView宫格加载渲染优化.md","hash":"c1c2924a16bc176a6b7120e8db07fc7bb1279fb0","modified":1741860977751},{"_id":"source/_posts/总结/项目总结/中英文搜索按键回车事件冲突.md","hash":"4102434f4ed165ff9d446d202f48ecd6c043fa04","modified":1741860976551},{"_id":"source/_posts/总结/项目总结/图片上传之前的自定义水印.md","hash":"65f434c8cd40a2c2eddb9c12bc2d820660b08f28","modified":1741860976832},{"_id":"source/_posts/总结/项目总结/支付中转页面.md","hash":"13f70d0bc1a9f4e4677df094316d3ca60edab851","modified":1741860976625},{"_id":"source/_posts/总结/项目总结/移动端返回触发俩次.md","hash":"82d4edfe44fe1051e8412e805619445101eb17c4","modified":1741860976765},{"_id":"source/_posts/总结/项目总结/系统下单(重复单提示框)的异常.md","hash":"97afcde98b1e1e9869df33254a0139838d1d0e79","modified":1741860976695},{"_id":"source/_posts/总结/项目总结/老系统升级问题.md","hash":"b34f754067ae05cbd16d6d8ae187a49326cb7306","modified":1741773421736},{"_id":"source/_posts/总结/项目总结/选项卡loading.md","hash":"0b060ddcab55fece12f00ea3ea24206b2a406b5b","modified":1741860977202},{"_id":"source/_posts/总结/项目总结/键盘弹起底部被顶起问题.md","hash":"a2de9043e549deb7054845599116be57f011d524","modified":1741773400656},{"_id":"source/_posts/总结/项目总结/防篡改水印.md","hash":"f59495675bd984c1fb102733ef7029dd732a9837","modified":1741860976975},{"_id":"source/_posts/我的项目/一键代码拉取项目模板/如何使用.md","hash":"cc383501e9719f05120c7faf13a2867044c7b683","modified":1741860976502},{"_id":"source/_posts/我的项目/日志上报插件/v1.md","hash":"c073567e10d347d16161685b49c9e3d72662442d","modified":1741774629867},{"_id":"source/_posts/我的项目/日志上报插件/v2.md","hash":"0b13aff7aac724f1fae94ab9f4a23c994a2d2cb6","modified":1741774631696},{"_id":"source/_posts/我的项目/桌面端开发工具/常见问题.md","hash":"22e63607aa6df9bc5ea5828b3715eb4b1a491e2a","modified":1741860976180},{"_id":"source/_posts/我的项目/桌面端开发工具/环境配置.md","hash":"81a589d49e18720e9df40eb7e34dc2963862a6d4","modified":1741860976325},{"_id":"source/_posts/我的项目/桌面端开发工具/项目介绍.md","hash":"31e8d66472a0ef722386158ea0b74a21fe5eb77e","modified":1741860976395},{"_id":"source/_posts/技能小册/html/index.md","hash":"a6adb5bd7a788c6c021fa0d54f3be1bf51961b80","modified":1741770528737},{"_id":"source/_posts/技能小册/Nest/jwt授权.md","hash":"b427ffece0ce9f17e9735b21e86a2b776dbd60d8","modified":1741772696211},{"_id":"source/_posts/技能小册/Nest/中间件.md","hash":"e72a226749edddeed484a3a9b03179a7ea177d6c","modified":1741772693011},{"_id":"source/_posts/技能小册/Nest/入手Demo.md","hash":"123b99c6a73cb493de3c232766acf0243419b52f","modified":1741849131114},{"_id":"source/_posts/技能小册/Nest/其他配置.md","hash":"d4c82f3569080455f9400edb104d627b77b6750e","modified":1741772677826},{"_id":"source/_posts/技能小册/Nest/初识.md","hash":"af52285b829a7cf7a9f42c069e91c31bca6a8ddd","modified":1741772665558},{"_id":"source/_posts/技能小册/Nest/加载环境文件.md","hash":"b69d3f0b4bb5d82f8f0da55c0503555c1d4e2af3","modified":1741772668274},{"_id":"source/_posts/技能小册/Nest/异常过滤器.md","hash":"10c5f6f988710a346d68127cefc9f21d455e88ac","modified":1741772687937},{"_id":"source/_posts/技能小册/Nest/拦截器.md","hash":"c1db4eaac8c91f19f4ff5b36d90089d9c22f1bd7","modified":1741772670928},{"_id":"source/_posts/技能小册/Nest/数据库的配置.md","hash":"8732569c97a3a29d8685eb3d3d0a3f96051f2a6b","modified":1741772685738},{"_id":"source/_posts/技能小册/Nest/请求拦截器.md","hash":"50fbfbfd23a5d1e1911500467ab57efc542fdf6d","modified":1741772584403},{"_id":"source/_posts/技能小册/Nest/路由守卫.md","hash":"bfa307412ada8dda333af927e13825efe72398fe","modified":1741772673509},{"_id":"source/_posts/技能小册/vue/created和mounted的区别.md","hash":"7af26360de0ef3870411dc047f6bce07b98ac6a8","modified":1741771648357},{"_id":"source/_posts/技能小册/vue/v-for和v-if不能同时使用.md","hash":"f65c6c3a5ee57f945f7cf5dde13a7ad34a4c1a4b","modified":1741771666996},{"_id":"source/_posts/技能小册/vue/v-if和v-show的区别.md","hash":"0717ed6813bdce3711677671d131a6c71a1be5ed","modified":1741771687525},{"_id":"source/_posts/技能小册/备忘录/docker.md","hash":"5ebca2bbbd39c32ea35c08eee5c68f89a53ba002","modified":1741773611175},{"_id":"source/_posts/技能小册/vue/watch,watchEffect和computed.md","hash":"ea07742f2baeec7c0f072bc5b3ed63205d437a45","modified":1741771752969},{"_id":"source/_posts/技能小册/vue/渐进式框架的理解.md","hash":"ac0000f7e959b60f64931de01299bd23224810e7","modified":1741771629780},{"_id":"source/_posts/技能小册/备忘录/brew.md","hash":"cdddae29479adaec02dc550154b94fde7a378233","modified":1741773596062},{"_id":"source/_posts/技能小册/服务器-运营/1panel面板.md","hash":"2fe801406731b9a2cfadec4a4f24e0e37d03969e","modified":1741860978140},{"_id":"source/_posts/技能小册/备忘录/git.md","hash":"91e1e6d5b7de0d7f1675aa9b08e973fb26afc8e3","modified":1741860978072},{"_id":"source/_posts/技能小册/服务器-运营/pm2.md","hash":"223ecfcdba67c2d99631fa84571a99b33d70c9b6","modified":1741860977978},{"_id":"source/_posts/技能小册/服务器-运营/宝塔面板.md","hash":"95f9745f52a0908604767a2ec20c74daf0266dc7","modified":1741860977906},{"_id":"source/_posts/技能小册/服务器-运营/私库.md","hash":"d2e46134ed66547fa31ec8396eea763a2d4135fb","modified":1741860978300},{"_id":"source/_posts/生活日志/生活/“舍，得，放” 下之 “放”.md","hash":"5612388f4114ad4efd25f7cf28a35a3716bb8cae","modified":1741773946799},{"_id":"source/_posts/生活日志/生活/“舍，得，放” 下之 “舍，得”.md","hash":"fe0528eaf3795c04fdc78429e0b1863f631977ec","modified":1741773951567},{"_id":"source/_posts/生活日志/生活/我的拿手好菜-红烧牛肉面.md","hash":"5621744d6cc1a4bb1a2c003a93073d238bc45ea3","modified":1741860976551},{"_id":"source/_posts/生活日志/生活/沉浸之后的总结（一）.md","hash":"f443e385a341f53d38e850cab6931f2180db2df9","modified":1741860975421},{"_id":"source/_posts/生活日志/生活/拍摄三要素.md","hash":"1b01dc9a4fd75f19045aef13f7c5a70c2a352b27","modified":1741860975421},{"_id":"source/_posts/生活日志/生活/五年时间的蜕变, 他回来了!.md","hash":"35dcbf2c53ef29ce06f8de28bf30388573e99a99","modified":1741774006480},{"_id":"source/_posts/技能小册/javascript/基础沉淀/async和defer.md","hash":"93108a97155266cf17cf3e9f0a2f4732636fac6e","modified":1741860979058},{"_id":"source/_posts/技能小册/javascript/基础沉淀/css单位对比.md","hash":"d6d957cdc2364685d6e406815a54b1bcd60ce515","modified":1741771195274},{"_id":"source/_posts/技能小册/javascript/基础沉淀/变量提升.md","hash":"d97c2228a7af69ef295286ad4aced9fce7109991","modified":1741860978989},{"_id":"source/_posts/生活日志/生活/沉浸之后的总结（二）.md","hash":"738d6d14f4e92a3925318252bbeae67be4831826","modified":1741773938075},{"_id":"source/_posts/技能小册/javascript/算法/冒泡排序.md","hash":"3f9390c319096102a5b7ccef9d8f069e12d7b05e","modified":1741771460284},{"_id":"source/_posts/技能小册/javascript/基础沉淀/call_apply_bind.md","hash":"b6c2925bc2d8b1d141103a177acf60f54c69adc2","modified":1741771125173},{"_id":"source/_posts/技能小册/javascript/基础沉淀/数据类型.md","hash":"4613ea19f14ce4a80b258a3b1d584e81678141d9","modified":1741860978527},{"_id":"source/_posts/技能小册/javascript/算法/插入排序.md","hash":"1bdd51bd5d600459da6d3d96bfcfd3d28c4ef3a4","modified":1741771423181},{"_id":"source/_posts/技能小册/javascript/基础沉淀/线程引发的思考.md","hash":"83e1a1136ac28d37ee0f9e1806ad6143d8effb73","modified":1741860978908},{"_id":"source/_posts/技能小册/javascript/算法/选择排序.md","hash":"bf8c2f9492cb3df3b4b56b3fdb6b44a6e8ec04d4","modified":1741771479763},{"_id":"source/_posts/技能小册/javascript/设计模式/代理模式.md","hash":"a9d01122794bddf6b1ee4da930cb91b6bbaead59","modified":1741771264397},{"_id":"source/_posts/技能小册/javascript/算法/快速排序.md","hash":"6223a87af5244567ffed35c100dee2bca1e62659","modified":1741771442414},{"_id":"source/_posts/技能小册/javascript/设计模式/发布订阅.md","hash":"276cda82b3749b79ac17f91df395604eec5d5114","modified":1741860978827},{"_id":"source/_posts/技能小册/javascript/设计模式/单例模式.md","hash":"0984f761e6a53cb53e22670fc7fcc7f5b519235f","modified":1741771283566},{"_id":"source/_posts/技能小册/javascript/设计模式/观察者模式.md","hash":"3bc6740b77da2843b7184078828604ac1a36faba","modified":1741860978381},{"_id":"source/_posts/技能小册/javascript/设计模式/订阅发布与观察者区别.md","hash":"c43192ae92d438febcd0e91b9e368943f3fe4265","modified":1741771312440},{"_id":"source/_posts/技能小册/项目管理/工程化/browserslistrc.md","hash":"23742f66589f4ff55a488040e457d0d90780c68b","modified":1741772274978},{"_id":"source/_posts/技能小册/项目管理/工程化/changelog.md","hash":"9b43e6f59f136a98c99326d7cf6a8a1e9ac71759","modified":1741860979266},{"_id":"source/_posts/技能小册/项目管理/工程化/editorConfig.md","hash":"9a88f37a749b20b28f72d69dfd494f15063cf79c","modified":1741772300979},{"_id":"source/_posts/技能小册/项目管理/工程化/git配置.md","hash":"d72ceea3521b020c1edf69cd833a2cf696cff09b","modified":1741772292692},{"_id":"source/_posts/技能小册/项目管理/工程化/env配置.md","hash":"45c70eed43d6b5cdd072b91cf11a6c119c3a71af","modified":1741772297752},{"_id":"source/_posts/技能小册/项目管理/工程化/commitizen.md","hash":"00542ea22cfd8546e8e69ed09ba4021b3f6542e8","modified":1741772303317},{"_id":"source/_posts/技能小册/项目管理/工程化/eslint.md","hash":"c9c96408867346d02c97e6638f66f4ce6093ace3","modified":1741772295172},{"_id":"source/_posts/技能小册/项目管理/工程化/webpack和vite的区别.md","hash":"a02346e3e7f694027e7db8bce8ea8f46846601da","modified":1741772278608},{"_id":"source/_posts/技能小册/项目管理/工程化/husky.md","hash":"d6e2832661fb982e47212b23b7be7d82b0f1a922","modified":1741772290245},{"_id":"source/_posts/技能小册/项目管理/工程化/prettier.md","hash":"0cfdcf049fc382d0be335c0426b2c9de2f4a9d6f","modified":1741772287548},{"_id":"source/_posts/技能小册/项目管理/工程化/stylelint.md","hash":"939fbccf7de305d2d864f8e53b366de2a10f3170","modified":1741772281489},{"_id":"source/_posts/技能小册/项目管理/工程化/release-it.md","hash":"0b0f0f7c029212278f86018c6c4d44f5008511e7","modified":1741772284454},{"_id":"source/_posts/技能小册/项目管理/工程化/其他配置文件.md","hash":"8ec8a8de7eeec29b9ac1fc9b0d658b3be141b771","modified":1741772270471},{"_id":"source/_posts/技能小册/项目管理/项目优化/优化的方向.md","hash":"b23e66258c0ce3d6446e8d6b13309ebe09a3050d","modified":1741772378968},{"_id":"source/_posts/技能小册/项目管理/项目创建/vue.md","hash":"83321bbee3ca4b86cf2d4056b78f5b9493674940","modified":1741771814600},{"_id":"source/_posts/技能小册/项目管理/项目优化/webpack打包优化.md","hash":"77ecf3a5439dba3370ec6616f3f8a9e073e96bea","modified":1741860979197},{"_id":"source/_posts/生活日志/小说/临终前的回溯/与她初识.md","hash":"68a2d50cba324c0aa23f811b78b5dc60c7641ffb","modified":1741774295425},{"_id":"source/_posts/生活日志/小说/临终前的回溯/我的蜕变.md","hash":"da5824852fce8eb3a629a65c4e21311f255233ce","modified":1741774342600},{"_id":"source/_posts/生活日志/小说/临终前的回溯/序章：生命之烛摇曳.md","hash":"69e8612a56111efac4f52cc45bd281adec01bea5","modified":1741774395103},{"_id":"source/_posts/生活日志/小说/临终前的回溯/现实的鞭打.md","hash":"d8722f93029bb3596ba47c3c83e9479e86a01fe0","modified":1741774323171},{"_id":"source/_posts/技能小册/项目管理/项目优化/webpack打包优化(老版本).md","hash":"b9c980d8416a968e9c53c5797830b269f445487a","modified":1741860979123},{"_id":"source/_posts/生活日志/小说/临终前的回溯/步入正轨.md","hash":"5047bab1b3d34ed86136290af2a62063203dc2d5","modified":1741774355235},{"_id":"source/_posts/生活日志/小说/临终前的回溯/相离.md","hash":"62d9bec802d8b3794ef4fc74b75e0e193a7ad393","modified":1741774311278},{"_id":"source/_posts/生活日志/小说/临终前的回溯/童年时光.md","hash":"df65dd0007eeb2eafb740db1f13c00afc6577ec0","modified":1741774278587},{"_id":"themes/butterfly/.gitignore","hash":"76e6365d33cec02b90d00699da3c0ddef1cd7efa","modified":1741688699644},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1741688699645},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1741688699644},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1741688699645},{"_id":"themes/butterfly/_config.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1741688699645},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1741688699653},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1741688699653},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1741688699644},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1741688699645},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1741688699645},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1741688699645},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1741688699645},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1741688699645},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1741688699645},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1741688699645},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1741688699645},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1741688699646},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1741688699652},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1741688699653},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1741688699653},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1741688699653},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1741688699644},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1741688699644},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1741688699644},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1741688699644},{"_id":"themes/butterfly/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1741689067245},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1741688699644},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1741688699648},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1741688699653},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1741688699653},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1741688699653},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1741688699653},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1741688699654},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1741688699655},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1741688699655},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1741688699654},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1741688699655},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1741688699655},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1741688699658},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1741688699658},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1741688699658},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1741688699659},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1741688699660},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1741688699660},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1741688699660},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1741688699660},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1741688699661},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1741688699646},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1741688699647},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1741688699652},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1741688699655},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1741688699655},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1741688699656},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1741688699656},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1741688699656},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1741688699656},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1741688699656},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1741688699657},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1741688699657},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1741688699657},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1741688699657},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1741688699658},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1741688699657},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1741688699658},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1741688699658},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1741688699658},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1741688699660},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1741688699660},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1741688699648},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1741688699649},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1741688699650},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1741688699651},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1741688699652},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1741688699652},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1741688699655},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1741688699655},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1741688699659}],"Category":[{"name":"公告","_id":"cm887h0io0004fg9ma7thhi0x"},{"name":"我的项目","_id":"cm887h0ir000efg9ma54mdijw"},{"name":"总结","_id":"cm887h0is000lfg9m73316x8v"},{"name":"技能小册","_id":"cm887h0iy002xfg9m4j8l6vgw"},{"name":"生活日志","_id":"cm887h0j30052fg9m7a395o9o"}],"Data":[],"Page":[{"title":"分类","date":"2025-03-12T08:33:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-03-12 16:33:34\ntype: 'categories'\n---\n","updated":"2025-03-12T08:34:03.295Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm887h0ik0000fg9mahq067u2","content":"","excerpt":"","more":""},{"title":"标签","date":"2025-03-12T08:33:34.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-03-12 16:33:34\ntype: 'tags'\norderby: random\norder: 1\n---","updated":"2025-03-12T08:34:00.294Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm887h0in0002fg9m6lxna6fc","content":"","excerpt":"","more":""}],"Post":[{"title":"公告-关于博主","abbrlink":"3317594d","date":"2023-05-18T16:00:00.000Z","_content":"\n\n## Hi～\n\nWelcome，欢迎来到我的网站，我就是该网站的负责人--`王小泽`, 该网站记录👤个人工作中，生活总的趣事与难题；接下来会说到我的传奇😏\n\n## 小白来了\n\n大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；\n\n过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面\n就不接了，学校，朋友的消息也都没回；\n\n机缘巧合，在一番失败之后，面试上了`昆明拓鸿科技`公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；\n\n在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；\n\n之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；\n\n## 上海 - 初\n\n来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；\n\n`上海鸣皋教育科技有限公司`, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大`志哥`人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上\n就是为了学习而来；\n\n那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；\n\n之后，在学习了一年之后，就跟老大提了离职。。。\n\n## 上海 - 中\n\n我来到了`上海帘邦信息科技有限公司`, 规模人数要比之前的大一点，入职之后，`杰哥`让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了`node`，学习了规范化流程清楚的知道了自己很多的问题与缺陷；\n\n线下时间就去了解`node`，并以`node+express`搭建api请求，在经历个半个月之后，就自己动手搭建了一个简单的`博客系统`, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了`宝塔`布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下`jenkins不是node和vue项目`，简单说就是将项目拉下来，执行命令，将`dist`文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；\n\n`年终总结大会`来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；\n\n接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以`node, express`然后简单了解`koa`的基础使用，之后在这基础上又接触了`nest， mqSql`，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习`vue` 相关的知识，通过`github项目，掘金，csdn等等`论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；\n\n并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；\n\n\n之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，`dart, flutter`，了解其使用，`getx`状态管理器, `http`的拦截使用简单的请求渲染页面；作为一个技术储备；\n\n在公司发现了一些问题，公司没有pc,h5的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想`vue-cli`安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过`npm`发布自己的工具，于是`tem-pro`工具就上线了；起初周下载量也有了`100`左右的下载，慢慢的后面下载量就减少了；\n\n## 上海 - 终\n\n对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；\n\n不过现在还没有这个想法，先继续提升自己的能力吧！","source":"_posts/关于/关于博主.md","raw":"---\ntitle: 公告-关于博主\nabbrlink: 3317594d\ndate: 2023-05-19\ncategories:\n  - 公告\ntags:\n  - 关于博主\n---\n\n\n## Hi～\n\nWelcome，欢迎来到我的网站，我就是该网站的负责人--`王小泽`, 该网站记录👤个人工作中，生活总的趣事与难题；接下来会说到我的传奇😏\n\n## 小白来了\n\n大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；\n\n过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面\n就不接了，学校，朋友的消息也都没回；\n\n机缘巧合，在一番失败之后，面试上了`昆明拓鸿科技`公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；\n\n在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；\n\n之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；\n\n## 上海 - 初\n\n来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；\n\n`上海鸣皋教育科技有限公司`, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大`志哥`人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上\n就是为了学习而来；\n\n那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；\n\n之后，在学习了一年之后，就跟老大提了离职。。。\n\n## 上海 - 中\n\n我来到了`上海帘邦信息科技有限公司`, 规模人数要比之前的大一点，入职之后，`杰哥`让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了`node`，学习了规范化流程清楚的知道了自己很多的问题与缺陷；\n\n线下时间就去了解`node`，并以`node+express`搭建api请求，在经历个半个月之后，就自己动手搭建了一个简单的`博客系统`, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了`宝塔`布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下`jenkins不是node和vue项目`，简单说就是将项目拉下来，执行命令，将`dist`文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；\n\n`年终总结大会`来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；\n\n接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以`node, express`然后简单了解`koa`的基础使用，之后在这基础上又接触了`nest， mqSql`，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习`vue` 相关的知识，通过`github项目，掘金，csdn等等`论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；\n\n并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；\n\n\n之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，`dart, flutter`，了解其使用，`getx`状态管理器, `http`的拦截使用简单的请求渲染页面；作为一个技术储备；\n\n在公司发现了一些问题，公司没有pc,h5的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想`vue-cli`安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过`npm`发布自己的工具，于是`tem-pro`工具就上线了；起初周下载量也有了`100`左右的下载，慢慢的后面下载量就减少了；\n\n## 上海 - 终\n\n对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；\n\n不过现在还没有这个想法，先继续提升自己的能力吧！","slug":"关于/关于博主","published":1,"updated":"2025-03-12T10:50:36.031Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0im0001fg9m6nopb44r","content":"<h2 id=\"Hi～\"><a href=\"#Hi～\" class=\"headerlink\" title=\"Hi～\"></a>Hi～</h2><p>Welcome，欢迎来到我的网站，我就是该网站的负责人–<code>王小泽</code>, 该网站记录👤个人工作中，生活总的趣事与难题；接下来会说到我的传奇😏</p>\n<h2 id=\"小白来了\"><a href=\"#小白来了\" class=\"headerlink\" title=\"小白来了\"></a>小白来了</h2><p>大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；</p>\n<p>过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面<br>就不接了，学校，朋友的消息也都没回；</p>\n<p>机缘巧合，在一番失败之后，面试上了<code>昆明拓鸿科技</code>公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；</p>\n<p>在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；</p>\n<p>之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；</p>\n<h2 id=\"上海-初\"><a href=\"#上海-初\" class=\"headerlink\" title=\"上海 - 初\"></a>上海 - 初</h2><p>来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；</p>\n<p><code>上海鸣皋教育科技有限公司</code>, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大<code>志哥</code>人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上<br>就是为了学习而来；</p>\n<p>那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；</p>\n<p>之后，在学习了一年之后，就跟老大提了离职。。。</p>\n<h2 id=\"上海-中\"><a href=\"#上海-中\" class=\"headerlink\" title=\"上海 - 中\"></a>上海 - 中</h2><p>我来到了<code>上海帘邦信息科技有限公司</code>, 规模人数要比之前的大一点，入职之后，<code>杰哥</code>让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了<code>node</code>，学习了规范化流程清楚的知道了自己很多的问题与缺陷；</p>\n<p>线下时间就去了解<code>node</code>，并以<code>node+express</code>搭建api请求，在经历个半个月之后，就自己动手搭建了一个简单的<code>博客系统</code>, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了<code>宝塔</code>布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下<code>jenkins不是node和vue项目</code>，简单说就是将项目拉下来，执行命令，将<code>dist</code>文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；</p>\n<p><code>年终总结大会</code>来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；</p>\n<p>接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以<code>node, express</code>然后简单了解<code>koa</code>的基础使用，之后在这基础上又接触了<code>nest， mqSql</code>，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习<code>vue</code> 相关的知识，通过<code>github项目，掘金，csdn等等</code>论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；</p>\n<p>并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；</p>\n<p>之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，<code>dart, flutter</code>，了解其使用，<code>getx</code>状态管理器, <code>http</code>的拦截使用简单的请求渲染页面；作为一个技术储备；</p>\n<p>在公司发现了一些问题，公司没有pc,h5的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想<code>vue-cli</code>安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过<code>npm</code>发布自己的工具，于是<code>tem-pro</code>工具就上线了；起初周下载量也有了<code>100</code>左右的下载，慢慢的后面下载量就减少了；</p>\n<h2 id=\"上海-终\"><a href=\"#上海-终\" class=\"headerlink\" title=\"上海 - 终\"></a>上海 - 终</h2><p>对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；</p>\n<p>不过现在还没有这个想法，先继续提升自己的能力吧！</p>\n","excerpt":"","more":"<h2 id=\"Hi～\"><a href=\"#Hi～\" class=\"headerlink\" title=\"Hi～\"></a>Hi～</h2><p>Welcome，欢迎来到我的网站，我就是该网站的负责人–<code>王小泽</code>, 该网站记录👤个人工作中，生活总的趣事与难题；接下来会说到我的传奇😏</p>\n<h2 id=\"小白来了\"><a href=\"#小白来了\" class=\"headerlink\" title=\"小白来了\"></a>小白来了</h2><p>大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；</p>\n<p>过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面<br>就不接了，学校，朋友的消息也都没回；</p>\n<p>机缘巧合，在一番失败之后，面试上了<code>昆明拓鸿科技</code>公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；</p>\n<p>在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；</p>\n<p>之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；</p>\n<h2 id=\"上海-初\"><a href=\"#上海-初\" class=\"headerlink\" title=\"上海 - 初\"></a>上海 - 初</h2><p>来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；</p>\n<p><code>上海鸣皋教育科技有限公司</code>, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大<code>志哥</code>人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上<br>就是为了学习而来；</p>\n<p>那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；</p>\n<p>之后，在学习了一年之后，就跟老大提了离职。。。</p>\n<h2 id=\"上海-中\"><a href=\"#上海-中\" class=\"headerlink\" title=\"上海 - 中\"></a>上海 - 中</h2><p>我来到了<code>上海帘邦信息科技有限公司</code>, 规模人数要比之前的大一点，入职之后，<code>杰哥</code>让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了<code>node</code>，学习了规范化流程清楚的知道了自己很多的问题与缺陷；</p>\n<p>线下时间就去了解<code>node</code>，并以<code>node+express</code>搭建api请求，在经历个半个月之后，就自己动手搭建了一个简单的<code>博客系统</code>, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了<code>宝塔</code>布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下<code>jenkins不是node和vue项目</code>，简单说就是将项目拉下来，执行命令，将<code>dist</code>文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；</p>\n<p><code>年终总结大会</code>来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；</p>\n<p>接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以<code>node, express</code>然后简单了解<code>koa</code>的基础使用，之后在这基础上又接触了<code>nest， mqSql</code>，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习<code>vue</code> 相关的知识，通过<code>github项目，掘金，csdn等等</code>论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；</p>\n<p>并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；</p>\n<p>之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，<code>dart, flutter</code>，了解其使用，<code>getx</code>状态管理器, <code>http</code>的拦截使用简单的请求渲染页面；作为一个技术储备；</p>\n<p>在公司发现了一些问题，公司没有pc,h5的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想<code>vue-cli</code>安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过<code>npm</code>发布自己的工具，于是<code>tem-pro</code>工具就上线了；起初周下载量也有了<code>100</code>左右的下载，慢慢的后面下载量就减少了；</p>\n<h2 id=\"上海-终\"><a href=\"#上海-终\" class=\"headerlink\" title=\"上海 - 终\"></a>上海 - 终</h2><p>对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；</p>\n<p>不过现在还没有这个想法，先继续提升自己的能力吧！</p>\n"},{"title":"公告-版本升级","abbrlink":"8aea48ee","date":"2023-05-18T16:00:00.000Z","_content":"\n\n# 芜湖～\n\n网站全面更新，由于博主比较懒，由初代动态网站到静态网站，也已经过去了一段时间；刚开始搭建网站的目的很简单，就是凸显自己的成就，喜欢折腾新的东西，那段时间也是对技术的热情，就自己捣鼓着一些稀奇古怪的东西；\n\n现在自己精力大不如从前了，没有太多的精力去消耗了，自己也在前端方向有了一些小的成就；接下来的时间就回去专研某一方向的技术；\n\n此次更新网站的目的，脱离原有的单一的文档流，以多样化文档展示，使得网站更加丰富；新版网站将会以文档的形式进行归类，凸显文档归类的意义；\n\n## 网站更新的内容\n\n接下来大致说一下更新的内容：\n\n\n{% timeline 网站更新内容： %}\n<!-- timeline Version 4.0.1 更新内容 -->\n1. ~~本网站采用的图片存储于oss容器，原有的github图床不会再进行更新；~~\n2. ~~更新图片域名，增加安全性已经防火墙模式；~~\n3. ~~部分请求流量较高的图片还是使用github图床的形式引入；~~\n4. 网站非赢利性网站，故将网站成本降为最低，oss存储容器暂时不使用；\n5. **数据会从语雀进行导出，故使用其内置的图床；**\n6. 为降低成本, 确认最终的域名为`wangxiaoze.cn`，**2025-06-21`wangzevw.com`将不再使用**\n<!-- endtimeline -->\n\n<!-- timeline Version 4.0.0 更新内容 -->\n1. 采用`hexo`构建博客系统，不在使用原有的文档流系统；\n2. 突出主体，该网站更加适合平时的记录\n3. 保留旧版本的系统[knowledge-base](https://wangxiaoze-view.github.io/knowledge-base/)\n4. **后期内容的发布不在原来的文档系统发布，最新博文将会展示在该网站**\n<!-- endtimeline -->\n\n<!-- timeline Version 3.3.0 更新内容 -->\n1. 前端小册链接更新，访问之前的链接显示`404`\n2. 删除前端导航页面, 网站统计链接取消\n3. 项目`demos`页面删除, 删除相关依赖，用[web-demos](https://wangxiaoze-view.github.io/web-demos/#button)进行访问\n4. 优化导航栏，侧边栏使用`自动更新`, 舍弃之前长代码配置\n5. **总结部分文档**放置`前端小册`\n<!-- endtimeline -->\n\n<!-- timeline Version 3.2.0 更新内容 -->\n1. 图片进行优化，支持图片大图预览；并且当原图加载失败默认使用`github`图片地址；\n2. 添加前端导航页面，不断更新一些常用有趣的网站；\n3. 删除个人项目栏目，将其放置在前端导航\n4. 添加网站统计\n5. 将文档以及 `demos` 移置本网站，将取消对应的域名`docs.wangzevw.com 和 demos.wangzevw.com`\n<!-- endtimeline -->\n\n<!-- timeline Version 3.1.0 更新内容 -->\n1. 目录重新调整，将前端知识内容移动到前端小册模块下；\n<!-- endtimeline -->\n\n\n<!-- timeline Version 3.0.0 更新内容 -->\n1. 网站由 `vuepress` 更新成 `vitepress`\n2. 摒弃花里胡哨的主题样式(太过沉重), 以原生原味的形式展示文档内容\n3. 废弃部分旧文档,nest, 桌面端，移动端不再进行整理更新;\n<!-- endtimeline -->\n\n\n<!-- timeline Version 2.3.0 更新内容 -->\n1. `nest, 移动端, 桌面端`是很少更新系列(个人兴趣), 移动到`其他`模块\n2. 在`其他`模块中, 添加`three`的学习\n3. 添加demos个人总结的`Demos`\n<!-- endtimeline -->\n\n<!-- timeline Version 2.2.0 更新内容 -->\n1. 移除面试题, 将面试题整理在前端；否则内容会很多，导致文档的分类混乱；\n2. 近期更新的频率和内容将以前端为主，移动端的`鸿蒙,FLutter`后端的`Nest`有时间会持续更新;\n3. 关于`Flutter`的整理：将已整理的内容放置FlutterDemo网站中（如果文字显示不出来, 这是 Flutter 一个弊端, 需要等待或者挂梯子） 网站已废弃\n4. 桌面端正在开发一个简单的`DEMO`，后续会将该`DEMO`作为开发案例进行整理\n<!-- endtimeline -->\n\n\n<!-- timeline Version 2.1.0 更新内容 -->\n1. 添加了部分`Demos`,可在网站中访问，可以在新标签页查看;\n2. 删除`vdoing`主题自带的广告插件;\n3. 更新浏览器图标;\n4. 文档有很多同一天发布的, 那是将原来的网站内容进行迁移;\n5. 添加前端部分面试题;\n<!-- endtimeline -->\n\n<!-- timeline Version 2.0.0 更新内容 -->\n1. 脱离服务端，采用`GitHub`和`Gitee`进行托管；\n2. 优化网站性能，使用`CDN`进行加速；\n3. 网站采用`md`语言进行编写；\n4. 具现化分类模块；\n5. 网站内容更新：线下积累的知识，对生活的感悟...\n6. 添加个人的一些项目，涉及到前后端移动端等等；添加搜集的一些网站：图片转换网站，文档处理网站等等\n7. 网站迁移，底层`hexo`修改为`vuepress`\n<!-- endtimeline -->\n\n\n<!-- timeline Version 1.0.0 更新内容 -->\n1. 网站脱离单一文档流的特性，采用多样化管理；\n2. 采用[`Hexo`](https://hexo.io/zh-cn/index.html)静态搭建，使用[`Butterfly-github`](https://github.com/jerryc127/hexo-theme-butterfly.git), [`Butterfly-gitee`](https://gitee.com/immyw/hexo-theme-butterfly)主题搭配使用；\n3. 主题配置化，配置动画，加载，多样化设置；\n4. 分类管理文档，如：生活，分类，标签等等；\n5. 优化文档形式，更加凸显博客主题，主体内容以左右布局，更加凸显博客格式；\n6. 添加复制内容是附加原创版权声明，并且每个页面下方标注版权；\n7. 底部添加备案表示；\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n## 主题内容\n\n本网站的主题内容将会以职场，生活方向靠近，涉及`前端技术`, `App（Flutter, uni-app）`，`服务器与后端技术`, `生活日记` 等等；\n\n~~由于网站内容脱离动态数据，采用`mardown`格式编写，老版本网站的文档将会在近期内加快迁移；近期工作比较忙，预计`一周至半月`；~~\n\n`旧版本博客数据已经迁移至新版本中，后期文章的更新会在新版本中进行更新与发布！！！博文会不定时进行更新发布，没有固定时间，可能一个月不发布，也有可能5天发布三篇；具体看本人的时间！`\n:\n\n","source":"_posts/关于/版本升级.md","raw":"---\ntitle: 公告-版本升级\nabbrlink: 8aea48ee\ndate: 2023-05-19\ncategories:\n  - 公告\ntags:\n  - 升级日志\n---\n\n\n# 芜湖～\n\n网站全面更新，由于博主比较懒，由初代动态网站到静态网站，也已经过去了一段时间；刚开始搭建网站的目的很简单，就是凸显自己的成就，喜欢折腾新的东西，那段时间也是对技术的热情，就自己捣鼓着一些稀奇古怪的东西；\n\n现在自己精力大不如从前了，没有太多的精力去消耗了，自己也在前端方向有了一些小的成就；接下来的时间就回去专研某一方向的技术；\n\n此次更新网站的目的，脱离原有的单一的文档流，以多样化文档展示，使得网站更加丰富；新版网站将会以文档的形式进行归类，凸显文档归类的意义；\n\n## 网站更新的内容\n\n接下来大致说一下更新的内容：\n\n\n{% timeline 网站更新内容： %}\n<!-- timeline Version 4.0.1 更新内容 -->\n1. ~~本网站采用的图片存储于oss容器，原有的github图床不会再进行更新；~~\n2. ~~更新图片域名，增加安全性已经防火墙模式；~~\n3. ~~部分请求流量较高的图片还是使用github图床的形式引入；~~\n4. 网站非赢利性网站，故将网站成本降为最低，oss存储容器暂时不使用；\n5. **数据会从语雀进行导出，故使用其内置的图床；**\n6. 为降低成本, 确认最终的域名为`wangxiaoze.cn`，**2025-06-21`wangzevw.com`将不再使用**\n<!-- endtimeline -->\n\n<!-- timeline Version 4.0.0 更新内容 -->\n1. 采用`hexo`构建博客系统，不在使用原有的文档流系统；\n2. 突出主体，该网站更加适合平时的记录\n3. 保留旧版本的系统[knowledge-base](https://wangxiaoze-view.github.io/knowledge-base/)\n4. **后期内容的发布不在原来的文档系统发布，最新博文将会展示在该网站**\n<!-- endtimeline -->\n\n<!-- timeline Version 3.3.0 更新内容 -->\n1. 前端小册链接更新，访问之前的链接显示`404`\n2. 删除前端导航页面, 网站统计链接取消\n3. 项目`demos`页面删除, 删除相关依赖，用[web-demos](https://wangxiaoze-view.github.io/web-demos/#button)进行访问\n4. 优化导航栏，侧边栏使用`自动更新`, 舍弃之前长代码配置\n5. **总结部分文档**放置`前端小册`\n<!-- endtimeline -->\n\n<!-- timeline Version 3.2.0 更新内容 -->\n1. 图片进行优化，支持图片大图预览；并且当原图加载失败默认使用`github`图片地址；\n2. 添加前端导航页面，不断更新一些常用有趣的网站；\n3. 删除个人项目栏目，将其放置在前端导航\n4. 添加网站统计\n5. 将文档以及 `demos` 移置本网站，将取消对应的域名`docs.wangzevw.com 和 demos.wangzevw.com`\n<!-- endtimeline -->\n\n<!-- timeline Version 3.1.0 更新内容 -->\n1. 目录重新调整，将前端知识内容移动到前端小册模块下；\n<!-- endtimeline -->\n\n\n<!-- timeline Version 3.0.0 更新内容 -->\n1. 网站由 `vuepress` 更新成 `vitepress`\n2. 摒弃花里胡哨的主题样式(太过沉重), 以原生原味的形式展示文档内容\n3. 废弃部分旧文档,nest, 桌面端，移动端不再进行整理更新;\n<!-- endtimeline -->\n\n\n<!-- timeline Version 2.3.0 更新内容 -->\n1. `nest, 移动端, 桌面端`是很少更新系列(个人兴趣), 移动到`其他`模块\n2. 在`其他`模块中, 添加`three`的学习\n3. 添加demos个人总结的`Demos`\n<!-- endtimeline -->\n\n<!-- timeline Version 2.2.0 更新内容 -->\n1. 移除面试题, 将面试题整理在前端；否则内容会很多，导致文档的分类混乱；\n2. 近期更新的频率和内容将以前端为主，移动端的`鸿蒙,FLutter`后端的`Nest`有时间会持续更新;\n3. 关于`Flutter`的整理：将已整理的内容放置FlutterDemo网站中（如果文字显示不出来, 这是 Flutter 一个弊端, 需要等待或者挂梯子） 网站已废弃\n4. 桌面端正在开发一个简单的`DEMO`，后续会将该`DEMO`作为开发案例进行整理\n<!-- endtimeline -->\n\n\n<!-- timeline Version 2.1.0 更新内容 -->\n1. 添加了部分`Demos`,可在网站中访问，可以在新标签页查看;\n2. 删除`vdoing`主题自带的广告插件;\n3. 更新浏览器图标;\n4. 文档有很多同一天发布的, 那是将原来的网站内容进行迁移;\n5. 添加前端部分面试题;\n<!-- endtimeline -->\n\n<!-- timeline Version 2.0.0 更新内容 -->\n1. 脱离服务端，采用`GitHub`和`Gitee`进行托管；\n2. 优化网站性能，使用`CDN`进行加速；\n3. 网站采用`md`语言进行编写；\n4. 具现化分类模块；\n5. 网站内容更新：线下积累的知识，对生活的感悟...\n6. 添加个人的一些项目，涉及到前后端移动端等等；添加搜集的一些网站：图片转换网站，文档处理网站等等\n7. 网站迁移，底层`hexo`修改为`vuepress`\n<!-- endtimeline -->\n\n\n<!-- timeline Version 1.0.0 更新内容 -->\n1. 网站脱离单一文档流的特性，采用多样化管理；\n2. 采用[`Hexo`](https://hexo.io/zh-cn/index.html)静态搭建，使用[`Butterfly-github`](https://github.com/jerryc127/hexo-theme-butterfly.git), [`Butterfly-gitee`](https://gitee.com/immyw/hexo-theme-butterfly)主题搭配使用；\n3. 主题配置化，配置动画，加载，多样化设置；\n4. 分类管理文档，如：生活，分类，标签等等；\n5. 优化文档形式，更加凸显博客主题，主体内容以左右布局，更加凸显博客格式；\n6. 添加复制内容是附加原创版权声明，并且每个页面下方标注版权；\n7. 底部添加备案表示；\n<!-- endtimeline -->\n\n{% endtimeline %}\n\n\n## 主题内容\n\n本网站的主题内容将会以职场，生活方向靠近，涉及`前端技术`, `App（Flutter, uni-app）`，`服务器与后端技术`, `生活日记` 等等；\n\n~~由于网站内容脱离动态数据，采用`mardown`格式编写，老版本网站的文档将会在近期内加快迁移；近期工作比较忙，预计`一周至半月`；~~\n\n`旧版本博客数据已经迁移至新版本中，后期文章的更新会在新版本中进行更新与发布！！！博文会不定时进行更新发布，没有固定时间，可能一个月不发布，也有可能5天发布三篇；具体看本人的时间！`\n:\n\n","slug":"关于/版本升级","published":1,"updated":"2025-03-14T02:59:01.329Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0io0003fg9m73kk16a9","content":"<h1 id=\"芜湖～\"><a href=\"#芜湖～\" class=\"headerlink\" title=\"芜湖～\"></a>芜湖～</h1><p>网站全面更新，由于博主比较懒，由初代动态网站到静态网站，也已经过去了一段时间；刚开始搭建网站的目的很简单，就是凸显自己的成就，喜欢折腾新的东西，那段时间也是对技术的热情，就自己捣鼓着一些稀奇古怪的东西；</p>\n<p>现在自己精力大不如从前了，没有太多的精力去消耗了，自己也在前端方向有了一些小的成就；接下来的时间就回去专研某一方向的技术；</p>\n<p>此次更新网站的目的，脱离原有的单一的文档流，以多样化文档展示，使得网站更加丰富；新版网站将会以文档的形式进行归类，凸显文档归类的意义；</p>\n<h2 id=\"网站更新的内容\"><a href=\"#网站更新的内容\" class=\"headerlink\" title=\"网站更新的内容\"></a>网站更新的内容</h2><p>接下来大致说一下更新的内容：</p>\n<div class=\"timeline \"><div class='timeline-item headline'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>网站更新内容：</p>\n</div>\n        </div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 4.0.1 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li><del>本网站采用的图片存储于oss容器，原有的github图床不会再进行更新；</del></li>\n<li><del>更新图片域名，增加安全性已经防火墙模式；</del></li>\n<li><del>部分请求流量较高的图片还是使用github图床的形式引入；</del></li>\n<li>网站非赢利性网站，故将网站成本降为最低，oss存储容器暂时不使用；</li>\n<li><strong>数据会从语雀进行导出，故使用其内置的图床；</strong></li>\n<li>为降低成本, 确认最终的域名为<code>wangxiaoze.cn</code>，<strong>2025-06-21<code>wangzevw.com</code>将不再使用</strong></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 4.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>采用<code>hexo</code>构建博客系统，不在使用原有的文档流系统；</li>\n<li>突出主体，该网站更加适合平时的记录</li>\n<li>保留旧版本的系统<a href=\"https://wangxiaoze-view.github.io/knowledge-base/\">knowledge-base</a></li>\n<li><strong>后期内容的发布不在原来的文档系统发布，最新博文将会展示在该网站</strong></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.3.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>前端小册链接更新，访问之前的链接显示<code>404</code></li>\n<li>删除前端导航页面, 网站统计链接取消</li>\n<li>项目<code>demos</code>页面删除, 删除相关依赖，用<a href=\"https://wangxiaoze-view.github.io/web-demos/#button\">web-demos</a>进行访问</li>\n<li>优化导航栏，侧边栏使用<code>自动更新</code>, 舍弃之前长代码配置</li>\n<li><strong>总结部分文档</strong>放置<code>前端小册</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.2.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>图片进行优化，支持图片大图预览；并且当原图加载失败默认使用<code>github</code>图片地址；</li>\n<li>添加前端导航页面，不断更新一些常用有趣的网站；</li>\n<li>删除个人项目栏目，将其放置在前端导航</li>\n<li>添加网站统计</li>\n<li>将文档以及 <code>demos</code> 移置本网站，将取消对应的域名<code>docs.wangzevw.com 和 demos.wangzevw.com</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.1.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>目录重新调整，将前端知识内容移动到前端小册模块下；</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>网站由 <code>vuepress</code> 更新成 <code>vitepress</code></li>\n<li>摒弃花里胡哨的主题样式(太过沉重), 以原生原味的形式展示文档内容</li>\n<li>废弃部分旧文档,nest, 桌面端，移动端不再进行整理更新;</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.3.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li><code>nest, 移动端, 桌面端</code>是很少更新系列(个人兴趣), 移动到<code>其他</code>模块</li>\n<li>在<code>其他</code>模块中, 添加<code>three</code>的学习</li>\n<li>添加demos个人总结的<code>Demos</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.2.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>移除面试题, 将面试题整理在前端；否则内容会很多，导致文档的分类混乱；</li>\n<li>近期更新的频率和内容将以前端为主，移动端的<code>鸿蒙,FLutter</code>后端的<code>Nest</code>有时间会持续更新;</li>\n<li>关于<code>Flutter</code>的整理：将已整理的内容放置FlutterDemo网站中（如果文字显示不出来, 这是 Flutter 一个弊端, 需要等待或者挂梯子） 网站已废弃</li>\n<li>桌面端正在开发一个简单的<code>DEMO</code>，后续会将该<code>DEMO</code>作为开发案例进行整理</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.1.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>添加了部分<code>Demos</code>,可在网站中访问，可以在新标签页查看;</li>\n<li>删除<code>vdoing</code>主题自带的广告插件;</li>\n<li>更新浏览器图标;</li>\n<li>文档有很多同一天发布的, 那是将原来的网站内容进行迁移;</li>\n<li>添加前端部分面试题;</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>脱离服务端，采用<code>GitHub</code>和<code>Gitee</code>进行托管；</li>\n<li>优化网站性能，使用<code>CDN</code>进行加速；</li>\n<li>网站采用<code>md</code>语言进行编写；</li>\n<li>具现化分类模块；</li>\n<li>网站内容更新：线下积累的知识，对生活的感悟…</li>\n<li>添加个人的一些项目，涉及到前后端移动端等等；添加搜集的一些网站：图片转换网站，文档处理网站等等</li>\n<li>网站迁移，底层<code>hexo</code>修改为<code>vuepress</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 1.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>网站脱离单一文档流的特性，采用多样化管理；</li>\n<li>采用<a href=\"https://hexo.io/zh-cn/index.html\"><code>Hexo</code></a>静态搭建，使用<a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\"><code>Butterfly-github</code></a>, <a href=\"https://gitee.com/immyw/hexo-theme-butterfly\"><code>Butterfly-gitee</code></a>主题搭配使用；</li>\n<li>主题配置化，配置动画，加载，多样化设置；</li>\n<li>分类管理文档，如：生活，分类，标签等等；</li>\n<li>优化文档形式，更加凸显博客主题，主体内容以左右布局，更加凸显博客格式；</li>\n<li>添加复制内容是附加原创版权声明，并且每个页面下方标注版权；</li>\n<li>底部添加备案表示；</li>\n</ol>\n</div>\n      </div></div>\n\n\n<h2 id=\"主题内容\"><a href=\"#主题内容\" class=\"headerlink\" title=\"主题内容\"></a>主题内容</h2><p>本网站的主题内容将会以职场，生活方向靠近，涉及<code>前端技术</code>, <code>App（Flutter, uni-app）</code>，<code>服务器与后端技术</code>, <code>生活日记</code> 等等；</p>\n<p><del>由于网站内容脱离动态数据，采用<code>mardown</code>格式编写，老版本网站的文档将会在近期内加快迁移；近期工作比较忙，预计<code>一周至半月</code>；</del></p>\n<p><code>旧版本博客数据已经迁移至新版本中，后期文章的更新会在新版本中进行更新与发布！！！博文会不定时进行更新发布，没有固定时间，可能一个月不发布，也有可能5天发布三篇；具体看本人的时间！</code><br>:</p>\n","excerpt":"","more":"<h1 id=\"芜湖～\"><a href=\"#芜湖～\" class=\"headerlink\" title=\"芜湖～\"></a>芜湖～</h1><p>网站全面更新，由于博主比较懒，由初代动态网站到静态网站，也已经过去了一段时间；刚开始搭建网站的目的很简单，就是凸显自己的成就，喜欢折腾新的东西，那段时间也是对技术的热情，就自己捣鼓着一些稀奇古怪的东西；</p>\n<p>现在自己精力大不如从前了，没有太多的精力去消耗了，自己也在前端方向有了一些小的成就；接下来的时间就回去专研某一方向的技术；</p>\n<p>此次更新网站的目的，脱离原有的单一的文档流，以多样化文档展示，使得网站更加丰富；新版网站将会以文档的形式进行归类，凸显文档归类的意义；</p>\n<h2 id=\"网站更新的内容\"><a href=\"#网站更新的内容\" class=\"headerlink\" title=\"网站更新的内容\"></a>网站更新的内容</h2><p>接下来大致说一下更新的内容：</p>\n<div class=\"timeline \"><div class='timeline-item headline'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>网站更新内容：</p>\n</div>\n        </div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 4.0.1 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li><del>本网站采用的图片存储于oss容器，原有的github图床不会再进行更新；</del></li>\n<li><del>更新图片域名，增加安全性已经防火墙模式；</del></li>\n<li><del>部分请求流量较高的图片还是使用github图床的形式引入；</del></li>\n<li>网站非赢利性网站，故将网站成本降为最低，oss存储容器暂时不使用；</li>\n<li><strong>数据会从语雀进行导出，故使用其内置的图床；</strong></li>\n<li>为降低成本, 确认最终的域名为<code>wangxiaoze.cn</code>，<strong>2025-06-21<code>wangzevw.com</code>将不再使用</strong></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 4.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>采用<code>hexo</code>构建博客系统，不在使用原有的文档流系统；</li>\n<li>突出主体，该网站更加适合平时的记录</li>\n<li>保留旧版本的系统<a href=\"https://wangxiaoze-view.github.io/knowledge-base/\">knowledge-base</a></li>\n<li><strong>后期内容的发布不在原来的文档系统发布，最新博文将会展示在该网站</strong></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.3.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>前端小册链接更新，访问之前的链接显示<code>404</code></li>\n<li>删除前端导航页面, 网站统计链接取消</li>\n<li>项目<code>demos</code>页面删除, 删除相关依赖，用<a href=\"https://wangxiaoze-view.github.io/web-demos/#button\">web-demos</a>进行访问</li>\n<li>优化导航栏，侧边栏使用<code>自动更新</code>, 舍弃之前长代码配置</li>\n<li><strong>总结部分文档</strong>放置<code>前端小册</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.2.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>图片进行优化，支持图片大图预览；并且当原图加载失败默认使用<code>github</code>图片地址；</li>\n<li>添加前端导航页面，不断更新一些常用有趣的网站；</li>\n<li>删除个人项目栏目，将其放置在前端导航</li>\n<li>添加网站统计</li>\n<li>将文档以及 <code>demos</code> 移置本网站，将取消对应的域名<code>docs.wangzevw.com 和 demos.wangzevw.com</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.1.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>目录重新调整，将前端知识内容移动到前端小册模块下；</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 3.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>网站由 <code>vuepress</code> 更新成 <code>vitepress</code></li>\n<li>摒弃花里胡哨的主题样式(太过沉重), 以原生原味的形式展示文档内容</li>\n<li>废弃部分旧文档,nest, 桌面端，移动端不再进行整理更新;</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.3.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li><code>nest, 移动端, 桌面端</code>是很少更新系列(个人兴趣), 移动到<code>其他</code>模块</li>\n<li>在<code>其他</code>模块中, 添加<code>three</code>的学习</li>\n<li>添加demos个人总结的<code>Demos</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.2.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>移除面试题, 将面试题整理在前端；否则内容会很多，导致文档的分类混乱；</li>\n<li>近期更新的频率和内容将以前端为主，移动端的<code>鸿蒙,FLutter</code>后端的<code>Nest</code>有时间会持续更新;</li>\n<li>关于<code>Flutter</code>的整理：将已整理的内容放置FlutterDemo网站中（如果文字显示不出来, 这是 Flutter 一个弊端, 需要等待或者挂梯子） 网站已废弃</li>\n<li>桌面端正在开发一个简单的<code>DEMO</code>，后续会将该<code>DEMO</code>作为开发案例进行整理</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.1.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>添加了部分<code>Demos</code>,可在网站中访问，可以在新标签页查看;</li>\n<li>删除<code>vdoing</code>主题自带的广告插件;</li>\n<li>更新浏览器图标;</li>\n<li>文档有很多同一天发布的, 那是将原来的网站内容进行迁移;</li>\n<li>添加前端部分面试题;</li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 2.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>脱离服务端，采用<code>GitHub</code>和<code>Gitee</code>进行托管；</li>\n<li>优化网站性能，使用<code>CDN</code>进行加速；</li>\n<li>网站采用<code>md</code>语言进行编写；</li>\n<li>具现化分类模块；</li>\n<li>网站内容更新：线下积累的知识，对生活的感悟…</li>\n<li>添加个人的一些项目，涉及到前后端移动端等等；添加搜集的一些网站：图片转换网站，文档处理网站等等</li>\n<li>网站迁移，底层<code>hexo</code>修改为<code>vuepress</code></li>\n</ol>\n</div>\n      </div><div class='timeline-item'>\n        <div class='timeline-item-title'>\n          <div class='item-circle'><p>Version 1.0.0 更新内容</p>\n</div>\n        </div>\n        <div class='timeline-item-content'><ol>\n<li>网站脱离单一文档流的特性，采用多样化管理；</li>\n<li>采用<a href=\"https://hexo.io/zh-cn/index.html\"><code>Hexo</code></a>静态搭建，使用<a href=\"https://github.com/jerryc127/hexo-theme-butterfly.git\"><code>Butterfly-github</code></a>, <a href=\"https://gitee.com/immyw/hexo-theme-butterfly\"><code>Butterfly-gitee</code></a>主题搭配使用；</li>\n<li>主题配置化，配置动画，加载，多样化设置；</li>\n<li>分类管理文档，如：生活，分类，标签等等；</li>\n<li>优化文档形式，更加凸显博客主题，主体内容以左右布局，更加凸显博客格式；</li>\n<li>添加复制内容是附加原创版权声明，并且每个页面下方标注版权；</li>\n<li>底部添加备案表示；</li>\n</ol>\n</div>\n      </div></div>\n\n\n<h2 id=\"主题内容\"><a href=\"#主题内容\" class=\"headerlink\" title=\"主题内容\"></a>主题内容</h2><p>本网站的主题内容将会以职场，生活方向靠近，涉及<code>前端技术</code>, <code>App（Flutter, uni-app）</code>，<code>服务器与后端技术</code>, <code>生活日记</code> 等等；</p>\n<p><del>由于网站内容脱离动态数据，采用<code>mardown</code>格式编写，老版本网站的文档将会在近期内加快迁移；近期工作比较忙，预计<code>一周至半月</code>；</del></p>\n<p><code>旧版本博客数据已经迁移至新版本中，后期文章的更新会在新版本中进行更新与发布！！！博文会不定时进行更新发布，没有固定时间，可能一个月不发布，也有可能5天发布三篇；具体看本人的时间！</code><br>:</p>\n"},{"title":"项目","abbrlink":"a2c247c4","date":"2024-10-08T01:05:01.000Z","_content":"\n# 个人项目\n\n> 本人空余时间闲暇，开发一些小工具以及项目;\n\n## 还在使用的项目\n\n### sim-admin <Badge type=\"danger\" text=\"最新项目\" />\n\n> 这是一个用于快速入手上门的`vue`后台管理系统, 该应用用到最新的技术`vue3, ts, rsbuild`等；该项目还使用了**辅助函数 functional-helpers-lib 工具**\n\n- [github](https://github.com/wangxiaoze-view/sim-admin)\n- [网站预览](https://wangxiaoze-view.github.io/sim-admin/)\n\n### 辅助函数 functional-helpers-lib\n\n> 就是一个用于常规的`utils, hooks`的函数辅助插件\n\n- [github](https://github.com/wangxiaoze-view/functional-helpers-lib)\n\n### log-reporting <Badge type=\"danger\" text=\"推荐\" />\n\n这款工具呢顾名思义就是日志上报，就是搜集客户端的一些告警报错日志到服务端，从而在服务端进行数据分析征集成客户端可视化数据面板；\n\n目前该工具分为俩个版本：\n\n1. [log-reporting](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n   > 该版本为低版本，支支持部分功能，目前仅支持日志上报，视屏录制，但是不支持 `pv与曝光统计`\n   - [Github](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n   - [npm](https://www.npmjs.com/package/log-reporting)\n   - [文档说明](/project/02_日志上报插件/v1)\n2. [@log-reporting/core](https://github.com/wangxiaoze-view/log-repeorting)\n   > 该版本为全新版本，与 `log-reporting` 完全不同， 映射以及使用完全不一样; 在原有的基础上完全支持 `pv与曝光统计`； 在原有的基础上对资源以及性能监控进行优化; 当然有内置的 `logger, types`插件；\n   - [Github](https://github.com/wangxiaoze-view/log-repeorting/tree/main)\n   - [npm](https://www.npmjs.com/package/@log-reporting/core)\n   - [文档说明](/project/02_日志上报插件/v2)\n\n### demos\n\n> 资源放在 github，可能首次访问会慢一点\n\n- [地址](https://wangxiaoze-view.github.io/web-demos/#button)\n\n### 桌面端开发工具 dev-tools\n\n> 使用 rust + vue 搭建的一款桌面端的开发工具； 目前不开源，等版本稳定之后在开源；\n\n- [mac0.0.1 版本](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg)\n- [windows0.0.1 版本](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe)\n- [文档](/project/04_桌面端开发工具/01_项目介绍)\n\n## 不再进行维护的项目\n\n### wxzUtils\n\n> 个人开发的一款超简单的工具库\n\n- [Github](https://github.com/wangxiaoze-view/utilstools)\n\n### 项目模板 <Badge type=\"warning\" text=\"不再进行开发更新/已废弃⚠️\" />\n\n> 为了避免模板项目重复开发, 统一使用模板项目， 当然包含多个设备\n\n- [文档说明](/project/03_一键代码拉取项目模板/如何使用)\n\n### HarmonyOs-App\n\n> 这是一款鸿蒙 App, 当然不会涉及到业务逻辑，仅仅是布局而已；\n\n- [Github](https://github.com/wangxiaoze-view/HarmonyOs-App)\n","source":"_posts/我的项目/index.md","raw":"---\ntitle: 项目\nabbrlink: a2c247c4\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n\n# 个人项目\n\n> 本人空余时间闲暇，开发一些小工具以及项目;\n\n## 还在使用的项目\n\n### sim-admin <Badge type=\"danger\" text=\"最新项目\" />\n\n> 这是一个用于快速入手上门的`vue`后台管理系统, 该应用用到最新的技术`vue3, ts, rsbuild`等；该项目还使用了**辅助函数 functional-helpers-lib 工具**\n\n- [github](https://github.com/wangxiaoze-view/sim-admin)\n- [网站预览](https://wangxiaoze-view.github.io/sim-admin/)\n\n### 辅助函数 functional-helpers-lib\n\n> 就是一个用于常规的`utils, hooks`的函数辅助插件\n\n- [github](https://github.com/wangxiaoze-view/functional-helpers-lib)\n\n### log-reporting <Badge type=\"danger\" text=\"推荐\" />\n\n这款工具呢顾名思义就是日志上报，就是搜集客户端的一些告警报错日志到服务端，从而在服务端进行数据分析征集成客户端可视化数据面板；\n\n目前该工具分为俩个版本：\n\n1. [log-reporting](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n   > 该版本为低版本，支支持部分功能，目前仅支持日志上报，视屏录制，但是不支持 `pv与曝光统计`\n   - [Github](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n   - [npm](https://www.npmjs.com/package/log-reporting)\n   - [文档说明](/project/02_日志上报插件/v1)\n2. [@log-reporting/core](https://github.com/wangxiaoze-view/log-repeorting)\n   > 该版本为全新版本，与 `log-reporting` 完全不同， 映射以及使用完全不一样; 在原有的基础上完全支持 `pv与曝光统计`； 在原有的基础上对资源以及性能监控进行优化; 当然有内置的 `logger, types`插件；\n   - [Github](https://github.com/wangxiaoze-view/log-repeorting/tree/main)\n   - [npm](https://www.npmjs.com/package/@log-reporting/core)\n   - [文档说明](/project/02_日志上报插件/v2)\n\n### demos\n\n> 资源放在 github，可能首次访问会慢一点\n\n- [地址](https://wangxiaoze-view.github.io/web-demos/#button)\n\n### 桌面端开发工具 dev-tools\n\n> 使用 rust + vue 搭建的一款桌面端的开发工具； 目前不开源，等版本稳定之后在开源；\n\n- [mac0.0.1 版本](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg)\n- [windows0.0.1 版本](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe)\n- [文档](/project/04_桌面端开发工具/01_项目介绍)\n\n## 不再进行维护的项目\n\n### wxzUtils\n\n> 个人开发的一款超简单的工具库\n\n- [Github](https://github.com/wangxiaoze-view/utilstools)\n\n### 项目模板 <Badge type=\"warning\" text=\"不再进行开发更新/已废弃⚠️\" />\n\n> 为了避免模板项目重复开发, 统一使用模板项目， 当然包含多个设备\n\n- [文档说明](/project/03_一键代码拉取项目模板/如何使用)\n\n### HarmonyOs-App\n\n> 这是一款鸿蒙 App, 当然不会涉及到业务逻辑，仅仅是布局而已；\n\n- [Github](https://github.com/wangxiaoze-view/HarmonyOs-App)\n","slug":"我的项目/index","published":1,"updated":"2025-03-13T07:00:19.506Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ip0006fg9m5nnvdcz7","content":"<h1 id=\"个人项目\"><a href=\"#个人项目\" class=\"headerlink\" title=\"个人项目\"></a>个人项目</h1><blockquote>\n<p>本人空余时间闲暇，开发一些小工具以及项目;</p>\n</blockquote>\n<h2 id=\"还在使用的项目\"><a href=\"#还在使用的项目\" class=\"headerlink\" title=\"还在使用的项目\"></a>还在使用的项目</h2><h3 id=\"sim-admin\"><a href=\"#sim-admin\" class=\"headerlink\" title=\"sim-admin \"></a>sim-admin <Badge type=\"danger\" text=\"最新项目\" /></h3><blockquote>\n<p>这是一个用于快速入手上门的<code>vue</code>后台管理系统, 该应用用到最新的技术<code>vue3, ts, rsbuild</code>等；该项目还使用了<strong>辅助函数 functional-helpers-lib 工具</strong></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/sim-admin\">github</a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/sim-admin/\">网站预览</a></li>\n</ul>\n<h3 id=\"辅助函数-functional-helpers-lib\"><a href=\"#辅助函数-functional-helpers-lib\" class=\"headerlink\" title=\"辅助函数 functional-helpers-lib\"></a>辅助函数 functional-helpers-lib</h3><blockquote>\n<p>就是一个用于常规的<code>utils, hooks</code>的函数辅助插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\">github</a></li>\n</ul>\n<h3 id=\"log-reporting\"><a href=\"#log-reporting\" class=\"headerlink\" title=\"log-reporting \"></a>log-reporting <Badge type=\"danger\" text=\"推荐\" /></h3><p>这款工具呢顾名思义就是日志上报，就是搜集客户端的一些告警报错日志到服务端，从而在服务端进行数据分析征集成客户端可视化数据面板；</p>\n<p>目前该工具分为俩个版本：</p>\n<ol>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">log-reporting</a><blockquote>\n<p>该版本为低版本，支支持部分功能，目前仅支持日志上报，视屏录制，但是不支持 <code>pv与曝光统计</code></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">Github</a></li>\n<li><a href=\"https://www.npmjs.com/package/log-reporting\">npm</a></li>\n<li><a href=\"/project/02_%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E6%8F%92%E4%BB%B6/v1\">文档说明</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting\">@log-reporting&#x2F;core</a><blockquote>\n<p>该版本为全新版本，与 <code>log-reporting</code> 完全不同， 映射以及使用完全不一样; 在原有的基础上完全支持 <code>pv与曝光统计</code>； 在原有的基础上对资源以及性能监控进行优化; 当然有内置的 <code>logger, types</code>插件；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/main\">Github</a></li>\n<li><a href=\"https://www.npmjs.com/package/@log-reporting/core\">npm</a></li>\n<li><a href=\"/project/02_%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E6%8F%92%E4%BB%B6/v2\">文档说明</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"demos\"><a href=\"#demos\" class=\"headerlink\" title=\"demos\"></a>demos</h3><blockquote>\n<p>资源放在 github，可能首次访问会慢一点</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangxiaoze-view.github.io/web-demos/#button\">地址</a></li>\n</ul>\n<h3 id=\"桌面端开发工具-dev-tools\"><a href=\"#桌面端开发工具-dev-tools\" class=\"headerlink\" title=\"桌面端开发工具 dev-tools\"></a>桌面端开发工具 dev-tools</h3><blockquote>\n<p>使用 rust + vue 搭建的一款桌面端的开发工具； 目前不开源，等版本稳定之后在开源；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg\">mac0.0.1 版本</a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe\">windows0.0.1 版本</a></li>\n<li><a href=\"/project/04_%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/01_%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\">文档</a></li>\n</ul>\n<h2 id=\"不再进行维护的项目\"><a href=\"#不再进行维护的项目\" class=\"headerlink\" title=\"不再进行维护的项目\"></a>不再进行维护的项目</h2><h3 id=\"wxzUtils\"><a href=\"#wxzUtils\" class=\"headerlink\" title=\"wxzUtils\"></a>wxzUtils</h3><blockquote>\n<p>个人开发的一款超简单的工具库</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/utilstools\">Github</a></li>\n</ul>\n<h3 id=\"项目模板\"><a href=\"#项目模板\" class=\"headerlink\" title=\"项目模板 \"></a>项目模板 <Badge type=\"warning\" text=\"不再进行开发更新/已废弃⚠️\" /></h3><blockquote>\n<p>为了避免模板项目重复开发, 统一使用模板项目， 当然包含多个设备</p>\n</blockquote>\n<ul>\n<li><a href=\"/project/03_%E4%B8%80%E9%94%AE%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">文档说明</a></li>\n</ul>\n<h3 id=\"HarmonyOs-App\"><a href=\"#HarmonyOs-App\" class=\"headerlink\" title=\"HarmonyOs-App\"></a>HarmonyOs-App</h3><blockquote>\n<p>这是一款鸿蒙 App, 当然不会涉及到业务逻辑，仅仅是布局而已；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/HarmonyOs-App\">Github</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"个人项目\"><a href=\"#个人项目\" class=\"headerlink\" title=\"个人项目\"></a>个人项目</h1><blockquote>\n<p>本人空余时间闲暇，开发一些小工具以及项目;</p>\n</blockquote>\n<h2 id=\"还在使用的项目\"><a href=\"#还在使用的项目\" class=\"headerlink\" title=\"还在使用的项目\"></a>还在使用的项目</h2><h3 id=\"sim-admin\"><a href=\"#sim-admin\" class=\"headerlink\" title=\"sim-admin \"></a>sim-admin <Badge type=\"danger\" text=\"最新项目\" /></h3><blockquote>\n<p>这是一个用于快速入手上门的<code>vue</code>后台管理系统, 该应用用到最新的技术<code>vue3, ts, rsbuild</code>等；该项目还使用了<strong>辅助函数 functional-helpers-lib 工具</strong></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/sim-admin\">github</a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/sim-admin/\">网站预览</a></li>\n</ul>\n<h3 id=\"辅助函数-functional-helpers-lib\"><a href=\"#辅助函数-functional-helpers-lib\" class=\"headerlink\" title=\"辅助函数 functional-helpers-lib\"></a>辅助函数 functional-helpers-lib</h3><blockquote>\n<p>就是一个用于常规的<code>utils, hooks</code>的函数辅助插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\">github</a></li>\n</ul>\n<h3 id=\"log-reporting\"><a href=\"#log-reporting\" class=\"headerlink\" title=\"log-reporting \"></a>log-reporting <Badge type=\"danger\" text=\"推荐\" /></h3><p>这款工具呢顾名思义就是日志上报，就是搜集客户端的一些告警报错日志到服务端，从而在服务端进行数据分析征集成客户端可视化数据面板；</p>\n<p>目前该工具分为俩个版本：</p>\n<ol>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">log-reporting</a><blockquote>\n<p>该版本为低版本，支支持部分功能，目前仅支持日志上报，视屏录制，但是不支持 <code>pv与曝光统计</code></p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">Github</a></li>\n<li><a href=\"https://www.npmjs.com/package/log-reporting\">npm</a></li>\n<li><a href=\"/project/02_%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E6%8F%92%E4%BB%B6/v1\">文档说明</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting\">@log-reporting&#x2F;core</a><blockquote>\n<p>该版本为全新版本，与 <code>log-reporting</code> 完全不同， 映射以及使用完全不一样; 在原有的基础上完全支持 <code>pv与曝光统计</code>； 在原有的基础上对资源以及性能监控进行优化; 当然有内置的 <code>logger, types</code>插件；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/main\">Github</a></li>\n<li><a href=\"https://www.npmjs.com/package/@log-reporting/core\">npm</a></li>\n<li><a href=\"/project/02_%E6%97%A5%E5%BF%97%E4%B8%8A%E6%8A%A5%E6%8F%92%E4%BB%B6/v2\">文档说明</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"demos\"><a href=\"#demos\" class=\"headerlink\" title=\"demos\"></a>demos</h3><blockquote>\n<p>资源放在 github，可能首次访问会慢一点</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangxiaoze-view.github.io/web-demos/#button\">地址</a></li>\n</ul>\n<h3 id=\"桌面端开发工具-dev-tools\"><a href=\"#桌面端开发工具-dev-tools\" class=\"headerlink\" title=\"桌面端开发工具 dev-tools\"></a>桌面端开发工具 dev-tools</h3><blockquote>\n<p>使用 rust + vue 搭建的一款桌面端的开发工具； 目前不开源，等版本稳定之后在开源；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg\">mac0.0.1 版本</a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe\">windows0.0.1 版本</a></li>\n<li><a href=\"/project/04_%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/01_%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\">文档</a></li>\n</ul>\n<h2 id=\"不再进行维护的项目\"><a href=\"#不再进行维护的项目\" class=\"headerlink\" title=\"不再进行维护的项目\"></a>不再进行维护的项目</h2><h3 id=\"wxzUtils\"><a href=\"#wxzUtils\" class=\"headerlink\" title=\"wxzUtils\"></a>wxzUtils</h3><blockquote>\n<p>个人开发的一款超简单的工具库</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/utilstools\">Github</a></li>\n</ul>\n<h3 id=\"项目模板\"><a href=\"#项目模板\" class=\"headerlink\" title=\"项目模板 \"></a>项目模板 <Badge type=\"warning\" text=\"不再进行开发更新/已废弃⚠️\" /></h3><blockquote>\n<p>为了避免模板项目重复开发, 统一使用模板项目， 当然包含多个设备</p>\n</blockquote>\n<ul>\n<li><a href=\"/project/03_%E4%B8%80%E9%94%AE%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">文档说明</a></li>\n</ul>\n<h3 id=\"HarmonyOs-App\"><a href=\"#HarmonyOs-App\" class=\"headerlink\" title=\"HarmonyOs-App\"></a>HarmonyOs-App</h3><blockquote>\n<p>这是一款鸿蒙 App, 当然不会涉及到业务逻辑，仅仅是布局而已；</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/wangxiaoze-view/HarmonyOs-App\">Github</a></li>\n</ul>\n"},{"title":"个人总结-2019.06 - 2022-07","abbrlink":"103594ea","date":"2022-07-08T01:05:01.000Z","_content":"# 2019.06 - 2022-07\n\n::: info\n不积跬步，无以至千里；不积小流，无以成江海。\n:::\n\n## 近 3 年年度回顾\n\n整体回顾本年度大概做了哪些事。\n\n![loading](https://wangxiaoze-view.github.io/picx-images-hosting/images/yuque_mind.jpeg)\n\n## 关键词：快速成长\n\n给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。\n\n- 技能沉淀与转型\n- 个人缺点总结与修改\n- 工作暴露的问题总结（个人， 团队）\n\n### 1. 学习成长\n\n#### 2019.06-2020-08\n\n- 职场入门，技术入门，懵懵懂懂\n- vue 基础语法，会用， 不熟练， 不会使用 vuex\n- 太菜，逻辑思维，团队沟通困难， 喜欢打游戏\n- 做出改变，过程，时间\n- 积累经验，线下花费时间学习，了解前沿技术\n- 动手实践，有了一定的经验\n\n#### 2020-09-2022-07\n\n- 有了一定的开发经验，上手较快，但暴露出的问题较多\n- 不封装， 不考虑兼容，高复用，高性能， 导致多处源码一致\n- 技能扩展， Node, Jq+js,\n- 性格内向，沟通有一定困难\n- 做出改变，时间沉淀\n- 多方位考虑功能， 复用性，高性能，优化，开发，迭代\n- 常用封装，工具库，小工具，页面以及组件\n- Node, 线下学习 Mongoose, 配置服务器 域名 dns 解析，\n- 工程化， 配置化加入项目\n- 动手搭建网站， 从 0 至 1，\n- 代码规范 提交规范 commit 规范\n\n### 2. 体验突破\n\n- 个人性格改变，突破，任何事情冷静对待\n- 技能不仅局限于前端，多维度了解其他前言技术\n- h5 以及混合式开发\n- 跨端技术， apicloud, uniapp, reactnative, flutter 的了解\n- 微服务的了解\n- 项目中运用新写法， 新技术 新知识点；\n- 项目问题的总结以及解决方案；\n- 工具文档；\n\n### 3. 休闲娱乐\n\n- 戒掉游戏，不在游戏上浪费时间\n- 日常锻炼以及静心，练字 耐力\n- 体验不同的兴趣爱好\n\n### 4. 工作事业\n\n- 技术沉淀成长，多方位思考问题\n- 重复性问题的总结以及解决方案\n","source":"_posts/总结/个人总结/2019.06 - 2022-07.md","raw":"---\ntitle: 个人总结-2019.06 - 2022-07\nabbrlink: 103594ea\ndate: 2022-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 个人总结\n---\n# 2019.06 - 2022-07\n\n::: info\n不积跬步，无以至千里；不积小流，无以成江海。\n:::\n\n## 近 3 年年度回顾\n\n整体回顾本年度大概做了哪些事。\n\n![loading](https://wangxiaoze-view.github.io/picx-images-hosting/images/yuque_mind.jpeg)\n\n## 关键词：快速成长\n\n给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。\n\n- 技能沉淀与转型\n- 个人缺点总结与修改\n- 工作暴露的问题总结（个人， 团队）\n\n### 1. 学习成长\n\n#### 2019.06-2020-08\n\n- 职场入门，技术入门，懵懵懂懂\n- vue 基础语法，会用， 不熟练， 不会使用 vuex\n- 太菜，逻辑思维，团队沟通困难， 喜欢打游戏\n- 做出改变，过程，时间\n- 积累经验，线下花费时间学习，了解前沿技术\n- 动手实践，有了一定的经验\n\n#### 2020-09-2022-07\n\n- 有了一定的开发经验，上手较快，但暴露出的问题较多\n- 不封装， 不考虑兼容，高复用，高性能， 导致多处源码一致\n- 技能扩展， Node, Jq+js,\n- 性格内向，沟通有一定困难\n- 做出改变，时间沉淀\n- 多方位考虑功能， 复用性，高性能，优化，开发，迭代\n- 常用封装，工具库，小工具，页面以及组件\n- Node, 线下学习 Mongoose, 配置服务器 域名 dns 解析，\n- 工程化， 配置化加入项目\n- 动手搭建网站， 从 0 至 1，\n- 代码规范 提交规范 commit 规范\n\n### 2. 体验突破\n\n- 个人性格改变，突破，任何事情冷静对待\n- 技能不仅局限于前端，多维度了解其他前言技术\n- h5 以及混合式开发\n- 跨端技术， apicloud, uniapp, reactnative, flutter 的了解\n- 微服务的了解\n- 项目中运用新写法， 新技术 新知识点；\n- 项目问题的总结以及解决方案；\n- 工具文档；\n\n### 3. 休闲娱乐\n\n- 戒掉游戏，不在游戏上浪费时间\n- 日常锻炼以及静心，练字 耐力\n- 体验不同的兴趣爱好\n\n### 4. 工作事业\n\n- 技术沉淀成长，多方位思考问题\n- 重复性问题的总结以及解决方案\n","slug":"总结/个人总结/2019.06 - 2022-07","published":1,"updated":"2025-03-13T10:16:16.905Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ip0007fg9md3g0bdtn","content":"<h1 id=\"2019-06-2022-07\"><a href=\"#2019-06-2022-07\" class=\"headerlink\" title=\"2019.06 - 2022-07\"></a>2019.06 - 2022-07</h1><p>::: info<br>不积跬步，无以至千里；不积小流，无以成江海。<br>:::</p>\n<h2 id=\"近-3-年年度回顾\"><a href=\"#近-3-年年度回顾\" class=\"headerlink\" title=\"近 3 年年度回顾\"></a>近 3 年年度回顾</h2><p>整体回顾本年度大概做了哪些事。</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/yuque_mind.jpeg\" alt=\"loading\"></p>\n<h2 id=\"关键词：快速成长\"><a href=\"#关键词：快速成长\" class=\"headerlink\" title=\"关键词：快速成长\"></a>关键词：快速成长</h2><p>给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。</p>\n<ul>\n<li>技能沉淀与转型</li>\n<li>个人缺点总结与修改</li>\n<li>工作暴露的问题总结（个人， 团队）</li>\n</ul>\n<h3 id=\"1-学习成长\"><a href=\"#1-学习成长\" class=\"headerlink\" title=\"1. 学习成长\"></a>1. 学习成长</h3><h4 id=\"2019-06-2020-08\"><a href=\"#2019-06-2020-08\" class=\"headerlink\" title=\"2019.06-2020-08\"></a>2019.06-2020-08</h4><ul>\n<li>职场入门，技术入门，懵懵懂懂</li>\n<li>vue 基础语法，会用， 不熟练， 不会使用 vuex</li>\n<li>太菜，逻辑思维，团队沟通困难， 喜欢打游戏</li>\n<li>做出改变，过程，时间</li>\n<li>积累经验，线下花费时间学习，了解前沿技术</li>\n<li>动手实践，有了一定的经验</li>\n</ul>\n<h4 id=\"2020-09-2022-07\"><a href=\"#2020-09-2022-07\" class=\"headerlink\" title=\"2020-09-2022-07\"></a>2020-09-2022-07</h4><ul>\n<li>有了一定的开发经验，上手较快，但暴露出的问题较多</li>\n<li>不封装， 不考虑兼容，高复用，高性能， 导致多处源码一致</li>\n<li>技能扩展， Node, Jq+js,</li>\n<li>性格内向，沟通有一定困难</li>\n<li>做出改变，时间沉淀</li>\n<li>多方位考虑功能， 复用性，高性能，优化，开发，迭代</li>\n<li>常用封装，工具库，小工具，页面以及组件</li>\n<li>Node, 线下学习 Mongoose, 配置服务器 域名 dns 解析，</li>\n<li>工程化， 配置化加入项目</li>\n<li>动手搭建网站， 从 0 至 1，</li>\n<li>代码规范 提交规范 commit 规范</li>\n</ul>\n<h3 id=\"2-体验突破\"><a href=\"#2-体验突破\" class=\"headerlink\" title=\"2. 体验突破\"></a>2. 体验突破</h3><ul>\n<li>个人性格改变，突破，任何事情冷静对待</li>\n<li>技能不仅局限于前端，多维度了解其他前言技术</li>\n<li>h5 以及混合式开发</li>\n<li>跨端技术， apicloud, uniapp, reactnative, flutter 的了解</li>\n<li>微服务的了解</li>\n<li>项目中运用新写法， 新技术 新知识点；</li>\n<li>项目问题的总结以及解决方案；</li>\n<li>工具文档；</li>\n</ul>\n<h3 id=\"3-休闲娱乐\"><a href=\"#3-休闲娱乐\" class=\"headerlink\" title=\"3. 休闲娱乐\"></a>3. 休闲娱乐</h3><ul>\n<li>戒掉游戏，不在游戏上浪费时间</li>\n<li>日常锻炼以及静心，练字 耐力</li>\n<li>体验不同的兴趣爱好</li>\n</ul>\n<h3 id=\"4-工作事业\"><a href=\"#4-工作事业\" class=\"headerlink\" title=\"4. 工作事业\"></a>4. 工作事业</h3><ul>\n<li>技术沉淀成长，多方位思考问题</li>\n<li>重复性问题的总结以及解决方案</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"2019-06-2022-07\"><a href=\"#2019-06-2022-07\" class=\"headerlink\" title=\"2019.06 - 2022-07\"></a>2019.06 - 2022-07</h1><p>::: info<br>不积跬步，无以至千里；不积小流，无以成江海。<br>:::</p>\n<h2 id=\"近-3-年年度回顾\"><a href=\"#近-3-年年度回顾\" class=\"headerlink\" title=\"近 3 年年度回顾\"></a>近 3 年年度回顾</h2><p>整体回顾本年度大概做了哪些事。</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/yuque_mind.jpeg\" alt=\"loading\"></p>\n<h2 id=\"关键词：快速成长\"><a href=\"#关键词：快速成长\" class=\"headerlink\" title=\"关键词：快速成长\"></a>关键词：快速成长</h2><p>给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。</p>\n<ul>\n<li>技能沉淀与转型</li>\n<li>个人缺点总结与修改</li>\n<li>工作暴露的问题总结（个人， 团队）</li>\n</ul>\n<h3 id=\"1-学习成长\"><a href=\"#1-学习成长\" class=\"headerlink\" title=\"1. 学习成长\"></a>1. 学习成长</h3><h4 id=\"2019-06-2020-08\"><a href=\"#2019-06-2020-08\" class=\"headerlink\" title=\"2019.06-2020-08\"></a>2019.06-2020-08</h4><ul>\n<li>职场入门，技术入门，懵懵懂懂</li>\n<li>vue 基础语法，会用， 不熟练， 不会使用 vuex</li>\n<li>太菜，逻辑思维，团队沟通困难， 喜欢打游戏</li>\n<li>做出改变，过程，时间</li>\n<li>积累经验，线下花费时间学习，了解前沿技术</li>\n<li>动手实践，有了一定的经验</li>\n</ul>\n<h4 id=\"2020-09-2022-07\"><a href=\"#2020-09-2022-07\" class=\"headerlink\" title=\"2020-09-2022-07\"></a>2020-09-2022-07</h4><ul>\n<li>有了一定的开发经验，上手较快，但暴露出的问题较多</li>\n<li>不封装， 不考虑兼容，高复用，高性能， 导致多处源码一致</li>\n<li>技能扩展， Node, Jq+js,</li>\n<li>性格内向，沟通有一定困难</li>\n<li>做出改变，时间沉淀</li>\n<li>多方位考虑功能， 复用性，高性能，优化，开发，迭代</li>\n<li>常用封装，工具库，小工具，页面以及组件</li>\n<li>Node, 线下学习 Mongoose, 配置服务器 域名 dns 解析，</li>\n<li>工程化， 配置化加入项目</li>\n<li>动手搭建网站， 从 0 至 1，</li>\n<li>代码规范 提交规范 commit 规范</li>\n</ul>\n<h3 id=\"2-体验突破\"><a href=\"#2-体验突破\" class=\"headerlink\" title=\"2. 体验突破\"></a>2. 体验突破</h3><ul>\n<li>个人性格改变，突破，任何事情冷静对待</li>\n<li>技能不仅局限于前端，多维度了解其他前言技术</li>\n<li>h5 以及混合式开发</li>\n<li>跨端技术， apicloud, uniapp, reactnative, flutter 的了解</li>\n<li>微服务的了解</li>\n<li>项目中运用新写法， 新技术 新知识点；</li>\n<li>项目问题的总结以及解决方案；</li>\n<li>工具文档；</li>\n</ul>\n<h3 id=\"3-休闲娱乐\"><a href=\"#3-休闲娱乐\" class=\"headerlink\" title=\"3. 休闲娱乐\"></a>3. 休闲娱乐</h3><ul>\n<li>戒掉游戏，不在游戏上浪费时间</li>\n<li>日常锻炼以及静心，练字 耐力</li>\n<li>体验不同的兴趣爱好</li>\n</ul>\n<h3 id=\"4-工作事业\"><a href=\"#4-工作事业\" class=\"headerlink\" title=\"4. 工作事业\"></a>4. 工作事业</h3><ul>\n<li>技术沉淀成长，多方位思考问题</li>\n<li>重复性问题的总结以及解决方案</li>\n</ul>\n"},{"title":"个人总结-2022-08 - 2024-07","abbrlink":"84a7dd6a","date":"2024-07-08T01:05:01.000Z","_content":"# 2022-08 - 2024-07\n\n自身能力有所提升之后，在短暂时间内开始对自身进行沉淀，不论是对工作中还是生活或者是对个人，我相信在俩年时间内通过自身的沉淀能够得到一些成长。\n\n当然俩年时间我也会尝试着接触不同的事物，接触不同的兴趣爱好；如果没有那就太枯燥乏味了；\n\n## 能力沉淀\n\n想再短时间内提升自己，那就离不开能力沉淀，就好比说你去自己动手打造项目，去开源，社区，线下等去接触，这样渐渐的会提升自身的视野；也会对自身的那些不足进行填补；\n\n但我觉得能力沉淀，并不是指什么；\n\n能力沉淀，是指对自身能力进行提升，提升到一定程度，可以进行一些事情；\n\n就拿个例子来讲吧：\n\n小 A 在工作中通过自己的努力完成的一个项目，但是在开发过程中会发现一系列问题；而这个时候，小 A 就只能通过自己对问题的分析，以及自己对问题的解决，来对项目进行升级；\n\n如果在开发过程中不断沉淀自己，那么就会不知觉的察觉一些问题，同时在开发中尽量避免掉，当然这是对个人来讲；\n\n当然这些工作中你会觉的疲惫，因为在你的开发经验中已经有了类似的案例，就会套用之前的经验，不知不觉自己的能力并没有提升；\n\n而我觉得，能力的沉淀是对之前方案的一种确定，当你确定该方案还有完善的情况下，你才能对这个方案进行升级；也许沉淀就是不断累积的一个过程；\n\n## 技能提升\n\n俩年时间对公司，个人的情况熟悉掌握，但自己有不想局限于单一的前端领域，所以需要提升一些技能；\n\n俩年时间自己也动手开发到上线过一些项目，后端服务也从`express`换成了`nest`，数据库还是想用`mongodb`；\n\n其中，自己也使用`jenkins`做过 CI/CD 进行项目部署；但是感觉还是不够，需要继续提升；\n\n于是，将一部分时间花在代码底层的封装上，比如：写自己的一套`utils 和 后台管理系统`\n\n因为`utils`和`后台管理系统`都是自己写的，所以可以自己控制，可以自己写，可以自己改，可以自己删；\n\n但是在工作中天天是做这个的，对它来讲也是比较熟悉的；\n\n当然自己也开发过一些开源的项目，`日志上报`包含了一些数据统计，性能监控等；\n\n自己动手也实践过`rsut + vue`桌面端的开发等等；\n\n在不同领取的接触，发现自己在不同问题的解决方案还是思考中也就不一样了；\n\n相比前三年，自己的能力主要是提升在不同的领域接触以及一些方案的接触；业务开发都是一致的，因为是内部系统并没有那些花里胡哨的功能，所以业务还是比较简单的；\n\n后期还是看个人时间去总结开发一些工具等等；\n\n## 兴趣爱好\n\n俩年时间，除了工作之外，还是有自己感兴趣的领域；\n\n1. 拍摄：自己也通过短视频接触过一段时间的拍摄，就是拿着手机进行拍照；同时也会在抖音上进行一些拍摄分享记录自身的生活\n2. 音乐：自己喜欢听一些音乐，但是最近比较喜欢听一些电子音乐；\n3. 阅读：最近在看一些技术书籍，同时也在看一些技术文章，同时也在看一些技术书籍；\n4. 喝茶：这是最近喜欢的，之前总是想喝点什么，我不喜欢和饮料，喝不了酒，就买了一些果酒，但是喝下来的感觉还可以但是不能经常喝，价格还不便宜；于是我就想到了喝茶；之前喝的是正山小种的红茶，现在喝的是乌龙茶；\n","source":"_posts/总结/个人总结/2022-08 - 2024-07.md","raw":"---\ntitle: 个人总结-2022-08 - 2024-07\nabbrlink: 84a7dd6a\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 个人总结\n---\n# 2022-08 - 2024-07\n\n自身能力有所提升之后，在短暂时间内开始对自身进行沉淀，不论是对工作中还是生活或者是对个人，我相信在俩年时间内通过自身的沉淀能够得到一些成长。\n\n当然俩年时间我也会尝试着接触不同的事物，接触不同的兴趣爱好；如果没有那就太枯燥乏味了；\n\n## 能力沉淀\n\n想再短时间内提升自己，那就离不开能力沉淀，就好比说你去自己动手打造项目，去开源，社区，线下等去接触，这样渐渐的会提升自身的视野；也会对自身的那些不足进行填补；\n\n但我觉得能力沉淀，并不是指什么；\n\n能力沉淀，是指对自身能力进行提升，提升到一定程度，可以进行一些事情；\n\n就拿个例子来讲吧：\n\n小 A 在工作中通过自己的努力完成的一个项目，但是在开发过程中会发现一系列问题；而这个时候，小 A 就只能通过自己对问题的分析，以及自己对问题的解决，来对项目进行升级；\n\n如果在开发过程中不断沉淀自己，那么就会不知觉的察觉一些问题，同时在开发中尽量避免掉，当然这是对个人来讲；\n\n当然这些工作中你会觉的疲惫，因为在你的开发经验中已经有了类似的案例，就会套用之前的经验，不知不觉自己的能力并没有提升；\n\n而我觉得，能力的沉淀是对之前方案的一种确定，当你确定该方案还有完善的情况下，你才能对这个方案进行升级；也许沉淀就是不断累积的一个过程；\n\n## 技能提升\n\n俩年时间对公司，个人的情况熟悉掌握，但自己有不想局限于单一的前端领域，所以需要提升一些技能；\n\n俩年时间自己也动手开发到上线过一些项目，后端服务也从`express`换成了`nest`，数据库还是想用`mongodb`；\n\n其中，自己也使用`jenkins`做过 CI/CD 进行项目部署；但是感觉还是不够，需要继续提升；\n\n于是，将一部分时间花在代码底层的封装上，比如：写自己的一套`utils 和 后台管理系统`\n\n因为`utils`和`后台管理系统`都是自己写的，所以可以自己控制，可以自己写，可以自己改，可以自己删；\n\n但是在工作中天天是做这个的，对它来讲也是比较熟悉的；\n\n当然自己也开发过一些开源的项目，`日志上报`包含了一些数据统计，性能监控等；\n\n自己动手也实践过`rsut + vue`桌面端的开发等等；\n\n在不同领取的接触，发现自己在不同问题的解决方案还是思考中也就不一样了；\n\n相比前三年，自己的能力主要是提升在不同的领域接触以及一些方案的接触；业务开发都是一致的，因为是内部系统并没有那些花里胡哨的功能，所以业务还是比较简单的；\n\n后期还是看个人时间去总结开发一些工具等等；\n\n## 兴趣爱好\n\n俩年时间，除了工作之外，还是有自己感兴趣的领域；\n\n1. 拍摄：自己也通过短视频接触过一段时间的拍摄，就是拿着手机进行拍照；同时也会在抖音上进行一些拍摄分享记录自身的生活\n2. 音乐：自己喜欢听一些音乐，但是最近比较喜欢听一些电子音乐；\n3. 阅读：最近在看一些技术书籍，同时也在看一些技术文章，同时也在看一些技术书籍；\n4. 喝茶：这是最近喜欢的，之前总是想喝点什么，我不喜欢和饮料，喝不了酒，就买了一些果酒，但是喝下来的感觉还可以但是不能经常喝，价格还不便宜；于是我就想到了喝茶；之前喝的是正山小种的红茶，现在喝的是乌龙茶；\n","slug":"总结/个人总结/2022-08 - 2024-07","published":1,"updated":"2025-03-12T09:51:36.323Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iq0008fg9m6t5qedb7","content":"<h1 id=\"2022-08-2024-07\"><a href=\"#2022-08-2024-07\" class=\"headerlink\" title=\"2022-08 - 2024-07\"></a>2022-08 - 2024-07</h1><p>自身能力有所提升之后，在短暂时间内开始对自身进行沉淀，不论是对工作中还是生活或者是对个人，我相信在俩年时间内通过自身的沉淀能够得到一些成长。</p>\n<p>当然俩年时间我也会尝试着接触不同的事物，接触不同的兴趣爱好；如果没有那就太枯燥乏味了；</p>\n<h2 id=\"能力沉淀\"><a href=\"#能力沉淀\" class=\"headerlink\" title=\"能力沉淀\"></a>能力沉淀</h2><p>想再短时间内提升自己，那就离不开能力沉淀，就好比说你去自己动手打造项目，去开源，社区，线下等去接触，这样渐渐的会提升自身的视野；也会对自身的那些不足进行填补；</p>\n<p>但我觉得能力沉淀，并不是指什么；</p>\n<p>能力沉淀，是指对自身能力进行提升，提升到一定程度，可以进行一些事情；</p>\n<p>就拿个例子来讲吧：</p>\n<p>小 A 在工作中通过自己的努力完成的一个项目，但是在开发过程中会发现一系列问题；而这个时候，小 A 就只能通过自己对问题的分析，以及自己对问题的解决，来对项目进行升级；</p>\n<p>如果在开发过程中不断沉淀自己，那么就会不知觉的察觉一些问题，同时在开发中尽量避免掉，当然这是对个人来讲；</p>\n<p>当然这些工作中你会觉的疲惫，因为在你的开发经验中已经有了类似的案例，就会套用之前的经验，不知不觉自己的能力并没有提升；</p>\n<p>而我觉得，能力的沉淀是对之前方案的一种确定，当你确定该方案还有完善的情况下，你才能对这个方案进行升级；也许沉淀就是不断累积的一个过程；</p>\n<h2 id=\"技能提升\"><a href=\"#技能提升\" class=\"headerlink\" title=\"技能提升\"></a>技能提升</h2><p>俩年时间对公司，个人的情况熟悉掌握，但自己有不想局限于单一的前端领域，所以需要提升一些技能；</p>\n<p>俩年时间自己也动手开发到上线过一些项目，后端服务也从<code>express</code>换成了<code>nest</code>，数据库还是想用<code>mongodb</code>；</p>\n<p>其中，自己也使用<code>jenkins</code>做过 CI&#x2F;CD 进行项目部署；但是感觉还是不够，需要继续提升；</p>\n<p>于是，将一部分时间花在代码底层的封装上，比如：写自己的一套<code>utils 和 后台管理系统</code></p>\n<p>因为<code>utils</code>和<code>后台管理系统</code>都是自己写的，所以可以自己控制，可以自己写，可以自己改，可以自己删；</p>\n<p>但是在工作中天天是做这个的，对它来讲也是比较熟悉的；</p>\n<p>当然自己也开发过一些开源的项目，<code>日志上报</code>包含了一些数据统计，性能监控等；</p>\n<p>自己动手也实践过<code>rsut + vue</code>桌面端的开发等等；</p>\n<p>在不同领取的接触，发现自己在不同问题的解决方案还是思考中也就不一样了；</p>\n<p>相比前三年，自己的能力主要是提升在不同的领域接触以及一些方案的接触；业务开发都是一致的，因为是内部系统并没有那些花里胡哨的功能，所以业务还是比较简单的；</p>\n<p>后期还是看个人时间去总结开发一些工具等等；</p>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><p>俩年时间，除了工作之外，还是有自己感兴趣的领域；</p>\n<ol>\n<li>拍摄：自己也通过短视频接触过一段时间的拍摄，就是拿着手机进行拍照；同时也会在抖音上进行一些拍摄分享记录自身的生活</li>\n<li>音乐：自己喜欢听一些音乐，但是最近比较喜欢听一些电子音乐；</li>\n<li>阅读：最近在看一些技术书籍，同时也在看一些技术文章，同时也在看一些技术书籍；</li>\n<li>喝茶：这是最近喜欢的，之前总是想喝点什么，我不喜欢和饮料，喝不了酒，就买了一些果酒，但是喝下来的感觉还可以但是不能经常喝，价格还不便宜；于是我就想到了喝茶；之前喝的是正山小种的红茶，现在喝的是乌龙茶；</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"2022-08-2024-07\"><a href=\"#2022-08-2024-07\" class=\"headerlink\" title=\"2022-08 - 2024-07\"></a>2022-08 - 2024-07</h1><p>自身能力有所提升之后，在短暂时间内开始对自身进行沉淀，不论是对工作中还是生活或者是对个人，我相信在俩年时间内通过自身的沉淀能够得到一些成长。</p>\n<p>当然俩年时间我也会尝试着接触不同的事物，接触不同的兴趣爱好；如果没有那就太枯燥乏味了；</p>\n<h2 id=\"能力沉淀\"><a href=\"#能力沉淀\" class=\"headerlink\" title=\"能力沉淀\"></a>能力沉淀</h2><p>想再短时间内提升自己，那就离不开能力沉淀，就好比说你去自己动手打造项目，去开源，社区，线下等去接触，这样渐渐的会提升自身的视野；也会对自身的那些不足进行填补；</p>\n<p>但我觉得能力沉淀，并不是指什么；</p>\n<p>能力沉淀，是指对自身能力进行提升，提升到一定程度，可以进行一些事情；</p>\n<p>就拿个例子来讲吧：</p>\n<p>小 A 在工作中通过自己的努力完成的一个项目，但是在开发过程中会发现一系列问题；而这个时候，小 A 就只能通过自己对问题的分析，以及自己对问题的解决，来对项目进行升级；</p>\n<p>如果在开发过程中不断沉淀自己，那么就会不知觉的察觉一些问题，同时在开发中尽量避免掉，当然这是对个人来讲；</p>\n<p>当然这些工作中你会觉的疲惫，因为在你的开发经验中已经有了类似的案例，就会套用之前的经验，不知不觉自己的能力并没有提升；</p>\n<p>而我觉得，能力的沉淀是对之前方案的一种确定，当你确定该方案还有完善的情况下，你才能对这个方案进行升级；也许沉淀就是不断累积的一个过程；</p>\n<h2 id=\"技能提升\"><a href=\"#技能提升\" class=\"headerlink\" title=\"技能提升\"></a>技能提升</h2><p>俩年时间对公司，个人的情况熟悉掌握，但自己有不想局限于单一的前端领域，所以需要提升一些技能；</p>\n<p>俩年时间自己也动手开发到上线过一些项目，后端服务也从<code>express</code>换成了<code>nest</code>，数据库还是想用<code>mongodb</code>；</p>\n<p>其中，自己也使用<code>jenkins</code>做过 CI&#x2F;CD 进行项目部署；但是感觉还是不够，需要继续提升；</p>\n<p>于是，将一部分时间花在代码底层的封装上，比如：写自己的一套<code>utils 和 后台管理系统</code></p>\n<p>因为<code>utils</code>和<code>后台管理系统</code>都是自己写的，所以可以自己控制，可以自己写，可以自己改，可以自己删；</p>\n<p>但是在工作中天天是做这个的，对它来讲也是比较熟悉的；</p>\n<p>当然自己也开发过一些开源的项目，<code>日志上报</code>包含了一些数据统计，性能监控等；</p>\n<p>自己动手也实践过<code>rsut + vue</code>桌面端的开发等等；</p>\n<p>在不同领取的接触，发现自己在不同问题的解决方案还是思考中也就不一样了；</p>\n<p>相比前三年，自己的能力主要是提升在不同的领域接触以及一些方案的接触；业务开发都是一致的，因为是内部系统并没有那些花里胡哨的功能，所以业务还是比较简单的；</p>\n<p>后期还是看个人时间去总结开发一些工具等等；</p>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><p>俩年时间，除了工作之外，还是有自己感兴趣的领域；</p>\n<ol>\n<li>拍摄：自己也通过短视频接触过一段时间的拍摄，就是拿着手机进行拍照；同时也会在抖音上进行一些拍摄分享记录自身的生活</li>\n<li>音乐：自己喜欢听一些音乐，但是最近比较喜欢听一些电子音乐；</li>\n<li>阅读：最近在看一些技术书籍，同时也在看一些技术文章，同时也在看一些技术书籍；</li>\n<li>喝茶：这是最近喜欢的，之前总是想喝点什么，我不喜欢和饮料，喝不了酒，就买了一些果酒，但是喝下来的感觉还可以但是不能经常喝，价格还不便宜；于是我就想到了喝茶；之前喝的是正山小种的红茶，现在喝的是乌龙茶；</li>\n</ol>\n"},{"title":"技术调研-github-pacakges","abbrlink":"8a379d90","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n前端时间在开发个人项目过程中, 将一些工具包拆除去，以依赖的形式引入[`functional-helpers` ](https://github.com/wangxiaoze-view/functional-helpers-lib)\n\n这样就直接在项目中`package.json`中配置就好了；关于如何配置请看[`sim-admin-package.json`](https://github.com/wangxiaoze-view/sim-admin/blob/main/package.json#L37)\n\n但是个人觉得不是很合适，为什么这么说呢，就是开发一个工具库，然后打包，将构建的产物分发到另外一个开源的存储库中，这样不是很智能；所以不合适；\n\n然后今天是试了一下`github packages`，就是不需要上传到`npm`, 只需要上传到`github package`同样也可以使用；\n\n## 如何做？\n\n### 修改配置\n\n首先，你需要申请`token`， 如下图所示：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7p3nljb7yw.webp)\n\n申请成功之后不要刷新页面，因为刷新了页面`token`就没了，`token`的格式如`ghp_xxxxxxx`;\n\n还需要设置全局的`.npmrc`，\n\n```bash\n//npm.pkg.github.com/:_authToken=ghp_xxxxxxx\n```\n\n其次，需要修改项目配置`pacakge.json`：\n\n```json\n{\n\t\"name\": \"@wangxiaoze-view/functional-helpers\",\n\t\"publishConfig\": {\n\t\t\"registry\": \"https://npm.pkg.github.com\"\n\t}\n}\n```\n\n主要修改俩个地方,\n\n- **name:** 格式为 `@你的github用户名/你的项目名`, `\"private\": true`可以去掉\n- **publishConfig：** 发布的地址\n\n配置完成之后，使用发布命令`npm publish`即可，这样等待发布成功即可；因为全局配置了`//npm.pkg.github.com/:_authToken=ghp_xxxxxxx`, 所以就不需要登录了；\n\n### 进行安装\n\n方式一：\n\n```bash\n# 需要指定 registry\nnpm install @你的github用户名/你的项目名@版本号  --registry=https://npm.pkg.github.com\n\n# 例如， 当然这个包是不存在的\nnpm install @wangxiaoze-view/functional-helpers@1.0.0 --registry=https://npm.pkg.github.com\n```\n\n方式二：\n\n在项目跟目录单独设置`.npmrc`\n\n```bash\nregistry=https://npm.pkg.github.com\n```\n\n## 发现的问题？\n\n因为我的[`functional-helpers` ](https://github.com/wangxiaoze-view/functional-helpers-lib)中用到了其他的依赖，那么有些依赖在`github`中是没有的，那么`install `的时候就会显示`404`;\n\n我认为就是：如果你的工具有外部依赖，那么你就要查询一下`github`中有没有这个依赖，有过没有这个依赖，还是老老实实的发布到`npm`吧，如果没有，那么你可以发布`github`;\n\n## 参考资料\n\n- [使用 npm 注册表](https://docs.github.com/zh/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#publishing-a-package)\n- [发布与安装 Github Packages](https://blog.csdn.net/u010089686/article/details/110124664)\n","source":"_posts/总结/技术调研/github-pacakges.md","raw":"---\ntitle: 技术调研-github-pacakges\nabbrlink: 8a379d90\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n前端时间在开发个人项目过程中, 将一些工具包拆除去，以依赖的形式引入[`functional-helpers` ](https://github.com/wangxiaoze-view/functional-helpers-lib)\n\n这样就直接在项目中`package.json`中配置就好了；关于如何配置请看[`sim-admin-package.json`](https://github.com/wangxiaoze-view/sim-admin/blob/main/package.json#L37)\n\n但是个人觉得不是很合适，为什么这么说呢，就是开发一个工具库，然后打包，将构建的产物分发到另外一个开源的存储库中，这样不是很智能；所以不合适；\n\n然后今天是试了一下`github packages`，就是不需要上传到`npm`, 只需要上传到`github package`同样也可以使用；\n\n## 如何做？\n\n### 修改配置\n\n首先，你需要申请`token`， 如下图所示：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7p3nljb7yw.webp)\n\n申请成功之后不要刷新页面，因为刷新了页面`token`就没了，`token`的格式如`ghp_xxxxxxx`;\n\n还需要设置全局的`.npmrc`，\n\n```bash\n//npm.pkg.github.com/:_authToken=ghp_xxxxxxx\n```\n\n其次，需要修改项目配置`pacakge.json`：\n\n```json\n{\n\t\"name\": \"@wangxiaoze-view/functional-helpers\",\n\t\"publishConfig\": {\n\t\t\"registry\": \"https://npm.pkg.github.com\"\n\t}\n}\n```\n\n主要修改俩个地方,\n\n- **name:** 格式为 `@你的github用户名/你的项目名`, `\"private\": true`可以去掉\n- **publishConfig：** 发布的地址\n\n配置完成之后，使用发布命令`npm publish`即可，这样等待发布成功即可；因为全局配置了`//npm.pkg.github.com/:_authToken=ghp_xxxxxxx`, 所以就不需要登录了；\n\n### 进行安装\n\n方式一：\n\n```bash\n# 需要指定 registry\nnpm install @你的github用户名/你的项目名@版本号  --registry=https://npm.pkg.github.com\n\n# 例如， 当然这个包是不存在的\nnpm install @wangxiaoze-view/functional-helpers@1.0.0 --registry=https://npm.pkg.github.com\n```\n\n方式二：\n\n在项目跟目录单独设置`.npmrc`\n\n```bash\nregistry=https://npm.pkg.github.com\n```\n\n## 发现的问题？\n\n因为我的[`functional-helpers` ](https://github.com/wangxiaoze-view/functional-helpers-lib)中用到了其他的依赖，那么有些依赖在`github`中是没有的，那么`install `的时候就会显示`404`;\n\n我认为就是：如果你的工具有外部依赖，那么你就要查询一下`github`中有没有这个依赖，有过没有这个依赖，还是老老实实的发布到`npm`吧，如果没有，那么你可以发布`github`;\n\n## 参考资料\n\n- [使用 npm 注册表](https://docs.github.com/zh/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#publishing-a-package)\n- [发布与安装 Github Packages](https://blog.csdn.net/u010089686/article/details/110124664)\n","slug":"总结/技术调研/github-pacakges","published":1,"updated":"2025-03-13T10:16:17.134Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ir000cfg9mbl9cdeef","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间在开发个人项目过程中, 将一些工具包拆除去，以依赖的形式引入<a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\"><code>functional-helpers</code> </a></p>\n<p>这样就直接在项目中<code>package.json</code>中配置就好了；关于如何配置请看<a href=\"https://github.com/wangxiaoze-view/sim-admin/blob/main/package.json#L37\"><code>sim-admin-package.json</code></a></p>\n<p>但是个人觉得不是很合适，为什么这么说呢，就是开发一个工具库，然后打包，将构建的产物分发到另外一个开源的存储库中，这样不是很智能；所以不合适；</p>\n<p>然后今天是试了一下<code>github packages</code>，就是不需要上传到<code>npm</code>, 只需要上传到<code>github package</code>同样也可以使用；</p>\n<h2 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h2><h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><p>首先，你需要申请<code>token</code>， 如下图所示：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7p3nljb7yw.webp\" alt=\"x\"></p>\n<p>申请成功之后不要刷新页面，因为刷新了页面<code>token</code>就没了，<code>token</code>的格式如<code>ghp_xxxxxxx</code>;</p>\n<p>还需要设置全局的<code>.npmrc</code>，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//npm.pkg.github.com/:_authToken=ghp_xxxxxxx</span><br></pre></td></tr></table></figure>\n\n<p>其次，需要修改项目配置<code>pacakge.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@wangxiaoze-view/functional-helpers&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;publishConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;registry&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://npm.pkg.github.com&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>主要修改俩个地方,</p>\n<ul>\n<li><strong>name:</strong> 格式为 <code>@你的github用户名/你的项目名</code>, <code>&quot;private&quot;: true</code>可以去掉</li>\n<li><strong>publishConfig：</strong> 发布的地址</li>\n</ul>\n<p>配置完成之后，使用发布命令<code>npm publish</code>即可，这样等待发布成功即可；因为全局配置了<code>//npm.pkg.github.com/:_authToken=ghp_xxxxxxx</code>, 所以就不需要登录了；</p>\n<h3 id=\"进行安装\"><a href=\"#进行安装\" class=\"headerlink\" title=\"进行安装\"></a>进行安装</h3><p>方式一：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要指定 registry</span></span><br><span class=\"line\">npm install @你的github用户名/你的项目名@版本号  --registry=https://npm.pkg.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如， 当然这个包是不存在的</span></span><br><span class=\"line\">npm install @wangxiaoze-view/functional-helpers@1.0.0 --registry=https://npm.pkg.github.com</span><br></pre></td></tr></table></figure>\n\n<p>方式二：</p>\n<p>在项目跟目录单独设置<code>.npmrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=https://npm.pkg.github.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发现的问题？\"><a href=\"#发现的问题？\" class=\"headerlink\" title=\"发现的问题？\"></a>发现的问题？</h2><p>因为我的<a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\"><code>functional-helpers</code> </a>中用到了其他的依赖，那么有些依赖在<code>github</code>中是没有的，那么<code>install </code>的时候就会显示<code>404</code>;</p>\n<p>我认为就是：如果你的工具有外部依赖，那么你就要查询一下<code>github</code>中有没有这个依赖，有过没有这个依赖，还是老老实实的发布到<code>npm</code>吧，如果没有，那么你可以发布<code>github</code>;</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.github.com/zh/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#publishing-a-package\">使用 npm 注册表</a></li>\n<li><a href=\"https://blog.csdn.net/u010089686/article/details/110124664\">发布与安装 Github Packages</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间在开发个人项目过程中, 将一些工具包拆除去，以依赖的形式引入<a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\"><code>functional-helpers</code> </a></p>\n<p>这样就直接在项目中<code>package.json</code>中配置就好了；关于如何配置请看<a href=\"https://github.com/wangxiaoze-view/sim-admin/blob/main/package.json#L37\"><code>sim-admin-package.json</code></a></p>\n<p>但是个人觉得不是很合适，为什么这么说呢，就是开发一个工具库，然后打包，将构建的产物分发到另外一个开源的存储库中，这样不是很智能；所以不合适；</p>\n<p>然后今天是试了一下<code>github packages</code>，就是不需要上传到<code>npm</code>, 只需要上传到<code>github package</code>同样也可以使用；</p>\n<h2 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h2><h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><p>首先，你需要申请<code>token</code>， 如下图所示：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7p3nljb7yw.webp\" alt=\"x\"></p>\n<p>申请成功之后不要刷新页面，因为刷新了页面<code>token</code>就没了，<code>token</code>的格式如<code>ghp_xxxxxxx</code>;</p>\n<p>还需要设置全局的<code>.npmrc</code>，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//npm.pkg.github.com/:_authToken=ghp_xxxxxxx</span><br></pre></td></tr></table></figure>\n\n<p>其次，需要修改项目配置<code>pacakge.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@wangxiaoze-view/functional-helpers&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;publishConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;registry&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://npm.pkg.github.com&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>主要修改俩个地方,</p>\n<ul>\n<li><strong>name:</strong> 格式为 <code>@你的github用户名/你的项目名</code>, <code>&quot;private&quot;: true</code>可以去掉</li>\n<li><strong>publishConfig：</strong> 发布的地址</li>\n</ul>\n<p>配置完成之后，使用发布命令<code>npm publish</code>即可，这样等待发布成功即可；因为全局配置了<code>//npm.pkg.github.com/:_authToken=ghp_xxxxxxx</code>, 所以就不需要登录了；</p>\n<h3 id=\"进行安装\"><a href=\"#进行安装\" class=\"headerlink\" title=\"进行安装\"></a>进行安装</h3><p>方式一：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要指定 registry</span></span><br><span class=\"line\">npm install @你的github用户名/你的项目名@版本号  --registry=https://npm.pkg.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如， 当然这个包是不存在的</span></span><br><span class=\"line\">npm install @wangxiaoze-view/functional-helpers@1.0.0 --registry=https://npm.pkg.github.com</span><br></pre></td></tr></table></figure>\n\n<p>方式二：</p>\n<p>在项目跟目录单独设置<code>.npmrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry=https://npm.pkg.github.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发现的问题？\"><a href=\"#发现的问题？\" class=\"headerlink\" title=\"发现的问题？\"></a>发现的问题？</h2><p>因为我的<a href=\"https://github.com/wangxiaoze-view/functional-helpers-lib\"><code>functional-helpers</code> </a>中用到了其他的依赖，那么有些依赖在<code>github</code>中是没有的，那么<code>install </code>的时候就会显示<code>404</code>;</p>\n<p>我认为就是：如果你的工具有外部依赖，那么你就要查询一下<code>github</code>中有没有这个依赖，有过没有这个依赖，还是老老实实的发布到<code>npm</code>吧，如果没有，那么你可以发布<code>github</code>;</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.github.com/zh/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#publishing-a-package\">使用 npm 注册表</a></li>\n<li><a href=\"https://blog.csdn.net/u010089686/article/details/110124664\">发布与安装 Github Packages</a></li>\n</ul>\n"},{"title":"技术调研-nvm1.1.12版本的一个问题","abbrlink":"1840e493","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n最近没有时间更新网站，是在开发一个桌面端的应用工具；桌面端的工具使用 Node+vue 开发的，但是在使用 node+nvm 的时候会有下面的一种情况；\n\n因为`nvm`的版本在[github](https://github.com/coreybutler/nvm-windows)的版本为`1.1.12`也是最新版本的；但是在最新版本的使用的时候，会报错；\n\n```js\nconst { exec, spawn } = require(\"chaild_process\");\n\nconst process = exec(\"nvm ls\", { shell: \"cmd\" });\n\n// or\n\nspawn(\"nvm\", [\"ls\"], { shell: \"cmd\" });\n```\n\n这一段代码就是就是通过`node`操作`nvm`，但针对于`1.1.11`版本是可行的，但是`1.1.12`会提示`NVM for Windows should be run from a terminal such as CMD or PowerShell.`也就是只能通过终端打开；\n\n![图片](https://wangxiaoze-view.github.io/picx-images-hosting/images/nvm_20240425095509.png)\n\n然后在看了一下[源码](https://github.com/coreybutler/nvm-windows)，发现`nvm1.1.12`是`go`语言编写的；于是我在源码中找到了这样一段代码：\n\n```go\n// 入口文件\nfunc main() {\n args := os.Args\n detail := \"\"\n procarch := arch.Validate(env.arch)\n\n  // 这里判断了一下终端的条件\n if !isTerminal() {\n  alert(\"NVM for Windows should be run from a terminal such as CMD or PowerShell.\", \"Terminal Only\")\n  os.Exit(0)\n }\n\n // Capture any additional arguments\n if len(args) > 2 {\n  detail = args[2]\n }\n // .....\n}\n\n\nfunc isTerminal() bool {\n fileInfo, err := os.Stdout.Stat()\n if err != nil {\n  return false\n }\n return (fileInfo.Mode() & os.ModeCharDevice) != 0\n}\n```\n\n关于`isTerminal()`的解释大致是：\n\n1. 通过 os.Stdout.Stat()获取标准输出的信息。\n2. 如果获取信息时出现错误，则返回 false。\n3. 判断获取到的信息中是否包含 os.ModeCharDevice 模式，若包含则表示输出为字符设备，即终端设备，返回 true；否则返回 false。\n\n因为`node`直接操作`nvm`不是在终端唤起的，于是我就在`github`添加了一个[issues](https://github.com/coreybutler/nvm-windows/issues/1126)\n\n不久后官方就提出了解释：\n\n> This is due to a change that identifies the terminal. The change was added in 1.1.12 and has been nothing but a pain for everyone. It will be reverted in the next release, but it may be a little while before the next release (our code signing cert was locked when trying to automate the code signing process and I'm trying to get it unlocked).\n\n> Revert to 1.1.11 for the time being. The changes between 1.1.11 and 1.1.12 are primarily just debugging. Most people won't experience a difference between the two.\n\n大致意思就是:\n\n**这是由于标识终端的更改。更改是在 1.1.12 添加的，对每个人来说都是一个痛苦。它将在下一个版本中恢复，但可能需要一段时间才能下一个版本（我们的代码签名证书在尝试自动化代码签名过程时被锁定，我正在尝试解锁它）。暂时回到 1.1.11。1.1.11 和 1.1.12 之间的变化主要只是调试。大多数人不会体验到两者之间的区别。**\n\n官方说是要在下一个版本会将它修复，具体什么时候会修复只能等着了；\n\n目前来说想要通过`node`操作`nvm`只能将 `1.1.12`降版本，然后重新安装`nvm1.1.11`了；\n","source":"_posts/总结/技术调研/nvm1.1.12版本的一个问题.md","raw":"---\ntitle: 技术调研-nvm1.1.12版本的一个问题\nabbrlink: '1840e493'\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n最近没有时间更新网站，是在开发一个桌面端的应用工具；桌面端的工具使用 Node+vue 开发的，但是在使用 node+nvm 的时候会有下面的一种情况；\n\n因为`nvm`的版本在[github](https://github.com/coreybutler/nvm-windows)的版本为`1.1.12`也是最新版本的；但是在最新版本的使用的时候，会报错；\n\n```js\nconst { exec, spawn } = require(\"chaild_process\");\n\nconst process = exec(\"nvm ls\", { shell: \"cmd\" });\n\n// or\n\nspawn(\"nvm\", [\"ls\"], { shell: \"cmd\" });\n```\n\n这一段代码就是就是通过`node`操作`nvm`，但针对于`1.1.11`版本是可行的，但是`1.1.12`会提示`NVM for Windows should be run from a terminal such as CMD or PowerShell.`也就是只能通过终端打开；\n\n![图片](https://wangxiaoze-view.github.io/picx-images-hosting/images/nvm_20240425095509.png)\n\n然后在看了一下[源码](https://github.com/coreybutler/nvm-windows)，发现`nvm1.1.12`是`go`语言编写的；于是我在源码中找到了这样一段代码：\n\n```go\n// 入口文件\nfunc main() {\n args := os.Args\n detail := \"\"\n procarch := arch.Validate(env.arch)\n\n  // 这里判断了一下终端的条件\n if !isTerminal() {\n  alert(\"NVM for Windows should be run from a terminal such as CMD or PowerShell.\", \"Terminal Only\")\n  os.Exit(0)\n }\n\n // Capture any additional arguments\n if len(args) > 2 {\n  detail = args[2]\n }\n // .....\n}\n\n\nfunc isTerminal() bool {\n fileInfo, err := os.Stdout.Stat()\n if err != nil {\n  return false\n }\n return (fileInfo.Mode() & os.ModeCharDevice) != 0\n}\n```\n\n关于`isTerminal()`的解释大致是：\n\n1. 通过 os.Stdout.Stat()获取标准输出的信息。\n2. 如果获取信息时出现错误，则返回 false。\n3. 判断获取到的信息中是否包含 os.ModeCharDevice 模式，若包含则表示输出为字符设备，即终端设备，返回 true；否则返回 false。\n\n因为`node`直接操作`nvm`不是在终端唤起的，于是我就在`github`添加了一个[issues](https://github.com/coreybutler/nvm-windows/issues/1126)\n\n不久后官方就提出了解释：\n\n> This is due to a change that identifies the terminal. The change was added in 1.1.12 and has been nothing but a pain for everyone. It will be reverted in the next release, but it may be a little while before the next release (our code signing cert was locked when trying to automate the code signing process and I'm trying to get it unlocked).\n\n> Revert to 1.1.11 for the time being. The changes between 1.1.11 and 1.1.12 are primarily just debugging. Most people won't experience a difference between the two.\n\n大致意思就是:\n\n**这是由于标识终端的更改。更改是在 1.1.12 添加的，对每个人来说都是一个痛苦。它将在下一个版本中恢复，但可能需要一段时间才能下一个版本（我们的代码签名证书在尝试自动化代码签名过程时被锁定，我正在尝试解锁它）。暂时回到 1.1.11。1.1.11 和 1.1.12 之间的变化主要只是调试。大多数人不会体验到两者之间的区别。**\n\n官方说是要在下一个版本会将它修复，具体什么时候会修复只能等着了；\n\n目前来说想要通过`node`操作`nvm`只能将 `1.1.12`降版本，然后重新安装`nvm1.1.11`了；\n","slug":"总结/技术调研/nvm1.1.12版本的一个问题","published":1,"updated":"2025-03-13T10:16:17.039Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ir000dfg9m6ejv74ui","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近没有时间更新网站，是在开发一个桌面端的应用工具；桌面端的工具使用 Node+vue 开发的，但是在使用 node+nvm 的时候会有下面的一种情况；</p>\n<p>因为<code>nvm</code>的版本在<a href=\"https://github.com/coreybutler/nvm-windows\">github</a>的版本为<code>1.1.12</code>也是最新版本的；但是在最新版本的使用的时候，会报错；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec, spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;chaild_process&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> process = <span class=\"title function_\">exec</span>(<span class=\"string\">&quot;nvm ls&quot;</span>, &#123; <span class=\"attr\">shell</span>: <span class=\"string\">&quot;cmd&quot;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;nvm&quot;</span>, [<span class=\"string\">&quot;ls&quot;</span>], &#123; <span class=\"attr\">shell</span>: <span class=\"string\">&quot;cmd&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这一段代码就是就是通过<code>node</code>操作<code>nvm</code>，但针对于<code>1.1.11</code>版本是可行的，但是<code>1.1.12</code>会提示<code>NVM for Windows should be run from a terminal such as CMD or PowerShell.</code>也就是只能通过终端打开；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/nvm_20240425095509.png\" alt=\"图片\"></p>\n<p>然后在看了一下<a href=\"https://github.com/coreybutler/nvm-windows\">源码</a>，发现<code>nvm1.1.12</code>是<code>go</code>语言编写的；于是我在源码中找到了这样一段代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入口文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> args := os.Args</span><br><span class=\"line\"> detail := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> procarch := arch.Validate(env.arch)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里判断了一下终端的条件</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> !isTerminal() &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;NVM for Windows should be run from a terminal such as CMD or PowerShell.&quot;</span>, <span class=\"string\">&quot;Terminal Only&quot;</span>)</span><br><span class=\"line\">  os.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Capture any additional arguments</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  detail = args[<span class=\"number\">2</span>]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// .....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isTerminal</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"> fileInfo, err := os.Stdout.Stat()</span><br><span class=\"line\"> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (fileInfo.Mode() &amp; os.ModeCharDevice) != <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于<code>isTerminal()</code>的解释大致是：</p>\n<ol>\n<li>通过 os.Stdout.Stat()获取标准输出的信息。</li>\n<li>如果获取信息时出现错误，则返回 false。</li>\n<li>判断获取到的信息中是否包含 os.ModeCharDevice 模式，若包含则表示输出为字符设备，即终端设备，返回 true；否则返回 false。</li>\n</ol>\n<p>因为<code>node</code>直接操作<code>nvm</code>不是在终端唤起的，于是我就在<code>github</code>添加了一个<a href=\"https://github.com/coreybutler/nvm-windows/issues/1126\">issues</a></p>\n<p>不久后官方就提出了解释：</p>\n<blockquote>\n<p>This is due to a change that identifies the terminal. The change was added in 1.1.12 and has been nothing but a pain for everyone. It will be reverted in the next release, but it may be a little while before the next release (our code signing cert was locked when trying to automate the code signing process and I’m trying to get it unlocked).</p>\n</blockquote>\n<blockquote>\n<p>Revert to 1.1.11 for the time being. The changes between 1.1.11 and 1.1.12 are primarily just debugging. Most people won’t experience a difference between the two.</p>\n</blockquote>\n<p>大致意思就是:</p>\n<p><strong>这是由于标识终端的更改。更改是在 1.1.12 添加的，对每个人来说都是一个痛苦。它将在下一个版本中恢复，但可能需要一段时间才能下一个版本（我们的代码签名证书在尝试自动化代码签名过程时被锁定，我正在尝试解锁它）。暂时回到 1.1.11。1.1.11 和 1.1.12 之间的变化主要只是调试。大多数人不会体验到两者之间的区别。</strong></p>\n<p>官方说是要在下一个版本会将它修复，具体什么时候会修复只能等着了；</p>\n<p>目前来说想要通过<code>node</code>操作<code>nvm</code>只能将 <code>1.1.12</code>降版本，然后重新安装<code>nvm1.1.11</code>了；</p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近没有时间更新网站，是在开发一个桌面端的应用工具；桌面端的工具使用 Node+vue 开发的，但是在使用 node+nvm 的时候会有下面的一种情况；</p>\n<p>因为<code>nvm</code>的版本在<a href=\"https://github.com/coreybutler/nvm-windows\">github</a>的版本为<code>1.1.12</code>也是最新版本的；但是在最新版本的使用的时候，会报错；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; exec, spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;chaild_process&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> process = <span class=\"title function_\">exec</span>(<span class=\"string\">&quot;nvm ls&quot;</span>, &#123; <span class=\"attr\">shell</span>: <span class=\"string\">&quot;cmd&quot;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;nvm&quot;</span>, [<span class=\"string\">&quot;ls&quot;</span>], &#123; <span class=\"attr\">shell</span>: <span class=\"string\">&quot;cmd&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这一段代码就是就是通过<code>node</code>操作<code>nvm</code>，但针对于<code>1.1.11</code>版本是可行的，但是<code>1.1.12</code>会提示<code>NVM for Windows should be run from a terminal such as CMD or PowerShell.</code>也就是只能通过终端打开；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/nvm_20240425095509.png\" alt=\"图片\"></p>\n<p>然后在看了一下<a href=\"https://github.com/coreybutler/nvm-windows\">源码</a>，发现<code>nvm1.1.12</code>是<code>go</code>语言编写的；于是我在源码中找到了这样一段代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入口文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> args := os.Args</span><br><span class=\"line\"> detail := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> procarch := arch.Validate(env.arch)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里判断了一下终端的条件</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> !isTerminal() &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;NVM for Windows should be run from a terminal such as CMD or PowerShell.&quot;</span>, <span class=\"string\">&quot;Terminal Only&quot;</span>)</span><br><span class=\"line\">  os.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Capture any additional arguments</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  detail = args[<span class=\"number\">2</span>]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// .....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isTerminal</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\"> fileInfo, err := os.Stdout.Stat()</span><br><span class=\"line\"> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> (fileInfo.Mode() &amp; os.ModeCharDevice) != <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于<code>isTerminal()</code>的解释大致是：</p>\n<ol>\n<li>通过 os.Stdout.Stat()获取标准输出的信息。</li>\n<li>如果获取信息时出现错误，则返回 false。</li>\n<li>判断获取到的信息中是否包含 os.ModeCharDevice 模式，若包含则表示输出为字符设备，即终端设备，返回 true；否则返回 false。</li>\n</ol>\n<p>因为<code>node</code>直接操作<code>nvm</code>不是在终端唤起的，于是我就在<code>github</code>添加了一个<a href=\"https://github.com/coreybutler/nvm-windows/issues/1126\">issues</a></p>\n<p>不久后官方就提出了解释：</p>\n<blockquote>\n<p>This is due to a change that identifies the terminal. The change was added in 1.1.12 and has been nothing but a pain for everyone. It will be reverted in the next release, but it may be a little while before the next release (our code signing cert was locked when trying to automate the code signing process and I’m trying to get it unlocked).</p>\n</blockquote>\n<blockquote>\n<p>Revert to 1.1.11 for the time being. The changes between 1.1.11 and 1.1.12 are primarily just debugging. Most people won’t experience a difference between the two.</p>\n</blockquote>\n<p>大致意思就是:</p>\n<p><strong>这是由于标识终端的更改。更改是在 1.1.12 添加的，对每个人来说都是一个痛苦。它将在下一个版本中恢复，但可能需要一段时间才能下一个版本（我们的代码签名证书在尝试自动化代码签名过程时被锁定，我正在尝试解锁它）。暂时回到 1.1.11。1.1.11 和 1.1.12 之间的变化主要只是调试。大多数人不会体验到两者之间的区别。</strong></p>\n<p>官方说是要在下一个版本会将它修复，具体什么时候会修复只能等着了；</p>\n<p>目前来说想要通过<code>node</code>操作<code>nvm</code>只能将 <code>1.1.12</code>降版本，然后重新安装<code>nvm1.1.11</code>了；</p>\n"},{"title":"技术调研-nvm 替换为 fnm","abbrlink":"1e795a94","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n昨天在逛[node 官网](https://nodejs.org/en)的时候，发现下载页面多了一`fnm`的包管理器；\n\n于是，我开始研究一下。 发现它与 `nvm` 相似，但是它同时支持 `node` 的 `arm` 平台。也可以说是跨端的。不过它是`rust`开发的，性能得到进一步提升\n\n## 官网介绍\n\n1. 🌎 跨平台支持（macOS、Windows、Linux）\n2. ✨ 单文件，轻松安装，即时启动\n3. 🚀 以速度为中心\n4. 📂 适用于.node-version 和.nvmrc 文件\n\n**🚀 快速、简单的 Node.js 版本管理器，采用 Rust 构建**\n\n## 使用\n\n### macOS/Linux\n\n对于 bash、zsh 和 fishshell，有一个[自动安装脚本](https://github.com/Schniz/fnm/blob/master/.ci/install.sh)。\n\n首先确保 curl 和 unzip 已安装在您的操作系统上。然后执行：\n\n```sh\ncurl -fsSL https://fnm.vercel.app/install | bash\n```\n\n不过我在用`macos`安装的时候老是拉去不下来，也不清楚是什么问题；我在想既然通过命令自动安装不行，那么就通过 **Homebrew** 手动安装吧；\n\n- [Homebrew 官网](https://brew.sh/)\n- [github](https://github.com/Homebrew/brew)\n\n安装成功之后 `-v` 查看版本号。如果有版本那就安装成功了；\n\n```sh\nbrew install fnm\n```\n\n执行 `install`, 同样`fnm -v`查看是否安装成功；\n\n安装成功之后需要手动设置一下环境配置, 具体的可看[shell-setup 配置](https://github.com/Schniz/fnm?tab=readme-ov-file#shell-setup)\n\n```sh\neval \"$(fnm env --use-on-cd)\"\n```\n\n### windows\n\n`fnm`默认的安装位置在`c盘`，由于习惯问题，我将`fnm`安装在`D盘`；\n\n```sh\nwinget install Schniz.fnm --location D:\\fnm\n```\n\n同时将`fnm`添加到环境变量中；\n\n在用户变量中新建一条：\n\n```sh\n变量名为：FNM_DIR\n变量值为：D:\\fnm\n```\n\n这个变量是后面安装的`node`用到的目录，一些缓存值, 所有的` node`版本以及当前使用的`node`版本都在这个文件夹中；\n\n在`cmd或者powershell`中执行\n\n```sh\nfnm env --use-on-cd | Out-String | Invoke-Expression\n```\n\n同样的方式查看是否安装成功； `fnm`的大部分命令和`nvm`是一样的，例如：`fnm ls, fnm install, fnm use`等；\n\n<font color=\"#ff0000\">需要注意的是：想要设置全局的 node 版本，需要使用 `fnm default 16.14.0`，在不同项目不同 node 版本使用`fnm use `给不同的项目设置不同的 node 版本</font>\n","source":"_posts/总结/技术调研/nvm替换为fnm.md","raw":"---\ntitle: 技术调研-nvm 替换为 fnm\nabbrlink: 1e795a94\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n昨天在逛[node 官网](https://nodejs.org/en)的时候，发现下载页面多了一`fnm`的包管理器；\n\n于是，我开始研究一下。 发现它与 `nvm` 相似，但是它同时支持 `node` 的 `arm` 平台。也可以说是跨端的。不过它是`rust`开发的，性能得到进一步提升\n\n## 官网介绍\n\n1. 🌎 跨平台支持（macOS、Windows、Linux）\n2. ✨ 单文件，轻松安装，即时启动\n3. 🚀 以速度为中心\n4. 📂 适用于.node-version 和.nvmrc 文件\n\n**🚀 快速、简单的 Node.js 版本管理器，采用 Rust 构建**\n\n## 使用\n\n### macOS/Linux\n\n对于 bash、zsh 和 fishshell，有一个[自动安装脚本](https://github.com/Schniz/fnm/blob/master/.ci/install.sh)。\n\n首先确保 curl 和 unzip 已安装在您的操作系统上。然后执行：\n\n```sh\ncurl -fsSL https://fnm.vercel.app/install | bash\n```\n\n不过我在用`macos`安装的时候老是拉去不下来，也不清楚是什么问题；我在想既然通过命令自动安装不行，那么就通过 **Homebrew** 手动安装吧；\n\n- [Homebrew 官网](https://brew.sh/)\n- [github](https://github.com/Homebrew/brew)\n\n安装成功之后 `-v` 查看版本号。如果有版本那就安装成功了；\n\n```sh\nbrew install fnm\n```\n\n执行 `install`, 同样`fnm -v`查看是否安装成功；\n\n安装成功之后需要手动设置一下环境配置, 具体的可看[shell-setup 配置](https://github.com/Schniz/fnm?tab=readme-ov-file#shell-setup)\n\n```sh\neval \"$(fnm env --use-on-cd)\"\n```\n\n### windows\n\n`fnm`默认的安装位置在`c盘`，由于习惯问题，我将`fnm`安装在`D盘`；\n\n```sh\nwinget install Schniz.fnm --location D:\\fnm\n```\n\n同时将`fnm`添加到环境变量中；\n\n在用户变量中新建一条：\n\n```sh\n变量名为：FNM_DIR\n变量值为：D:\\fnm\n```\n\n这个变量是后面安装的`node`用到的目录，一些缓存值, 所有的` node`版本以及当前使用的`node`版本都在这个文件夹中；\n\n在`cmd或者powershell`中执行\n\n```sh\nfnm env --use-on-cd | Out-String | Invoke-Expression\n```\n\n同样的方式查看是否安装成功； `fnm`的大部分命令和`nvm`是一样的，例如：`fnm ls, fnm install, fnm use`等；\n\n<font color=\"#ff0000\">需要注意的是：想要设置全局的 node 版本，需要使用 `fnm default 16.14.0`，在不同项目不同 node 版本使用`fnm use `给不同的项目设置不同的 node 版本</font>\n","slug":"总结/技术调研/nvm替换为fnm","published":1,"updated":"2025-03-12T09:52:50.225Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ir000hfg9mfym17mtc","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>昨天在逛<a href=\"https://nodejs.org/en\">node 官网</a>的时候，发现下载页面多了一<code>fnm</code>的包管理器；</p>\n<p>于是，我开始研究一下。 发现它与 <code>nvm</code> 相似，但是它同时支持 <code>node</code> 的 <code>arm</code> 平台。也可以说是跨端的。不过它是<code>rust</code>开发的，性能得到进一步提升</p>\n<h2 id=\"官网介绍\"><a href=\"#官网介绍\" class=\"headerlink\" title=\"官网介绍\"></a>官网介绍</h2><ol>\n<li>🌎 跨平台支持（macOS、Windows、Linux）</li>\n<li>✨ 单文件，轻松安装，即时启动</li>\n<li>🚀 以速度为中心</li>\n<li>📂 适用于.node-version 和.nvmrc 文件</li>\n</ol>\n<p><strong>🚀 快速、简单的 Node.js 版本管理器，采用 Rust 构建</strong></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"macOS-Linux\"><a href=\"#macOS-Linux\" class=\"headerlink\" title=\"macOS&#x2F;Linux\"></a>macOS&#x2F;Linux</h3><p>对于 bash、zsh 和 fishshell，有一个<a href=\"https://github.com/Schniz/fnm/blob/master/.ci/install.sh\">自动安装脚本</a>。</p>\n<p>首先确保 curl 和 unzip 已安装在您的操作系统上。然后执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://fnm.vercel.app/install | bash</span><br></pre></td></tr></table></figure>\n\n<p>不过我在用<code>macos</code>安装的时候老是拉去不下来，也不清楚是什么问题；我在想既然通过命令自动安装不行，那么就通过 <strong>Homebrew</strong> 手动安装吧；</p>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew 官网</a></li>\n<li><a href=\"https://github.com/Homebrew/brew\">github</a></li>\n</ul>\n<p>安装成功之后 <code>-v</code> 查看版本号。如果有版本那就安装成功了；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install fnm</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>install</code>, 同样<code>fnm -v</code>查看是否安装成功；</p>\n<p>安装成功之后需要手动设置一下环境配置, 具体的可看<a href=\"https://github.com/Schniz/fnm?tab=readme-ov-file#shell-setup\">shell-setup 配置</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(fnm env --use-on-cd)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p><code>fnm</code>默认的安装位置在<code>c盘</code>，由于习惯问题，我将<code>fnm</code>安装在<code>D盘</code>；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winget install Schniz.fnm --location D:\\fnm</span><br></pre></td></tr></table></figure>\n\n<p>同时将<code>fnm</code>添加到环境变量中；</p>\n<p>在用户变量中新建一条：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名为：FNM_DIR</span><br><span class=\"line\">变量值为：D:\\fnm</span><br></pre></td></tr></table></figure>\n\n<p>这个变量是后面安装的<code>node</code>用到的目录，一些缓存值, 所有的<code> node</code>版本以及当前使用的<code>node</code>版本都在这个文件夹中；</p>\n<p>在<code>cmd或者powershell</code>中执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnm <span class=\"built_in\">env</span> --use-on-cd | Out-String | Invoke-Expression</span><br></pre></td></tr></table></figure>\n\n<p>同样的方式查看是否安装成功； <code>fnm</code>的大部分命令和<code>nvm</code>是一样的，例如：<code>fnm ls, fnm install, fnm use</code>等；</p>\n<p><font color=\"#ff0000\">需要注意的是：想要设置全局的 node 版本，需要使用 <code>fnm default 16.14.0</code>，在不同项目不同 node 版本使用<code>fnm use </code>给不同的项目设置不同的 node 版本</font></p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>昨天在逛<a href=\"https://nodejs.org/en\">node 官网</a>的时候，发现下载页面多了一<code>fnm</code>的包管理器；</p>\n<p>于是，我开始研究一下。 发现它与 <code>nvm</code> 相似，但是它同时支持 <code>node</code> 的 <code>arm</code> 平台。也可以说是跨端的。不过它是<code>rust</code>开发的，性能得到进一步提升</p>\n<h2 id=\"官网介绍\"><a href=\"#官网介绍\" class=\"headerlink\" title=\"官网介绍\"></a>官网介绍</h2><ol>\n<li>🌎 跨平台支持（macOS、Windows、Linux）</li>\n<li>✨ 单文件，轻松安装，即时启动</li>\n<li>🚀 以速度为中心</li>\n<li>📂 适用于.node-version 和.nvmrc 文件</li>\n</ol>\n<p><strong>🚀 快速、简单的 Node.js 版本管理器，采用 Rust 构建</strong></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"macOS-Linux\"><a href=\"#macOS-Linux\" class=\"headerlink\" title=\"macOS&#x2F;Linux\"></a>macOS&#x2F;Linux</h3><p>对于 bash、zsh 和 fishshell，有一个<a href=\"https://github.com/Schniz/fnm/blob/master/.ci/install.sh\">自动安装脚本</a>。</p>\n<p>首先确保 curl 和 unzip 已安装在您的操作系统上。然后执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://fnm.vercel.app/install | bash</span><br></pre></td></tr></table></figure>\n\n<p>不过我在用<code>macos</code>安装的时候老是拉去不下来，也不清楚是什么问题；我在想既然通过命令自动安装不行，那么就通过 <strong>Homebrew</strong> 手动安装吧；</p>\n<ul>\n<li><a href=\"https://brew.sh/\">Homebrew 官网</a></li>\n<li><a href=\"https://github.com/Homebrew/brew\">github</a></li>\n</ul>\n<p>安装成功之后 <code>-v</code> 查看版本号。如果有版本那就安装成功了；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install fnm</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>install</code>, 同样<code>fnm -v</code>查看是否安装成功；</p>\n<p>安装成功之后需要手动设置一下环境配置, 具体的可看<a href=\"https://github.com/Schniz/fnm?tab=readme-ov-file#shell-setup\">shell-setup 配置</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(fnm env --use-on-cd)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p><code>fnm</code>默认的安装位置在<code>c盘</code>，由于习惯问题，我将<code>fnm</code>安装在<code>D盘</code>；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winget install Schniz.fnm --location D:\\fnm</span><br></pre></td></tr></table></figure>\n\n<p>同时将<code>fnm</code>添加到环境变量中；</p>\n<p>在用户变量中新建一条：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名为：FNM_DIR</span><br><span class=\"line\">变量值为：D:\\fnm</span><br></pre></td></tr></table></figure>\n\n<p>这个变量是后面安装的<code>node</code>用到的目录，一些缓存值, 所有的<code> node</code>版本以及当前使用的<code>node</code>版本都在这个文件夹中；</p>\n<p>在<code>cmd或者powershell</code>中执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fnm <span class=\"built_in\">env</span> --use-on-cd | Out-String | Invoke-Expression</span><br></pre></td></tr></table></figure>\n\n<p>同样的方式查看是否安装成功； <code>fnm</code>的大部分命令和<code>nvm</code>是一样的，例如：<code>fnm ls, fnm install, fnm use</code>等；</p>\n<p><font color=\"#ff0000\">需要注意的是：想要设置全局的 node 版本，需要使用 <code>fnm default 16.14.0</code>，在不同项目不同 node 版本使用<code>fnm use </code>给不同的项目设置不同的 node 版本</font></p>\n"},{"title":"技术调研-rust-env没有继承问题","abbrlink":"38e3cf79","date":"2024-07-08T01:05:01.000Z","_content":"\n# 介绍\n\n近期在开发`rust + vite`(tauri)项目的时候，发现了一个问题；就是沙箱隔离模式的环境变量继承问题；\n\n在`rust`本地开发中，可以通过`std::env::var(\"PATH\")`或者全局变量`$PATH`获取环境变量的值，当然您也可以通过`std::env::vars()`获取所有的全局变量；\n\n当然在开发环境中是可以获取到的，但是在`build`之后，`rust`编译器会自动将`PATH`环境变量设置为`/usr/bin`，所以无法获取到全局变量；\n\n所以当您运行`环境变量`的某个命令时，是不会执行的；\n\n因为在您的应用程序中`%PATH`中根本获取不到对应的变量；\n\n## 案例\n\n我在本地电脑安装了`fnm`，在`dev`之后是可以获取到`where fnm`命令的，如下代码：\n\n```rust\nfn is_installed(program: &str) -> bool {\n  let mut cmd = Command::new(if cfg!(target_os = \"windows\") {\n      \"cmd\"\n  } else {\n      \"bash\"\n  });\n  let arg = if cfg!(target_os = \"windows\") {\n      format!(\"where {}\", program)\n  } else {\n      format!(\"which {}\", program)\n  };\n  cmd.arg(\"-c\").arg(arg);\n\n  #[cfg(target_os = \"windows\")]\n  {\n      cmd.creation_flags(0x08000000);\n  }\n  let output = cmd.output().expect(\"Failed to execute command\");\n  let stdout = GBK.decode(&output.stdout);\n\n  let result: bool = output.status.success() && !output.stdout.is_empty();\n\n  info!(\n      \"{} 是否已经安装 {}, 安装结果为: {}\",\n      program, result, stdout.0\n  );\n  result\n}\n// result 的结果就是你电脑安装的 路径， 当然如果有路径 那返回布尔值\n```\n\n当您执行之后，那么您就能获取到对应的值，当然您同时也可以在`终端`中执行`which fnm`命令来获取到对应的路径。\n\n只要您打包之后，就会返回空；那么它永远获取不到您电脑安装过的环境；\n\n我试了好几种方案都是不行的， <font color=\"#ff0000\">下面四种方案都是不可行的</font>：\n\n1. 通过`which`命令获取到对应的路径；\n2. 通过`fnm`命令获取版本号；\n3. 通过获取环境变量；\n4. 安装`shell`插件，再去获取；\n\n## 解决方案\n\n在`google`上搜了好多资料，方案都是不可行的；于是我尝试着去`github`上找一找；\n\n结果运气不错，还真的找到了一个解决方案；[**“构建后，shell 命令失败”**](https://github.com/tauri-apps/tauri/issues/8400)\n\n里面有句话大概解释为什么在`build`之后获取不到环境变量了：\n\n**“I think that's because on macOS/Linux the PATH environment variable is not inherited by default from your .bashrc and similar shell files,can you try using this crate https://github.com/tauri-apps/fix-path-env-rs and see if it fixes the issue?”**\n\n大概意思就是：**我认为这是因为在 macOS/Linux 上，PATH 环境变量默认不会从您的.bashrc 和类似的 shell 文件中继承**\n\n当然人家已经整理出了[解决方案](https://github.com/tauri-apps/fix-path-env-rs);\n\n按照对应的步骤进行操作，那么`build`之后就可以获取到对应的环境变量了；\n","source":"_posts/总结/技术调研/rust-env没有继承问题.md","raw":"---\ntitle: 技术调研-rust-env没有继承问题\nabbrlink: 38e3cf79\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 介绍\n\n近期在开发`rust + vite`(tauri)项目的时候，发现了一个问题；就是沙箱隔离模式的环境变量继承问题；\n\n在`rust`本地开发中，可以通过`std::env::var(\"PATH\")`或者全局变量`$PATH`获取环境变量的值，当然您也可以通过`std::env::vars()`获取所有的全局变量；\n\n当然在开发环境中是可以获取到的，但是在`build`之后，`rust`编译器会自动将`PATH`环境变量设置为`/usr/bin`，所以无法获取到全局变量；\n\n所以当您运行`环境变量`的某个命令时，是不会执行的；\n\n因为在您的应用程序中`%PATH`中根本获取不到对应的变量；\n\n## 案例\n\n我在本地电脑安装了`fnm`，在`dev`之后是可以获取到`where fnm`命令的，如下代码：\n\n```rust\nfn is_installed(program: &str) -> bool {\n  let mut cmd = Command::new(if cfg!(target_os = \"windows\") {\n      \"cmd\"\n  } else {\n      \"bash\"\n  });\n  let arg = if cfg!(target_os = \"windows\") {\n      format!(\"where {}\", program)\n  } else {\n      format!(\"which {}\", program)\n  };\n  cmd.arg(\"-c\").arg(arg);\n\n  #[cfg(target_os = \"windows\")]\n  {\n      cmd.creation_flags(0x08000000);\n  }\n  let output = cmd.output().expect(\"Failed to execute command\");\n  let stdout = GBK.decode(&output.stdout);\n\n  let result: bool = output.status.success() && !output.stdout.is_empty();\n\n  info!(\n      \"{} 是否已经安装 {}, 安装结果为: {}\",\n      program, result, stdout.0\n  );\n  result\n}\n// result 的结果就是你电脑安装的 路径， 当然如果有路径 那返回布尔值\n```\n\n当您执行之后，那么您就能获取到对应的值，当然您同时也可以在`终端`中执行`which fnm`命令来获取到对应的路径。\n\n只要您打包之后，就会返回空；那么它永远获取不到您电脑安装过的环境；\n\n我试了好几种方案都是不行的， <font color=\"#ff0000\">下面四种方案都是不可行的</font>：\n\n1. 通过`which`命令获取到对应的路径；\n2. 通过`fnm`命令获取版本号；\n3. 通过获取环境变量；\n4. 安装`shell`插件，再去获取；\n\n## 解决方案\n\n在`google`上搜了好多资料，方案都是不可行的；于是我尝试着去`github`上找一找；\n\n结果运气不错，还真的找到了一个解决方案；[**“构建后，shell 命令失败”**](https://github.com/tauri-apps/tauri/issues/8400)\n\n里面有句话大概解释为什么在`build`之后获取不到环境变量了：\n\n**“I think that's because on macOS/Linux the PATH environment variable is not inherited by default from your .bashrc and similar shell files,can you try using this crate https://github.com/tauri-apps/fix-path-env-rs and see if it fixes the issue?”**\n\n大概意思就是：**我认为这是因为在 macOS/Linux 上，PATH 环境变量默认不会从您的.bashrc 和类似的 shell 文件中继承**\n\n当然人家已经整理出了[解决方案](https://github.com/tauri-apps/fix-path-env-rs);\n\n按照对应的步骤进行操作，那么`build`之后就可以获取到对应的环境变量了；\n","slug":"总结/技术调研/rust-env没有继承问题","published":1,"updated":"2025-03-12T09:54:21.641Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0is000jfg9mgzk90fbt","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>近期在开发<code>rust + vite</code>(tauri)项目的时候，发现了一个问题；就是沙箱隔离模式的环境变量继承问题；</p>\n<p>在<code>rust</code>本地开发中，可以通过<code>std::env::var(&quot;PATH&quot;)</code>或者全局变量<code>$PATH</code>获取环境变量的值，当然您也可以通过<code>std::env::vars()</code>获取所有的全局变量；</p>\n<p>当然在开发环境中是可以获取到的，但是在<code>build</code>之后，<code>rust</code>编译器会自动将<code>PATH</code>环境变量设置为<code>/usr/bin</code>，所以无法获取到全局变量；</p>\n<p>所以当您运行<code>环境变量</code>的某个命令时，是不会执行的；</p>\n<p>因为在您的应用程序中<code>%PATH</code>中根本获取不到对应的变量；</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>我在本地电脑安装了<code>fnm</code>，在<code>dev</code>之后是可以获取到<code>where fnm</code>命令的，如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">is_installed</span>(program: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">cmd</span> = Command::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">if</span> <span class=\"built_in\">cfg!</span>(target_os = <span class=\"string\">&quot;windows&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;cmd&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;bash&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">arg</span> = <span class=\"keyword\">if</span> <span class=\"built_in\">cfg!</span>(target_os = <span class=\"string\">&quot;windows&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;where &#123;&#125;&quot;</span>, program)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;which &#123;&#125;&quot;</span>, program)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  cmd.<span class=\"title function_ invoke__\">arg</span>(<span class=\"string\">&quot;-c&quot;</span>).<span class=\"title function_ invoke__\">arg</span>(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#[cfg(target_os = <span class=\"string\">&quot;windows&quot;</span>)]</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      cmd.<span class=\"title function_ invoke__\">creation_flags</span>(<span class=\"number\">0x08000000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = cmd.<span class=\"title function_ invoke__\">output</span>().<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">&quot;Failed to execute command&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">stdout</span> = GBK.<span class=\"title function_ invoke__\">decode</span>(&amp;output.stdout);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">result</span>: <span class=\"type\">bool</span> = output.status.<span class=\"title function_ invoke__\">success</span>() &amp;&amp; !output.stdout.<span class=\"title function_ invoke__\">is_empty</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  info!(</span><br><span class=\"line\">      <span class=\"string\">&quot;&#123;&#125; 是否已经安装 &#123;&#125;, 安装结果为: &#123;&#125;&quot;</span>,</span><br><span class=\"line\">      program, result, stdout.<span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// result 的结果就是你电脑安装的 路径， 当然如果有路径 那返回布尔值</span></span><br></pre></td></tr></table></figure>\n\n<p>当您执行之后，那么您就能获取到对应的值，当然您同时也可以在<code>终端</code>中执行<code>which fnm</code>命令来获取到对应的路径。</p>\n<p>只要您打包之后，就会返回空；那么它永远获取不到您电脑安装过的环境；</p>\n<p>我试了好几种方案都是不行的， <font color=\"#ff0000\">下面四种方案都是不可行的</font>：</p>\n<ol>\n<li>通过<code>which</code>命令获取到对应的路径；</li>\n<li>通过<code>fnm</code>命令获取版本号；</li>\n<li>通过获取环境变量；</li>\n<li>安装<code>shell</code>插件，再去获取；</li>\n</ol>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>在<code>google</code>上搜了好多资料，方案都是不可行的；于是我尝试着去<code>github</code>上找一找；</p>\n<p>结果运气不错，还真的找到了一个解决方案；<a href=\"https://github.com/tauri-apps/tauri/issues/8400\"><strong>“构建后，shell 命令失败”</strong></a></p>\n<p>里面有句话大概解释为什么在<code>build</code>之后获取不到环境变量了：</p>\n<p><strong>“I think that’s because on macOS&#x2F;Linux the PATH environment variable is not inherited by default from your .bashrc and similar shell files,can you try using this crate <a href=\"https://github.com/tauri-apps/fix-path-env-rs\">https://github.com/tauri-apps/fix-path-env-rs</a> and see if it fixes the issue?”</strong></p>\n<p>大概意思就是：<strong>我认为这是因为在 macOS&#x2F;Linux 上，PATH 环境变量默认不会从您的.bashrc 和类似的 shell 文件中继承</strong></p>\n<p>当然人家已经整理出了<a href=\"https://github.com/tauri-apps/fix-path-env-rs\">解决方案</a>;</p>\n<p>按照对应的步骤进行操作，那么<code>build</code>之后就可以获取到对应的环境变量了；</p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>近期在开发<code>rust + vite</code>(tauri)项目的时候，发现了一个问题；就是沙箱隔离模式的环境变量继承问题；</p>\n<p>在<code>rust</code>本地开发中，可以通过<code>std::env::var(&quot;PATH&quot;)</code>或者全局变量<code>$PATH</code>获取环境变量的值，当然您也可以通过<code>std::env::vars()</code>获取所有的全局变量；</p>\n<p>当然在开发环境中是可以获取到的，但是在<code>build</code>之后，<code>rust</code>编译器会自动将<code>PATH</code>环境变量设置为<code>/usr/bin</code>，所以无法获取到全局变量；</p>\n<p>所以当您运行<code>环境变量</code>的某个命令时，是不会执行的；</p>\n<p>因为在您的应用程序中<code>%PATH</code>中根本获取不到对应的变量；</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>我在本地电脑安装了<code>fnm</code>，在<code>dev</code>之后是可以获取到<code>where fnm</code>命令的，如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">is_installed</span>(program: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">cmd</span> = Command::<span class=\"title function_ invoke__\">new</span>(<span class=\"keyword\">if</span> <span class=\"built_in\">cfg!</span>(target_os = <span class=\"string\">&quot;windows&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;cmd&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;bash&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">arg</span> = <span class=\"keyword\">if</span> <span class=\"built_in\">cfg!</span>(target_os = <span class=\"string\">&quot;windows&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;where &#123;&#125;&quot;</span>, program)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;which &#123;&#125;&quot;</span>, program)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  cmd.<span class=\"title function_ invoke__\">arg</span>(<span class=\"string\">&quot;-c&quot;</span>).<span class=\"title function_ invoke__\">arg</span>(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#[cfg(target_os = <span class=\"string\">&quot;windows&quot;</span>)]</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      cmd.<span class=\"title function_ invoke__\">creation_flags</span>(<span class=\"number\">0x08000000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = cmd.<span class=\"title function_ invoke__\">output</span>().<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">&quot;Failed to execute command&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">stdout</span> = GBK.<span class=\"title function_ invoke__\">decode</span>(&amp;output.stdout);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">result</span>: <span class=\"type\">bool</span> = output.status.<span class=\"title function_ invoke__\">success</span>() &amp;&amp; !output.stdout.<span class=\"title function_ invoke__\">is_empty</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  info!(</span><br><span class=\"line\">      <span class=\"string\">&quot;&#123;&#125; 是否已经安装 &#123;&#125;, 安装结果为: &#123;&#125;&quot;</span>,</span><br><span class=\"line\">      program, result, stdout.<span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// result 的结果就是你电脑安装的 路径， 当然如果有路径 那返回布尔值</span></span><br></pre></td></tr></table></figure>\n\n<p>当您执行之后，那么您就能获取到对应的值，当然您同时也可以在<code>终端</code>中执行<code>which fnm</code>命令来获取到对应的路径。</p>\n<p>只要您打包之后，就会返回空；那么它永远获取不到您电脑安装过的环境；</p>\n<p>我试了好几种方案都是不行的， <font color=\"#ff0000\">下面四种方案都是不可行的</font>：</p>\n<ol>\n<li>通过<code>which</code>命令获取到对应的路径；</li>\n<li>通过<code>fnm</code>命令获取版本号；</li>\n<li>通过获取环境变量；</li>\n<li>安装<code>shell</code>插件，再去获取；</li>\n</ol>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>在<code>google</code>上搜了好多资料，方案都是不可行的；于是我尝试着去<code>github</code>上找一找；</p>\n<p>结果运气不错，还真的找到了一个解决方案；<a href=\"https://github.com/tauri-apps/tauri/issues/8400\"><strong>“构建后，shell 命令失败”</strong></a></p>\n<p>里面有句话大概解释为什么在<code>build</code>之后获取不到环境变量了：</p>\n<p><strong>“I think that’s because on macOS&#x2F;Linux the PATH environment variable is not inherited by default from your .bashrc and similar shell files,can you try using this crate <a href=\"https://github.com/tauri-apps/fix-path-env-rs\">https://github.com/tauri-apps/fix-path-env-rs</a> and see if it fixes the issue?”</strong></p>\n<p>大概意思就是：<strong>我认为这是因为在 macOS&#x2F;Linux 上，PATH 环境变量默认不会从您的.bashrc 和类似的 shell 文件中继承</strong></p>\n<p>当然人家已经整理出了<a href=\"https://github.com/tauri-apps/fix-path-env-rs\">解决方案</a>;</p>\n<p>按照对应的步骤进行操作，那么<code>build</code>之后就可以获取到对应的环境变量了；</p>\n"},{"title":"技术调研-远程组件的介绍","abbrlink":"3d539fd5","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n近期我在做什么？\n\n`远程组件如何引入在项目中`这个话题也就是我最近在研究的东西；\n\n## 为什么？\n\n最近有一个想法，就是在工作中有那么一个功能就是`商品属性`， 类似于淘宝京东的选择商品规格的功能, 有尺寸大小，有眼色，有材质等等；\n\n**该功能涉及到多个平台，每个属性有对应的规则，但是有一个比较麻烦的点就是功能是一致的，规则是一样的，就是完全的功能要在不同的项目中复制粘贴修改；导致现在就是不同的项目中都有一样的组件一样的代码**\n\n这样就暴露出了弊端：\n\n1. 维护多个平台，比如修改了规则，那么就要修改多个项目；pc 端, h5, 小程序等等;\n2. 代码的重复性比较高，对于高复杂的组件没有对应的文档以及说明；\n3. 底层的变动以及参数不统一，A 同学加个一个参数 a, B 加了一个 b，最后都不知道该字段的具体作用\n\n在这样的业务场景下，于是我消费一些时间去研究一下远程组件如何做？\n\n**当然远程组件的好处就是：后期维护这个组件即可；**\n\n于是，就考虑到了俩种不同的处理方式\n\n1. 包依赖模式，有一个缺点就是如果远程组件更新了，那么本地以及生产的`package.json`也要对应进行升级；不过稳定性比较高\n2. cdn 模式，那就是项目使用 cdn 的模式引入`import {RTx} from 'https://xxx.com/xx.js'`, 不过这样在`vite`上是可以正常运行的，在`webpack`上就无法使用了\n\n## 思路\n\n### 首先，选用构建工具：\n\n- vite\n- webpack\n- rollup\n\n在三者的比较下，我选择了`vite`\n\n1. vite 与 webpack 相比，不论是启动，打包还是热更新，vite 还是比较优秀的，再者，vite 还支持对 rollup 的配置\n2. rollup 与 webpack 相比，rollup 更加轻量，配置简单，但是不支持热更新\n\n为什么要用到热更新，因为你在开发组件或者测试一些 api 的时候总不能每次都重启修改吧，那么热更新是不错的选择；\n\n于是我还是采用`vite`的打包方式，原因就是很简单，速度，配置等都算的是比较不错的，当然是还可以配置 rollup 配置； 完全是自定义的；\n\n### 其次，组件的编写方式：\n\n组件使用 `vueComponent` 的方式，之前也想过用函数组件，但是有些场景不太合适；就拿`vant`来讲，其远嘛就是`tsx/jsx`编写，你直接看不到`vue`文件，但是对于其维护的便利性来讲我还是看中`component`的形式；\n\n接着，就要对其目录进行分级，\n\n- packages\n  - ele-components => element-plus 组件的目录\n  - van-components => van-ui 组件的目录\n  - utils => 工具函数的目录\n  - hooks => 封装的 hooks\n  - types => 类型定义\n  - style => 样式的目录\n  - index.ts => 入口文件\n  - package.json => 组件的配置文件\n- package.json\n- vite.config.ts\n- ...其他文件\n\n当然对应的打包文件的格式也和`packages`一样，这样就可以了\n\n### 编写远程组件\n\n其实这里的远程组件和日常编写的组件是一样的，不过是对公司的一些公共的业务组件进行拆分，从而再二次封装，后期只需要引入对应的依赖即可，这样就可以做到仅仅修改一次从而再多个平台进行更新；\n\n具体的编写方式就不细说了；\n\n当你写完之后，那么最后一步就是进行打包了， 这里我采取`vite-lib`插件的形式进行打包：\n\n```JS\n{\n  build: {\n    lib: {\n      entry: '', // 插件的入口文件\n      name: '', // 名字\n      formats: ['es'] // 打包的格式\n    },\n    // rollup配置\n    rollupOptions: {\n      external: {},\n      output: {\n      }\n    },\n    cssCodeSplit: true\n  }\n}\n```\n\n以依赖包的形式将进行打包，这里我用到了几个插件：\n\n1. vite-plugin-dts： 将组件的代码进行类型声明，方便使用\n2. autoprefixer: 添加浏览器前缀\n3. rollup-plugin-obfuscator: 代码混淆\n\n打包完成之后，你会发现对应的文件会很大，那么接着对其进行优化， 首先我们下载的一些依赖不需要进行打包，如：`vue, vant, element-plus`；\n\n那么`vite-rollupOptions`有这样一个配置：\n\n```ts\n{\n\trollupOptions: {\n\t\texternal: [\"vue\", \"vant\", \"element-plus\"];\n\t}\n}\n```\n\n那么重新打包，观察其文件大小，你会发现比之前的文件小了很多；\n\n到了这一步基本上差不多了，不过要注意的是打包完成之后必须要有`package.json`文件，不然后期使用`install`的方式会失败的；\n\n**这是一个使用案例：**\n\n```ts\n// 类似于这样的格式，具体路径自己进行配置；\n// 这样做到了按需加载，用到那个组件加载对应的组件以及样式，避免组件和样式打包一起导致文件加载时间过长的情况\nimport \"remote-components/ele/index.css\";\nimport { ElButton } from \"remote-components\";\n\n<template>\n\t<ElButton />\n</template>;\n```\n","source":"_posts/总结/技术调研/开发远程组件的介绍.md","raw":"---\ntitle: 技术调研-远程组件的介绍\nabbrlink: 3d539fd5\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n近期我在做什么？\n\n`远程组件如何引入在项目中`这个话题也就是我最近在研究的东西；\n\n## 为什么？\n\n最近有一个想法，就是在工作中有那么一个功能就是`商品属性`， 类似于淘宝京东的选择商品规格的功能, 有尺寸大小，有眼色，有材质等等；\n\n**该功能涉及到多个平台，每个属性有对应的规则，但是有一个比较麻烦的点就是功能是一致的，规则是一样的，就是完全的功能要在不同的项目中复制粘贴修改；导致现在就是不同的项目中都有一样的组件一样的代码**\n\n这样就暴露出了弊端：\n\n1. 维护多个平台，比如修改了规则，那么就要修改多个项目；pc 端, h5, 小程序等等;\n2. 代码的重复性比较高，对于高复杂的组件没有对应的文档以及说明；\n3. 底层的变动以及参数不统一，A 同学加个一个参数 a, B 加了一个 b，最后都不知道该字段的具体作用\n\n在这样的业务场景下，于是我消费一些时间去研究一下远程组件如何做？\n\n**当然远程组件的好处就是：后期维护这个组件即可；**\n\n于是，就考虑到了俩种不同的处理方式\n\n1. 包依赖模式，有一个缺点就是如果远程组件更新了，那么本地以及生产的`package.json`也要对应进行升级；不过稳定性比较高\n2. cdn 模式，那就是项目使用 cdn 的模式引入`import {RTx} from 'https://xxx.com/xx.js'`, 不过这样在`vite`上是可以正常运行的，在`webpack`上就无法使用了\n\n## 思路\n\n### 首先，选用构建工具：\n\n- vite\n- webpack\n- rollup\n\n在三者的比较下，我选择了`vite`\n\n1. vite 与 webpack 相比，不论是启动，打包还是热更新，vite 还是比较优秀的，再者，vite 还支持对 rollup 的配置\n2. rollup 与 webpack 相比，rollup 更加轻量，配置简单，但是不支持热更新\n\n为什么要用到热更新，因为你在开发组件或者测试一些 api 的时候总不能每次都重启修改吧，那么热更新是不错的选择；\n\n于是我还是采用`vite`的打包方式，原因就是很简单，速度，配置等都算的是比较不错的，当然是还可以配置 rollup 配置； 完全是自定义的；\n\n### 其次，组件的编写方式：\n\n组件使用 `vueComponent` 的方式，之前也想过用函数组件，但是有些场景不太合适；就拿`vant`来讲，其远嘛就是`tsx/jsx`编写，你直接看不到`vue`文件，但是对于其维护的便利性来讲我还是看中`component`的形式；\n\n接着，就要对其目录进行分级，\n\n- packages\n  - ele-components => element-plus 组件的目录\n  - van-components => van-ui 组件的目录\n  - utils => 工具函数的目录\n  - hooks => 封装的 hooks\n  - types => 类型定义\n  - style => 样式的目录\n  - index.ts => 入口文件\n  - package.json => 组件的配置文件\n- package.json\n- vite.config.ts\n- ...其他文件\n\n当然对应的打包文件的格式也和`packages`一样，这样就可以了\n\n### 编写远程组件\n\n其实这里的远程组件和日常编写的组件是一样的，不过是对公司的一些公共的业务组件进行拆分，从而再二次封装，后期只需要引入对应的依赖即可，这样就可以做到仅仅修改一次从而再多个平台进行更新；\n\n具体的编写方式就不细说了；\n\n当你写完之后，那么最后一步就是进行打包了， 这里我采取`vite-lib`插件的形式进行打包：\n\n```JS\n{\n  build: {\n    lib: {\n      entry: '', // 插件的入口文件\n      name: '', // 名字\n      formats: ['es'] // 打包的格式\n    },\n    // rollup配置\n    rollupOptions: {\n      external: {},\n      output: {\n      }\n    },\n    cssCodeSplit: true\n  }\n}\n```\n\n以依赖包的形式将进行打包，这里我用到了几个插件：\n\n1. vite-plugin-dts： 将组件的代码进行类型声明，方便使用\n2. autoprefixer: 添加浏览器前缀\n3. rollup-plugin-obfuscator: 代码混淆\n\n打包完成之后，你会发现对应的文件会很大，那么接着对其进行优化， 首先我们下载的一些依赖不需要进行打包，如：`vue, vant, element-plus`；\n\n那么`vite-rollupOptions`有这样一个配置：\n\n```ts\n{\n\trollupOptions: {\n\t\texternal: [\"vue\", \"vant\", \"element-plus\"];\n\t}\n}\n```\n\n那么重新打包，观察其文件大小，你会发现比之前的文件小了很多；\n\n到了这一步基本上差不多了，不过要注意的是打包完成之后必须要有`package.json`文件，不然后期使用`install`的方式会失败的；\n\n**这是一个使用案例：**\n\n```ts\n// 类似于这样的格式，具体路径自己进行配置；\n// 这样做到了按需加载，用到那个组件加载对应的组件以及样式，避免组件和样式打包一起导致文件加载时间过长的情况\nimport \"remote-components/ele/index.css\";\nimport { ElButton } from \"remote-components\";\n\n<template>\n\t<ElButton />\n</template>;\n```\n","slug":"总结/技术调研/开发远程组件的介绍","published":1,"updated":"2025-03-12T09:51:57.160Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0is000nfg9mfh7w0bc1","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>近期我在做什么？</p>\n<p><code>远程组件如何引入在项目中</code>这个话题也就是我最近在研究的东西；</p>\n<h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>最近有一个想法，就是在工作中有那么一个功能就是<code>商品属性</code>， 类似于淘宝京东的选择商品规格的功能, 有尺寸大小，有眼色，有材质等等；</p>\n<p><strong>该功能涉及到多个平台，每个属性有对应的规则，但是有一个比较麻烦的点就是功能是一致的，规则是一样的，就是完全的功能要在不同的项目中复制粘贴修改；导致现在就是不同的项目中都有一样的组件一样的代码</strong></p>\n<p>这样就暴露出了弊端：</p>\n<ol>\n<li>维护多个平台，比如修改了规则，那么就要修改多个项目；pc 端, h5, 小程序等等;</li>\n<li>代码的重复性比较高，对于高复杂的组件没有对应的文档以及说明；</li>\n<li>底层的变动以及参数不统一，A 同学加个一个参数 a, B 加了一个 b，最后都不知道该字段的具体作用</li>\n</ol>\n<p>在这样的业务场景下，于是我消费一些时间去研究一下远程组件如何做？</p>\n<p><strong>当然远程组件的好处就是：后期维护这个组件即可；</strong></p>\n<p>于是，就考虑到了俩种不同的处理方式</p>\n<ol>\n<li>包依赖模式，有一个缺点就是如果远程组件更新了，那么本地以及生产的<code>package.json</code>也要对应进行升级；不过稳定性比较高</li>\n<li>cdn 模式，那就是项目使用 cdn 的模式引入<code>import &#123;RTx&#125; from &#39;https://xxx.com/xx.js&#39;</code>, 不过这样在<code>vite</code>上是可以正常运行的，在<code>webpack</code>上就无法使用了</li>\n</ol>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"首先，选用构建工具：\"><a href=\"#首先，选用构建工具：\" class=\"headerlink\" title=\"首先，选用构建工具：\"></a>首先，选用构建工具：</h3><ul>\n<li>vite</li>\n<li>webpack</li>\n<li>rollup</li>\n</ul>\n<p>在三者的比较下，我选择了<code>vite</code></p>\n<ol>\n<li>vite 与 webpack 相比，不论是启动，打包还是热更新，vite 还是比较优秀的，再者，vite 还支持对 rollup 的配置</li>\n<li>rollup 与 webpack 相比，rollup 更加轻量，配置简单，但是不支持热更新</li>\n</ol>\n<p>为什么要用到热更新，因为你在开发组件或者测试一些 api 的时候总不能每次都重启修改吧，那么热更新是不错的选择；</p>\n<p>于是我还是采用<code>vite</code>的打包方式，原因就是很简单，速度，配置等都算的是比较不错的，当然是还可以配置 rollup 配置； 完全是自定义的；</p>\n<h3 id=\"其次，组件的编写方式：\"><a href=\"#其次，组件的编写方式：\" class=\"headerlink\" title=\"其次，组件的编写方式：\"></a>其次，组件的编写方式：</h3><p>组件使用 <code>vueComponent</code> 的方式，之前也想过用函数组件，但是有些场景不太合适；就拿<code>vant</code>来讲，其远嘛就是<code>tsx/jsx</code>编写，你直接看不到<code>vue</code>文件，但是对于其维护的便利性来讲我还是看中<code>component</code>的形式；</p>\n<p>接着，就要对其目录进行分级，</p>\n<ul>\n<li>packages<ul>\n<li>ele-components &#x3D;&gt; element-plus 组件的目录</li>\n<li>van-components &#x3D;&gt; van-ui 组件的目录</li>\n<li>utils &#x3D;&gt; 工具函数的目录</li>\n<li>hooks &#x3D;&gt; 封装的 hooks</li>\n<li>types &#x3D;&gt; 类型定义</li>\n<li>style &#x3D;&gt; 样式的目录</li>\n<li>index.ts &#x3D;&gt; 入口文件</li>\n<li>package.json &#x3D;&gt; 组件的配置文件</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>vite.config.ts</li>\n<li>…其他文件</li>\n</ul>\n<p>当然对应的打包文件的格式也和<code>packages</code>一样，这样就可以了</p>\n<h3 id=\"编写远程组件\"><a href=\"#编写远程组件\" class=\"headerlink\" title=\"编写远程组件\"></a>编写远程组件</h3><p>其实这里的远程组件和日常编写的组件是一样的，不过是对公司的一些公共的业务组件进行拆分，从而再二次封装，后期只需要引入对应的依赖即可，这样就可以做到仅仅修改一次从而再多个平台进行更新；</p>\n<p>具体的编写方式就不细说了；</p>\n<p>当你写完之后，那么最后一步就是进行打包了， 这里我采取<code>vite-lib</code>插件的形式进行打包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">lib</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 插件的入口文件</span></span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 名字</span></span><br><span class=\"line\">      <span class=\"attr\">formats</span>: [<span class=\"string\">&#x27;es&#x27;</span>] <span class=\"comment\">// 打包的格式</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// rollup配置</span></span><br><span class=\"line\">    <span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">external</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以依赖包的形式将进行打包，这里我用到了几个插件：</p>\n<ol>\n<li>vite-plugin-dts： 将组件的代码进行类型声明，方便使用</li>\n<li>autoprefixer: 添加浏览器前缀</li>\n<li>rollup-plugin-obfuscator: 代码混淆</li>\n</ol>\n<p>打包完成之后，你会发现对应的文件会很大，那么接着对其进行优化， 首先我们下载的一些依赖不需要进行打包，如：<code>vue, vant, element-plus</code>；</p>\n<p>那么<code>vite-rollupOptions</code>有这样一个配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">external</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vant&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么重新打包，观察其文件大小，你会发现比之前的文件小了很多；</p>\n<p>到了这一步基本上差不多了，不过要注意的是打包完成之后必须要有<code>package.json</code>文件，不然后期使用<code>install</code>的方式会失败的；</p>\n<p><strong>这是一个使用案例：</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类似于这样的格式，具体路径自己进行配置；</span></span><br><span class=\"line\"><span class=\"comment\">// 这样做到了按需加载，用到那个组件加载对应的组件以及样式，避免组件和样式打包一起导致文件加载时间过长的情况</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;remote-components/ele/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElButton</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;remote-components&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">ElButton</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>近期我在做什么？</p>\n<p><code>远程组件如何引入在项目中</code>这个话题也就是我最近在研究的东西；</p>\n<h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>最近有一个想法，就是在工作中有那么一个功能就是<code>商品属性</code>， 类似于淘宝京东的选择商品规格的功能, 有尺寸大小，有眼色，有材质等等；</p>\n<p><strong>该功能涉及到多个平台，每个属性有对应的规则，但是有一个比较麻烦的点就是功能是一致的，规则是一样的，就是完全的功能要在不同的项目中复制粘贴修改；导致现在就是不同的项目中都有一样的组件一样的代码</strong></p>\n<p>这样就暴露出了弊端：</p>\n<ol>\n<li>维护多个平台，比如修改了规则，那么就要修改多个项目；pc 端, h5, 小程序等等;</li>\n<li>代码的重复性比较高，对于高复杂的组件没有对应的文档以及说明；</li>\n<li>底层的变动以及参数不统一，A 同学加个一个参数 a, B 加了一个 b，最后都不知道该字段的具体作用</li>\n</ol>\n<p>在这样的业务场景下，于是我消费一些时间去研究一下远程组件如何做？</p>\n<p><strong>当然远程组件的好处就是：后期维护这个组件即可；</strong></p>\n<p>于是，就考虑到了俩种不同的处理方式</p>\n<ol>\n<li>包依赖模式，有一个缺点就是如果远程组件更新了，那么本地以及生产的<code>package.json</code>也要对应进行升级；不过稳定性比较高</li>\n<li>cdn 模式，那就是项目使用 cdn 的模式引入<code>import &#123;RTx&#125; from &#39;https://xxx.com/xx.js&#39;</code>, 不过这样在<code>vite</code>上是可以正常运行的，在<code>webpack</code>上就无法使用了</li>\n</ol>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"首先，选用构建工具：\"><a href=\"#首先，选用构建工具：\" class=\"headerlink\" title=\"首先，选用构建工具：\"></a>首先，选用构建工具：</h3><ul>\n<li>vite</li>\n<li>webpack</li>\n<li>rollup</li>\n</ul>\n<p>在三者的比较下，我选择了<code>vite</code></p>\n<ol>\n<li>vite 与 webpack 相比，不论是启动，打包还是热更新，vite 还是比较优秀的，再者，vite 还支持对 rollup 的配置</li>\n<li>rollup 与 webpack 相比，rollup 更加轻量，配置简单，但是不支持热更新</li>\n</ol>\n<p>为什么要用到热更新，因为你在开发组件或者测试一些 api 的时候总不能每次都重启修改吧，那么热更新是不错的选择；</p>\n<p>于是我还是采用<code>vite</code>的打包方式，原因就是很简单，速度，配置等都算的是比较不错的，当然是还可以配置 rollup 配置； 完全是自定义的；</p>\n<h3 id=\"其次，组件的编写方式：\"><a href=\"#其次，组件的编写方式：\" class=\"headerlink\" title=\"其次，组件的编写方式：\"></a>其次，组件的编写方式：</h3><p>组件使用 <code>vueComponent</code> 的方式，之前也想过用函数组件，但是有些场景不太合适；就拿<code>vant</code>来讲，其远嘛就是<code>tsx/jsx</code>编写，你直接看不到<code>vue</code>文件，但是对于其维护的便利性来讲我还是看中<code>component</code>的形式；</p>\n<p>接着，就要对其目录进行分级，</p>\n<ul>\n<li>packages<ul>\n<li>ele-components &#x3D;&gt; element-plus 组件的目录</li>\n<li>van-components &#x3D;&gt; van-ui 组件的目录</li>\n<li>utils &#x3D;&gt; 工具函数的目录</li>\n<li>hooks &#x3D;&gt; 封装的 hooks</li>\n<li>types &#x3D;&gt; 类型定义</li>\n<li>style &#x3D;&gt; 样式的目录</li>\n<li>index.ts &#x3D;&gt; 入口文件</li>\n<li>package.json &#x3D;&gt; 组件的配置文件</li>\n</ul>\n</li>\n<li>package.json</li>\n<li>vite.config.ts</li>\n<li>…其他文件</li>\n</ul>\n<p>当然对应的打包文件的格式也和<code>packages</code>一样，这样就可以了</p>\n<h3 id=\"编写远程组件\"><a href=\"#编写远程组件\" class=\"headerlink\" title=\"编写远程组件\"></a>编写远程组件</h3><p>其实这里的远程组件和日常编写的组件是一样的，不过是对公司的一些公共的业务组件进行拆分，从而再二次封装，后期只需要引入对应的依赖即可，这样就可以做到仅仅修改一次从而再多个平台进行更新；</p>\n<p>具体的编写方式就不细说了；</p>\n<p>当你写完之后，那么最后一步就是进行打包了， 这里我采取<code>vite-lib</code>插件的形式进行打包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">lib</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 插件的入口文件</span></span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 名字</span></span><br><span class=\"line\">      <span class=\"attr\">formats</span>: [<span class=\"string\">&#x27;es&#x27;</span>] <span class=\"comment\">// 打包的格式</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// rollup配置</span></span><br><span class=\"line\">    <span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">external</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以依赖包的形式将进行打包，这里我用到了几个插件：</p>\n<ol>\n<li>vite-plugin-dts： 将组件的代码进行类型声明，方便使用</li>\n<li>autoprefixer: 添加浏览器前缀</li>\n<li>rollup-plugin-obfuscator: 代码混淆</li>\n</ol>\n<p>打包完成之后，你会发现对应的文件会很大，那么接着对其进行优化， 首先我们下载的一些依赖不需要进行打包，如：<code>vue, vant, element-plus</code>；</p>\n<p>那么<code>vite-rollupOptions</code>有这样一个配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">external</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vant&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么重新打包，观察其文件大小，你会发现比之前的文件小了很多；</p>\n<p>到了这一步基本上差不多了，不过要注意的是打包完成之后必须要有<code>package.json</code>文件，不然后期使用<code>install</code>的方式会失败的；</p>\n<p><strong>这是一个使用案例：</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类似于这样的格式，具体路径自己进行配置；</span></span><br><span class=\"line\"><span class=\"comment\">// 这样做到了按需加载，用到那个组件加载对应的组件以及样式，避免组件和样式打包一起导致文件加载时间过长的情况</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;remote-components/ele/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElButton</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;remote-components&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">ElButton</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"技术调研-远程组件实践","abbrlink":"af6eac10","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n前端时间总结了`开发远程组件的介绍`，其实也不算是远程组件, 就是通过`install`的形式进行安装依赖；\n\n虽然通过拆分组件或者方法，通过`install`(不论公开还是私有)都是可以的，但是最近在新的项目中使用还是发现了一些问题；\n\n1. 使用`npm`, `yarn`出现一些依赖性问题: 版本冲突，打包问题等等; `yarn peerDependencies` 不生效，只有使用`npm`是可以的；因为项目中有`autoimport.d.ts`等文件，那么使用`npm`会导致依赖性重复写入`autoimport.d.ts`的警告；\n2. 使用`pnpm`安装可以避免这些问题，但前提是服务器上有`pnpm`\n\n## 原型图\n\n![](https://wangxiaoze-view.github.io/picx-images-hosting/images/remote_components.3rbcu4xiz3.svg)\n\n涉及项目的地址为： [sim-admin](https://wangxiaoze-view.github.io/sim-admin/#/fun/remote)\n\n## 实践方向\n\n近期在整理实现技术上，发现了俩个方法：\n\n### vite-lib 插件模式 + fetch 加载异步组件\n\n就是将你编写好的组件，通过`vite-lib`的形式，将其打包成工具插件；代码如下：\n\n```ts\nexport default defineConfig({\n\tplugins: [vue()],\n\tdefine: {\n\t\t\"process.env.NODE_ENV\": '\"production\"',\n\t},\n\tbuild: {\n\t\t// css 拆分 压缩\n\t\tcssCodeSplit: true,\n\t\tcssMinify: true,\n\t\tlib: {\n\t\t\tentry: {\n\t\t\t\t// 组件的入口\n\t\t\t\tA: \"./src/components/Test.vue\",\n\t\t\t},\n\t\t\t// 打包的格式\n\t\t\tformats: [\"es\"],\n\t\t},\n\t\trollupOptions: {\n\t\t\t// 这个不需要有，需要将vue打包进去\n\t\t\t// external: [\"vue\"],\n\t\t\toutput: {\n\t\t\t\tdir: \"dist\",\n\t\t\t\tformat: \"es\",\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n打包完成之后执行`pnpm preview`，启动服务；\n\n在主应用中编写如下：\n\n```ts\nimport { defineAsyncComponent } from \"vue\";\n\n// url:就是你需要加载的js文件，例如：http://localhost:4173/a.js\nexport async function loadRemoteComponents(url: string, name = \"default\") {\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst code = await response.text();\n\t\tconst blob = new Blob([code], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst module = await import(/* @vite-ignore */ blobUrl);\n\t\tURL.revokeObjectURL(blobUrl);\n\t\tconst _component = module[name];\n\t\t// 将组件，组件名，以及scopeId暴露出去\n\t\treturn {\n\t\t\tcomponent: defineAsyncComponent(() => Promise.resolve(_component)),\n\t\t\tcomponentName: _component.name,\n\t\t\tscopeId: _component.__scopeId,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(\"加载远程组件失败:\", error);\n\t\tthrow error;\n\t}\n}\n```\n\n在`index.html`中引入`css`样式\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Vite + Vue + TS</title>\n\t\t<!-- 在这里添加，你远程的css地址 -->\n\t\t<link rel=\"stylesheet\" href=\"http://localhost:4173/a.css\" />\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script type=\"module\" src=\"/src/main.ts\"></script>\n\t</body>\n</html>\n```\n\n创建一个组件 `Remote_1.vue`\n\n```vue\n<script setup lang=\"ts\">\nconst { url } = defineProps<{\n\turl: string;\n}>();\nimport { loadRemoteComponents } from \"./loadRemoteComponents\";\nconst { component, componentName, scopeId } = await loadRemoteComponents(url);\n</script>\n\n<template>\n\t<!-- scopeId: 必须要有，不然会导致样式丢失 -->\n\t<component :is=\"component\" :key=\"componentName\" :[scopeId]=\"scopeId\" />\n</template>\n\n<style scoped></style>\n```\n\n在`APP.vue`中：\n\n```vue\n<script setup lang=\"ts\">\nimport Remote_1 from \"./Remote_1.vue\";\n</script>\n<template>\n\t<div>\n\t\t<Suspense>\n\t\t\t<Remote_1 />\n\t\t\t<template #fallback>加载中</template>\n\t\t</Suspense>\n\t</div>\n</template>\n```\n\n这样基本上就可以了，但是它也是有缺陷的：\n\n**<p style=\"color: #ff0000;\">如果远程组件没有接住任何的 ui 库，插件库等等，那么就可以参考这个做法，但如果你的主应用使用了`element-plus`,远程组件也使用了`element-plus`,那么就不可以使用这个做法了，可以参考下一个做法</p>**\n\n### 借助插件 @originjs/vite-plugin-federation\n\n这个插件相对于上一个做法的好处就是：模块共享；如果主应用和远程应用都使用了`element-plus`有单独的配置是可以使用的；\n\n首先主应用和远程应用都需要安装 `pnpm add -D @originjs/vite-plugin-federation`,配置如下：\n\n```ts\n// 远程应用的vite.config.ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\nimport federation from \"@originjs/vite-plugin-federation\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tAutoImport({\n\t\t\tdts: true,\n\t\t\timports: [\"vue\", \"vue-router\"],\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tComponents({\n\t\t\tdts: true,\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tfederation({\n\t\t\tname: \"remote\",\n\t\t\t// 打包的应用文件，也是入口文件\n\t\t\tfilename: \"remoteEntry.js\",\n\t\t\t// 导出的路径\n\t\t\texposes: {\n\t\t\t\t// 自己写一个简单的按钮组件\n\t\t\t\t\"./re-button\": \"./src/components/ReButton.vue\",\n\t\t\t},\n\t\t\t// 共享的模块\n\t\t\tshared: [\"vue\", \"element-plus\"],\n\t\t}),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t\tminify: false,\n\t},\n});\n```\n\n远程应用配置完成之后，打包完成之后执行`pnpm preview`,主应用会用到这个链接\n\n```ts\n// 主应用的vite.config.ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\nimport federation from \"@originjs/vite-plugin-federation\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tAutoImport({\n\t\t\tdts: true,\n\t\t\timports: [\"vue\", \"vue-router\"],\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tComponents({\n\t\t\tdts: true,\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tfederation({\n\t\t\tname: \"host\",\n\t\t\tremotes: {\n\t\t\t\t// 这个地址就是 你远程应用的入口文件地址\n\t\t\t\tremote: \"http://localhost:4173/assets/remoteEntry.js\",\n\t\t\t},\n\t\t\tshared: [\"vue\", \"element-plus\"],\n\t\t}),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t\tminify: false,\n\t},\n});\n```\n\n在`App.vue`中：\n\n```vue\n<script setup lang=\"ts\">\nimport { defineAsyncComponent } from \"vue\";\n// @ts-ignore\nconst ReButton = defineAsyncComponent(() => import(\"remote/re-button\"));\n</script>\n\n<template>\n\t<div>\n\t\t<h1>加载远程组件</h1>\n\n\t\t<ReButton title=\"远程按钮\" />\n\t</div>\n</template>\n\n<style scoped></style>\n```\n\n在主应用打包之后上传`nginx或者服务器`上可以正常运行的；\n![](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a565op8kn.webp)\n\n## rsbuild 的配置\n\n```ts\n// 远程应用\nimport { defineConfig } from \"@rsbuild/core\";\nimport { pluginVue } from \"@rsbuild/plugin-vue\";\n\nexport default defineConfig({\n\tplugins: [pluginVue()],\n\tsource: {\n\t\tentry: {\n\t\t\tindex: \"./src/main.ts\",\n\t\t},\n\t},\n\tmoduleFederation: {\n\t\tname: \"remote\",\n\t\tfilename: \"remoteEntry.js\",\n\t\texposes: {\n\t\t\t\"./Button\": {\n\t\t\t\timport: \"./src/components/Button.vue\",\n\t\t\t\tname: \"Button\",\n\t\t\t},\n\t\t},\n\t\tshared: {\n\t\t\tvue: {\n\t\t\t\tsingleton: true,\n\t\t\t\trequiredVersion: \"^3.3.0\",\n\t\t\t\teager: true,\n\t\t\t},\n\t\t},\n\t},\n\tserver: {\n\t\tport: 3001,\n\t\tcors: true,\n\t},\n\thtml: {\n\t\ttemplate: \"./index.html\",\n\t},\n});\n```\n\n```ts\n// 主应用\nimport { defineConfig } from \"@rsbuild/core\";\nimport { pluginVue } from \"@rsbuild/plugin-vue\";\n\nexport default defineConfig({\n\tplugins: [pluginVue()],\n\tsource: {\n\t\tentry: {\n\t\t\tindex: \"./src/main.ts\",\n\t\t},\n\t},\n\tmoduleFederation: {\n\t\tname: \"host\",\n\t\tremotes: {\n\t\t\tremote: {\n\t\t\t\texternal: \"remote@http://localhost:3001/remoteEntry.js\",\n\t\t\t\tformat: \"esm\",\n\t\t\t\tfrom: \"vite\",\n\t\t\t\ttype: \"module\",\n\t\t\t},\n\t\t},\n\t\tshared: {\n\t\t\tvue: {\n\t\t\t\tsingleton: true,\n\t\t\t\trequiredVersion: \"^3.3.0\",\n\t\t\t\teager: true,\n\t\t\t},\n\t\t},\n\t},\n\thtml: {\n\t\ttemplate: \"./index.html\",\n\t},\n});\n```\n\n```ts\nconst remoteComponent = defineAsyncComponent({\n\tloader: () => import(\"remote/Button\") as Promise<typeof import(\"*.vue\")>,\n\tonError(error) {\n\t\tconsole.error(\"远程组件加载失败:\", error);\n\t},\n});\n```\n\n~~**<p style=\"color: #ff0000;\">只测试了没有引入任何插件，ui 的情况，其他情况暂时先不考虑</p>**~~\n\n之前没有测试到`ui`组件，近期在我的项目中上线了测试案例，其使用了`element-plus`组件，打开之后其显示的是正常样式，并且点击是生效的，具体涉及的代码如下：[github](https://github.com/wangxiaoze-view/sim-admin/blob/main/rsbuild.config.ts#L164C3-L183C5)\n\n```ts\n{\n\tmoduleFederation: {\n    options: {\n      name: 'sim_admin',\n      remotes: {\n        remote: process.env.APP_REMOTE as string,\n      },\n      shared: {\n        vue: {\n          singleton: true,\n          requiredVersion: '3',\n          eager: true,\n        },\n        'element-plus': {\n          singleton: true,\n          requiredVersion: '2',\n          eager: true,\n        },\n      },\n    },\n  },\n}\n\n```\n","source":"_posts/总结/技术调研/开发远程组件的实践.md","raw":"---\ntitle: 技术调研-远程组件实践\nabbrlink: af6eac10\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n前端时间总结了`开发远程组件的介绍`，其实也不算是远程组件, 就是通过`install`的形式进行安装依赖；\n\n虽然通过拆分组件或者方法，通过`install`(不论公开还是私有)都是可以的，但是最近在新的项目中使用还是发现了一些问题；\n\n1. 使用`npm`, `yarn`出现一些依赖性问题: 版本冲突，打包问题等等; `yarn peerDependencies` 不生效，只有使用`npm`是可以的；因为项目中有`autoimport.d.ts`等文件，那么使用`npm`会导致依赖性重复写入`autoimport.d.ts`的警告；\n2. 使用`pnpm`安装可以避免这些问题，但前提是服务器上有`pnpm`\n\n## 原型图\n\n![](https://wangxiaoze-view.github.io/picx-images-hosting/images/remote_components.3rbcu4xiz3.svg)\n\n涉及项目的地址为： [sim-admin](https://wangxiaoze-view.github.io/sim-admin/#/fun/remote)\n\n## 实践方向\n\n近期在整理实现技术上，发现了俩个方法：\n\n### vite-lib 插件模式 + fetch 加载异步组件\n\n就是将你编写好的组件，通过`vite-lib`的形式，将其打包成工具插件；代码如下：\n\n```ts\nexport default defineConfig({\n\tplugins: [vue()],\n\tdefine: {\n\t\t\"process.env.NODE_ENV\": '\"production\"',\n\t},\n\tbuild: {\n\t\t// css 拆分 压缩\n\t\tcssCodeSplit: true,\n\t\tcssMinify: true,\n\t\tlib: {\n\t\t\tentry: {\n\t\t\t\t// 组件的入口\n\t\t\t\tA: \"./src/components/Test.vue\",\n\t\t\t},\n\t\t\t// 打包的格式\n\t\t\tformats: [\"es\"],\n\t\t},\n\t\trollupOptions: {\n\t\t\t// 这个不需要有，需要将vue打包进去\n\t\t\t// external: [\"vue\"],\n\t\t\toutput: {\n\t\t\t\tdir: \"dist\",\n\t\t\t\tformat: \"es\",\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n打包完成之后执行`pnpm preview`，启动服务；\n\n在主应用中编写如下：\n\n```ts\nimport { defineAsyncComponent } from \"vue\";\n\n// url:就是你需要加载的js文件，例如：http://localhost:4173/a.js\nexport async function loadRemoteComponents(url: string, name = \"default\") {\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst code = await response.text();\n\t\tconst blob = new Blob([code], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst module = await import(/* @vite-ignore */ blobUrl);\n\t\tURL.revokeObjectURL(blobUrl);\n\t\tconst _component = module[name];\n\t\t// 将组件，组件名，以及scopeId暴露出去\n\t\treturn {\n\t\t\tcomponent: defineAsyncComponent(() => Promise.resolve(_component)),\n\t\t\tcomponentName: _component.name,\n\t\t\tscopeId: _component.__scopeId,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(\"加载远程组件失败:\", error);\n\t\tthrow error;\n\t}\n}\n```\n\n在`index.html`中引入`css`样式\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Vite + Vue + TS</title>\n\t\t<!-- 在这里添加，你远程的css地址 -->\n\t\t<link rel=\"stylesheet\" href=\"http://localhost:4173/a.css\" />\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script type=\"module\" src=\"/src/main.ts\"></script>\n\t</body>\n</html>\n```\n\n创建一个组件 `Remote_1.vue`\n\n```vue\n<script setup lang=\"ts\">\nconst { url } = defineProps<{\n\turl: string;\n}>();\nimport { loadRemoteComponents } from \"./loadRemoteComponents\";\nconst { component, componentName, scopeId } = await loadRemoteComponents(url);\n</script>\n\n<template>\n\t<!-- scopeId: 必须要有，不然会导致样式丢失 -->\n\t<component :is=\"component\" :key=\"componentName\" :[scopeId]=\"scopeId\" />\n</template>\n\n<style scoped></style>\n```\n\n在`APP.vue`中：\n\n```vue\n<script setup lang=\"ts\">\nimport Remote_1 from \"./Remote_1.vue\";\n</script>\n<template>\n\t<div>\n\t\t<Suspense>\n\t\t\t<Remote_1 />\n\t\t\t<template #fallback>加载中</template>\n\t\t</Suspense>\n\t</div>\n</template>\n```\n\n这样基本上就可以了，但是它也是有缺陷的：\n\n**<p style=\"color: #ff0000;\">如果远程组件没有接住任何的 ui 库，插件库等等，那么就可以参考这个做法，但如果你的主应用使用了`element-plus`,远程组件也使用了`element-plus`,那么就不可以使用这个做法了，可以参考下一个做法</p>**\n\n### 借助插件 @originjs/vite-plugin-federation\n\n这个插件相对于上一个做法的好处就是：模块共享；如果主应用和远程应用都使用了`element-plus`有单独的配置是可以使用的；\n\n首先主应用和远程应用都需要安装 `pnpm add -D @originjs/vite-plugin-federation`,配置如下：\n\n```ts\n// 远程应用的vite.config.ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\nimport federation from \"@originjs/vite-plugin-federation\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tAutoImport({\n\t\t\tdts: true,\n\t\t\timports: [\"vue\", \"vue-router\"],\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tComponents({\n\t\t\tdts: true,\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tfederation({\n\t\t\tname: \"remote\",\n\t\t\t// 打包的应用文件，也是入口文件\n\t\t\tfilename: \"remoteEntry.js\",\n\t\t\t// 导出的路径\n\t\t\texposes: {\n\t\t\t\t// 自己写一个简单的按钮组件\n\t\t\t\t\"./re-button\": \"./src/components/ReButton.vue\",\n\t\t\t},\n\t\t\t// 共享的模块\n\t\t\tshared: [\"vue\", \"element-plus\"],\n\t\t}),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t\tminify: false,\n\t},\n});\n```\n\n远程应用配置完成之后，打包完成之后执行`pnpm preview`,主应用会用到这个链接\n\n```ts\n// 主应用的vite.config.ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport AutoImport from \"unplugin-auto-import/vite\";\nimport Components from \"unplugin-vue-components/vite\";\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\nimport federation from \"@originjs/vite-plugin-federation\";\n\n// https://vite.dev/config/\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tAutoImport({\n\t\t\tdts: true,\n\t\t\timports: [\"vue\", \"vue-router\"],\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tComponents({\n\t\t\tdts: true,\n\t\t\tresolvers: [ElementPlusResolver()],\n\t\t}),\n\t\tfederation({\n\t\t\tname: \"host\",\n\t\t\tremotes: {\n\t\t\t\t// 这个地址就是 你远程应用的入口文件地址\n\t\t\t\tremote: \"http://localhost:4173/assets/remoteEntry.js\",\n\t\t\t},\n\t\t\tshared: [\"vue\", \"element-plus\"],\n\t\t}),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t\tminify: false,\n\t},\n});\n```\n\n在`App.vue`中：\n\n```vue\n<script setup lang=\"ts\">\nimport { defineAsyncComponent } from \"vue\";\n// @ts-ignore\nconst ReButton = defineAsyncComponent(() => import(\"remote/re-button\"));\n</script>\n\n<template>\n\t<div>\n\t\t<h1>加载远程组件</h1>\n\n\t\t<ReButton title=\"远程按钮\" />\n\t</div>\n</template>\n\n<style scoped></style>\n```\n\n在主应用打包之后上传`nginx或者服务器`上可以正常运行的；\n![](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a565op8kn.webp)\n\n## rsbuild 的配置\n\n```ts\n// 远程应用\nimport { defineConfig } from \"@rsbuild/core\";\nimport { pluginVue } from \"@rsbuild/plugin-vue\";\n\nexport default defineConfig({\n\tplugins: [pluginVue()],\n\tsource: {\n\t\tentry: {\n\t\t\tindex: \"./src/main.ts\",\n\t\t},\n\t},\n\tmoduleFederation: {\n\t\tname: \"remote\",\n\t\tfilename: \"remoteEntry.js\",\n\t\texposes: {\n\t\t\t\"./Button\": {\n\t\t\t\timport: \"./src/components/Button.vue\",\n\t\t\t\tname: \"Button\",\n\t\t\t},\n\t\t},\n\t\tshared: {\n\t\t\tvue: {\n\t\t\t\tsingleton: true,\n\t\t\t\trequiredVersion: \"^3.3.0\",\n\t\t\t\teager: true,\n\t\t\t},\n\t\t},\n\t},\n\tserver: {\n\t\tport: 3001,\n\t\tcors: true,\n\t},\n\thtml: {\n\t\ttemplate: \"./index.html\",\n\t},\n});\n```\n\n```ts\n// 主应用\nimport { defineConfig } from \"@rsbuild/core\";\nimport { pluginVue } from \"@rsbuild/plugin-vue\";\n\nexport default defineConfig({\n\tplugins: [pluginVue()],\n\tsource: {\n\t\tentry: {\n\t\t\tindex: \"./src/main.ts\",\n\t\t},\n\t},\n\tmoduleFederation: {\n\t\tname: \"host\",\n\t\tremotes: {\n\t\t\tremote: {\n\t\t\t\texternal: \"remote@http://localhost:3001/remoteEntry.js\",\n\t\t\t\tformat: \"esm\",\n\t\t\t\tfrom: \"vite\",\n\t\t\t\ttype: \"module\",\n\t\t\t},\n\t\t},\n\t\tshared: {\n\t\t\tvue: {\n\t\t\t\tsingleton: true,\n\t\t\t\trequiredVersion: \"^3.3.0\",\n\t\t\t\teager: true,\n\t\t\t},\n\t\t},\n\t},\n\thtml: {\n\t\ttemplate: \"./index.html\",\n\t},\n});\n```\n\n```ts\nconst remoteComponent = defineAsyncComponent({\n\tloader: () => import(\"remote/Button\") as Promise<typeof import(\"*.vue\")>,\n\tonError(error) {\n\t\tconsole.error(\"远程组件加载失败:\", error);\n\t},\n});\n```\n\n~~**<p style=\"color: #ff0000;\">只测试了没有引入任何插件，ui 的情况，其他情况暂时先不考虑</p>**~~\n\n之前没有测试到`ui`组件，近期在我的项目中上线了测试案例，其使用了`element-plus`组件，打开之后其显示的是正常样式，并且点击是生效的，具体涉及的代码如下：[github](https://github.com/wangxiaoze-view/sim-admin/blob/main/rsbuild.config.ts#L164C3-L183C5)\n\n```ts\n{\n\tmoduleFederation: {\n    options: {\n      name: 'sim_admin',\n      remotes: {\n        remote: process.env.APP_REMOTE as string,\n      },\n      shared: {\n        vue: {\n          singleton: true,\n          requiredVersion: '3',\n          eager: true,\n        },\n        'element-plus': {\n          singleton: true,\n          requiredVersion: '2',\n          eager: true,\n        },\n      },\n    },\n  },\n}\n\n```\n","slug":"总结/技术调研/开发远程组件的实践","published":1,"updated":"2025-03-13T10:16:17.829Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0is000pfg9m4u059p3c","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间总结了<code>开发远程组件的介绍</code>，其实也不算是远程组件, 就是通过<code>install</code>的形式进行安装依赖；</p>\n<p>虽然通过拆分组件或者方法，通过<code>install</code>(不论公开还是私有)都是可以的，但是最近在新的项目中使用还是发现了一些问题；</p>\n<ol>\n<li>使用<code>npm</code>, <code>yarn</code>出现一些依赖性问题: 版本冲突，打包问题等等; <code>yarn peerDependencies</code> 不生效，只有使用<code>npm</code>是可以的；因为项目中有<code>autoimport.d.ts</code>等文件，那么使用<code>npm</code>会导致依赖性重复写入<code>autoimport.d.ts</code>的警告；</li>\n<li>使用<code>pnpm</code>安装可以避免这些问题，但前提是服务器上有<code>pnpm</code></li>\n</ol>\n<h2 id=\"原型图\"><a href=\"#原型图\" class=\"headerlink\" title=\"原型图\"></a>原型图</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/remote_components.3rbcu4xiz3.svg\"></p>\n<p>涉及项目的地址为： <a href=\"https://wangxiaoze-view.github.io/sim-admin/#/fun/remote\">sim-admin</a></p>\n<h2 id=\"实践方向\"><a href=\"#实践方向\" class=\"headerlink\" title=\"实践方向\"></a>实践方向</h2><p>近期在整理实现技术上，发现了俩个方法：</p>\n<h3 id=\"vite-lib-插件模式-fetch-加载异步组件\"><a href=\"#vite-lib-插件模式-fetch-加载异步组件\" class=\"headerlink\" title=\"vite-lib 插件模式 + fetch 加载异步组件\"></a>vite-lib 插件模式 + fetch 加载异步组件</h3><p>就是将你编写好的组件，通过<code>vite-lib</code>的形式，将其打包成工具插件；代码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">define</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;process.env.NODE_ENV&quot;</span>: <span class=\"string\">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// css 拆分 压缩</span></span><br><span class=\"line\">\t\t<span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cssMinify</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">lib</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 组件的入口</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">A</span>: <span class=\"string\">&quot;./src/components/Test.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打包的格式</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">formats</span>: [<span class=\"string\">&quot;es&quot;</span>],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这个不需要有，需要将vue打包进去</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// external: [&quot;vue&quot;],</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">dir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">format</span>: <span class=\"string\">&quot;es&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打包完成之后执行<code>pnpm preview</code>，启动服务；</p>\n<p>在主应用中编写如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineAsyncComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url:就是你需要加载的js文件，例如：http://localhost:4173/a.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">loadRemoteComponents</span>(<span class=\"params\"><span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, name = <span class=\"string\">&quot;default&quot;</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> code = <span class=\"keyword\">await</span> response.<span class=\"title function_\">text</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([code], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/javascript&quot;</span> &#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> blobUrl = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* @vite-ignore */</span> blobUrl);</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(blobUrl);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> _component = <span class=\"variable language_\">module</span>[name];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将组件，组件名，以及scopeId暴露出去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">component</span>: <span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(_component)),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">componentName</span>: _component.<span class=\"property\">name</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">scopeId</span>: _component.<span class=\"property\">__scopeId</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;加载远程组件失败:&quot;</span>, error);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中引入<code>css</code>样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/svg+xml&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/vite.svg&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vite + Vue + TS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在这里添加，你远程的css地址 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://localhost:4173/a.css&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/src/main.ts&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个组件 <code>Remote_1.vue</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">const &#123; url &#125; = defineProps&lt;&#123;</span><br><span class=\"line\">\turl: string;</span><br><span class=\"line\">&#125;&gt;();</span><br><span class=\"line\">import &#123; loadRemoteComponents &#125; from &quot;./loadRemoteComponents&quot;;</span><br><span class=\"line\">const &#123; component, componentName, scopeId &#125; = await loadRemoteComponents(url);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- scopeId: 必须要有，不然会导致样式丢失 --&gt;</span><br><span class=\"line\">\t&lt;component :is=&quot;component&quot; :key=&quot;componentName&quot; :[scopeId]=&quot;scopeId&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>APP.vue</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import Remote_1 from &quot;./Remote_1.vue&quot;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;Suspense&gt;</span><br><span class=\"line\">\t\t\t&lt;Remote_1 /&gt;</span><br><span class=\"line\">\t\t\t&lt;template #fallback&gt;加载中&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;/Suspense&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样基本上就可以了，但是它也是有缺陷的：</p>\n<p><strong><p style=\"color: #ff0000;\">如果远程组件没有接住任何的 ui 库，插件库等等，那么就可以参考这个做法，但如果你的主应用使用了<code>element-plus</code>,远程组件也使用了<code>element-plus</code>,那么就不可以使用这个做法了，可以参考下一个做法</p></strong></p>\n<h3 id=\"借助插件-originjs-vite-plugin-federation\"><a href=\"#借助插件-originjs-vite-plugin-federation\" class=\"headerlink\" title=\"借助插件 @originjs&#x2F;vite-plugin-federation\"></a>借助插件 @originjs&#x2F;vite-plugin-federation</h3><p>这个插件相对于上一个做法的好处就是：模块共享；如果主应用和远程应用都使用了<code>element-plus</code>有单独的配置是可以使用的；</p>\n<p>首先主应用和远程应用都需要安装 <code>pnpm add -D @originjs/vite-plugin-federation</code>,配置如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 远程应用的vite.config.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> federation <span class=\"keyword\">from</span> <span class=\"string\">&quot;@originjs/vite-plugin-federation&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vite.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title function_\">federation</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;remote&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打包的应用文件，也是入口文件</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 导出的路径</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 自己写一个简单的按钮组件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;./re-button&quot;</span>: <span class=\"string\">&quot;./src/components/ReButton.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 共享的模块</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shared</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>远程应用配置完成之后，打包完成之后执行<code>pnpm preview</code>,主应用会用到这个链接</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主应用的vite.config.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> federation <span class=\"keyword\">from</span> <span class=\"string\">&quot;@originjs/vite-plugin-federation&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vite.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title function_\">federation</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这个地址就是 你远程应用的入口文件地址</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">remote</span>: <span class=\"string\">&quot;http://localhost:4173/assets/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">shared</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>App.vue</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;</span><br><span class=\"line\">// @ts-ignore</span><br><span class=\"line\">const ReButton = defineAsyncComponent(() =&gt; import(&quot;remote/re-button&quot;));</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;加载远程组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;ReButton title=&quot;远程按钮&quot; /&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在主应用打包之后上传<code>nginx或者服务器</code>上可以正常运行的；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a565op8kn.webp\"></p>\n<h2 id=\"rsbuild-的配置\"><a href=\"#rsbuild-的配置\" class=\"headerlink\" title=\"rsbuild 的配置\"></a>rsbuild 的配置</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 远程应用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; pluginVue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">pluginVue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">source</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">&quot;./src/main.ts&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;remote&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;./Button&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">import</span>: <span class=\"string\">&quot;./src/components/Button.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;Button&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;^3.3.0&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">3001</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">html</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;./index.html&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主应用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; pluginVue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">pluginVue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">source</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">&quot;./src/main.ts&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">remote</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">external</span>: <span class=\"string\">&quot;remote@http://localhost:3001/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">format</span>: <span class=\"string\">&quot;esm&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">from</span>: <span class=\"string\">&quot;vite&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;^3.3.0&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">html</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;./index.html&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> remoteComponent = <span class=\"title function_\">defineAsyncComponent</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">loader</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;remote/Button&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;*.vue&quot;</span>)&gt;,</span><br><span class=\"line\">\t<span class=\"title function_\">onError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;远程组件加载失败:&quot;</span>, error);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><del><strong><p style=\"color: #ff0000;\">只测试了没有引入任何插件，ui 的情况，其他情况暂时先不考虑</p></strong></del></p>\n<p>之前没有测试到<code>ui</code>组件，近期在我的项目中上线了测试案例，其使用了<code>element-plus</code>组件，打开之后其显示的是正常样式，并且点击是生效的，具体涉及的代码如下：<a href=\"https://github.com/wangxiaoze-view/sim-admin/blob/main/rsbuild.config.ts#L164C3-L183C5\">github</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;sim_admin&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">remote</span>: process.<span class=\"property\">env</span>.<span class=\"property\">APP_REMOTE</span> <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&#x27;3&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;element-plus&#x27;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&#x27;2&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间总结了<code>开发远程组件的介绍</code>，其实也不算是远程组件, 就是通过<code>install</code>的形式进行安装依赖；</p>\n<p>虽然通过拆分组件或者方法，通过<code>install</code>(不论公开还是私有)都是可以的，但是最近在新的项目中使用还是发现了一些问题；</p>\n<ol>\n<li>使用<code>npm</code>, <code>yarn</code>出现一些依赖性问题: 版本冲突，打包问题等等; <code>yarn peerDependencies</code> 不生效，只有使用<code>npm</code>是可以的；因为项目中有<code>autoimport.d.ts</code>等文件，那么使用<code>npm</code>会导致依赖性重复写入<code>autoimport.d.ts</code>的警告；</li>\n<li>使用<code>pnpm</code>安装可以避免这些问题，但前提是服务器上有<code>pnpm</code></li>\n</ol>\n<h2 id=\"原型图\"><a href=\"#原型图\" class=\"headerlink\" title=\"原型图\"></a>原型图</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/remote_components.3rbcu4xiz3.svg\"></p>\n<p>涉及项目的地址为： <a href=\"https://wangxiaoze-view.github.io/sim-admin/#/fun/remote\">sim-admin</a></p>\n<h2 id=\"实践方向\"><a href=\"#实践方向\" class=\"headerlink\" title=\"实践方向\"></a>实践方向</h2><p>近期在整理实现技术上，发现了俩个方法：</p>\n<h3 id=\"vite-lib-插件模式-fetch-加载异步组件\"><a href=\"#vite-lib-插件模式-fetch-加载异步组件\" class=\"headerlink\" title=\"vite-lib 插件模式 + fetch 加载异步组件\"></a>vite-lib 插件模式 + fetch 加载异步组件</h3><p>就是将你编写好的组件，通过<code>vite-lib</code>的形式，将其打包成工具插件；代码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">define</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;process.env.NODE_ENV&quot;</span>: <span class=\"string\">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// css 拆分 压缩</span></span><br><span class=\"line\">\t\t<span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cssMinify</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">lib</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 组件的入口</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">A</span>: <span class=\"string\">&quot;./src/components/Test.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打包的格式</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">formats</span>: [<span class=\"string\">&quot;es&quot;</span>],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这个不需要有，需要将vue打包进去</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// external: [&quot;vue&quot;],</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">dir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">format</span>: <span class=\"string\">&quot;es&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打包完成之后执行<code>pnpm preview</code>，启动服务；</p>\n<p>在主应用中编写如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineAsyncComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// url:就是你需要加载的js文件，例如：http://localhost:4173/a.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">loadRemoteComponents</span>(<span class=\"params\"><span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, name = <span class=\"string\">&quot;default&quot;</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> code = <span class=\"keyword\">await</span> response.<span class=\"title function_\">text</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([code], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;text/javascript&quot;</span> &#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> blobUrl = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = <span class=\"keyword\">await</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* @vite-ignore */</span> blobUrl);</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(blobUrl);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> _component = <span class=\"variable language_\">module</span>[name];</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将组件，组件名，以及scopeId暴露出去</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">component</span>: <span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(_component)),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">componentName</span>: _component.<span class=\"property\">name</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">scopeId</span>: _component.<span class=\"property\">__scopeId</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;加载远程组件失败:&quot;</span>, error);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中引入<code>css</code>样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/svg+xml&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/vite.svg&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vite + Vue + TS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在这里添加，你远程的css地址 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://localhost:4173/a.css&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/src/main.ts&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建一个组件 <code>Remote_1.vue</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">const &#123; url &#125; = defineProps&lt;&#123;</span><br><span class=\"line\">\turl: string;</span><br><span class=\"line\">&#125;&gt;();</span><br><span class=\"line\">import &#123; loadRemoteComponents &#125; from &quot;./loadRemoteComponents&quot;;</span><br><span class=\"line\">const &#123; component, componentName, scopeId &#125; = await loadRemoteComponents(url);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;!-- scopeId: 必须要有，不然会导致样式丢失 --&gt;</span><br><span class=\"line\">\t&lt;component :is=&quot;component&quot; :key=&quot;componentName&quot; :[scopeId]=&quot;scopeId&quot; /&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>APP.vue</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import Remote_1 from &quot;./Remote_1.vue&quot;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;Suspense&gt;</span><br><span class=\"line\">\t\t\t&lt;Remote_1 /&gt;</span><br><span class=\"line\">\t\t\t&lt;template #fallback&gt;加载中&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;/Suspense&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样基本上就可以了，但是它也是有缺陷的：</p>\n<p><strong><p style=\"color: #ff0000;\">如果远程组件没有接住任何的 ui 库，插件库等等，那么就可以参考这个做法，但如果你的主应用使用了<code>element-plus</code>,远程组件也使用了<code>element-plus</code>,那么就不可以使用这个做法了，可以参考下一个做法</p></strong></p>\n<h3 id=\"借助插件-originjs-vite-plugin-federation\"><a href=\"#借助插件-originjs-vite-plugin-federation\" class=\"headerlink\" title=\"借助插件 @originjs&#x2F;vite-plugin-federation\"></a>借助插件 @originjs&#x2F;vite-plugin-federation</h3><p>这个插件相对于上一个做法的好处就是：模块共享；如果主应用和远程应用都使用了<code>element-plus</code>有单独的配置是可以使用的；</p>\n<p>首先主应用和远程应用都需要安装 <code>pnpm add -D @originjs/vite-plugin-federation</code>,配置如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 远程应用的vite.config.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> federation <span class=\"keyword\">from</span> <span class=\"string\">&quot;@originjs/vite-plugin-federation&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vite.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title function_\">federation</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;remote&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打包的应用文件，也是入口文件</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 导出的路径</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 自己写一个简单的按钮组件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;./re-button&quot;</span>: <span class=\"string\">&quot;./src/components/ReButton.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 共享的模块</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">shared</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>远程应用配置完成之后，打包完成之后执行<code>pnpm preview</code>,主应用会用到这个链接</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主应用的vite.config.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> federation <span class=\"keyword\">from</span> <span class=\"string\">&quot;@originjs/vite-plugin-federation&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vite.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">dts</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t\t<span class=\"title function_\">federation</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这个地址就是 你远程应用的入口文件地址</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">remote</span>: <span class=\"string\">&quot;http://localhost:4173/assets/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">shared</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;element-plus&quot;</span>],</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">target</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">minify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>App.vue</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; defineAsyncComponent &#125; from &quot;vue&quot;;</span><br><span class=\"line\">// @ts-ignore</span><br><span class=\"line\">const ReButton = defineAsyncComponent(() =&gt; import(&quot;remote/re-button&quot;));</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;加载远程组件&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;ReButton title=&quot;远程按钮&quot; /&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在主应用打包之后上传<code>nginx或者服务器</code>上可以正常运行的；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a565op8kn.webp\"></p>\n<h2 id=\"rsbuild-的配置\"><a href=\"#rsbuild-的配置\" class=\"headerlink\" title=\"rsbuild 的配置\"></a>rsbuild 的配置</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 远程应用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; pluginVue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">pluginVue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">source</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">&quot;./src/main.ts&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;remote&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">exposes</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;./Button&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">import</span>: <span class=\"string\">&quot;./src/components/Button.vue&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;Button&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;^3.3.0&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">3001</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cors</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">html</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;./index.html&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主应用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; pluginVue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@rsbuild/plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">pluginVue</span>()],</span><br><span class=\"line\">\t<span class=\"attr\">source</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">index</span>: <span class=\"string\">&quot;./src/main.ts&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;host&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">remote</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">external</span>: <span class=\"string\">&quot;remote@http://localhost:3001/remoteEntry.js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">format</span>: <span class=\"string\">&quot;esm&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">from</span>: <span class=\"string\">&quot;vite&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">requiredVersion</span>: <span class=\"string\">&quot;^3.3.0&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">html</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">template</span>: <span class=\"string\">&quot;./index.html&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> remoteComponent = <span class=\"title function_\">defineAsyncComponent</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">loader</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;remote/Button&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;*.vue&quot;</span>)&gt;,</span><br><span class=\"line\">\t<span class=\"title function_\">onError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;远程组件加载失败:&quot;</span>, error);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><del><strong><p style=\"color: #ff0000;\">只测试了没有引入任何插件，ui 的情况，其他情况暂时先不考虑</p></strong></del></p>\n<p>之前没有测试到<code>ui</code>组件，近期在我的项目中上线了测试案例，其使用了<code>element-plus</code>组件，打开之后其显示的是正常样式，并且点击是生效的，具体涉及的代码如下：<a href=\"https://github.com/wangxiaoze-view/sim-admin/blob/main/rsbuild.config.ts#L164C3-L183C5\">github</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">moduleFederation</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;sim_admin&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">remotes</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">remote</span>: process.<span class=\"property\">env</span>.<span class=\"property\">APP_REMOTE</span> <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">shared</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&#x27;3&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&#x27;element-plus&#x27;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">requiredVersion</span>: <span class=\"string\">&#x27;2&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">eager</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"技术调研-浅谈跨端技术的局限性","abbrlink":"a0a2e9c9","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n作为前端程序员， 如果给你一个 APP 让你去做， 你会怎么做呢？\n如不限于技术层次，优先想到的就是 Android 原生系统， 但是面对 Android 前端程序员无法上手以及去学习，单纯的想要从 Web 层次去想技术方案；\n无非就是市场上的几种方案，h5, uni-app, React-Nativ, Flutter; 单做过 H5 移动端混合开发的都清楚， H5 的页面或者纯 H5 开发 APP，也是可以开发的， 但是最后使用人数并不理想， 达不到一个原生流畅的效果；\n而 React-Native 对前端来说也许是一个优选的方案，使用效果以及框架基本上都是前端技术，熟悉 react 并且上手是很快的； 但如果功能较为复杂， React-Native 也会有一定的影响；但效果明显比 H5 流程的很多；\n\n对于 Flutter 来讲呢，技术层面在国内并不热门，也有不少大厂也会选择 Flutter 作为开发 App 的首选； 但是学习成本是比较高的，对前端程序员来讲，可能会有点陌生甚至不熟悉；作为 dart 语法的 flutter 在性能以及各个方面要比前面的框架要有优越性；\n\n## 混合开发的 WebView\n\n混合开发 APP 当然离不开 WebView, 使用 WebView 开发的成交较低，开发效率也会提升一个等级， 也就是前端人员不陌生的；\n\n对于跨端来讲，也许会用 WebView 的方式， 同时也是满足跨端的条件的；\n\n为什么不推荐使用 WebView?\n\n移动设备 APP 都是先下载后使用， 当你下载完成之后， 你页面资源以己经缓存了；而 webview 加载的是 web 页面， 也就会有 web 的特性， 打开 webview 之后，再去加载 web 资源 会在性能上有些影响；\n\n## uni-app/react-native\n\n这是大多数人的选择，毕竟刚开始我的想法 uni-app 也是首选， 但是在了解之后，在 List-view 方面可能会有性能问题，毕竟 uni-app 是以 html, js 的方式作为渲染的； 自然会有性能问题；\n\n像社区活动成都还是很高的， 毕竟是前端技术， 上手并不难，但如果想应用到设备中可能还是有点缺陷；但总体还是不错的选择， 如果没有其他技术方案替代的话， 可以考虑使用 uni-app；\n\nreact-native 的性能弥补了 uni-app 存在的缺陷；\n\n从本质上来讲，以 RN 为例，跟 webview 不同的地方就在于，webview 是使用 html 的 dom 描述，由浏览器进行相应的渲染，因为是单线程的原因，在渲染的同时会阻断 js 的执行，而 RN 则不同，它的方案是将 html 转换为 js 可以识别的 ast 代码，再由 native 基于 ast 代码进行绘制，由于 native 是可以进行多线程并行的，所以在渲染跟执行的过程中并不会被阻断，这也就变相的解决了一些使用 webview 进行跨端的难题\n\n但是这也相应有不少的缺陷\n\n1. 由于 js 跟 native 不是在同一个线程执行，那么相应的他们的通信会带来不少的损耗\n2. iOS/Android 他们的页面绘制方式不同，代表着要添加不同的组件来适应\n3. 依赖于 native，那么就表示他的 css 转义会变得更加困难，很多 css 也不一定能够完整的实现\n\n当然，最大的问题依旧在于维护上\n\n不依赖于 webview 代表着你的页面是不完全动态化的，至少你的组件是固定的，也就是在相同的页面使用情况下，如果想对组件进行修改，那么还是需要依赖于 native 提供新的组件能力，这样的话发版依旧会成为一个困扰的问题，而且维护的成本又进一步的上升的\n\n## Flutter\n\nflutter 是我最近在接触和学习的技术之一；\n\n因为接触时间较短，理解的并不是很深入；\n\n可以说 RN 类型的框架他还是拥抱了部分 web 的生态，却又不是完全的拥抱，但是 flutter 这个框架从出生就是不打算继续借着 web 来发展\n\n它本身是使用 skia 绘制到屏幕上的，也就是说，通过自建绘制能力，来保证多端的统一性，这样做的好处在于能够完全的减少双端差异的人力投入，也不需要使用 native 跟 js 进行 bridge 的交互从而得到对应的页面，讲到比较熟悉的一个古老方案就是 QT\n\n方案的思想跟实现都是比较适合跨端能力的体现，但是问题在于他不依赖于前端生态，那么前端人员入手的时候会带来一定的困扰，所以目前市面上多出了很多基于 flutter 设计的前端实现方案，类似于 kraken、liteApp 等等\n\n不可否认的是这种方案的思想是能最根本解决跨端带来的困扰，但是他的动态化能力偏弱，在部分领域依旧不是那么适用\n\n这篇文章可以更加清晰的理解 Flutter: 每个 Flutter [开发者都应该知道的框架总览](https://juejin.cn/post/7054817076073988127)\n\n对我而言， 选择 Flutter 的原因无非就是这个几点:\n\n1. 谷歌的 app 框架， 性能，流畅问题\n2. 新技术，除了前端跨端方案之外的一种特殊的方案；\n3. Flutter 的前景以及 Flutter 面向对象的开发方式；\n4. 间接的了解 Java, TypeScript 的语法；\n5. 好奇心，想深入了解这是什么，技术新奇\n","source":"_posts/总结/技术调研/浅谈跨端技术的局限性.md","raw":"---\ntitle: 技术调研-浅谈跨端技术的局限性\nabbrlink: a0a2e9c9\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n作为前端程序员， 如果给你一个 APP 让你去做， 你会怎么做呢？\n如不限于技术层次，优先想到的就是 Android 原生系统， 但是面对 Android 前端程序员无法上手以及去学习，单纯的想要从 Web 层次去想技术方案；\n无非就是市场上的几种方案，h5, uni-app, React-Nativ, Flutter; 单做过 H5 移动端混合开发的都清楚， H5 的页面或者纯 H5 开发 APP，也是可以开发的， 但是最后使用人数并不理想， 达不到一个原生流畅的效果；\n而 React-Native 对前端来说也许是一个优选的方案，使用效果以及框架基本上都是前端技术，熟悉 react 并且上手是很快的； 但如果功能较为复杂， React-Native 也会有一定的影响；但效果明显比 H5 流程的很多；\n\n对于 Flutter 来讲呢，技术层面在国内并不热门，也有不少大厂也会选择 Flutter 作为开发 App 的首选； 但是学习成本是比较高的，对前端程序员来讲，可能会有点陌生甚至不熟悉；作为 dart 语法的 flutter 在性能以及各个方面要比前面的框架要有优越性；\n\n## 混合开发的 WebView\n\n混合开发 APP 当然离不开 WebView, 使用 WebView 开发的成交较低，开发效率也会提升一个等级， 也就是前端人员不陌生的；\n\n对于跨端来讲，也许会用 WebView 的方式， 同时也是满足跨端的条件的；\n\n为什么不推荐使用 WebView?\n\n移动设备 APP 都是先下载后使用， 当你下载完成之后， 你页面资源以己经缓存了；而 webview 加载的是 web 页面， 也就会有 web 的特性， 打开 webview 之后，再去加载 web 资源 会在性能上有些影响；\n\n## uni-app/react-native\n\n这是大多数人的选择，毕竟刚开始我的想法 uni-app 也是首选， 但是在了解之后，在 List-view 方面可能会有性能问题，毕竟 uni-app 是以 html, js 的方式作为渲染的； 自然会有性能问题；\n\n像社区活动成都还是很高的， 毕竟是前端技术， 上手并不难，但如果想应用到设备中可能还是有点缺陷；但总体还是不错的选择， 如果没有其他技术方案替代的话， 可以考虑使用 uni-app；\n\nreact-native 的性能弥补了 uni-app 存在的缺陷；\n\n从本质上来讲，以 RN 为例，跟 webview 不同的地方就在于，webview 是使用 html 的 dom 描述，由浏览器进行相应的渲染，因为是单线程的原因，在渲染的同时会阻断 js 的执行，而 RN 则不同，它的方案是将 html 转换为 js 可以识别的 ast 代码，再由 native 基于 ast 代码进行绘制，由于 native 是可以进行多线程并行的，所以在渲染跟执行的过程中并不会被阻断，这也就变相的解决了一些使用 webview 进行跨端的难题\n\n但是这也相应有不少的缺陷\n\n1. 由于 js 跟 native 不是在同一个线程执行，那么相应的他们的通信会带来不少的损耗\n2. iOS/Android 他们的页面绘制方式不同，代表着要添加不同的组件来适应\n3. 依赖于 native，那么就表示他的 css 转义会变得更加困难，很多 css 也不一定能够完整的实现\n\n当然，最大的问题依旧在于维护上\n\n不依赖于 webview 代表着你的页面是不完全动态化的，至少你的组件是固定的，也就是在相同的页面使用情况下，如果想对组件进行修改，那么还是需要依赖于 native 提供新的组件能力，这样的话发版依旧会成为一个困扰的问题，而且维护的成本又进一步的上升的\n\n## Flutter\n\nflutter 是我最近在接触和学习的技术之一；\n\n因为接触时间较短，理解的并不是很深入；\n\n可以说 RN 类型的框架他还是拥抱了部分 web 的生态，却又不是完全的拥抱，但是 flutter 这个框架从出生就是不打算继续借着 web 来发展\n\n它本身是使用 skia 绘制到屏幕上的，也就是说，通过自建绘制能力，来保证多端的统一性，这样做的好处在于能够完全的减少双端差异的人力投入，也不需要使用 native 跟 js 进行 bridge 的交互从而得到对应的页面，讲到比较熟悉的一个古老方案就是 QT\n\n方案的思想跟实现都是比较适合跨端能力的体现，但是问题在于他不依赖于前端生态，那么前端人员入手的时候会带来一定的困扰，所以目前市面上多出了很多基于 flutter 设计的前端实现方案，类似于 kraken、liteApp 等等\n\n不可否认的是这种方案的思想是能最根本解决跨端带来的困扰，但是他的动态化能力偏弱，在部分领域依旧不是那么适用\n\n这篇文章可以更加清晰的理解 Flutter: 每个 Flutter [开发者都应该知道的框架总览](https://juejin.cn/post/7054817076073988127)\n\n对我而言， 选择 Flutter 的原因无非就是这个几点:\n\n1. 谷歌的 app 框架， 性能，流畅问题\n2. 新技术，除了前端跨端方案之外的一种特殊的方案；\n3. Flutter 的前景以及 Flutter 面向对象的开发方式；\n4. 间接的了解 Java, TypeScript 的语法；\n5. 好奇心，想深入了解这是什么，技术新奇\n","slug":"总结/技术调研/浅谈跨端技术的局限性","published":1,"updated":"2025-03-12T09:53:34.461Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0it000tfg9m4lhtcohg","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>作为前端程序员， 如果给你一个 APP 让你去做， 你会怎么做呢？<br>如不限于技术层次，优先想到的就是 Android 原生系统， 但是面对 Android 前端程序员无法上手以及去学习，单纯的想要从 Web 层次去想技术方案；<br>无非就是市场上的几种方案，h5, uni-app, React-Nativ, Flutter; 单做过 H5 移动端混合开发的都清楚， H5 的页面或者纯 H5 开发 APP，也是可以开发的， 但是最后使用人数并不理想， 达不到一个原生流畅的效果；<br>而 React-Native 对前端来说也许是一个优选的方案，使用效果以及框架基本上都是前端技术，熟悉 react 并且上手是很快的； 但如果功能较为复杂， React-Native 也会有一定的影响；但效果明显比 H5 流程的很多；</p>\n<p>对于 Flutter 来讲呢，技术层面在国内并不热门，也有不少大厂也会选择 Flutter 作为开发 App 的首选； 但是学习成本是比较高的，对前端程序员来讲，可能会有点陌生甚至不熟悉；作为 dart 语法的 flutter 在性能以及各个方面要比前面的框架要有优越性；</p>\n<h2 id=\"混合开发的-WebView\"><a href=\"#混合开发的-WebView\" class=\"headerlink\" title=\"混合开发的 WebView\"></a>混合开发的 WebView</h2><p>混合开发 APP 当然离不开 WebView, 使用 WebView 开发的成交较低，开发效率也会提升一个等级， 也就是前端人员不陌生的；</p>\n<p>对于跨端来讲，也许会用 WebView 的方式， 同时也是满足跨端的条件的；</p>\n<p>为什么不推荐使用 WebView?</p>\n<p>移动设备 APP 都是先下载后使用， 当你下载完成之后， 你页面资源以己经缓存了；而 webview 加载的是 web 页面， 也就会有 web 的特性， 打开 webview 之后，再去加载 web 资源 会在性能上有些影响；</p>\n<h2 id=\"uni-app-react-native\"><a href=\"#uni-app-react-native\" class=\"headerlink\" title=\"uni-app&#x2F;react-native\"></a>uni-app&#x2F;react-native</h2><p>这是大多数人的选择，毕竟刚开始我的想法 uni-app 也是首选， 但是在了解之后，在 List-view 方面可能会有性能问题，毕竟 uni-app 是以 html, js 的方式作为渲染的； 自然会有性能问题；</p>\n<p>像社区活动成都还是很高的， 毕竟是前端技术， 上手并不难，但如果想应用到设备中可能还是有点缺陷；但总体还是不错的选择， 如果没有其他技术方案替代的话， 可以考虑使用 uni-app；</p>\n<p>react-native 的性能弥补了 uni-app 存在的缺陷；</p>\n<p>从本质上来讲，以 RN 为例，跟 webview 不同的地方就在于，webview 是使用 html 的 dom 描述，由浏览器进行相应的渲染，因为是单线程的原因，在渲染的同时会阻断 js 的执行，而 RN 则不同，它的方案是将 html 转换为 js 可以识别的 ast 代码，再由 native 基于 ast 代码进行绘制，由于 native 是可以进行多线程并行的，所以在渲染跟执行的过程中并不会被阻断，这也就变相的解决了一些使用 webview 进行跨端的难题</p>\n<p>但是这也相应有不少的缺陷</p>\n<ol>\n<li>由于 js 跟 native 不是在同一个线程执行，那么相应的他们的通信会带来不少的损耗</li>\n<li>iOS&#x2F;Android 他们的页面绘制方式不同，代表着要添加不同的组件来适应</li>\n<li>依赖于 native，那么就表示他的 css 转义会变得更加困难，很多 css 也不一定能够完整的实现</li>\n</ol>\n<p>当然，最大的问题依旧在于维护上</p>\n<p>不依赖于 webview 代表着你的页面是不完全动态化的，至少你的组件是固定的，也就是在相同的页面使用情况下，如果想对组件进行修改，那么还是需要依赖于 native 提供新的组件能力，这样的话发版依旧会成为一个困扰的问题，而且维护的成本又进一步的上升的</p>\n<h2 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h2><p>flutter 是我最近在接触和学习的技术之一；</p>\n<p>因为接触时间较短，理解的并不是很深入；</p>\n<p>可以说 RN 类型的框架他还是拥抱了部分 web 的生态，却又不是完全的拥抱，但是 flutter 这个框架从出生就是不打算继续借着 web 来发展</p>\n<p>它本身是使用 skia 绘制到屏幕上的，也就是说，通过自建绘制能力，来保证多端的统一性，这样做的好处在于能够完全的减少双端差异的人力投入，也不需要使用 native 跟 js 进行 bridge 的交互从而得到对应的页面，讲到比较熟悉的一个古老方案就是 QT</p>\n<p>方案的思想跟实现都是比较适合跨端能力的体现，但是问题在于他不依赖于前端生态，那么前端人员入手的时候会带来一定的困扰，所以目前市面上多出了很多基于 flutter 设计的前端实现方案，类似于 kraken、liteApp 等等</p>\n<p>不可否认的是这种方案的思想是能最根本解决跨端带来的困扰，但是他的动态化能力偏弱，在部分领域依旧不是那么适用</p>\n<p>这篇文章可以更加清晰的理解 Flutter: 每个 Flutter <a href=\"https://juejin.cn/post/7054817076073988127\">开发者都应该知道的框架总览</a></p>\n<p>对我而言， 选择 Flutter 的原因无非就是这个几点:</p>\n<ol>\n<li>谷歌的 app 框架， 性能，流畅问题</li>\n<li>新技术，除了前端跨端方案之外的一种特殊的方案；</li>\n<li>Flutter 的前景以及 Flutter 面向对象的开发方式；</li>\n<li>间接的了解 Java, TypeScript 的语法；</li>\n<li>好奇心，想深入了解这是什么，技术新奇</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>作为前端程序员， 如果给你一个 APP 让你去做， 你会怎么做呢？<br>如不限于技术层次，优先想到的就是 Android 原生系统， 但是面对 Android 前端程序员无法上手以及去学习，单纯的想要从 Web 层次去想技术方案；<br>无非就是市场上的几种方案，h5, uni-app, React-Nativ, Flutter; 单做过 H5 移动端混合开发的都清楚， H5 的页面或者纯 H5 开发 APP，也是可以开发的， 但是最后使用人数并不理想， 达不到一个原生流畅的效果；<br>而 React-Native 对前端来说也许是一个优选的方案，使用效果以及框架基本上都是前端技术，熟悉 react 并且上手是很快的； 但如果功能较为复杂， React-Native 也会有一定的影响；但效果明显比 H5 流程的很多；</p>\n<p>对于 Flutter 来讲呢，技术层面在国内并不热门，也有不少大厂也会选择 Flutter 作为开发 App 的首选； 但是学习成本是比较高的，对前端程序员来讲，可能会有点陌生甚至不熟悉；作为 dart 语法的 flutter 在性能以及各个方面要比前面的框架要有优越性；</p>\n<h2 id=\"混合开发的-WebView\"><a href=\"#混合开发的-WebView\" class=\"headerlink\" title=\"混合开发的 WebView\"></a>混合开发的 WebView</h2><p>混合开发 APP 当然离不开 WebView, 使用 WebView 开发的成交较低，开发效率也会提升一个等级， 也就是前端人员不陌生的；</p>\n<p>对于跨端来讲，也许会用 WebView 的方式， 同时也是满足跨端的条件的；</p>\n<p>为什么不推荐使用 WebView?</p>\n<p>移动设备 APP 都是先下载后使用， 当你下载完成之后， 你页面资源以己经缓存了；而 webview 加载的是 web 页面， 也就会有 web 的特性， 打开 webview 之后，再去加载 web 资源 会在性能上有些影响；</p>\n<h2 id=\"uni-app-react-native\"><a href=\"#uni-app-react-native\" class=\"headerlink\" title=\"uni-app&#x2F;react-native\"></a>uni-app&#x2F;react-native</h2><p>这是大多数人的选择，毕竟刚开始我的想法 uni-app 也是首选， 但是在了解之后，在 List-view 方面可能会有性能问题，毕竟 uni-app 是以 html, js 的方式作为渲染的； 自然会有性能问题；</p>\n<p>像社区活动成都还是很高的， 毕竟是前端技术， 上手并不难，但如果想应用到设备中可能还是有点缺陷；但总体还是不错的选择， 如果没有其他技术方案替代的话， 可以考虑使用 uni-app；</p>\n<p>react-native 的性能弥补了 uni-app 存在的缺陷；</p>\n<p>从本质上来讲，以 RN 为例，跟 webview 不同的地方就在于，webview 是使用 html 的 dom 描述，由浏览器进行相应的渲染，因为是单线程的原因，在渲染的同时会阻断 js 的执行，而 RN 则不同，它的方案是将 html 转换为 js 可以识别的 ast 代码，再由 native 基于 ast 代码进行绘制，由于 native 是可以进行多线程并行的，所以在渲染跟执行的过程中并不会被阻断，这也就变相的解决了一些使用 webview 进行跨端的难题</p>\n<p>但是这也相应有不少的缺陷</p>\n<ol>\n<li>由于 js 跟 native 不是在同一个线程执行，那么相应的他们的通信会带来不少的损耗</li>\n<li>iOS&#x2F;Android 他们的页面绘制方式不同，代表着要添加不同的组件来适应</li>\n<li>依赖于 native，那么就表示他的 css 转义会变得更加困难，很多 css 也不一定能够完整的实现</li>\n</ol>\n<p>当然，最大的问题依旧在于维护上</p>\n<p>不依赖于 webview 代表着你的页面是不完全动态化的，至少你的组件是固定的，也就是在相同的页面使用情况下，如果想对组件进行修改，那么还是需要依赖于 native 提供新的组件能力，这样的话发版依旧会成为一个困扰的问题，而且维护的成本又进一步的上升的</p>\n<h2 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h2><p>flutter 是我最近在接触和学习的技术之一；</p>\n<p>因为接触时间较短，理解的并不是很深入；</p>\n<p>可以说 RN 类型的框架他还是拥抱了部分 web 的生态，却又不是完全的拥抱，但是 flutter 这个框架从出生就是不打算继续借着 web 来发展</p>\n<p>它本身是使用 skia 绘制到屏幕上的，也就是说，通过自建绘制能力，来保证多端的统一性，这样做的好处在于能够完全的减少双端差异的人力投入，也不需要使用 native 跟 js 进行 bridge 的交互从而得到对应的页面，讲到比较熟悉的一个古老方案就是 QT</p>\n<p>方案的思想跟实现都是比较适合跨端能力的体现，但是问题在于他不依赖于前端生态，那么前端人员入手的时候会带来一定的困扰，所以目前市面上多出了很多基于 flutter 设计的前端实现方案，类似于 kraken、liteApp 等等</p>\n<p>不可否认的是这种方案的思想是能最根本解决跨端带来的困扰，但是他的动态化能力偏弱，在部分领域依旧不是那么适用</p>\n<p>这篇文章可以更加清晰的理解 Flutter: 每个 Flutter <a href=\"https://juejin.cn/post/7054817076073988127\">开发者都应该知道的框架总览</a></p>\n<p>对我而言， 选择 Flutter 的原因无非就是这个几点:</p>\n<ol>\n<li>谷歌的 app 框架， 性能，流畅问题</li>\n<li>新技术，除了前端跨端方案之外的一种特殊的方案；</li>\n<li>Flutter 的前景以及 Flutter 面向对象的开发方式；</li>\n<li>间接的了解 Java, TypeScript 的语法；</li>\n<li>好奇心，想深入了解这是什么，技术新奇</li>\n</ol>\n"},{"title":"技术调研-网站更新一","abbrlink":"c6bacc84","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n对于前端部署如何进行项目部署这里就不详细介绍了，这里主要介绍如何进行前端部署通知用户更新网站。\n\n之前开发的网站, 每次都是让用户手动进行刷新网页打到网站更新的目的,但是这里有一个弊端,就是用户每次都需要手动,对我来讲,我比较懒,能自动的绝不手动刷新;\n\n## 简单介绍\n\n### 场景 1\n\n开发完一个功能, 提交到 github 上, 然后通过`jenkins`去部署发布, 之后你会发现页面还是之前的页面,因为你没有刷新网站,所以需要手动刷新一下网站。对于用户来讲能不能自动更新呢?\n\n### 场景 2\n\n用户在填写表单的时候,你项目网站更新了,需要一个提示,可以立即更新也可以忽略稍后更新, 这样就可以告知用户网站更新了那些功能? 更新的内容会不会影响你正在操作的功能?\n\n### 场景 3\n\n如果没有提示框,直接刷新页面导致用户正在操作的数据丢失, 这样的损失还是比较大的;\n\n于是我今天研究了一下这个网站更新的方案, 然后通过本地`nginx`模拟服务器去尝试了一下;\n\n## 实现的方案\n\n文章使用的是`vite5 + vue3 + ts`的一个本地项目;\n\n1. 使用第三方插件[vite-plugin-pwa](https://vite-pwa-org.netlify.app/), 具体的做法可以参考官网\n2. 手动是实现`manifest.json` + 循环`web worker`实现, 就是打包的时候创建一个`manifest.json` 然后将打包时间`Date.now()`写入文件, 之后在根据里面的时间去做对应的逻辑\n3. 在`vite.config.ts`中使用`build`, 开启`manifest`,这样每次打包都会在`dist/.vite`中生成一个新的文件, 这个文件就是`manifest.json`\n\n这里我们具体讲`vite.config.js` + `web worker`实现思路:\n\n### 配置 vite.config.ts\n\n`vite.config.ts`如何配置呢? [vite 后端集成](https://cn.vitejs.dev/guide/backend-integration)\n\n```ts\nexport default defineConfig(() => {\n\treturn {\n\t\tplugins: [vue(), eslintPlugin()],\n\t\t// 添加下面的build\n\t\tbuild: {\n\t\t\tmanifest: true,\n\t\t\tcssCodeSplit: false,\n\t\t},\n\t};\n});\n```\n\n然后你可以通过`npm run build`命令打包项目,等待项目打包成功之后, 项目根目录生成`dist`目录, 大概的结构为:\n\n```shell\n.vite\nassets\nindex.html\nvite.svg\n```\n\n`.vite`目录就是我们打包的`manifest.json`文件, 这个文件就是我们后面需要读取的; `manifest.json`中`file`就是`index.html`中引入`js,css`的地址;\n`index.html`中引入`js,css`的地址为:\n\n```html\n<!-- 大概这样的格式 -->\n<script type=\"module\" src=\"/assets/index.c0d0d0e9.js\"></script>\n<link rel=\"modulepreload\" href=\"/assets/index.c0d0d0e9.css\" />\n```\n\n这里`manifest.json`文件可以理解为离线缓存文件, 就是吧所有的资源都缓存起来;\n\n### 实现思路一\n\n想要做到网站更新, 这里要获取`manifest.json`文件,不过现在文件是在`dist/.vite`中, 想要直接读取那就要修改打包命令\n\n```json\n\"scripts\": {\n  \"build\": \"vite build && node src/copyManifest.js\",\n}\n```\n\n`copyManifest.js`的文件为就是复制一份`manifest.json`到`dist`目录下\n\n```js\nimport { copyFileSync } from \"fs\";\ntry {\n\tcopyFileSync(\"dist/.vite/manifest.json\", \"dist/manifest.json\");\n} catch (e) {\n\tconsole.log(e);\n\tprocess.exit(1);\n}\n```\n\n然后在`main.js`中引入一个文件,这个文件就是你更新网站的核心逻辑了;\n\n大致的思路就是:\n\n1. `fetch('/manifest.json')` 拿到最新的数据和上一次的数据去做比较或者结合`发布订阅模式`\n2. 循环获取, 因为网站不定时会更新,所以需要循环; 发现文件地址不一致直接弹框提示;\n3. `manifest.json`你也可以手动创建, 那就需要吧`vite.config.ts`中`manifest`关闭, 打包的时候创建一个文件`manifest.json`内容为`{time: 'xxxx', content: '更新内容'}`; 同样的循环操作去对比时间;\n\n不过这样是比较麻烦的, 所以我们使用另外一种`web worker`来实现;\n\n### 实现思路二 <Badge text=\"推荐使用\" type=\"error\"/>\n\n首先需要创建俩个文件`checkUpdate.ts`和`checkUpdate.worker.ts`, 一个是入口文件, 另一个是`web worker`循环检测机制;\n\n```ts\n// checkUpdate.ts:\nimport { ElMessageBox } from \"element-plus\";\n// ./checkUpdate.worker?worker这是vite的写法. 如果使用webpack 是需要下载对应的插件识别的\nimport CheckWorker from \"./checkUpdate.worker?worker\";\n\n// 判断是否是开发环境, 如果是开发环境就不需要检测更新\nif (import.meta.env.MODE !== \"development\") {\n\tconst worker = new CheckWorker();\n\n\t// 更新弹框\n\tasync function judgeUpdate(lastEtag: string) {\n\t\tElMessageBox.confirm(\"检测到网站有新内容, 是否需要更新?\", \"更新提示\", {\n\t\t\tconfirmButtonText: \"立即更新\",\n\t\t\tcancelButtonText: \"10s之后再通知我\",\n\t\t\ttype: \"warning\",\n\t\t})\n\t\t\t.then(async () => {\n\t\t\t\t// 更新操作\n\t\t\t\tworker.postMessage({\n\t\t\t\t\ttype: \"close\",\n\t\t\t\t\ttip: \"关闭\",\n\t\t\t\t\tlastEtag,\n\t\t\t\t});\n\t\t\t\tlocation.reload();\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\t// 稍后更新操作\n\t\t\t\t// 告知子线程稍后更新\n\t\t\t\tworker.postMessage({\n\t\t\t\t\ttype: \"recheck\",\n\t\t\t\t\ttip: \"10s之后再通知我\",\n\t\t\t\t\tlastEtag,\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t// 首次进入页面检测是否需要更新\n\tworker.postMessage({\n\t\ttype: \"check\",\n\t\ttip: \"检测是否更新\",\n\t});\n\n\t// 接收到worker更新的消息, 那就进行弹框提示\n\tworker.onmessage = ({ data }) => {\n\t\t// 主线程接收到要更新的通知,那就弹框提示\n\t\tif (data.type === \"hasUpdate\") {\n\t\t\tjudgeUpdate(data.lastEtag);\n\t\t}\n\t};\n}\n```\n\n```ts\n// checkUpdate.worker.ts:\nlet lastEtag: string | null | undefined = undefined;\nlet hasUpdate = false;\n\nlet intervalId: number | null | undefined = null;\nasync function checkUpdate() {\n\t// 这里可以读取`manifest.json`, 我在这里直接读取网站的页面\n\tconst res = await fetch(`${self.location.protocol}//${self.location.host}`, {\n\t\tmethod: \"HEAD\",\n\t\tcache: \"no-cache\",\n\t});\n\n\t// 这一行就是如何判断是否有更新\n\tconst etag = res.headers.get(\"etag\") || res.headers.get(\"last-modified\");\n\thasUpdate = lastEtag !== undefined && etag !== lastEtag;\n\n\tif (hasUpdate) {\n\t\t// 向主线程发送消息, 告诉他网站需要更新了;\n\t\tself.postMessage({\n\t\t\ttype: \"hasUpdate\",\n\t\t\ttip: \"需要更新\",\n\t\t\tlastEtag,\n\t\t});\n\t}\n\tlastEtag = etag;\n}\n\n// 监听worker发送的消息\nself.addEventListener(\"message\", ({ data }) => {\n\t// 检测更新\n\tif (data.type === \"check\") {\n\t\tcheckUpdate();\n\t\tintervalId && clearInterval(intervalId);\n\t\tintervalId = setInterval(checkUpdate, 10 * 1000);\n\t} else if (data.type === \"recheck\") {\n\t\t// 稍后通知\n\t\thasUpdate = false;\n\t\tlastEtag = data.lastEtag;\n\t\tintervalId && clearInterval(intervalId);\n\t\tintervalId = setInterval(checkUpdate, 10 * 1000);\n\t} else if (data.type === \"close\") {\n\t\t// 关闭\n\t\tintervalId && clearInterval(intervalId);\n\t\tclose();\n\t}\n});\n```\n\n![流程](https://wangxiaoze-view.github.io/picx-images-hosting/images/update-2024-04-15-0952.png)\n\n然后在`main.ts`中引入`import './checkUpdate'`; 基本上就可以了;\n\n然后重新打包, 讲打包出来的文件放在本地服务器上;\n\n然后打开页面: 等待时间就会有提示了:\n\n## 知识补充\n\n::: tip\n使用 Web Worker 来实现网站更新，尤其是处理与页面渲染无关但可能耗时的操作，如数据解析、复杂计算、大文件处理等，可以带来以下好处：\n:::\n\n### 好处\n\n1. 防止主线程阻塞：\n   - Web Worker 在单独的后台线程中运行，与 UI 渲染线程互不干扰。这意味着即使在处理复杂的更新逻辑时，用户仍能流畅地与页面交互，避免了因长时间计算导致的页面冻结或卡顿现象，显著提升了用户体验。\n2. 提升响应速度:\n   - 对于涉及大量数据处理或计算密集型的更新任务，Web Worker 能够并行处理这些工作，使得更新过程更快完成，使得用户能更早看到更新后的结果。\n3. 分离任务，优化代码结构：\n   - 使用 Web Worker 可以将复杂的更新逻辑封装到独立的脚本中，与主线程的 UI 逻辑清晰分离。这有助于代码组织，提高可维护性，并允许开发者专注于各自线程的任务，遵循“关注点分离”原则\n4. 异步处理：\n   - Web Worker 通过消息传递机制`（postMessage() 和 onmessage）`与主线程通信，实现了真正的异步操作。这使得更新任务可以在不影响主线程的情况下异步进行，符合现代 Web 应用的非阻塞、事件驱动编程模式。\n5. 资源加载与预处理：\n   - 如果网站更新涉及到资源的加载或预处理（如压缩、解密等），Web Worker 可以在后台线程提前完成这些工作，待准备好后再通知主线程，避免了资源加载对主线程的直接压力。\n\n### 弊端\n\n1. 兼容性问题：\n\n   - 虽然 Web Worker 是 HTML5 标准的一部分，但在较老的浏览器或某些非标准环境中可能存在兼容性问题。开发者需要进行兼容性检测和降级处理，或者为不支持 Web Worker 的环境提供备用方案。\n\n2. 额外的内存消耗：\n   - 启动 Web Worker 意味着创建一个新的线程，会增加浏览器的内存开销。对于资源受限的设备（如低端移动设备），过多或不当使用的 Web Worker 可能导致内存溢出或其他性能问题。\n3. 通信成本：\n   - 主线程与 Web Worker 之间的通信需通过序列化和反序列化数据，这会带来一定的性能开销。如果更新过程中频繁进行大量数据交换，可能会抵消部分多线程带来的优势。\n4. 限制访问某些对象与 API：\n   - Web Worker 环境中无法直接访问`window、document等与DOM`相关的全局对象，也无法直接操作 DOM。对于依赖这些功能的更新逻辑，需要通过消息传递将相关操作委托给主线程执行。\n5. 调试复杂性：\n   - 由于 Web Worker 运行在独立线程中，调试起来可能比主线程代码更为复杂。开发者需要使用专门的工具或技巧来监控和调试 Worker 中的代码。\n\n**总结来说，使用 Web Worker 实现网站更新有利于提升用户体验、优化性能和代码结构，但同时也需要注意其可能带来的兼容性问题、额外资源消耗、通信成本、API 访问限制及调试复杂性。在实际应用中，应根据具体场景权衡利弊，合理利用 Web Worker 以实现高效、流畅的网站更新流程。**\n\n## 视频效果预览\n\n<video controls style=\"width:100%;height:500px;object-fit:fill;\">\n  <source src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/web_update.mp4\" type=\"video/mp4\" />\n</video>\n","source":"_posts/总结/技术调研/网站更新一.md","raw":"---\ntitle: 技术调研-网站更新一\nabbrlink: c6bacc84\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n对于前端部署如何进行项目部署这里就不详细介绍了，这里主要介绍如何进行前端部署通知用户更新网站。\n\n之前开发的网站, 每次都是让用户手动进行刷新网页打到网站更新的目的,但是这里有一个弊端,就是用户每次都需要手动,对我来讲,我比较懒,能自动的绝不手动刷新;\n\n## 简单介绍\n\n### 场景 1\n\n开发完一个功能, 提交到 github 上, 然后通过`jenkins`去部署发布, 之后你会发现页面还是之前的页面,因为你没有刷新网站,所以需要手动刷新一下网站。对于用户来讲能不能自动更新呢?\n\n### 场景 2\n\n用户在填写表单的时候,你项目网站更新了,需要一个提示,可以立即更新也可以忽略稍后更新, 这样就可以告知用户网站更新了那些功能? 更新的内容会不会影响你正在操作的功能?\n\n### 场景 3\n\n如果没有提示框,直接刷新页面导致用户正在操作的数据丢失, 这样的损失还是比较大的;\n\n于是我今天研究了一下这个网站更新的方案, 然后通过本地`nginx`模拟服务器去尝试了一下;\n\n## 实现的方案\n\n文章使用的是`vite5 + vue3 + ts`的一个本地项目;\n\n1. 使用第三方插件[vite-plugin-pwa](https://vite-pwa-org.netlify.app/), 具体的做法可以参考官网\n2. 手动是实现`manifest.json` + 循环`web worker`实现, 就是打包的时候创建一个`manifest.json` 然后将打包时间`Date.now()`写入文件, 之后在根据里面的时间去做对应的逻辑\n3. 在`vite.config.ts`中使用`build`, 开启`manifest`,这样每次打包都会在`dist/.vite`中生成一个新的文件, 这个文件就是`manifest.json`\n\n这里我们具体讲`vite.config.js` + `web worker`实现思路:\n\n### 配置 vite.config.ts\n\n`vite.config.ts`如何配置呢? [vite 后端集成](https://cn.vitejs.dev/guide/backend-integration)\n\n```ts\nexport default defineConfig(() => {\n\treturn {\n\t\tplugins: [vue(), eslintPlugin()],\n\t\t// 添加下面的build\n\t\tbuild: {\n\t\t\tmanifest: true,\n\t\t\tcssCodeSplit: false,\n\t\t},\n\t};\n});\n```\n\n然后你可以通过`npm run build`命令打包项目,等待项目打包成功之后, 项目根目录生成`dist`目录, 大概的结构为:\n\n```shell\n.vite\nassets\nindex.html\nvite.svg\n```\n\n`.vite`目录就是我们打包的`manifest.json`文件, 这个文件就是我们后面需要读取的; `manifest.json`中`file`就是`index.html`中引入`js,css`的地址;\n`index.html`中引入`js,css`的地址为:\n\n```html\n<!-- 大概这样的格式 -->\n<script type=\"module\" src=\"/assets/index.c0d0d0e9.js\"></script>\n<link rel=\"modulepreload\" href=\"/assets/index.c0d0d0e9.css\" />\n```\n\n这里`manifest.json`文件可以理解为离线缓存文件, 就是吧所有的资源都缓存起来;\n\n### 实现思路一\n\n想要做到网站更新, 这里要获取`manifest.json`文件,不过现在文件是在`dist/.vite`中, 想要直接读取那就要修改打包命令\n\n```json\n\"scripts\": {\n  \"build\": \"vite build && node src/copyManifest.js\",\n}\n```\n\n`copyManifest.js`的文件为就是复制一份`manifest.json`到`dist`目录下\n\n```js\nimport { copyFileSync } from \"fs\";\ntry {\n\tcopyFileSync(\"dist/.vite/manifest.json\", \"dist/manifest.json\");\n} catch (e) {\n\tconsole.log(e);\n\tprocess.exit(1);\n}\n```\n\n然后在`main.js`中引入一个文件,这个文件就是你更新网站的核心逻辑了;\n\n大致的思路就是:\n\n1. `fetch('/manifest.json')` 拿到最新的数据和上一次的数据去做比较或者结合`发布订阅模式`\n2. 循环获取, 因为网站不定时会更新,所以需要循环; 发现文件地址不一致直接弹框提示;\n3. `manifest.json`你也可以手动创建, 那就需要吧`vite.config.ts`中`manifest`关闭, 打包的时候创建一个文件`manifest.json`内容为`{time: 'xxxx', content: '更新内容'}`; 同样的循环操作去对比时间;\n\n不过这样是比较麻烦的, 所以我们使用另外一种`web worker`来实现;\n\n### 实现思路二 <Badge text=\"推荐使用\" type=\"error\"/>\n\n首先需要创建俩个文件`checkUpdate.ts`和`checkUpdate.worker.ts`, 一个是入口文件, 另一个是`web worker`循环检测机制;\n\n```ts\n// checkUpdate.ts:\nimport { ElMessageBox } from \"element-plus\";\n// ./checkUpdate.worker?worker这是vite的写法. 如果使用webpack 是需要下载对应的插件识别的\nimport CheckWorker from \"./checkUpdate.worker?worker\";\n\n// 判断是否是开发环境, 如果是开发环境就不需要检测更新\nif (import.meta.env.MODE !== \"development\") {\n\tconst worker = new CheckWorker();\n\n\t// 更新弹框\n\tasync function judgeUpdate(lastEtag: string) {\n\t\tElMessageBox.confirm(\"检测到网站有新内容, 是否需要更新?\", \"更新提示\", {\n\t\t\tconfirmButtonText: \"立即更新\",\n\t\t\tcancelButtonText: \"10s之后再通知我\",\n\t\t\ttype: \"warning\",\n\t\t})\n\t\t\t.then(async () => {\n\t\t\t\t// 更新操作\n\t\t\t\tworker.postMessage({\n\t\t\t\t\ttype: \"close\",\n\t\t\t\t\ttip: \"关闭\",\n\t\t\t\t\tlastEtag,\n\t\t\t\t});\n\t\t\t\tlocation.reload();\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\t// 稍后更新操作\n\t\t\t\t// 告知子线程稍后更新\n\t\t\t\tworker.postMessage({\n\t\t\t\t\ttype: \"recheck\",\n\t\t\t\t\ttip: \"10s之后再通知我\",\n\t\t\t\t\tlastEtag,\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t// 首次进入页面检测是否需要更新\n\tworker.postMessage({\n\t\ttype: \"check\",\n\t\ttip: \"检测是否更新\",\n\t});\n\n\t// 接收到worker更新的消息, 那就进行弹框提示\n\tworker.onmessage = ({ data }) => {\n\t\t// 主线程接收到要更新的通知,那就弹框提示\n\t\tif (data.type === \"hasUpdate\") {\n\t\t\tjudgeUpdate(data.lastEtag);\n\t\t}\n\t};\n}\n```\n\n```ts\n// checkUpdate.worker.ts:\nlet lastEtag: string | null | undefined = undefined;\nlet hasUpdate = false;\n\nlet intervalId: number | null | undefined = null;\nasync function checkUpdate() {\n\t// 这里可以读取`manifest.json`, 我在这里直接读取网站的页面\n\tconst res = await fetch(`${self.location.protocol}//${self.location.host}`, {\n\t\tmethod: \"HEAD\",\n\t\tcache: \"no-cache\",\n\t});\n\n\t// 这一行就是如何判断是否有更新\n\tconst etag = res.headers.get(\"etag\") || res.headers.get(\"last-modified\");\n\thasUpdate = lastEtag !== undefined && etag !== lastEtag;\n\n\tif (hasUpdate) {\n\t\t// 向主线程发送消息, 告诉他网站需要更新了;\n\t\tself.postMessage({\n\t\t\ttype: \"hasUpdate\",\n\t\t\ttip: \"需要更新\",\n\t\t\tlastEtag,\n\t\t});\n\t}\n\tlastEtag = etag;\n}\n\n// 监听worker发送的消息\nself.addEventListener(\"message\", ({ data }) => {\n\t// 检测更新\n\tif (data.type === \"check\") {\n\t\tcheckUpdate();\n\t\tintervalId && clearInterval(intervalId);\n\t\tintervalId = setInterval(checkUpdate, 10 * 1000);\n\t} else if (data.type === \"recheck\") {\n\t\t// 稍后通知\n\t\thasUpdate = false;\n\t\tlastEtag = data.lastEtag;\n\t\tintervalId && clearInterval(intervalId);\n\t\tintervalId = setInterval(checkUpdate, 10 * 1000);\n\t} else if (data.type === \"close\") {\n\t\t// 关闭\n\t\tintervalId && clearInterval(intervalId);\n\t\tclose();\n\t}\n});\n```\n\n![流程](https://wangxiaoze-view.github.io/picx-images-hosting/images/update-2024-04-15-0952.png)\n\n然后在`main.ts`中引入`import './checkUpdate'`; 基本上就可以了;\n\n然后重新打包, 讲打包出来的文件放在本地服务器上;\n\n然后打开页面: 等待时间就会有提示了:\n\n## 知识补充\n\n::: tip\n使用 Web Worker 来实现网站更新，尤其是处理与页面渲染无关但可能耗时的操作，如数据解析、复杂计算、大文件处理等，可以带来以下好处：\n:::\n\n### 好处\n\n1. 防止主线程阻塞：\n   - Web Worker 在单独的后台线程中运行，与 UI 渲染线程互不干扰。这意味着即使在处理复杂的更新逻辑时，用户仍能流畅地与页面交互，避免了因长时间计算导致的页面冻结或卡顿现象，显著提升了用户体验。\n2. 提升响应速度:\n   - 对于涉及大量数据处理或计算密集型的更新任务，Web Worker 能够并行处理这些工作，使得更新过程更快完成，使得用户能更早看到更新后的结果。\n3. 分离任务，优化代码结构：\n   - 使用 Web Worker 可以将复杂的更新逻辑封装到独立的脚本中，与主线程的 UI 逻辑清晰分离。这有助于代码组织，提高可维护性，并允许开发者专注于各自线程的任务，遵循“关注点分离”原则\n4. 异步处理：\n   - Web Worker 通过消息传递机制`（postMessage() 和 onmessage）`与主线程通信，实现了真正的异步操作。这使得更新任务可以在不影响主线程的情况下异步进行，符合现代 Web 应用的非阻塞、事件驱动编程模式。\n5. 资源加载与预处理：\n   - 如果网站更新涉及到资源的加载或预处理（如压缩、解密等），Web Worker 可以在后台线程提前完成这些工作，待准备好后再通知主线程，避免了资源加载对主线程的直接压力。\n\n### 弊端\n\n1. 兼容性问题：\n\n   - 虽然 Web Worker 是 HTML5 标准的一部分，但在较老的浏览器或某些非标准环境中可能存在兼容性问题。开发者需要进行兼容性检测和降级处理，或者为不支持 Web Worker 的环境提供备用方案。\n\n2. 额外的内存消耗：\n   - 启动 Web Worker 意味着创建一个新的线程，会增加浏览器的内存开销。对于资源受限的设备（如低端移动设备），过多或不当使用的 Web Worker 可能导致内存溢出或其他性能问题。\n3. 通信成本：\n   - 主线程与 Web Worker 之间的通信需通过序列化和反序列化数据，这会带来一定的性能开销。如果更新过程中频繁进行大量数据交换，可能会抵消部分多线程带来的优势。\n4. 限制访问某些对象与 API：\n   - Web Worker 环境中无法直接访问`window、document等与DOM`相关的全局对象，也无法直接操作 DOM。对于依赖这些功能的更新逻辑，需要通过消息传递将相关操作委托给主线程执行。\n5. 调试复杂性：\n   - 由于 Web Worker 运行在独立线程中，调试起来可能比主线程代码更为复杂。开发者需要使用专门的工具或技巧来监控和调试 Worker 中的代码。\n\n**总结来说，使用 Web Worker 实现网站更新有利于提升用户体验、优化性能和代码结构，但同时也需要注意其可能带来的兼容性问题、额外资源消耗、通信成本、API 访问限制及调试复杂性。在实际应用中，应根据具体场景权衡利弊，合理利用 Web Worker 以实现高效、流畅的网站更新流程。**\n\n## 视频效果预览\n\n<video controls style=\"width:100%;height:500px;object-fit:fill;\">\n  <source src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/web_update.mp4\" type=\"video/mp4\" />\n</video>\n","slug":"总结/技术调研/网站更新一","published":1,"updated":"2025-03-13T10:16:17.510Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0it000vfg9m18g09gif","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>对于前端部署如何进行项目部署这里就不详细介绍了，这里主要介绍如何进行前端部署通知用户更新网站。</p>\n<p>之前开发的网站, 每次都是让用户手动进行刷新网页打到网站更新的目的,但是这里有一个弊端,就是用户每次都需要手动,对我来讲,我比较懒,能自动的绝不手动刷新;</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><h3 id=\"场景-1\"><a href=\"#场景-1\" class=\"headerlink\" title=\"场景 1\"></a>场景 1</h3><p>开发完一个功能, 提交到 github 上, 然后通过<code>jenkins</code>去部署发布, 之后你会发现页面还是之前的页面,因为你没有刷新网站,所以需要手动刷新一下网站。对于用户来讲能不能自动更新呢?</p>\n<h3 id=\"场景-2\"><a href=\"#场景-2\" class=\"headerlink\" title=\"场景 2\"></a>场景 2</h3><p>用户在填写表单的时候,你项目网站更新了,需要一个提示,可以立即更新也可以忽略稍后更新, 这样就可以告知用户网站更新了那些功能? 更新的内容会不会影响你正在操作的功能?</p>\n<h3 id=\"场景-3\"><a href=\"#场景-3\" class=\"headerlink\" title=\"场景 3\"></a>场景 3</h3><p>如果没有提示框,直接刷新页面导致用户正在操作的数据丢失, 这样的损失还是比较大的;</p>\n<p>于是我今天研究了一下这个网站更新的方案, 然后通过本地<code>nginx</code>模拟服务器去尝试了一下;</p>\n<h2 id=\"实现的方案\"><a href=\"#实现的方案\" class=\"headerlink\" title=\"实现的方案\"></a>实现的方案</h2><p>文章使用的是<code>vite5 + vue3 + ts</code>的一个本地项目;</p>\n<ol>\n<li>使用第三方插件<a href=\"https://vite-pwa-org.netlify.app/\">vite-plugin-pwa</a>, 具体的做法可以参考官网</li>\n<li>手动是实现<code>manifest.json</code> + 循环<code>web worker</code>实现, 就是打包的时候创建一个<code>manifest.json</code> 然后将打包时间<code>Date.now()</code>写入文件, 之后在根据里面的时间去做对应的逻辑</li>\n<li>在<code>vite.config.ts</code>中使用<code>build</code>, 开启<code>manifest</code>,这样每次打包都会在<code>dist/.vite</code>中生成一个新的文件, 这个文件就是<code>manifest.json</code></li>\n</ol>\n<p>这里我们具体讲<code>vite.config.js</code> + <code>web worker</code>实现思路:</p>\n<h3 id=\"配置-vite-config-ts\"><a href=\"#配置-vite-config-ts\" class=\"headerlink\" title=\"配置 vite.config.ts\"></a>配置 vite.config.ts</h3><p><code>vite.config.ts</code>如何配置呢? <a href=\"https://cn.vitejs.dev/guide/backend-integration\">vite 后端集成</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">eslintPlugin</span>()],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加下面的build</span></span><br><span class=\"line\">\t\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">manifest</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后你可以通过<code>npm run build</code>命令打包项目,等待项目打包成功之后, 项目根目录生成<code>dist</code>目录, 大概的结构为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.vite</span><br><span class=\"line\">assets</span><br><span class=\"line\">index.html</span><br><span class=\"line\">vite.svg</span><br></pre></td></tr></table></figure>\n\n<p><code>.vite</code>目录就是我们打包的<code>manifest.json</code>文件, 这个文件就是我们后面需要读取的; <code>manifest.json</code>中<code>file</code>就是<code>index.html</code>中引入<code>js,css</code>的地址;<br><code>index.html</code>中引入<code>js,css</code>的地址为:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 大概这样的格式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/index.c0d0d0e9.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;modulepreload&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/assets/index.c0d0d0e9.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里<code>manifest.json</code>文件可以理解为离线缓存文件, 就是吧所有的资源都缓存起来;</p>\n<h3 id=\"实现思路一\"><a href=\"#实现思路一\" class=\"headerlink\" title=\"实现思路一\"></a>实现思路一</h3><p>想要做到网站更新, 这里要获取<code>manifest.json</code>文件,不过现在文件是在<code>dist/.vite</code>中, 想要直接读取那就要修改打包命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build &amp;&amp; node src/copyManifest.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>copyManifest.js</code>的文件为就是复制一份<code>manifest.json</code>到<code>dist</code>目录下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; copyFileSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">copyFileSync</span>(<span class=\"string\">&quot;dist/.vite/manifest.json&quot;</span>, <span class=\"string\">&quot;dist/manifest.json&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>main.js</code>中引入一个文件,这个文件就是你更新网站的核心逻辑了;</p>\n<p>大致的思路就是:</p>\n<ol>\n<li><code>fetch(&#39;/manifest.json&#39;)</code> 拿到最新的数据和上一次的数据去做比较或者结合<code>发布订阅模式</code></li>\n<li>循环获取, 因为网站不定时会更新,所以需要循环; 发现文件地址不一致直接弹框提示;</li>\n<li><code>manifest.json</code>你也可以手动创建, 那就需要吧<code>vite.config.ts</code>中<code>manifest</code>关闭, 打包的时候创建一个文件<code>manifest.json</code>内容为<code>&#123;time: &#39;xxxx&#39;, content: &#39;更新内容&#39;&#125;</code>; 同样的循环操作去对比时间;</li>\n</ol>\n<p>不过这样是比较麻烦的, 所以我们使用另外一种<code>web worker</code>来实现;</p>\n<h3 id=\"实现思路二\"><a href=\"#实现思路二\" class=\"headerlink\" title=\"实现思路二 \"></a>实现思路二 <Badge text=\"推荐使用\" type=\"error\"/></h3><p>首先需要创建俩个文件<code>checkUpdate.ts</code>和<code>checkUpdate.worker.ts</code>, 一个是入口文件, 另一个是<code>web worker</code>循环检测机制;</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// checkUpdate.ts:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessageBox</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ./checkUpdate.worker?worker这是vite的写法. 如果使用webpack 是需要下载对应的插件识别的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CheckWorker</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./checkUpdate.worker?worker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否是开发环境, 如果是开发环境就不需要检测更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">env</span>.<span class=\"property\">MODE</span> !== <span class=\"string\">&quot;development&quot;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">CheckWorker</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新弹框</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">judgeUpdate</span>(<span class=\"params\"><span class=\"attr\">lastEtag</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title class_\">ElMessageBox</span>.<span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;检测到网站有新内容, 是否需要更新?&quot;</span>, <span class=\"string\">&quot;更新提示&quot;</span>, &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">confirmButtonText</span>: <span class=\"string\">&quot;立即更新&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">cancelButtonText</span>: <span class=\"string\">&quot;10s之后再通知我&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;warning&quot;</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">then</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 更新操作</span></span><br><span class=\"line\">\t\t\t\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;close&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;关闭&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tlastEtag,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\tlocation.<span class=\"title function_\">reload</span>();</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 稍后更新操作</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 告知子线程稍后更新</span></span><br><span class=\"line\">\t\t\t\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;recheck&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;10s之后再通知我&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tlastEtag,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 首次进入页面检测是否需要更新</span></span><br><span class=\"line\">\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;check&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;检测是否更新&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收到worker更新的消息, 那就进行弹框提示</span></span><br><span class=\"line\">\tworker.<span class=\"property\">onmessage</span> = <span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 主线程接收到要更新的通知,那就弹框提示</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;hasUpdate&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">judgeUpdate</span>(data.<span class=\"property\">lastEtag</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// checkUpdate.worker.ts:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">lastEtag</span>: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">intervalId</span>: <span class=\"built_in\">number</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">checkUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里可以读取`manifest.json`, 我在这里直接读取网站的页面</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`<span class=\"subst\">$&#123;self.location.protocol&#125;</span>//<span class=\"subst\">$&#123;self.location.host&#125;</span>`</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&quot;HEAD&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cache</span>: <span class=\"string\">&quot;no-cache&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这一行就是如何判断是否有更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> etag = res.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;etag&quot;</span>) || res.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;last-modified&quot;</span>);</span><br><span class=\"line\">\thasUpdate = lastEtag !== <span class=\"literal\">undefined</span> &amp;&amp; etag !== lastEtag;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasUpdate) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向主线程发送消息, 告诉他网站需要更新了;</span></span><br><span class=\"line\">\t\tself.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;hasUpdate&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;需要更新&quot;</span>,</span><br><span class=\"line\">\t\t\tlastEtag,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlastEtag = etag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听worker发送的消息</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 检测更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;check&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">checkUpdate</span>();</span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\tintervalId = <span class=\"built_in\">setInterval</span>(checkUpdate, <span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;recheck&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 稍后通知</span></span><br><span class=\"line\">\t\thasUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\tlastEtag = data.<span class=\"property\">lastEtag</span>;</span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\tintervalId = <span class=\"built_in\">setInterval</span>(checkUpdate, <span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;close&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭</span></span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\t<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/update-2024-04-15-0952.png\" alt=\"流程\"></p>\n<p>然后在<code>main.ts</code>中引入<code>import &#39;./checkUpdate&#39;</code>; 基本上就可以了;</p>\n<p>然后重新打包, 讲打包出来的文件放在本地服务器上;</p>\n<p>然后打开页面: 等待时间就会有提示了:</p>\n<h2 id=\"知识补充\"><a href=\"#知识补充\" class=\"headerlink\" title=\"知识补充\"></a>知识补充</h2><p>::: tip<br>使用 Web Worker 来实现网站更新，尤其是处理与页面渲染无关但可能耗时的操作，如数据解析、复杂计算、大文件处理等，可以带来以下好处：<br>:::</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ol>\n<li>防止主线程阻塞：<ul>\n<li>Web Worker 在单独的后台线程中运行，与 UI 渲染线程互不干扰。这意味着即使在处理复杂的更新逻辑时，用户仍能流畅地与页面交互，避免了因长时间计算导致的页面冻结或卡顿现象，显著提升了用户体验。</li>\n</ul>\n</li>\n<li>提升响应速度:<ul>\n<li>对于涉及大量数据处理或计算密集型的更新任务，Web Worker 能够并行处理这些工作，使得更新过程更快完成，使得用户能更早看到更新后的结果。</li>\n</ul>\n</li>\n<li>分离任务，优化代码结构：<ul>\n<li>使用 Web Worker 可以将复杂的更新逻辑封装到独立的脚本中，与主线程的 UI 逻辑清晰分离。这有助于代码组织，提高可维护性，并允许开发者专注于各自线程的任务，遵循“关注点分离”原则</li>\n</ul>\n</li>\n<li>异步处理：<ul>\n<li>Web Worker 通过消息传递机制<code>（postMessage() 和 onmessage）</code>与主线程通信，实现了真正的异步操作。这使得更新任务可以在不影响主线程的情况下异步进行，符合现代 Web 应用的非阻塞、事件驱动编程模式。</li>\n</ul>\n</li>\n<li>资源加载与预处理：<ul>\n<li>如果网站更新涉及到资源的加载或预处理（如压缩、解密等），Web Worker 可以在后台线程提前完成这些工作，待准备好后再通知主线程，避免了资源加载对主线程的直接压力。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h3><ol>\n<li><p>兼容性问题：</p>\n<ul>\n<li>虽然 Web Worker 是 HTML5 标准的一部分，但在较老的浏览器或某些非标准环境中可能存在兼容性问题。开发者需要进行兼容性检测和降级处理，或者为不支持 Web Worker 的环境提供备用方案。</li>\n</ul>\n</li>\n<li><p>额外的内存消耗：</p>\n<ul>\n<li>启动 Web Worker 意味着创建一个新的线程，会增加浏览器的内存开销。对于资源受限的设备（如低端移动设备），过多或不当使用的 Web Worker 可能导致内存溢出或其他性能问题。</li>\n</ul>\n</li>\n<li><p>通信成本：</p>\n<ul>\n<li>主线程与 Web Worker 之间的通信需通过序列化和反序列化数据，这会带来一定的性能开销。如果更新过程中频繁进行大量数据交换，可能会抵消部分多线程带来的优势。</li>\n</ul>\n</li>\n<li><p>限制访问某些对象与 API：</p>\n<ul>\n<li>Web Worker 环境中无法直接访问<code>window、document等与DOM</code>相关的全局对象，也无法直接操作 DOM。对于依赖这些功能的更新逻辑，需要通过消息传递将相关操作委托给主线程执行。</li>\n</ul>\n</li>\n<li><p>调试复杂性：</p>\n<ul>\n<li>由于 Web Worker 运行在独立线程中，调试起来可能比主线程代码更为复杂。开发者需要使用专门的工具或技巧来监控和调试 Worker 中的代码。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结来说，使用 Web Worker 实现网站更新有利于提升用户体验、优化性能和代码结构，但同时也需要注意其可能带来的兼容性问题、额外资源消耗、通信成本、API 访问限制及调试复杂性。在实际应用中，应根据具体场景权衡利弊，合理利用 Web Worker 以实现高效、流畅的网站更新流程。</strong></p>\n<h2 id=\"视频效果预览\"><a href=\"#视频效果预览\" class=\"headerlink\" title=\"视频效果预览\"></a>视频效果预览</h2><video controls style=\"width:100%;height:500px;object-fit:fill;\">\n  <source src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/web_update.mp4\" type=\"video/mp4\" />\n</video>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>对于前端部署如何进行项目部署这里就不详细介绍了，这里主要介绍如何进行前端部署通知用户更新网站。</p>\n<p>之前开发的网站, 每次都是让用户手动进行刷新网页打到网站更新的目的,但是这里有一个弊端,就是用户每次都需要手动,对我来讲,我比较懒,能自动的绝不手动刷新;</p>\n<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><h3 id=\"场景-1\"><a href=\"#场景-1\" class=\"headerlink\" title=\"场景 1\"></a>场景 1</h3><p>开发完一个功能, 提交到 github 上, 然后通过<code>jenkins</code>去部署发布, 之后你会发现页面还是之前的页面,因为你没有刷新网站,所以需要手动刷新一下网站。对于用户来讲能不能自动更新呢?</p>\n<h3 id=\"场景-2\"><a href=\"#场景-2\" class=\"headerlink\" title=\"场景 2\"></a>场景 2</h3><p>用户在填写表单的时候,你项目网站更新了,需要一个提示,可以立即更新也可以忽略稍后更新, 这样就可以告知用户网站更新了那些功能? 更新的内容会不会影响你正在操作的功能?</p>\n<h3 id=\"场景-3\"><a href=\"#场景-3\" class=\"headerlink\" title=\"场景 3\"></a>场景 3</h3><p>如果没有提示框,直接刷新页面导致用户正在操作的数据丢失, 这样的损失还是比较大的;</p>\n<p>于是我今天研究了一下这个网站更新的方案, 然后通过本地<code>nginx</code>模拟服务器去尝试了一下;</p>\n<h2 id=\"实现的方案\"><a href=\"#实现的方案\" class=\"headerlink\" title=\"实现的方案\"></a>实现的方案</h2><p>文章使用的是<code>vite5 + vue3 + ts</code>的一个本地项目;</p>\n<ol>\n<li>使用第三方插件<a href=\"https://vite-pwa-org.netlify.app/\">vite-plugin-pwa</a>, 具体的做法可以参考官网</li>\n<li>手动是实现<code>manifest.json</code> + 循环<code>web worker</code>实现, 就是打包的时候创建一个<code>manifest.json</code> 然后将打包时间<code>Date.now()</code>写入文件, 之后在根据里面的时间去做对应的逻辑</li>\n<li>在<code>vite.config.ts</code>中使用<code>build</code>, 开启<code>manifest</code>,这样每次打包都会在<code>dist/.vite</code>中生成一个新的文件, 这个文件就是<code>manifest.json</code></li>\n</ol>\n<p>这里我们具体讲<code>vite.config.js</code> + <code>web worker</code>实现思路:</p>\n<h3 id=\"配置-vite-config-ts\"><a href=\"#配置-vite-config-ts\" class=\"headerlink\" title=\"配置 vite.config.ts\"></a>配置 vite.config.ts</h3><p><code>vite.config.ts</code>如何配置呢? <a href=\"https://cn.vitejs.dev/guide/backend-integration\">vite 后端集成</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">eslintPlugin</span>()],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加下面的build</span></span><br><span class=\"line\">\t\t<span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">manifest</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">cssCodeSplit</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后你可以通过<code>npm run build</code>命令打包项目,等待项目打包成功之后, 项目根目录生成<code>dist</code>目录, 大概的结构为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.vite</span><br><span class=\"line\">assets</span><br><span class=\"line\">index.html</span><br><span class=\"line\">vite.svg</span><br></pre></td></tr></table></figure>\n\n<p><code>.vite</code>目录就是我们打包的<code>manifest.json</code>文件, 这个文件就是我们后面需要读取的; <code>manifest.json</code>中<code>file</code>就是<code>index.html</code>中引入<code>js,css</code>的地址;<br><code>index.html</code>中引入<code>js,css</code>的地址为:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 大概这样的格式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/index.c0d0d0e9.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;modulepreload&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/assets/index.c0d0d0e9.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里<code>manifest.json</code>文件可以理解为离线缓存文件, 就是吧所有的资源都缓存起来;</p>\n<h3 id=\"实现思路一\"><a href=\"#实现思路一\" class=\"headerlink\" title=\"实现思路一\"></a>实现思路一</h3><p>想要做到网站更新, 这里要获取<code>manifest.json</code>文件,不过现在文件是在<code>dist/.vite</code>中, 想要直接读取那就要修改打包命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build &amp;&amp; node src/copyManifest.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>copyManifest.js</code>的文件为就是复制一份<code>manifest.json</code>到<code>dist</code>目录下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; copyFileSync &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;fs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">copyFileSync</span>(<span class=\"string\">&quot;dist/.vite/manifest.json&quot;</span>, <span class=\"string\">&quot;dist/manifest.json&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>main.js</code>中引入一个文件,这个文件就是你更新网站的核心逻辑了;</p>\n<p>大致的思路就是:</p>\n<ol>\n<li><code>fetch(&#39;/manifest.json&#39;)</code> 拿到最新的数据和上一次的数据去做比较或者结合<code>发布订阅模式</code></li>\n<li>循环获取, 因为网站不定时会更新,所以需要循环; 发现文件地址不一致直接弹框提示;</li>\n<li><code>manifest.json</code>你也可以手动创建, 那就需要吧<code>vite.config.ts</code>中<code>manifest</code>关闭, 打包的时候创建一个文件<code>manifest.json</code>内容为<code>&#123;time: &#39;xxxx&#39;, content: &#39;更新内容&#39;&#125;</code>; 同样的循环操作去对比时间;</li>\n</ol>\n<p>不过这样是比较麻烦的, 所以我们使用另外一种<code>web worker</code>来实现;</p>\n<h3 id=\"实现思路二\"><a href=\"#实现思路二\" class=\"headerlink\" title=\"实现思路二 \"></a>实现思路二 <Badge text=\"推荐使用\" type=\"error\"/></h3><p>首先需要创建俩个文件<code>checkUpdate.ts</code>和<code>checkUpdate.worker.ts</code>, 一个是入口文件, 另一个是<code>web worker</code>循环检测机制;</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// checkUpdate.ts:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElMessageBox</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ./checkUpdate.worker?worker这是vite的写法. 如果使用webpack 是需要下载对应的插件识别的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CheckWorker</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./checkUpdate.worker?worker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否是开发环境, 如果是开发环境就不需要检测更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">env</span>.<span class=\"property\">MODE</span> !== <span class=\"string\">&quot;development&quot;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> <span class=\"title class_\">CheckWorker</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新弹框</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">judgeUpdate</span>(<span class=\"params\"><span class=\"attr\">lastEtag</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title class_\">ElMessageBox</span>.<span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;检测到网站有新内容, 是否需要更新?&quot;</span>, <span class=\"string\">&quot;更新提示&quot;</span>, &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">confirmButtonText</span>: <span class=\"string\">&quot;立即更新&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">cancelButtonText</span>: <span class=\"string\">&quot;10s之后再通知我&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;warning&quot;</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">then</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 更新操作</span></span><br><span class=\"line\">\t\t\t\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;close&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;关闭&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tlastEtag,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\tlocation.<span class=\"title function_\">reload</span>();</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 稍后更新操作</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 告知子线程稍后更新</span></span><br><span class=\"line\">\t\t\t\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;recheck&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;10s之后再通知我&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tlastEtag,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 首次进入页面检测是否需要更新</span></span><br><span class=\"line\">\tworker.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;check&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;检测是否更新&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收到worker更新的消息, 那就进行弹框提示</span></span><br><span class=\"line\">\tworker.<span class=\"property\">onmessage</span> = <span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 主线程接收到要更新的通知,那就弹框提示</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;hasUpdate&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">judgeUpdate</span>(data.<span class=\"property\">lastEtag</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// checkUpdate.worker.ts:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">lastEtag</span>: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">intervalId</span>: <span class=\"built_in\">number</span> | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">checkUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里可以读取`manifest.json`, 我在这里直接读取网站的页面</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`<span class=\"subst\">$&#123;self.location.protocol&#125;</span>//<span class=\"subst\">$&#123;self.location.host&#125;</span>`</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&quot;HEAD&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">cache</span>: <span class=\"string\">&quot;no-cache&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这一行就是如何判断是否有更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> etag = res.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;etag&quot;</span>) || res.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;last-modified&quot;</span>);</span><br><span class=\"line\">\thasUpdate = lastEtag !== <span class=\"literal\">undefined</span> &amp;&amp; etag !== lastEtag;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasUpdate) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向主线程发送消息, 告诉他网站需要更新了;</span></span><br><span class=\"line\">\t\tself.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;hasUpdate&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">tip</span>: <span class=\"string\">&quot;需要更新&quot;</span>,</span><br><span class=\"line\">\t\t\tlastEtag,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlastEtag = etag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听worker发送的消息</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 检测更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;check&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">checkUpdate</span>();</span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\tintervalId = <span class=\"built_in\">setInterval</span>(checkUpdate, <span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;recheck&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 稍后通知</span></span><br><span class=\"line\">\t\thasUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\tlastEtag = data.<span class=\"property\">lastEtag</span>;</span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\tintervalId = <span class=\"built_in\">setInterval</span>(checkUpdate, <span class=\"number\">10</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data.<span class=\"property\">type</span> === <span class=\"string\">&quot;close&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭</span></span><br><span class=\"line\">\t\tintervalId &amp;&amp; <span class=\"built_in\">clearInterval</span>(intervalId);</span><br><span class=\"line\">\t\t<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/update-2024-04-15-0952.png\" alt=\"流程\"></p>\n<p>然后在<code>main.ts</code>中引入<code>import &#39;./checkUpdate&#39;</code>; 基本上就可以了;</p>\n<p>然后重新打包, 讲打包出来的文件放在本地服务器上;</p>\n<p>然后打开页面: 等待时间就会有提示了:</p>\n<h2 id=\"知识补充\"><a href=\"#知识补充\" class=\"headerlink\" title=\"知识补充\"></a>知识补充</h2><p>::: tip<br>使用 Web Worker 来实现网站更新，尤其是处理与页面渲染无关但可能耗时的操作，如数据解析、复杂计算、大文件处理等，可以带来以下好处：<br>:::</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ol>\n<li>防止主线程阻塞：<ul>\n<li>Web Worker 在单独的后台线程中运行，与 UI 渲染线程互不干扰。这意味着即使在处理复杂的更新逻辑时，用户仍能流畅地与页面交互，避免了因长时间计算导致的页面冻结或卡顿现象，显著提升了用户体验。</li>\n</ul>\n</li>\n<li>提升响应速度:<ul>\n<li>对于涉及大量数据处理或计算密集型的更新任务，Web Worker 能够并行处理这些工作，使得更新过程更快完成，使得用户能更早看到更新后的结果。</li>\n</ul>\n</li>\n<li>分离任务，优化代码结构：<ul>\n<li>使用 Web Worker 可以将复杂的更新逻辑封装到独立的脚本中，与主线程的 UI 逻辑清晰分离。这有助于代码组织，提高可维护性，并允许开发者专注于各自线程的任务，遵循“关注点分离”原则</li>\n</ul>\n</li>\n<li>异步处理：<ul>\n<li>Web Worker 通过消息传递机制<code>（postMessage() 和 onmessage）</code>与主线程通信，实现了真正的异步操作。这使得更新任务可以在不影响主线程的情况下异步进行，符合现代 Web 应用的非阻塞、事件驱动编程模式。</li>\n</ul>\n</li>\n<li>资源加载与预处理：<ul>\n<li>如果网站更新涉及到资源的加载或预处理（如压缩、解密等），Web Worker 可以在后台线程提前完成这些工作，待准备好后再通知主线程，避免了资源加载对主线程的直接压力。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h3><ol>\n<li><p>兼容性问题：</p>\n<ul>\n<li>虽然 Web Worker 是 HTML5 标准的一部分，但在较老的浏览器或某些非标准环境中可能存在兼容性问题。开发者需要进行兼容性检测和降级处理，或者为不支持 Web Worker 的环境提供备用方案。</li>\n</ul>\n</li>\n<li><p>额外的内存消耗：</p>\n<ul>\n<li>启动 Web Worker 意味着创建一个新的线程，会增加浏览器的内存开销。对于资源受限的设备（如低端移动设备），过多或不当使用的 Web Worker 可能导致内存溢出或其他性能问题。</li>\n</ul>\n</li>\n<li><p>通信成本：</p>\n<ul>\n<li>主线程与 Web Worker 之间的通信需通过序列化和反序列化数据，这会带来一定的性能开销。如果更新过程中频繁进行大量数据交换，可能会抵消部分多线程带来的优势。</li>\n</ul>\n</li>\n<li><p>限制访问某些对象与 API：</p>\n<ul>\n<li>Web Worker 环境中无法直接访问<code>window、document等与DOM</code>相关的全局对象，也无法直接操作 DOM。对于依赖这些功能的更新逻辑，需要通过消息传递将相关操作委托给主线程执行。</li>\n</ul>\n</li>\n<li><p>调试复杂性：</p>\n<ul>\n<li>由于 Web Worker 运行在独立线程中，调试起来可能比主线程代码更为复杂。开发者需要使用专门的工具或技巧来监控和调试 Worker 中的代码。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结来说，使用 Web Worker 实现网站更新有利于提升用户体验、优化性能和代码结构，但同时也需要注意其可能带来的兼容性问题、额外资源消耗、通信成本、API 访问限制及调试复杂性。在实际应用中，应根据具体场景权衡利弊，合理利用 Web Worker 以实现高效、流畅的网站更新流程。</strong></p>\n<h2 id=\"视频效果预览\"><a href=\"#视频效果预览\" class=\"headerlink\" title=\"视频效果预览\"></a>视频效果预览</h2><video controls style=\"width:100%;height:500px;object-fit:fill;\">\n  <source src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/web_update.mp4\" type=\"video/mp4\" />\n</video>\n"},{"title":"技术调研-网站更新二","abbrlink":"fd3ae22d","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n上篇总结了如何实现网站更新的功能，现在还有另外的一种做法[pwa](https://vite-pwa-org.netlify.app/)技术实现；\n\n## 创建项目\n\n用`vite+ts+vue`创建一个空项目\n\n```bash\npnpm create vite vite-pwa-demo --template vue-ts\n```\n\n## 安装插件\n\n安装完成之后，需要再次安装`pwa`插件\n\n```bash\npnpm add -D vite-plugin-pwa\n```\n\n## 配置插件\n\n完成安装之后，需要改一下`vite.config.ts`文件，添加`pwa`插件\n\n```ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport { VitePWA } from \"vite-plugin-pwa\";\n\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tVitePWA({\n\t\t\t// prompt 弹框模式。 autoupdate 自动更新模式\n\t\t\tregisterType: \"prompt\",\n\t\t\tdevOptions: {\n\t\t\t\tenabled: true,\n\t\t\t},\n\t\t\tworkbox: {\n\t\t\t\tcleanupOutdatedCaches: true,\n\t\t\t},\n\t\t\tmanifest: {},\n\t\t}),\n\t],\n\tserver: {\n\t\tport: 5177,\n\t},\n});\n```\n\n接着需要在`vite-env.d.ts`中添加对应的服务：\n\n```ts\ndeclare module \"virtual:pwa-register/vue\" {\n\timport type { Ref } from \"vue\";\n\timport type { RegisterSWOptions } from \"vite-plugin-pwa/types\";\n\n\texport type { RegisterSWOptions };\n\n\texport function useRegisterSW(options?: RegisterSWOptions): {\n\t\tneedRefresh: Ref<boolean>;\n\t\tofflineReady: Ref<boolean>;\n\t\tupdateServiceWorker: (reloadPage?: boolean) => Promise<void>;\n\t};\n}\n```\n\n接着在`tsconfig.json`中配置\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t// 添加这一行\n\t\t\"types\": [\"vite-plugin-pwa/client\", \"vite-plugin-pwa/vue\", \"vite/client\"]\n\t}\n}\n```\n\n## 更新检测\n\n```ts\n// 核心代码\nimport { useRegisterSW } from \"virtual:pwa-register/vue\";\nconst { offlineReady, needRefresh, updateServiceWorker } = useRegisterSW({\n\t// 每隔3s检查一次是否有新版本\n\tonRegistered(r) {\n\t\tif (r) {\n\t\t\tsetInterval(() => {\n\t\t\t\tr.update();\n\t\t\t}, 1000 * 3);\n\t\t}\n\t},\n});\n```\n\n## 编写更新弹框\n\n```vue\n<script setup lang=\"ts\">\nimport { useRegisterSW } from \"virtual:pwa-register/vue\";\nimport { ref, watch } from \"vue\";\nimport { ElMessage } from \"element-plus\";\n\nconst { offlineReady, needRefresh, updateServiceWorker } = useRegisterSW({\n\tonRegistered(r) {\n\t\tif (r && !check.value) {\n\t\t\tsetInterval(() => {\n\t\t\t\tr.update();\n\t\t\t}, 1000 * 3);\n\t\t}\n\t},\n});\n\n// 如果是强制更新，只需要needRefresh.value 即可；\n\n// 用另外的变量控制弹框的显示\nconst check = ref(needRefresh.value);\n\nconst loading = ref(false);\nconst btnText = ref(\"立即更新\");\n// 更新\nconst updataPage = async () => {\n\tloading.value = true;\n\tbtnText.value = \"正在更新中...\";\n\tawait updateServiceWorker();\n};\n\n// 关闭弹框\nconst close = () => {\n\tcheck.value = false;\n\tloading.value = false;\n\tbtnText.value = \"立即更新\";\n};\n// 更新的时候禁止关闭\nconst beforeClose = (done: any) => {\n\tif (!loading.value) {\n\t\treturn done();\n\t}\n\tElMessage({\n\t\tmessage: \"正在进行更新, 请稍等...\",\n\t\ttype: \"warning\",\n\t});\n};\n// 没3s会更新needRefresh.value的状态，所以这里监听一下即可；\nwatch(\n\t() => needRefresh.value,\n\tval => {\n\t\tcheck.value = val;\n\t}\n);\n</script>\n\n<template>\n\t<div>======11111213+++---</div>\n\t<el-dialog\n\t\tv-model=\"check\"\n\t\tappend-to-body\n\t\tclass=\"w-update\"\n\t\tdraggable\n\t\twidth=\"410px\"\n\t\t:before-close=\"beforeClose\"\n\t>\n\t\t<template #header></template>\n\t\t<div class=\"w-update-icon\"></div>\n\t\t<h3>新版本来袭：</h3>\n\t\t<p>更新时间：最近更新</p>\n\n\t\t<p>更新内容：更新的内容呢还请详看上线邮件～</p>\n\t\t<p style=\"color: #ff0000; font-size: 12px\">\n\t\t\t如果您暂时不想更新(如：您正在操作内容)，点击关闭按钮可关闭，后续想更新只需要刷新页面进行更新即可~如果想使用新功能，请点击更新按钮即可\n\t\t</p>\n\t\t<template #footer>\n\t\t\t<el-button type=\"primary\" @click=\"updataPage\" :loading=\"loading\">\n\t\t\t\t{{ btnText }}\n\t\t\t</el-button>\n\t\t\t<el-button type=\"default\" :loading=\"loading\" @click=\"close\">\n\t\t\t\t暂时不更新\n\t\t\t</el-button>\n\t\t</template>\n\t</el-dialog>\n</template>\n\n<style scoped>\n.w-update {\n\tposition: relative;\n}\n.w-update-icon {\n\tposition: absolute;\n\ttop: -50px;\n\tleft: 50%;\n\twidth: 100px;\n\theight: 100px;\n\tline-height: 100px;\n\ttext-align: center;\n\tbackground: linear-gradient(\n\t\t50deg,\n\t\tvar(--el-color-primary),\n\t\tvar(--el-color-primary-light-7)\n\t);\n\tborder-radius: 50%;\n\ttransform: translateX(-50%);\n}\n.w-update-icon i {\n\tfont-size: 50px;\n\tcolor: var(--el-color-white);\n}\n\n.w-update-cup {\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 70px;\n\tfont-size: 80px;\n\t-webkit-text-fill-color: transparent;\n\tbackground-image: linear-gradient(\n\t\tvar(--el-color-primary-light-7),\n\t\tvar(--el-color-primary-light-9)\n\t);\n\tbackground-clip: text;\n}\n</style>\n\n<style>\n.w-update.el-dialog {\n\tmargin-top: 30vh !important;\n\tborder-radius: 15px;\n}\n\n.w-update .el-dialog__body {\n\tmargin: 0 40px 0 40px;\n}\n\n.w-update .el-dialog__footer {\n\ttext-align: center !important;\n}\n.w-update .el-button {\n\tmargin-bottom: 20px;\n\tborder-radius: 20px;\n}\n</style>\n```\n\n## 测试\n\n测试的话，可以上传服务器或者本地`nginx`测试；\n\n项目执行`pnpm run build`将生成`dist`文件夹，将`dist`文件夹上传到服务器或者`nginx的html文件夹中`即可；\n\n然后等待页面弹框即可；\n","source":"_posts/总结/技术调研/网站更新二.md","raw":"---\ntitle: 技术调研-网站更新二\nabbrlink: fd3ae22d\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n上篇总结了如何实现网站更新的功能，现在还有另外的一种做法[pwa](https://vite-pwa-org.netlify.app/)技术实现；\n\n## 创建项目\n\n用`vite+ts+vue`创建一个空项目\n\n```bash\npnpm create vite vite-pwa-demo --template vue-ts\n```\n\n## 安装插件\n\n安装完成之后，需要再次安装`pwa`插件\n\n```bash\npnpm add -D vite-plugin-pwa\n```\n\n## 配置插件\n\n完成安装之后，需要改一下`vite.config.ts`文件，添加`pwa`插件\n\n```ts\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport { VitePWA } from \"vite-plugin-pwa\";\n\nexport default defineConfig({\n\tplugins: [\n\t\tvue(),\n\t\tVitePWA({\n\t\t\t// prompt 弹框模式。 autoupdate 自动更新模式\n\t\t\tregisterType: \"prompt\",\n\t\t\tdevOptions: {\n\t\t\t\tenabled: true,\n\t\t\t},\n\t\t\tworkbox: {\n\t\t\t\tcleanupOutdatedCaches: true,\n\t\t\t},\n\t\t\tmanifest: {},\n\t\t}),\n\t],\n\tserver: {\n\t\tport: 5177,\n\t},\n});\n```\n\n接着需要在`vite-env.d.ts`中添加对应的服务：\n\n```ts\ndeclare module \"virtual:pwa-register/vue\" {\n\timport type { Ref } from \"vue\";\n\timport type { RegisterSWOptions } from \"vite-plugin-pwa/types\";\n\n\texport type { RegisterSWOptions };\n\n\texport function useRegisterSW(options?: RegisterSWOptions): {\n\t\tneedRefresh: Ref<boolean>;\n\t\tofflineReady: Ref<boolean>;\n\t\tupdateServiceWorker: (reloadPage?: boolean) => Promise<void>;\n\t};\n}\n```\n\n接着在`tsconfig.json`中配置\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t// 添加这一行\n\t\t\"types\": [\"vite-plugin-pwa/client\", \"vite-plugin-pwa/vue\", \"vite/client\"]\n\t}\n}\n```\n\n## 更新检测\n\n```ts\n// 核心代码\nimport { useRegisterSW } from \"virtual:pwa-register/vue\";\nconst { offlineReady, needRefresh, updateServiceWorker } = useRegisterSW({\n\t// 每隔3s检查一次是否有新版本\n\tonRegistered(r) {\n\t\tif (r) {\n\t\t\tsetInterval(() => {\n\t\t\t\tr.update();\n\t\t\t}, 1000 * 3);\n\t\t}\n\t},\n});\n```\n\n## 编写更新弹框\n\n```vue\n<script setup lang=\"ts\">\nimport { useRegisterSW } from \"virtual:pwa-register/vue\";\nimport { ref, watch } from \"vue\";\nimport { ElMessage } from \"element-plus\";\n\nconst { offlineReady, needRefresh, updateServiceWorker } = useRegisterSW({\n\tonRegistered(r) {\n\t\tif (r && !check.value) {\n\t\t\tsetInterval(() => {\n\t\t\t\tr.update();\n\t\t\t}, 1000 * 3);\n\t\t}\n\t},\n});\n\n// 如果是强制更新，只需要needRefresh.value 即可；\n\n// 用另外的变量控制弹框的显示\nconst check = ref(needRefresh.value);\n\nconst loading = ref(false);\nconst btnText = ref(\"立即更新\");\n// 更新\nconst updataPage = async () => {\n\tloading.value = true;\n\tbtnText.value = \"正在更新中...\";\n\tawait updateServiceWorker();\n};\n\n// 关闭弹框\nconst close = () => {\n\tcheck.value = false;\n\tloading.value = false;\n\tbtnText.value = \"立即更新\";\n};\n// 更新的时候禁止关闭\nconst beforeClose = (done: any) => {\n\tif (!loading.value) {\n\t\treturn done();\n\t}\n\tElMessage({\n\t\tmessage: \"正在进行更新, 请稍等...\",\n\t\ttype: \"warning\",\n\t});\n};\n// 没3s会更新needRefresh.value的状态，所以这里监听一下即可；\nwatch(\n\t() => needRefresh.value,\n\tval => {\n\t\tcheck.value = val;\n\t}\n);\n</script>\n\n<template>\n\t<div>======11111213+++---</div>\n\t<el-dialog\n\t\tv-model=\"check\"\n\t\tappend-to-body\n\t\tclass=\"w-update\"\n\t\tdraggable\n\t\twidth=\"410px\"\n\t\t:before-close=\"beforeClose\"\n\t>\n\t\t<template #header></template>\n\t\t<div class=\"w-update-icon\"></div>\n\t\t<h3>新版本来袭：</h3>\n\t\t<p>更新时间：最近更新</p>\n\n\t\t<p>更新内容：更新的内容呢还请详看上线邮件～</p>\n\t\t<p style=\"color: #ff0000; font-size: 12px\">\n\t\t\t如果您暂时不想更新(如：您正在操作内容)，点击关闭按钮可关闭，后续想更新只需要刷新页面进行更新即可~如果想使用新功能，请点击更新按钮即可\n\t\t</p>\n\t\t<template #footer>\n\t\t\t<el-button type=\"primary\" @click=\"updataPage\" :loading=\"loading\">\n\t\t\t\t{{ btnText }}\n\t\t\t</el-button>\n\t\t\t<el-button type=\"default\" :loading=\"loading\" @click=\"close\">\n\t\t\t\t暂时不更新\n\t\t\t</el-button>\n\t\t</template>\n\t</el-dialog>\n</template>\n\n<style scoped>\n.w-update {\n\tposition: relative;\n}\n.w-update-icon {\n\tposition: absolute;\n\ttop: -50px;\n\tleft: 50%;\n\twidth: 100px;\n\theight: 100px;\n\tline-height: 100px;\n\ttext-align: center;\n\tbackground: linear-gradient(\n\t\t50deg,\n\t\tvar(--el-color-primary),\n\t\tvar(--el-color-primary-light-7)\n\t);\n\tborder-radius: 50%;\n\ttransform: translateX(-50%);\n}\n.w-update-icon i {\n\tfont-size: 50px;\n\tcolor: var(--el-color-white);\n}\n\n.w-update-cup {\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 70px;\n\tfont-size: 80px;\n\t-webkit-text-fill-color: transparent;\n\tbackground-image: linear-gradient(\n\t\tvar(--el-color-primary-light-7),\n\t\tvar(--el-color-primary-light-9)\n\t);\n\tbackground-clip: text;\n}\n</style>\n\n<style>\n.w-update.el-dialog {\n\tmargin-top: 30vh !important;\n\tborder-radius: 15px;\n}\n\n.w-update .el-dialog__body {\n\tmargin: 0 40px 0 40px;\n}\n\n.w-update .el-dialog__footer {\n\ttext-align: center !important;\n}\n.w-update .el-button {\n\tmargin-bottom: 20px;\n\tborder-radius: 20px;\n}\n</style>\n```\n\n## 测试\n\n测试的话，可以上传服务器或者本地`nginx`测试；\n\n项目执行`pnpm run build`将生成`dist`文件夹，将`dist`文件夹上传到服务器或者`nginx的html文件夹中`即可；\n\n然后等待页面弹框即可；\n","slug":"总结/技术调研/网站更新二","published":1,"updated":"2025-03-12T09:55:41.246Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0it000zfg9m6vmx15z7","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>上篇总结了如何实现网站更新的功能，现在还有另外的一种做法<a href=\"https://vite-pwa-org.netlify.app/\">pwa</a>技术实现；</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>用<code>vite+ts+vue</code>创建一个空项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm create vite vite-pwa-demo --template vue-ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>安装完成之后，需要再次安装<code>pwa</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D vite-plugin-pwa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h2><p>完成安装之后，需要改一下<code>vite.config.ts</code>文件，添加<code>pwa</code>插件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VitePWA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">VitePWA</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// prompt 弹框模式。 autoupdate 自动更新模式</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">registerType</span>: <span class=\"string\">&quot;prompt&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">devOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">workbox</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cleanupOutdatedCaches</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">manifest</span>: &#123;&#125;,</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">5177</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接着需要在<code>vite-env.d.ts</code>中添加对应的服务：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;virtual:pwa-register/vue&quot;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Ref</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">RegisterSWOptions</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-pwa/types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">RegisterSWOptions</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useRegisterSW</span>(<span class=\"params\"><span class=\"attr\">options</span>?: <span class=\"title class_\">RegisterSWOptions</span></span>): &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">needRefresh</span>: <span class=\"title class_\">Ref</span>&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"attr\">offlineReady</span>: <span class=\"title class_\">Ref</span>&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"attr\">updateServiceWorker</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">reloadPage</span>?: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>tsconfig.json</code>中配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;vite-plugin-pwa/client&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vite-plugin-pwa/vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vite/client&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新检测\"><a href=\"#更新检测\" class=\"headerlink\" title=\"更新检测\"></a>更新检测</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRegisterSW &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;virtual:pwa-register/vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; offlineReady, needRefresh, updateServiceWorker &#125; = <span class=\"title function_\">useRegisterSW</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 每隔3s检查一次是否有新版本</span></span><br><span class=\"line\">\t<span class=\"title function_\">onRegistered</span>(<span class=\"params\">r</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (r) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tr.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">1000</span> * <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写更新弹框\"><a href=\"#编写更新弹框\" class=\"headerlink\" title=\"编写更新弹框\"></a>编写更新弹框</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; useRegisterSW &#125; from &quot;virtual:pwa-register/vue&quot;;</span><br><span class=\"line\">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class=\"line\">import &#123; ElMessage &#125; from &quot;element-plus&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; offlineReady, needRefresh, updateServiceWorker &#125; = useRegisterSW(&#123;</span><br><span class=\"line\">\tonRegistered(r) &#123;</span><br><span class=\"line\">\t\tif (r &amp;&amp; !check.value) &#123;</span><br><span class=\"line\">\t\t\tsetInterval(() =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tr.update();</span><br><span class=\"line\">\t\t\t&#125;, 1000 * 3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果是强制更新，只需要needRefresh.value 即可；</span><br><span class=\"line\"></span><br><span class=\"line\">// 用另外的变量控制弹框的显示</span><br><span class=\"line\">const check = ref(needRefresh.value);</span><br><span class=\"line\"></span><br><span class=\"line\">const loading = ref(false);</span><br><span class=\"line\">const btnText = ref(&quot;立即更新&quot;);</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">const updataPage = async () =&gt; &#123;</span><br><span class=\"line\">\tloading.value = true;</span><br><span class=\"line\">\tbtnText.value = &quot;正在更新中...&quot;;</span><br><span class=\"line\">\tawait updateServiceWorker();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 关闭弹框</span><br><span class=\"line\">const close = () =&gt; &#123;</span><br><span class=\"line\">\tcheck.value = false;</span><br><span class=\"line\">\tloading.value = false;</span><br><span class=\"line\">\tbtnText.value = &quot;立即更新&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 更新的时候禁止关闭</span><br><span class=\"line\">const beforeClose = (done: any) =&gt; &#123;</span><br><span class=\"line\">\tif (!loading.value) &#123;</span><br><span class=\"line\">\t\treturn done();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tElMessage(&#123;</span><br><span class=\"line\">\t\tmessage: &quot;正在进行更新, 请稍等...&quot;,</span><br><span class=\"line\">\t\ttype: &quot;warning&quot;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 没3s会更新needRefresh.value的状态，所以这里监听一下即可；</span><br><span class=\"line\">watch(</span><br><span class=\"line\">\t() =&gt; needRefresh.value,</span><br><span class=\"line\">\tval =&gt; &#123;</span><br><span class=\"line\">\t\tcheck.value = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;======11111213+++---&lt;/div&gt;</span><br><span class=\"line\">\t&lt;el-dialog</span><br><span class=\"line\">\t\tv-model=&quot;check&quot;</span><br><span class=\"line\">\t\tappend-to-body</span><br><span class=\"line\">\t\tclass=&quot;w-update&quot;</span><br><span class=\"line\">\t\tdraggable</span><br><span class=\"line\">\t\twidth=&quot;410px&quot;</span><br><span class=\"line\">\t\t:before-close=&quot;beforeClose&quot;</span><br><span class=\"line\">\t&gt;</span><br><span class=\"line\">\t\t&lt;template #header&gt;&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;w-update-icon&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;新版本来袭：&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;更新时间：最近更新&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;p&gt;更新内容：更新的内容呢还请详看上线邮件～&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p style=&quot;color: #ff0000; font-size: 12px&quot;&gt;</span><br><span class=\"line\">\t\t\t如果您暂时不想更新(如：您正在操作内容)，点击关闭按钮可关闭，后续想更新只需要刷新页面进行更新即可~如果想使用新功能，请点击更新按钮即可</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;template #footer&gt;</span><br><span class=\"line\">\t\t\t&lt;el-button type=&quot;primary&quot; @click=&quot;updataPage&quot; :loading=&quot;loading&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&#123;&#123; btnText &#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/el-button&gt;</span><br><span class=\"line\">\t\t\t&lt;el-button type=&quot;default&quot; :loading=&quot;loading&quot; @click=&quot;close&quot;&gt;</span><br><span class=\"line\">\t\t\t\t暂时不更新</span><br><span class=\"line\">\t\t\t&lt;/el-button&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">\t&lt;/el-dialog&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.w-update &#123;</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update-icon &#123;</span><br><span class=\"line\">\tposition: absolute;</span><br><span class=\"line\">\ttop: -50px;</span><br><span class=\"line\">\tleft: 50%;</span><br><span class=\"line\">\twidth: 100px;</span><br><span class=\"line\">\theight: 100px;</span><br><span class=\"line\">\tline-height: 100px;</span><br><span class=\"line\">\ttext-align: center;</span><br><span class=\"line\">\tbackground: linear-gradient(</span><br><span class=\"line\">\t\t50deg,</span><br><span class=\"line\">\t\tvar(--el-color-primary),</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-7)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tborder-radius: 50%;</span><br><span class=\"line\">\ttransform: translateX(-50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update-icon i &#123;</span><br><span class=\"line\">\tfont-size: 50px;</span><br><span class=\"line\">\tcolor: var(--el-color-white);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update-cup &#123;</span><br><span class=\"line\">\tposition: absolute;</span><br><span class=\"line\">\tright: 20px;</span><br><span class=\"line\">\tbottom: 70px;</span><br><span class=\"line\">\tfont-size: 80px;</span><br><span class=\"line\">\t-webkit-text-fill-color: transparent;</span><br><span class=\"line\">\tbackground-image: linear-gradient(</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-7),</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-9)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tbackground-clip: text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.w-update.el-dialog &#123;</span><br><span class=\"line\">\tmargin-top: 30vh !important;</span><br><span class=\"line\">\tborder-radius: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update .el-dialog__body &#123;</span><br><span class=\"line\">\tmargin: 0 40px 0 40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update .el-dialog__footer &#123;</span><br><span class=\"line\">\ttext-align: center !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update .el-button &#123;</span><br><span class=\"line\">\tmargin-bottom: 20px;</span><br><span class=\"line\">\tborder-radius: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>测试的话，可以上传服务器或者本地<code>nginx</code>测试；</p>\n<p>项目执行<code>pnpm run build</code>将生成<code>dist</code>文件夹，将<code>dist</code>文件夹上传到服务器或者<code>nginx的html文件夹中</code>即可；</p>\n<p>然后等待页面弹框即可；</p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>上篇总结了如何实现网站更新的功能，现在还有另外的一种做法<a href=\"https://vite-pwa-org.netlify.app/\">pwa</a>技术实现；</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>用<code>vite+ts+vue</code>创建一个空项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm create vite vite-pwa-demo --template vue-ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>安装完成之后，需要再次安装<code>pwa</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D vite-plugin-pwa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h2><p>完成安装之后，需要改一下<code>vite.config.ts</code>文件，添加<code>pwa</code>插件</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VitePWA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">\t\t<span class=\"title class_\">VitePWA</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// prompt 弹框模式。 autoupdate 自动更新模式</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">registerType</span>: <span class=\"string\">&quot;prompt&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">devOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">workbox</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cleanupOutdatedCaches</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">manifest</span>: &#123;&#125;,</span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">5177</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接着需要在<code>vite-env.d.ts</code>中添加对应的服务：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;virtual:pwa-register/vue&quot;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Ref</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">RegisterSWOptions</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-pwa/types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">RegisterSWOptions</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useRegisterSW</span>(<span class=\"params\"><span class=\"attr\">options</span>?: <span class=\"title class_\">RegisterSWOptions</span></span>): &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">needRefresh</span>: <span class=\"title class_\">Ref</span>&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"attr\">offlineReady</span>: <span class=\"title class_\">Ref</span>&lt;<span class=\"built_in\">boolean</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"attr\">updateServiceWorker</span>: <span class=\"function\">(<span class=\"params\"><span class=\"attr\">reloadPage</span>?: <span class=\"built_in\">boolean</span></span>) =&gt;</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>tsconfig.json</code>中配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;vite-plugin-pwa/client&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vite-plugin-pwa/vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vite/client&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新检测\"><a href=\"#更新检测\" class=\"headerlink\" title=\"更新检测\"></a>更新检测</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心代码</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRegisterSW &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;virtual:pwa-register/vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; offlineReady, needRefresh, updateServiceWorker &#125; = <span class=\"title function_\">useRegisterSW</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 每隔3s检查一次是否有新版本</span></span><br><span class=\"line\">\t<span class=\"title function_\">onRegistered</span>(<span class=\"params\">r</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (r) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tr.<span class=\"title function_\">update</span>();</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">1000</span> * <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编写更新弹框\"><a href=\"#编写更新弹框\" class=\"headerlink\" title=\"编写更新弹框\"></a>编写更新弹框</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; useRegisterSW &#125; from &quot;virtual:pwa-register/vue&quot;;</span><br><span class=\"line\">import &#123; ref, watch &#125; from &quot;vue&quot;;</span><br><span class=\"line\">import &#123; ElMessage &#125; from &quot;element-plus&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; offlineReady, needRefresh, updateServiceWorker &#125; = useRegisterSW(&#123;</span><br><span class=\"line\">\tonRegistered(r) &#123;</span><br><span class=\"line\">\t\tif (r &amp;&amp; !check.value) &#123;</span><br><span class=\"line\">\t\t\tsetInterval(() =&gt; &#123;</span><br><span class=\"line\">\t\t\t\tr.update();</span><br><span class=\"line\">\t\t\t&#125;, 1000 * 3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果是强制更新，只需要needRefresh.value 即可；</span><br><span class=\"line\"></span><br><span class=\"line\">// 用另外的变量控制弹框的显示</span><br><span class=\"line\">const check = ref(needRefresh.value);</span><br><span class=\"line\"></span><br><span class=\"line\">const loading = ref(false);</span><br><span class=\"line\">const btnText = ref(&quot;立即更新&quot;);</span><br><span class=\"line\">// 更新</span><br><span class=\"line\">const updataPage = async () =&gt; &#123;</span><br><span class=\"line\">\tloading.value = true;</span><br><span class=\"line\">\tbtnText.value = &quot;正在更新中...&quot;;</span><br><span class=\"line\">\tawait updateServiceWorker();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 关闭弹框</span><br><span class=\"line\">const close = () =&gt; &#123;</span><br><span class=\"line\">\tcheck.value = false;</span><br><span class=\"line\">\tloading.value = false;</span><br><span class=\"line\">\tbtnText.value = &quot;立即更新&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 更新的时候禁止关闭</span><br><span class=\"line\">const beforeClose = (done: any) =&gt; &#123;</span><br><span class=\"line\">\tif (!loading.value) &#123;</span><br><span class=\"line\">\t\treturn done();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tElMessage(&#123;</span><br><span class=\"line\">\t\tmessage: &quot;正在进行更新, 请稍等...&quot;,</span><br><span class=\"line\">\t\ttype: &quot;warning&quot;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 没3s会更新needRefresh.value的状态，所以这里监听一下即可；</span><br><span class=\"line\">watch(</span><br><span class=\"line\">\t() =&gt; needRefresh.value,</span><br><span class=\"line\">\tval =&gt; &#123;</span><br><span class=\"line\">\t\tcheck.value = val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;======11111213+++---&lt;/div&gt;</span><br><span class=\"line\">\t&lt;el-dialog</span><br><span class=\"line\">\t\tv-model=&quot;check&quot;</span><br><span class=\"line\">\t\tappend-to-body</span><br><span class=\"line\">\t\tclass=&quot;w-update&quot;</span><br><span class=\"line\">\t\tdraggable</span><br><span class=\"line\">\t\twidth=&quot;410px&quot;</span><br><span class=\"line\">\t\t:before-close=&quot;beforeClose&quot;</span><br><span class=\"line\">\t&gt;</span><br><span class=\"line\">\t\t&lt;template #header&gt;&lt;/template&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;w-update-icon&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;新版本来袭：&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;更新时间：最近更新&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;p&gt;更新内容：更新的内容呢还请详看上线邮件～&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;p style=&quot;color: #ff0000; font-size: 12px&quot;&gt;</span><br><span class=\"line\">\t\t\t如果您暂时不想更新(如：您正在操作内容)，点击关闭按钮可关闭，后续想更新只需要刷新页面进行更新即可~如果想使用新功能，请点击更新按钮即可</span><br><span class=\"line\">\t\t&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;template #footer&gt;</span><br><span class=\"line\">\t\t\t&lt;el-button type=&quot;primary&quot; @click=&quot;updataPage&quot; :loading=&quot;loading&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&#123;&#123; btnText &#125;&#125;</span><br><span class=\"line\">\t\t\t&lt;/el-button&gt;</span><br><span class=\"line\">\t\t\t&lt;el-button type=&quot;default&quot; :loading=&quot;loading&quot; @click=&quot;close&quot;&gt;</span><br><span class=\"line\">\t\t\t\t暂时不更新</span><br><span class=\"line\">\t\t\t&lt;/el-button&gt;</span><br><span class=\"line\">\t\t&lt;/template&gt;</span><br><span class=\"line\">\t&lt;/el-dialog&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.w-update &#123;</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update-icon &#123;</span><br><span class=\"line\">\tposition: absolute;</span><br><span class=\"line\">\ttop: -50px;</span><br><span class=\"line\">\tleft: 50%;</span><br><span class=\"line\">\twidth: 100px;</span><br><span class=\"line\">\theight: 100px;</span><br><span class=\"line\">\tline-height: 100px;</span><br><span class=\"line\">\ttext-align: center;</span><br><span class=\"line\">\tbackground: linear-gradient(</span><br><span class=\"line\">\t\t50deg,</span><br><span class=\"line\">\t\tvar(--el-color-primary),</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-7)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tborder-radius: 50%;</span><br><span class=\"line\">\ttransform: translateX(-50%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update-icon i &#123;</span><br><span class=\"line\">\tfont-size: 50px;</span><br><span class=\"line\">\tcolor: var(--el-color-white);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update-cup &#123;</span><br><span class=\"line\">\tposition: absolute;</span><br><span class=\"line\">\tright: 20px;</span><br><span class=\"line\">\tbottom: 70px;</span><br><span class=\"line\">\tfont-size: 80px;</span><br><span class=\"line\">\t-webkit-text-fill-color: transparent;</span><br><span class=\"line\">\tbackground-image: linear-gradient(</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-7),</span><br><span class=\"line\">\t\tvar(--el-color-primary-light-9)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tbackground-clip: text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.w-update.el-dialog &#123;</span><br><span class=\"line\">\tmargin-top: 30vh !important;</span><br><span class=\"line\">\tborder-radius: 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update .el-dialog__body &#123;</span><br><span class=\"line\">\tmargin: 0 40px 0 40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.w-update .el-dialog__footer &#123;</span><br><span class=\"line\">\ttext-align: center !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.w-update .el-button &#123;</span><br><span class=\"line\">\tmargin-bottom: 20px;</span><br><span class=\"line\">\tborder-radius: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>测试的话，可以上传服务器或者本地<code>nginx</code>测试；</p>\n<p>项目执行<code>pnpm run build</code>将生成<code>dist</code>文件夹，将<code>dist</code>文件夹上传到服务器或者<code>nginx的html文件夹中</code>即可；</p>\n<p>然后等待页面弹框即可；</p>\n"},{"title":"技术调研-记录使用1Panel遇到的问题","abbrlink":"872ab6ec","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n最近在`bili`上看到了一个可视化运营面板`(go + docker)`搭建而成的； 于是我花巨资买了一台服务器, 在`Ubuntu`操作系统上安装使用`1Panel`；\n\n首先`1Panel`的在线安装, [如使用其他安装方式，可查看官网](https://1panel.cn/docs/installation/online_installation/)\n\n```bash\n# 这里我使用的是Ubuntu\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sudo bash quick_start.sh\n```\n\n因为面板是使用`docker`搭建的，当然就要安装`docker`;\n\n## 问题一：安装`docker`超时失败\n\n因为安装`docker`就像安装`npm/pnpm install`类似，是需要镜像源地址的；\n\n因为`1Panel`默认使用的是官方的镜像源，那么在中国大陆很多关于`docker`的镜像源地址都关闭下架了；可以查看 [githubDocker Hub 镜像加速器](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)，可以看出很多的地址要不是内部使用要么就是关闭了；\n\n我花时间查询了一下相关资料，就是你的先在你的服务器上安装`docker`，但是安装需要镜像地址； 之后发现了一类似问题的网页: [安装 1panel 时提示 docker 安装失败](https://bbs.fit2cloud.com/t/topic/5899)\n\n当然您可以尝试一下， 但是我使用的是 (大陆服务器安装 docker 的临时方法（2024.6 月）（docker 安装失败的情况）)[https://bbs.fit2cloud.com/t/topic/5891/27]， 有大佬发了一个现成的`SHELL`命令：\n\n### 安装方式一\n\n- 自用 VPS 初始设置脚本: 自带 docker 和 docker-compose 安装\n\n```SH\n # bash <(wget -qO- --no-check-certificate https://fastly.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://gcore.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://testingcf.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://cdn.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\nbash <(wget -qO- --no-check-certificate https://mirror.ghproxy.com/https://github.com/okxlin/ToolScript/raw/main/tools/vps-setup.sh)\n\n```\n\n### 安装方式二\n\n```SH\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n\n镜像我选择的是`阿里云`， 回车之后等待安装， 安装成功之后重新执行安装`1Panel`命令； 之后等待完成即可；之后会有访问的面板地址，账户以及密码(类似宝塔)\n\n## 问题二：下载应用加速镜像\n\n我们需要设置一下默认的加速镜像地址\n\n![地址](https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240609160644.png)\n\n点击快速跳转，找到`镜像加速--> 设置`，添加地址`https://docker.1panel.live`这是临时使用的地址；\n[应用安装失败 镜像拉取超时的临时解决方案](https://bbs.fit2cloud.com/t/topic/5886)\n\n之后直接安装就好了，但是速度可能有点慢，等待完成安装即可；\n\n## 问题三：证书申请\n\n`网站 --> 证书`， 创建`Acme账户和Dns账户`， 这里主要说下`DNS账户如何申请使用`：我使用的是腾讯云：\n\n首先进入腾讯[云控制台-访问管理](https://console.cloud.tencent.com/cam/overview)，找到 用户 -> 用户列表，点击新建用户-> 自定义创建。\n\n依次完成以下步骤:\n\n1. 选择类型：可访问资源并接收消息\n2. 填写用户信息：用户名随便填啦，我填的是 1panel-dns-demo，勾选编程访问。\n\n3. 设置用户权限：搜下 dns，勾选第一个云解析 DNS 全读写访问权限策略名为 QcloudDNSPodFullAccess。\n\n4. 设置用户标签：有没有无所谓。\n\n5. 审阅信息和权限：看下用户信息有没有问题，没问题就点完成。\n\n完成后记得保存用户的 SecretId 与 SecretKey，只会显示一次。\n\n可以查看参考文档\n\n- [在 1Panel 中申请 SSL 证书](https://insectmk.cn/posts/f3cf7d8c/index.html#%E5%88%9B%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E7%94%A8%E6%88%B7)\n- [1panel 中使用 cloudflare DNS 账户申请 SSL 证书&自动续签](https://www.soulcloser.com/4075/)\n\n> **需要注意的是，申请的域名不能带特殊字符哦；**\n","source":"_posts/总结/技术调研/记录使用1Panel遇到的问题.md","raw":"---\ntitle: 技术调研-记录使用1Panel遇到的问题\nabbrlink: 872ab6ec\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n最近在`bili`上看到了一个可视化运营面板`(go + docker)`搭建而成的； 于是我花巨资买了一台服务器, 在`Ubuntu`操作系统上安装使用`1Panel`；\n\n首先`1Panel`的在线安装, [如使用其他安装方式，可查看官网](https://1panel.cn/docs/installation/online_installation/)\n\n```bash\n# 这里我使用的是Ubuntu\ncurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh && sudo bash quick_start.sh\n```\n\n因为面板是使用`docker`搭建的，当然就要安装`docker`;\n\n## 问题一：安装`docker`超时失败\n\n因为安装`docker`就像安装`npm/pnpm install`类似，是需要镜像源地址的；\n\n因为`1Panel`默认使用的是官方的镜像源，那么在中国大陆很多关于`docker`的镜像源地址都关闭下架了；可以查看 [githubDocker Hub 镜像加速器](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)，可以看出很多的地址要不是内部使用要么就是关闭了；\n\n我花时间查询了一下相关资料，就是你的先在你的服务器上安装`docker`，但是安装需要镜像地址； 之后发现了一类似问题的网页: [安装 1panel 时提示 docker 安装失败](https://bbs.fit2cloud.com/t/topic/5899)\n\n当然您可以尝试一下， 但是我使用的是 (大陆服务器安装 docker 的临时方法（2024.6 月）（docker 安装失败的情况）)[https://bbs.fit2cloud.com/t/topic/5891/27]， 有大佬发了一个现成的`SHELL`命令：\n\n### 安装方式一\n\n- 自用 VPS 初始设置脚本: 自带 docker 和 docker-compose 安装\n\n```SH\n # bash <(wget -qO- --no-check-certificate https://fastly.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://gcore.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://testingcf.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\n# bash <(wget -qO- --no-check-certificate https://cdn.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)\nbash <(wget -qO- --no-check-certificate https://mirror.ghproxy.com/https://github.com/okxlin/ToolScript/raw/main/tools/vps-setup.sh)\n\n```\n\n### 安装方式二\n\n```SH\nbash <(curl -sSL https://linuxmirrors.cn/docker.sh)\n```\n\n镜像我选择的是`阿里云`， 回车之后等待安装， 安装成功之后重新执行安装`1Panel`命令； 之后等待完成即可；之后会有访问的面板地址，账户以及密码(类似宝塔)\n\n## 问题二：下载应用加速镜像\n\n我们需要设置一下默认的加速镜像地址\n\n![地址](https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240609160644.png)\n\n点击快速跳转，找到`镜像加速--> 设置`，添加地址`https://docker.1panel.live`这是临时使用的地址；\n[应用安装失败 镜像拉取超时的临时解决方案](https://bbs.fit2cloud.com/t/topic/5886)\n\n之后直接安装就好了，但是速度可能有点慢，等待完成安装即可；\n\n## 问题三：证书申请\n\n`网站 --> 证书`， 创建`Acme账户和Dns账户`， 这里主要说下`DNS账户如何申请使用`：我使用的是腾讯云：\n\n首先进入腾讯[云控制台-访问管理](https://console.cloud.tencent.com/cam/overview)，找到 用户 -> 用户列表，点击新建用户-> 自定义创建。\n\n依次完成以下步骤:\n\n1. 选择类型：可访问资源并接收消息\n2. 填写用户信息：用户名随便填啦，我填的是 1panel-dns-demo，勾选编程访问。\n\n3. 设置用户权限：搜下 dns，勾选第一个云解析 DNS 全读写访问权限策略名为 QcloudDNSPodFullAccess。\n\n4. 设置用户标签：有没有无所谓。\n\n5. 审阅信息和权限：看下用户信息有没有问题，没问题就点完成。\n\n完成后记得保存用户的 SecretId 与 SecretKey，只会显示一次。\n\n可以查看参考文档\n\n- [在 1Panel 中申请 SSL 证书](https://insectmk.cn/posts/f3cf7d8c/index.html#%E5%88%9B%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E7%94%A8%E6%88%B7)\n- [1panel 中使用 cloudflare DNS 账户申请 SSL 证书&自动续签](https://www.soulcloser.com/4075/)\n\n> **需要注意的是，申请的域名不能带特殊字符哦；**\n","slug":"总结/技术调研/记录使用1Panel遇到的问题","published":1,"updated":"2025-03-13T10:16:17.338Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0it0012fg9m4egldg2e","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在<code>bili</code>上看到了一个可视化运营面板<code>(go + docker)</code>搭建而成的； 于是我花巨资买了一台服务器, 在<code>Ubuntu</code>操作系统上安装使用<code>1Panel</code>；</p>\n<p>首先<code>1Panel</code>的在线安装, <a href=\"https://1panel.cn/docs/installation/online_installation/\">如使用其他安装方式，可查看官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我使用的是Ubuntu</span></span><br><span class=\"line\">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; <span class=\"built_in\">sudo</span> bash quick_start.sh</span><br></pre></td></tr></table></figure>\n\n<p>因为面板是使用<code>docker</code>搭建的，当然就要安装<code>docker</code>;</p>\n<h2 id=\"问题一：安装docker超时失败\"><a href=\"#问题一：安装docker超时失败\" class=\"headerlink\" title=\"问题一：安装docker超时失败\"></a>问题一：安装<code>docker</code>超时失败</h2><p>因为安装<code>docker</code>就像安装<code>npm/pnpm install</code>类似，是需要镜像源地址的；</p>\n<p>因为<code>1Panel</code>默认使用的是官方的镜像源，那么在中国大陆很多关于<code>docker</code>的镜像源地址都关闭下架了；可以查看 <a href=\"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6\">githubDocker Hub 镜像加速器</a>，可以看出很多的地址要不是内部使用要么就是关闭了；</p>\n<p>我花时间查询了一下相关资料，就是你的先在你的服务器上安装<code>docker</code>，但是安装需要镜像地址； 之后发现了一类似问题的网页: <a href=\"https://bbs.fit2cloud.com/t/topic/5899\">安装 1panel 时提示 docker 安装失败</a></p>\n<p>当然您可以尝试一下， 但是我使用的是 (大陆服务器安装 docker 的临时方法（2024.6 月）（docker 安装失败的情况）)[<a href=\"https://bbs.fit2cloud.com/t/topic/5891/27]%EF%BC%8C\">https://bbs.fit2cloud.com/t/topic/5891/27]，</a> 有大佬发了一个现成的<code>SHELL</code>命令：</p>\n<h3 id=\"安装方式一\"><a href=\"#安装方式一\" class=\"headerlink\" title=\"安装方式一\"></a>安装方式一</h3><ul>\n<li>自用 VPS 初始设置脚本: 自带 docker 和 docker-compose 安装</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://fastly.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://gcore.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://testingcf.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://cdn.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\">bash &lt;(wget -qO- --no-check-certificate https://mirror.ghproxy.com/https://github.com/okxlin/ToolScript/raw/main/tools/vps-setup.sh)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装方式二\"><a href=\"#安装方式二\" class=\"headerlink\" title=\"安装方式二\"></a>安装方式二</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure>\n\n<p>镜像我选择的是<code>阿里云</code>， 回车之后等待安装， 安装成功之后重新执行安装<code>1Panel</code>命令； 之后等待完成即可；之后会有访问的面板地址，账户以及密码(类似宝塔)</p>\n<h2 id=\"问题二：下载应用加速镜像\"><a href=\"#问题二：下载应用加速镜像\" class=\"headerlink\" title=\"问题二：下载应用加速镜像\"></a>问题二：下载应用加速镜像</h2><p>我们需要设置一下默认的加速镜像地址</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240609160644.png\" alt=\"地址\"></p>\n<p>点击快速跳转，找到<code>镜像加速--&gt; 设置</code>，添加地址<code>https://docker.1panel.live</code>这是临时使用的地址；<br><a href=\"https://bbs.fit2cloud.com/t/topic/5886\">应用安装失败 镜像拉取超时的临时解决方案</a></p>\n<p>之后直接安装就好了，但是速度可能有点慢，等待完成安装即可；</p>\n<h2 id=\"问题三：证书申请\"><a href=\"#问题三：证书申请\" class=\"headerlink\" title=\"问题三：证书申请\"></a>问题三：证书申请</h2><p><code>网站 --&gt; 证书</code>， 创建<code>Acme账户和Dns账户</code>， 这里主要说下<code>DNS账户如何申请使用</code>：我使用的是腾讯云：</p>\n<p>首先进入腾讯<a href=\"https://console.cloud.tencent.com/cam/overview\">云控制台-访问管理</a>，找到 用户 -&gt; 用户列表，点击新建用户-&gt; 自定义创建。</p>\n<p>依次完成以下步骤:</p>\n<ol>\n<li><p>选择类型：可访问资源并接收消息</p>\n</li>\n<li><p>填写用户信息：用户名随便填啦，我填的是 1panel-dns-demo，勾选编程访问。</p>\n</li>\n<li><p>设置用户权限：搜下 dns，勾选第一个云解析 DNS 全读写访问权限策略名为 QcloudDNSPodFullAccess。</p>\n</li>\n<li><p>设置用户标签：有没有无所谓。</p>\n</li>\n<li><p>审阅信息和权限：看下用户信息有没有问题，没问题就点完成。</p>\n</li>\n</ol>\n<p>完成后记得保存用户的 SecretId 与 SecretKey，只会显示一次。</p>\n<p>可以查看参考文档</p>\n<ul>\n<li><a href=\"https://insectmk.cn/posts/f3cf7d8c/index.html#%E5%88%9B%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E7%94%A8%E6%88%B7\">在 1Panel 中申请 SSL 证书</a></li>\n<li><a href=\"https://www.soulcloser.com/4075/\">1panel 中使用 cloudflare DNS 账户申请 SSL 证书&amp;自动续签</a></li>\n</ul>\n<blockquote>\n<p><strong>需要注意的是，申请的域名不能带特殊字符哦；</strong></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在<code>bili</code>上看到了一个可视化运营面板<code>(go + docker)</code>搭建而成的； 于是我花巨资买了一台服务器, 在<code>Ubuntu</code>操作系统上安装使用<code>1Panel</code>；</p>\n<p>首先<code>1Panel</code>的在线安装, <a href=\"https://1panel.cn/docs/installation/online_installation/\">如使用其他安装方式，可查看官网</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里我使用的是Ubuntu</span></span><br><span class=\"line\">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; <span class=\"built_in\">sudo</span> bash quick_start.sh</span><br></pre></td></tr></table></figure>\n\n<p>因为面板是使用<code>docker</code>搭建的，当然就要安装<code>docker</code>;</p>\n<h2 id=\"问题一：安装docker超时失败\"><a href=\"#问题一：安装docker超时失败\" class=\"headerlink\" title=\"问题一：安装docker超时失败\"></a>问题一：安装<code>docker</code>超时失败</h2><p>因为安装<code>docker</code>就像安装<code>npm/pnpm install</code>类似，是需要镜像源地址的；</p>\n<p>因为<code>1Panel</code>默认使用的是官方的镜像源，那么在中国大陆很多关于<code>docker</code>的镜像源地址都关闭下架了；可以查看 <a href=\"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6\">githubDocker Hub 镜像加速器</a>，可以看出很多的地址要不是内部使用要么就是关闭了；</p>\n<p>我花时间查询了一下相关资料，就是你的先在你的服务器上安装<code>docker</code>，但是安装需要镜像地址； 之后发现了一类似问题的网页: <a href=\"https://bbs.fit2cloud.com/t/topic/5899\">安装 1panel 时提示 docker 安装失败</a></p>\n<p>当然您可以尝试一下， 但是我使用的是 (大陆服务器安装 docker 的临时方法（2024.6 月）（docker 安装失败的情况）)[<a href=\"https://bbs.fit2cloud.com/t/topic/5891/27]%EF%BC%8C\">https://bbs.fit2cloud.com/t/topic/5891/27]，</a> 有大佬发了一个现成的<code>SHELL</code>命令：</p>\n<h3 id=\"安装方式一\"><a href=\"#安装方式一\" class=\"headerlink\" title=\"安装方式一\"></a>安装方式一</h3><ul>\n<li>自用 VPS 初始设置脚本: 自带 docker 和 docker-compose 安装</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://fastly.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://gcore.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://testingcf.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\"><span class=\"comment\"># bash &lt;(wget -qO- --no-check-certificate https://cdn.jsdelivr.net/gh/okxlin/ToolScript@main/tools/vps-setup.sh)</span></span><br><span class=\"line\">bash &lt;(wget -qO- --no-check-certificate https://mirror.ghproxy.com/https://github.com/okxlin/ToolScript/raw/main/tools/vps-setup.sh)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装方式二\"><a href=\"#安装方式二\" class=\"headerlink\" title=\"安装方式二\"></a>安装方式二</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure>\n\n<p>镜像我选择的是<code>阿里云</code>， 回车之后等待安装， 安装成功之后重新执行安装<code>1Panel</code>命令； 之后等待完成即可；之后会有访问的面板地址，账户以及密码(类似宝塔)</p>\n<h2 id=\"问题二：下载应用加速镜像\"><a href=\"#问题二：下载应用加速镜像\" class=\"headerlink\" title=\"问题二：下载应用加速镜像\"></a>问题二：下载应用加速镜像</h2><p>我们需要设置一下默认的加速镜像地址</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240609160644.png\" alt=\"地址\"></p>\n<p>点击快速跳转，找到<code>镜像加速--&gt; 设置</code>，添加地址<code>https://docker.1panel.live</code>这是临时使用的地址；<br><a href=\"https://bbs.fit2cloud.com/t/topic/5886\">应用安装失败 镜像拉取超时的临时解决方案</a></p>\n<p>之后直接安装就好了，但是速度可能有点慢，等待完成安装即可；</p>\n<h2 id=\"问题三：证书申请\"><a href=\"#问题三：证书申请\" class=\"headerlink\" title=\"问题三：证书申请\"></a>问题三：证书申请</h2><p><code>网站 --&gt; 证书</code>， 创建<code>Acme账户和Dns账户</code>， 这里主要说下<code>DNS账户如何申请使用</code>：我使用的是腾讯云：</p>\n<p>首先进入腾讯<a href=\"https://console.cloud.tencent.com/cam/overview\">云控制台-访问管理</a>，找到 用户 -&gt; 用户列表，点击新建用户-&gt; 自定义创建。</p>\n<p>依次完成以下步骤:</p>\n<ol>\n<li><p>选择类型：可访问资源并接收消息</p>\n</li>\n<li><p>填写用户信息：用户名随便填啦，我填的是 1panel-dns-demo，勾选编程访问。</p>\n</li>\n<li><p>设置用户权限：搜下 dns，勾选第一个云解析 DNS 全读写访问权限策略名为 QcloudDNSPodFullAccess。</p>\n</li>\n<li><p>设置用户标签：有没有无所谓。</p>\n</li>\n<li><p>审阅信息和权限：看下用户信息有没有问题，没问题就点完成。</p>\n</li>\n</ol>\n<p>完成后记得保存用户的 SecretId 与 SecretKey，只会显示一次。</p>\n<p>可以查看参考文档</p>\n<ul>\n<li><a href=\"https://insectmk.cn/posts/f3cf7d8c/index.html#%E5%88%9B%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E7%94%A8%E6%88%B7\">在 1Panel 中申请 SSL 证书</a></li>\n<li><a href=\"https://www.soulcloser.com/4075/\">1panel 中使用 cloudflare DNS 账户申请 SSL 证书&amp;自动续签</a></li>\n</ul>\n<blockquote>\n<p><strong>需要注意的是，申请的域名不能带特殊字符哦；</strong></p>\n</blockquote>\n"},{"title":"技术调研-跨端之多端系统","abbrlink":"f9b00f3b","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n💡 跨端的概念已经清楚了，之前多套代码维护多端系统，导致不同的兼容，性能需要不同维护；开发多套一致的功能是比较浪费时间，也是不合理的；\n\n**以下案例涉及到公司的一些方案以及项目图片，仅个人查看；**\n\n## 跨端的概念以及场景\n\n如果一个系统能在不同设备上显示，并且始终维护一套代码，后期的开发效果与维护更加迅速，加快效率；即：一套微信小程序的电商系统（类似淘宝，京东），涉及到下单，购物车，支付，发货等等，以及后期的客服；较为庞大的系统中如何统一规范，一套代码实现多端处理，样式以及界面不会有太大的突出？\n\n这里引入一个新的概念 跨端， 跨端技术对于前端来讲还是蛮不错的，因为前端展示的页面形式都是一致的，如果不引入跨端，就会出现多个系统，多套代码维护与开发；从而导致项目过大，难以维护的后果；\n\n<code>跨端</code>的应用场景还是比较多的，例如：一套 h5 的电商系统，打开网页进行登录再去下单，过程比较麻烦，可能有的用户就喜欢简单的操作，那好，开发小程序，不需要你登录，不需要你输入网址打开网页就可以操作，还有可能有的用户喜欢用支付宝，那好，开发支付宝小程序；就相当于一条主路添加了俩条辅路，总有一条是比较方便的；\n\n<code>跨端</code>亦是如此；现在的技术更新较快，对于前端开发来讲需要在短时间内开发一套兼容多端系统，那我认为跨端是最合适的了；\n\n现在前端行业针对于 跨端也是有很多框架的:\n\n- App 的跨端不仅局限于原生的 Android 和 Ios, 对于 react-native 来讲既可以开发 android 也可以开发 ios, 并且运用的技术还是前端的 react;\n- 另外 App 和 Web 的跨端还有 google 的 Flutter, 同样和上面一样, 一套代码开发 android 和 ios,但由于语法是基于 dart 开发的，上手难度较大；\n- 前端 h5 的跨端，那就是小程序和 h5 网页了；现在使用最多的框架那就是 uni-app 和 Taro 了；\n\n接下来， 将会进行一个测试性的实践方式；\n\n俩种跨端技术均采用有赞的 vant 框架，而 vant 有默认 h5 开发的框架，也有一个小程序的框架；\n\n## Taro 的使用\n\n### Taro 是什么?\n\n::: warning\nTaro 是一个开放式跨端的解决方案， 支持使用 react-native/vue/nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/QQ/飞书/小程序/H5/RN 等应用；\n:::\n\n> 现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道。当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。\n\n### 安装使用\n\n对于首次安装 Taro 的前端来讲，Taro 官网文档并不完善，首次安装出现了大大小小的错误，\n\n- 在使用 taro doctor 来检测项目是否可运行的情况下， 出现版本不一致，需要安装相对于的版本\n- 配置文件不正确\n- 安装过程中出现 sass 相关的错误， 还需要安装\n\n```sh\nnpm install -g mirror-config-china\n```\n\n- 等等其他一系列的大大小小的问题；\n\n![Install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_d.png)\n\n### 运行以及 package.json\n\n既然是跨端， 肯定涉及到的 npm 命令是比较多的， 命令如下:\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_q_t_1.png)\n\n运行 H5 是没问题的， 运行成功之后如下显示 Hello world\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_1.png)\n\n但是运行 wapp 出现一个问题，就是 node-sass 的为问题\n\n```js\n// 会出现一个这样的报错；\nthrow new Error(errors.unsupportedEnvironment());\n```\n\n需要安装该相对应的 node-sass 版本 [解决方案,](https://github.com/sass/node-sass/releases/tag/v4.14.1) 尝试运行 cnpm install node-sass；\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_2.png)\n\n接着打包 weapp 打包成功之后会在 dist 目录生成大大小小的文件，接着用微信开发者工具打开，会发现有报错提示：\n\n```js\nSVGElement is not defined\n```\n\n在 github 找了一下更新日志才知道\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_3.png)\n\n我本地安装的是旧版本， 而这个问题在新版本修复的， 所以将本地当前的项目升级最新版本;\n\n```js\ntaro update self  // 是将当前的项目升级\ntaro update project // 将全局的版本升级，及所有的taro项目\n\n```\n\n重新 build 又出现一个报错:\n\n```js\n找不到依赖 \"@tarojs/plugin-platform-weapp\"，请先在项目中安装\n\n```\n\n没办法， 接着将项目更新，框架更新 包安装完善之后，打包 weapp 是可以的，开发工具打开之后又出现\n\n```js\nTypeError: Object(...) is not a function\n```\n\n....好吧，放弃了！\n\n安装过程中，出现的问题太多了，文档说明也不详细，出现稀奇古怪的问题；\n\n[跨端实践 | Taro 框架中该如何使用 Vant 组件库-适配多端](https://juejin.cn/post/7080176600704090143#heading-2)\n\n<font color=\"red\">不操作了， 中间出现的问题太多了，文档说明也不够详细，出现包版本冲突的问题本就是让人头疼的，有点浪费时间， 时间不够充足，时间充足的话后期可以研究一下；</font>\n\n## uniapp\n\n通过命令 `vue create -p dcloudio/uni-preset-vue my-project` 使用默认模板。\n项目安装成功之后，通过命令 `yarn run dev:h5 和 yarn run dev:mp-weixin `启动 h5 和打包微信小程序, 在微信开发者工具中打开 `dist dev/map-weixin`\n\n不过这里 h5 是可以正常打开的。 但是微信是报错的， 配置好 appid, 将项目目录的 vue.config.js 中的俩行代码删除或者注释掉：\n\n```js\nprocess.env.UNI_USING_VUE3 = true;\nprocess.env.UNI_USING_VUE3_OPTIONS_API = true;\n```\n\n重新编译就可以打开了；\n在 vant weapp 官网 右上角 github 下载源码，将 dist 命名为 vant 存放于与 pages 目录平行的 wxcomponents 目录下\n\n在 pages.json 中配置一下命令：\n\n```json\n{\n\t\"globalStyle\": {\n\t\t\"navigationBarTextStyle\": \"black\",\n\t\t\"navigationBarTitleText\": \"uni-app\",\n\t\t\"navigationBarBackgroundColor\": \"#F8F8F8\",\n\t\t\"backgroundColor\": \"#F8F8F8\",\n\n\t\t// 代码在这里\n\t\t\"usingComponents\": {\n\t\t\t\"van-button\": \"/wxcomponents/vant/button/index\"\n\t\t}\n\t}\n}\n```\n\nApp.vue 中引入 vant 的样式\n\n```js\n<style>\n\t/*每个页面公共css */ @import '/wxcomponents/vant/common/index.wxss';\n</style>\n```\n\n到这里为止，小程序是可以正常运行的， 而在 h5 会有样式引入乱码， 找到 icon 组件， 将样式格式化之后就可以运行了；\n\n### 写一个 oP 的页面，同时兼容小程序和 h5\n\n> 既然想要兼容俩个不同的端， 那么就要将原有的写法修改一下；\n\n1. div 换成 view\n2. img 换成 image\n3. span 换成 text\n4. ...\n5. vant 框架 获取 v-modal 换成 value; 获取值， event.detail;\n6. axios 请求在 h5 可以正常访问, 小程序不可以；\n7. 页面跳转；\n\n### 效果预览\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_4.png)\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_5.png)\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_6.png)\n\n### 可能会遇到的问题；\n\n> 由于时间不太够，目前没有考虑太多的东西，既然是跨端，肯定会存在兼容问题；\n\n目前需要考虑的问题:\n\n1. 页面样式单位的选择\n2. axios 和 uni.request() 结合封装?\n3. 至少兼容至： 微信小程序，pc 页面和 h5 页面； 保证在手机微信和企业微信移动端和 pc 端打开，稳定运行；\n4. listView 的兼容，配套下拉刷新上拉加载\n5. 登录授权功能；目前存在疑惑，h5 授权的是公众号，小程序授权的呢?\n6. 涉及到后期支付问题，openId 的获取？如何在不同端拿到 openId?\n7. 登录授权？如何做？按钮提示还是初始页面提示?\n8. 其他...\n\n### 后期需要考虑的问题\n\n- 现在是欧派一套系统，西门子一套系统， 后期？？？\n- 不同商家合作商入口？是否可以做成一套？\n- 如果做成一套，如何在不同场景更好的展示，且改动较少；\n- 如果做配置话管理，是否存在缺陷 以及不足；涉及到（样式，主题色，布局等等）；\n","source":"_posts/总结/技术调研/跨端之多端系统.md","raw":"---\ntitle: 技术调研-跨端之多端系统\nabbrlink: f9b00f3b\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 技术调研\n---\n\n# 背景\n\n💡 跨端的概念已经清楚了，之前多套代码维护多端系统，导致不同的兼容，性能需要不同维护；开发多套一致的功能是比较浪费时间，也是不合理的；\n\n**以下案例涉及到公司的一些方案以及项目图片，仅个人查看；**\n\n## 跨端的概念以及场景\n\n如果一个系统能在不同设备上显示，并且始终维护一套代码，后期的开发效果与维护更加迅速，加快效率；即：一套微信小程序的电商系统（类似淘宝，京东），涉及到下单，购物车，支付，发货等等，以及后期的客服；较为庞大的系统中如何统一规范，一套代码实现多端处理，样式以及界面不会有太大的突出？\n\n这里引入一个新的概念 跨端， 跨端技术对于前端来讲还是蛮不错的，因为前端展示的页面形式都是一致的，如果不引入跨端，就会出现多个系统，多套代码维护与开发；从而导致项目过大，难以维护的后果；\n\n<code>跨端</code>的应用场景还是比较多的，例如：一套 h5 的电商系统，打开网页进行登录再去下单，过程比较麻烦，可能有的用户就喜欢简单的操作，那好，开发小程序，不需要你登录，不需要你输入网址打开网页就可以操作，还有可能有的用户喜欢用支付宝，那好，开发支付宝小程序；就相当于一条主路添加了俩条辅路，总有一条是比较方便的；\n\n<code>跨端</code>亦是如此；现在的技术更新较快，对于前端开发来讲需要在短时间内开发一套兼容多端系统，那我认为跨端是最合适的了；\n\n现在前端行业针对于 跨端也是有很多框架的:\n\n- App 的跨端不仅局限于原生的 Android 和 Ios, 对于 react-native 来讲既可以开发 android 也可以开发 ios, 并且运用的技术还是前端的 react;\n- 另外 App 和 Web 的跨端还有 google 的 Flutter, 同样和上面一样, 一套代码开发 android 和 ios,但由于语法是基于 dart 开发的，上手难度较大；\n- 前端 h5 的跨端，那就是小程序和 h5 网页了；现在使用最多的框架那就是 uni-app 和 Taro 了；\n\n接下来， 将会进行一个测试性的实践方式；\n\n俩种跨端技术均采用有赞的 vant 框架，而 vant 有默认 h5 开发的框架，也有一个小程序的框架；\n\n## Taro 的使用\n\n### Taro 是什么?\n\n::: warning\nTaro 是一个开放式跨端的解决方案， 支持使用 react-native/vue/nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/QQ/飞书/小程序/H5/RN 等应用；\n:::\n\n> 现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道。当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。\n\n### 安装使用\n\n对于首次安装 Taro 的前端来讲，Taro 官网文档并不完善，首次安装出现了大大小小的错误，\n\n- 在使用 taro doctor 来检测项目是否可运行的情况下， 出现版本不一致，需要安装相对于的版本\n- 配置文件不正确\n- 安装过程中出现 sass 相关的错误， 还需要安装\n\n```sh\nnpm install -g mirror-config-china\n```\n\n- 等等其他一系列的大大小小的问题；\n\n![Install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_d.png)\n\n### 运行以及 package.json\n\n既然是跨端， 肯定涉及到的 npm 命令是比较多的， 命令如下:\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_q_t_1.png)\n\n运行 H5 是没问题的， 运行成功之后如下显示 Hello world\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_1.png)\n\n但是运行 wapp 出现一个问题，就是 node-sass 的为问题\n\n```js\n// 会出现一个这样的报错；\nthrow new Error(errors.unsupportedEnvironment());\n```\n\n需要安装该相对应的 node-sass 版本 [解决方案,](https://github.com/sass/node-sass/releases/tag/v4.14.1) 尝试运行 cnpm install node-sass；\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_2.png)\n\n接着打包 weapp 打包成功之后会在 dist 目录生成大大小小的文件，接着用微信开发者工具打开，会发现有报错提示：\n\n```js\nSVGElement is not defined\n```\n\n在 github 找了一下更新日志才知道\n\n![Service](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_3.png)\n\n我本地安装的是旧版本， 而这个问题在新版本修复的， 所以将本地当前的项目升级最新版本;\n\n```js\ntaro update self  // 是将当前的项目升级\ntaro update project // 将全局的版本升级，及所有的taro项目\n\n```\n\n重新 build 又出现一个报错:\n\n```js\n找不到依赖 \"@tarojs/plugin-platform-weapp\"，请先在项目中安装\n\n```\n\n没办法， 接着将项目更新，框架更新 包安装完善之后，打包 weapp 是可以的，开发工具打开之后又出现\n\n```js\nTypeError: Object(...) is not a function\n```\n\n....好吧，放弃了！\n\n安装过程中，出现的问题太多了，文档说明也不详细，出现稀奇古怪的问题；\n\n[跨端实践 | Taro 框架中该如何使用 Vant 组件库-适配多端](https://juejin.cn/post/7080176600704090143#heading-2)\n\n<font color=\"red\">不操作了， 中间出现的问题太多了，文档说明也不够详细，出现包版本冲突的问题本就是让人头疼的，有点浪费时间， 时间不够充足，时间充足的话后期可以研究一下；</font>\n\n## uniapp\n\n通过命令 `vue create -p dcloudio/uni-preset-vue my-project` 使用默认模板。\n项目安装成功之后，通过命令 `yarn run dev:h5 和 yarn run dev:mp-weixin `启动 h5 和打包微信小程序, 在微信开发者工具中打开 `dist dev/map-weixin`\n\n不过这里 h5 是可以正常打开的。 但是微信是报错的， 配置好 appid, 将项目目录的 vue.config.js 中的俩行代码删除或者注释掉：\n\n```js\nprocess.env.UNI_USING_VUE3 = true;\nprocess.env.UNI_USING_VUE3_OPTIONS_API = true;\n```\n\n重新编译就可以打开了；\n在 vant weapp 官网 右上角 github 下载源码，将 dist 命名为 vant 存放于与 pages 目录平行的 wxcomponents 目录下\n\n在 pages.json 中配置一下命令：\n\n```json\n{\n\t\"globalStyle\": {\n\t\t\"navigationBarTextStyle\": \"black\",\n\t\t\"navigationBarTitleText\": \"uni-app\",\n\t\t\"navigationBarBackgroundColor\": \"#F8F8F8\",\n\t\t\"backgroundColor\": \"#F8F8F8\",\n\n\t\t// 代码在这里\n\t\t\"usingComponents\": {\n\t\t\t\"van-button\": \"/wxcomponents/vant/button/index\"\n\t\t}\n\t}\n}\n```\n\nApp.vue 中引入 vant 的样式\n\n```js\n<style>\n\t/*每个页面公共css */ @import '/wxcomponents/vant/common/index.wxss';\n</style>\n```\n\n到这里为止，小程序是可以正常运行的， 而在 h5 会有样式引入乱码， 找到 icon 组件， 将样式格式化之后就可以运行了；\n\n### 写一个 oP 的页面，同时兼容小程序和 h5\n\n> 既然想要兼容俩个不同的端， 那么就要将原有的写法修改一下；\n\n1. div 换成 view\n2. img 换成 image\n3. span 换成 text\n4. ...\n5. vant 框架 获取 v-modal 换成 value; 获取值， event.detail;\n6. axios 请求在 h5 可以正常访问, 小程序不可以；\n7. 页面跳转；\n\n### 效果预览\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_4.png)\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_5.png)\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_6.png)\n\n### 可能会遇到的问题；\n\n> 由于时间不太够，目前没有考虑太多的东西，既然是跨端，肯定会存在兼容问题；\n\n目前需要考虑的问题:\n\n1. 页面样式单位的选择\n2. axios 和 uni.request() 结合封装?\n3. 至少兼容至： 微信小程序，pc 页面和 h5 页面； 保证在手机微信和企业微信移动端和 pc 端打开，稳定运行；\n4. listView 的兼容，配套下拉刷新上拉加载\n5. 登录授权功能；目前存在疑惑，h5 授权的是公众号，小程序授权的呢?\n6. 涉及到后期支付问题，openId 的获取？如何在不同端拿到 openId?\n7. 登录授权？如何做？按钮提示还是初始页面提示?\n8. 其他...\n\n### 后期需要考虑的问题\n\n- 现在是欧派一套系统，西门子一套系统， 后期？？？\n- 不同商家合作商入口？是否可以做成一套？\n- 如果做成一套，如何在不同场景更好的展示，且改动较少；\n- 如果做配置话管理，是否存在缺陷 以及不足；涉及到（样式，主题色，布局等等）；\n","slug":"总结/技术调研/跨端之多端系统","published":1,"updated":"2025-03-13T10:16:17.268Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iu0015fg9mgki96l8k","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>💡 跨端的概念已经清楚了，之前多套代码维护多端系统，导致不同的兼容，性能需要不同维护；开发多套一致的功能是比较浪费时间，也是不合理的；</p>\n<p><strong>以下案例涉及到公司的一些方案以及项目图片，仅个人查看；</strong></p>\n<h2 id=\"跨端的概念以及场景\"><a href=\"#跨端的概念以及场景\" class=\"headerlink\" title=\"跨端的概念以及场景\"></a>跨端的概念以及场景</h2><p>如果一个系统能在不同设备上显示，并且始终维护一套代码，后期的开发效果与维护更加迅速，加快效率；即：一套微信小程序的电商系统（类似淘宝，京东），涉及到下单，购物车，支付，发货等等，以及后期的客服；较为庞大的系统中如何统一规范，一套代码实现多端处理，样式以及界面不会有太大的突出？</p>\n<p>这里引入一个新的概念 跨端， 跨端技术对于前端来讲还是蛮不错的，因为前端展示的页面形式都是一致的，如果不引入跨端，就会出现多个系统，多套代码维护与开发；从而导致项目过大，难以维护的后果；</p>\n<p><code>跨端</code>的应用场景还是比较多的，例如：一套 h5 的电商系统，打开网页进行登录再去下单，过程比较麻烦，可能有的用户就喜欢简单的操作，那好，开发小程序，不需要你登录，不需要你输入网址打开网页就可以操作，还有可能有的用户喜欢用支付宝，那好，开发支付宝小程序；就相当于一条主路添加了俩条辅路，总有一条是比较方便的；</p>\n<p><code>跨端</code>亦是如此；现在的技术更新较快，对于前端开发来讲需要在短时间内开发一套兼容多端系统，那我认为跨端是最合适的了；</p>\n<p>现在前端行业针对于 跨端也是有很多框架的:</p>\n<ul>\n<li>App 的跨端不仅局限于原生的 Android 和 Ios, 对于 react-native 来讲既可以开发 android 也可以开发 ios, 并且运用的技术还是前端的 react;</li>\n<li>另外 App 和 Web 的跨端还有 google 的 Flutter, 同样和上面一样, 一套代码开发 android 和 ios,但由于语法是基于 dart 开发的，上手难度较大；</li>\n<li>前端 h5 的跨端，那就是小程序和 h5 网页了；现在使用最多的框架那就是 uni-app 和 Taro 了；</li>\n</ul>\n<p>接下来， 将会进行一个测试性的实践方式；</p>\n<p>俩种跨端技术均采用有赞的 vant 框架，而 vant 有默认 h5 开发的框架，也有一个小程序的框架；</p>\n<h2 id=\"Taro-的使用\"><a href=\"#Taro-的使用\" class=\"headerlink\" title=\"Taro 的使用\"></a>Taro 的使用</h2><h3 id=\"Taro-是什么\"><a href=\"#Taro-是什么\" class=\"headerlink\" title=\"Taro 是什么?\"></a>Taro 是什么?</h3><p>::: warning<br>Taro 是一个开放式跨端的解决方案， 支持使用 react-native&#x2F;vue&#x2F;nerv 等框架来开发微信&#x2F;京东&#x2F;百度&#x2F;支付宝&#x2F;字节跳动&#x2F;QQ&#x2F;飞书&#x2F;小程序&#x2F;H5&#x2F;RN 等应用；<br>:::</p>\n<blockquote>\n<p>现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道。当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p>\n</blockquote>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>对于首次安装 Taro 的前端来讲，Taro 官网文档并不完善，首次安装出现了大大小小的错误，</p>\n<ul>\n<li>在使用 taro doctor 来检测项目是否可运行的情况下， 出现版本不一致，需要安装相对于的版本</li>\n<li>配置文件不正确</li>\n<li>安装过程中出现 sass 相关的错误， 还需要安装</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mirror-config-china</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等等其他一系列的大大小小的问题；</li>\n</ul>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_d.png\" alt=\"Install\"></p>\n<h3 id=\"运行以及-package-json\"><a href=\"#运行以及-package-json\" class=\"headerlink\" title=\"运行以及 package.json\"></a>运行以及 package.json</h3><p>既然是跨端， 肯定涉及到的 npm 命令是比较多的， 命令如下:</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_q_t_1.png\" alt=\"Service\"></p>\n<p>运行 H5 是没问题的， 运行成功之后如下显示 Hello world</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_1.png\" alt=\"Service\"></p>\n<p>但是运行 wapp 出现一个问题，就是 node-sass 的为问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会出现一个这样的报错；</span></span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(errors.<span class=\"title function_\">unsupportedEnvironment</span>());</span><br></pre></td></tr></table></figure>\n\n<p>需要安装该相对应的 node-sass 版本 <a href=\"https://github.com/sass/node-sass/releases/tag/v4.14.1\">解决方案,</a> 尝试运行 cnpm install node-sass；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_2.png\" alt=\"Service\"></p>\n<p>接着打包 weapp 打包成功之后会在 dist 目录生成大大小小的文件，接着用微信开发者工具打开，会发现有报错提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SVGElement</span> is not defined</span><br></pre></td></tr></table></figure>\n\n<p>在 github 找了一下更新日志才知道</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_3.png\" alt=\"Service\"></p>\n<p>我本地安装的是旧版本， 而这个问题在新版本修复的， 所以将本地当前的项目升级最新版本;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taro update self  <span class=\"comment\">// 是将当前的项目升级</span></span><br><span class=\"line\">taro update project <span class=\"comment\">// 将全局的版本升级，及所有的taro项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新 build 又出现一个报错:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找不到依赖 <span class=\"string\">&quot;@tarojs/plugin-platform-weapp&quot;</span>，请先在项目中安装</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>没办法， 接着将项目更新，框架更新 包安装完善之后，打包 weapp 是可以的，开发工具打开之后又出现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TypeError</span>: <span class=\"title class_\">Object</span>(...) is not a <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n\n<p>….好吧，放弃了！</p>\n<p>安装过程中，出现的问题太多了，文档说明也不详细，出现稀奇古怪的问题；</p>\n<p><a href=\"https://juejin.cn/post/7080176600704090143#heading-2\">跨端实践 | Taro 框架中该如何使用 Vant 组件库-适配多端</a></p>\n<p><font color=\"red\">不操作了， 中间出现的问题太多了，文档说明也不够详细，出现包版本冲突的问题本就是让人头疼的，有点浪费时间， 时间不够充足，时间充足的话后期可以研究一下；</font></p>\n<h2 id=\"uniapp\"><a href=\"#uniapp\" class=\"headerlink\" title=\"uniapp\"></a>uniapp</h2><p>通过命令 <code>vue create -p dcloudio/uni-preset-vue my-project</code> 使用默认模板。<br>项目安装成功之后，通过命令 <code>yarn run dev:h5 和 yarn run dev:mp-weixin </code>启动 h5 和打包微信小程序, 在微信开发者工具中打开 <code>dist dev/map-weixin</code></p>\n<p>不过这里 h5 是可以正常打开的。 但是微信是报错的， 配置好 appid, 将项目目录的 vue.config.js 中的俩行代码删除或者注释掉：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">UNI_USING_VUE3</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">UNI_USING_VUE3_OPTIONS_API</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重新编译就可以打开了；<br>在 vant weapp 官网 右上角 github 下载源码，将 dist 命名为 vant 存放于与 pages 目录平行的 wxcomponents 目录下</p>\n<p>在 pages.json 中配置一下命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;globalStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarTextStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;black&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarTitleText&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;uni-app&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarBackgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#F8F8F8&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;backgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#F8F8F8&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 代码在这里</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;usingComponents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;van-button&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/wxcomponents/vant/button/index&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>App.vue 中引入 vant 的样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t<span class=\"comment\">/*每个页面公共css */</span> @<span class=\"keyword\">import</span> <span class=\"string\">&#x27;/wxcomponents/vant/common/index.wxss&#x27;</span>;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>到这里为止，小程序是可以正常运行的， 而在 h5 会有样式引入乱码， 找到 icon 组件， 将样式格式化之后就可以运行了；</p>\n<h3 id=\"写一个-oP-的页面，同时兼容小程序和-h5\"><a href=\"#写一个-oP-的页面，同时兼容小程序和-h5\" class=\"headerlink\" title=\"写一个 oP 的页面，同时兼容小程序和 h5\"></a>写一个 oP 的页面，同时兼容小程序和 h5</h3><blockquote>\n<p>既然想要兼容俩个不同的端， 那么就要将原有的写法修改一下；</p>\n</blockquote>\n<ol>\n<li>div 换成 view</li>\n<li>img 换成 image</li>\n<li>span 换成 text</li>\n<li>…</li>\n<li>vant 框架 获取 v-modal 换成 value; 获取值， event.detail;</li>\n<li>axios 请求在 h5 可以正常访问, 小程序不可以；</li>\n<li>页面跳转；</li>\n</ol>\n<h3 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_4.png\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_5.png\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_6.png\" alt=\"1\"></p>\n<h3 id=\"可能会遇到的问题；\"><a href=\"#可能会遇到的问题；\" class=\"headerlink\" title=\"可能会遇到的问题；\"></a>可能会遇到的问题；</h3><blockquote>\n<p>由于时间不太够，目前没有考虑太多的东西，既然是跨端，肯定会存在兼容问题；</p>\n</blockquote>\n<p>目前需要考虑的问题:</p>\n<ol>\n<li>页面样式单位的选择</li>\n<li>axios 和 uni.request() 结合封装?</li>\n<li>至少兼容至： 微信小程序，pc 页面和 h5 页面； 保证在手机微信和企业微信移动端和 pc 端打开，稳定运行；</li>\n<li>listView 的兼容，配套下拉刷新上拉加载</li>\n<li>登录授权功能；目前存在疑惑，h5 授权的是公众号，小程序授权的呢?</li>\n<li>涉及到后期支付问题，openId 的获取？如何在不同端拿到 openId?</li>\n<li>登录授权？如何做？按钮提示还是初始页面提示?</li>\n<li>其他…</li>\n</ol>\n<h3 id=\"后期需要考虑的问题\"><a href=\"#后期需要考虑的问题\" class=\"headerlink\" title=\"后期需要考虑的问题\"></a>后期需要考虑的问题</h3><ul>\n<li>现在是欧派一套系统，西门子一套系统， 后期？？？</li>\n<li>不同商家合作商入口？是否可以做成一套？</li>\n<li>如果做成一套，如何在不同场景更好的展示，且改动较少；</li>\n<li>如果做配置话管理，是否存在缺陷 以及不足；涉及到（样式，主题色，布局等等）；</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>💡 跨端的概念已经清楚了，之前多套代码维护多端系统，导致不同的兼容，性能需要不同维护；开发多套一致的功能是比较浪费时间，也是不合理的；</p>\n<p><strong>以下案例涉及到公司的一些方案以及项目图片，仅个人查看；</strong></p>\n<h2 id=\"跨端的概念以及场景\"><a href=\"#跨端的概念以及场景\" class=\"headerlink\" title=\"跨端的概念以及场景\"></a>跨端的概念以及场景</h2><p>如果一个系统能在不同设备上显示，并且始终维护一套代码，后期的开发效果与维护更加迅速，加快效率；即：一套微信小程序的电商系统（类似淘宝，京东），涉及到下单，购物车，支付，发货等等，以及后期的客服；较为庞大的系统中如何统一规范，一套代码实现多端处理，样式以及界面不会有太大的突出？</p>\n<p>这里引入一个新的概念 跨端， 跨端技术对于前端来讲还是蛮不错的，因为前端展示的页面形式都是一致的，如果不引入跨端，就会出现多个系统，多套代码维护与开发；从而导致项目过大，难以维护的后果；</p>\n<p><code>跨端</code>的应用场景还是比较多的，例如：一套 h5 的电商系统，打开网页进行登录再去下单，过程比较麻烦，可能有的用户就喜欢简单的操作，那好，开发小程序，不需要你登录，不需要你输入网址打开网页就可以操作，还有可能有的用户喜欢用支付宝，那好，开发支付宝小程序；就相当于一条主路添加了俩条辅路，总有一条是比较方便的；</p>\n<p><code>跨端</code>亦是如此；现在的技术更新较快，对于前端开发来讲需要在短时间内开发一套兼容多端系统，那我认为跨端是最合适的了；</p>\n<p>现在前端行业针对于 跨端也是有很多框架的:</p>\n<ul>\n<li>App 的跨端不仅局限于原生的 Android 和 Ios, 对于 react-native 来讲既可以开发 android 也可以开发 ios, 并且运用的技术还是前端的 react;</li>\n<li>另外 App 和 Web 的跨端还有 google 的 Flutter, 同样和上面一样, 一套代码开发 android 和 ios,但由于语法是基于 dart 开发的，上手难度较大；</li>\n<li>前端 h5 的跨端，那就是小程序和 h5 网页了；现在使用最多的框架那就是 uni-app 和 Taro 了；</li>\n</ul>\n<p>接下来， 将会进行一个测试性的实践方式；</p>\n<p>俩种跨端技术均采用有赞的 vant 框架，而 vant 有默认 h5 开发的框架，也有一个小程序的框架；</p>\n<h2 id=\"Taro-的使用\"><a href=\"#Taro-的使用\" class=\"headerlink\" title=\"Taro 的使用\"></a>Taro 的使用</h2><h3 id=\"Taro-是什么\"><a href=\"#Taro-是什么\" class=\"headerlink\" title=\"Taro 是什么?\"></a>Taro 是什么?</h3><p>::: warning<br>Taro 是一个开放式跨端的解决方案， 支持使用 react-native&#x2F;vue&#x2F;nerv 等框架来开发微信&#x2F;京东&#x2F;百度&#x2F;支付宝&#x2F;字节跳动&#x2F;QQ&#x2F;飞书&#x2F;小程序&#x2F;H5&#x2F;RN 等应用；<br>:::</p>\n<blockquote>\n<p>现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道。当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p>\n</blockquote>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p>对于首次安装 Taro 的前端来讲，Taro 官网文档并不完善，首次安装出现了大大小小的错误，</p>\n<ul>\n<li>在使用 taro doctor 来检测项目是否可运行的情况下， 出现版本不一致，需要安装相对于的版本</li>\n<li>配置文件不正确</li>\n<li>安装过程中出现 sass 相关的错误， 还需要安装</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mirror-config-china</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等等其他一系列的大大小小的问题；</li>\n</ul>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_d.png\" alt=\"Install\"></p>\n<h3 id=\"运行以及-package-json\"><a href=\"#运行以及-package-json\" class=\"headerlink\" title=\"运行以及 package.json\"></a>运行以及 package.json</h3><p>既然是跨端， 肯定涉及到的 npm 命令是比较多的， 命令如下:</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_q_t_1.png\" alt=\"Service\"></p>\n<p>运行 H5 是没问题的， 运行成功之后如下显示 Hello world</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_1.png\" alt=\"Service\"></p>\n<p>但是运行 wapp 出现一个问题，就是 node-sass 的为问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会出现一个这样的报错；</span></span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(errors.<span class=\"title function_\">unsupportedEnvironment</span>());</span><br></pre></td></tr></table></figure>\n\n<p>需要安装该相对应的 node-sass 版本 <a href=\"https://github.com/sass/node-sass/releases/tag/v4.14.1\">解决方案,</a> 尝试运行 cnpm install node-sass；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_2.png\" alt=\"Service\"></p>\n<p>接着打包 weapp 打包成功之后会在 dist 目录生成大大小小的文件，接着用微信开发者工具打开，会发现有报错提示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SVGElement</span> is not defined</span><br></pre></td></tr></table></figure>\n\n<p>在 github 找了一下更新日志才知道</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_3.png\" alt=\"Service\"></p>\n<p>我本地安装的是旧版本， 而这个问题在新版本修复的， 所以将本地当前的项目升级最新版本;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taro update self  <span class=\"comment\">// 是将当前的项目升级</span></span><br><span class=\"line\">taro update project <span class=\"comment\">// 将全局的版本升级，及所有的taro项目</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新 build 又出现一个报错:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找不到依赖 <span class=\"string\">&quot;@tarojs/plugin-platform-weapp&quot;</span>，请先在项目中安装</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>没办法， 接着将项目更新，框架更新 包安装完善之后，打包 weapp 是可以的，开发工具打开之后又出现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">TypeError</span>: <span class=\"title class_\">Object</span>(...) is not a <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n\n<p>….好吧，放弃了！</p>\n<p>安装过程中，出现的问题太多了，文档说明也不详细，出现稀奇古怪的问题；</p>\n<p><a href=\"https://juejin.cn/post/7080176600704090143#heading-2\">跨端实践 | Taro 框架中该如何使用 Vant 组件库-适配多端</a></p>\n<p><font color=\"red\">不操作了， 中间出现的问题太多了，文档说明也不够详细，出现包版本冲突的问题本就是让人头疼的，有点浪费时间， 时间不够充足，时间充足的话后期可以研究一下；</font></p>\n<h2 id=\"uniapp\"><a href=\"#uniapp\" class=\"headerlink\" title=\"uniapp\"></a>uniapp</h2><p>通过命令 <code>vue create -p dcloudio/uni-preset-vue my-project</code> 使用默认模板。<br>项目安装成功之后，通过命令 <code>yarn run dev:h5 和 yarn run dev:mp-weixin </code>启动 h5 和打包微信小程序, 在微信开发者工具中打开 <code>dist dev/map-weixin</code></p>\n<p>不过这里 h5 是可以正常打开的。 但是微信是报错的， 配置好 appid, 将项目目录的 vue.config.js 中的俩行代码删除或者注释掉：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">UNI_USING_VUE3</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">UNI_USING_VUE3_OPTIONS_API</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重新编译就可以打开了；<br>在 vant weapp 官网 右上角 github 下载源码，将 dist 命名为 vant 存放于与 pages 目录平行的 wxcomponents 目录下</p>\n<p>在 pages.json 中配置一下命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;globalStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarTextStyle&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;black&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarTitleText&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;uni-app&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;navigationBarBackgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#F8F8F8&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;backgroundColor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#F8F8F8&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 代码在这里</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;usingComponents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;van-button&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/wxcomponents/vant/button/index&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>App.vue 中引入 vant 的样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t<span class=\"comment\">/*每个页面公共css */</span> @<span class=\"keyword\">import</span> <span class=\"string\">&#x27;/wxcomponents/vant/common/index.wxss&#x27;</span>;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>到这里为止，小程序是可以正常运行的， 而在 h5 会有样式引入乱码， 找到 icon 组件， 将样式格式化之后就可以运行了；</p>\n<h3 id=\"写一个-oP-的页面，同时兼容小程序和-h5\"><a href=\"#写一个-oP-的页面，同时兼容小程序和-h5\" class=\"headerlink\" title=\"写一个 oP 的页面，同时兼容小程序和 h5\"></a>写一个 oP 的页面，同时兼容小程序和 h5</h3><blockquote>\n<p>既然想要兼容俩个不同的端， 那么就要将原有的写法修改一下；</p>\n</blockquote>\n<ol>\n<li>div 换成 view</li>\n<li>img 换成 image</li>\n<li>span 换成 text</li>\n<li>…</li>\n<li>vant 框架 获取 v-modal 换成 value; 获取值， event.detail;</li>\n<li>axios 请求在 h5 可以正常访问, 小程序不可以；</li>\n<li>页面跳转；</li>\n</ol>\n<h3 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_4.png\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_5.png\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image_kd_6.png\" alt=\"1\"></p>\n<h3 id=\"可能会遇到的问题；\"><a href=\"#可能会遇到的问题；\" class=\"headerlink\" title=\"可能会遇到的问题；\"></a>可能会遇到的问题；</h3><blockquote>\n<p>由于时间不太够，目前没有考虑太多的东西，既然是跨端，肯定会存在兼容问题；</p>\n</blockquote>\n<p>目前需要考虑的问题:</p>\n<ol>\n<li>页面样式单位的选择</li>\n<li>axios 和 uni.request() 结合封装?</li>\n<li>至少兼容至： 微信小程序，pc 页面和 h5 页面； 保证在手机微信和企业微信移动端和 pc 端打开，稳定运行；</li>\n<li>listView 的兼容，配套下拉刷新上拉加载</li>\n<li>登录授权功能；目前存在疑惑，h5 授权的是公众号，小程序授权的呢?</li>\n<li>涉及到后期支付问题，openId 的获取？如何在不同端拿到 openId?</li>\n<li>登录授权？如何做？按钮提示还是初始页面提示?</li>\n<li>其他…</li>\n</ol>\n<h3 id=\"后期需要考虑的问题\"><a href=\"#后期需要考虑的问题\" class=\"headerlink\" title=\"后期需要考虑的问题\"></a>后期需要考虑的问题</h3><ul>\n<li>现在是欧派一套系统，西门子一套系统， 后期？？？</li>\n<li>不同商家合作商入口？是否可以做成一套？</li>\n<li>如果做成一套，如何在不同场景更好的展示，且改动较少；</li>\n<li>如果做配置话管理，是否存在缺陷 以及不足；涉及到（样式，主题色，布局等等）；</li>\n</ul>\n"},{"title":"工作内容-GridView宫格加载渲染优化","abbrlink":"6cb1119a","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n公司系统首页是一个`GridView`宫格模块的界面，但是对于这样的一个界面来讲，渲染界面的时间并不会很长；接口返回的数据的耗时也是比较短的，但是整个过程加起来耗时`22s` ；很难想象为什么会花费这么长时间呢？\n\n## 分析\n\n在优化之前，要先明确优化的地方以及怎优化；只有找到来源才好找到解决方案去优化；\n\n本地调试页面首次打开，从渲染页面开始到资源加载完毕，共加载 20s-30s 左右，加载本地资源在 1s-2s 左右，由于原生系统引入 vue 的原因， vue 外链不是国内的导致下载资源时间将近在 15s 左右；\n\n本地开发去除 vue 外链引入，再次打开页面加载时间在 12s 左右，查看本地资源加载完成的时间在 1.5 左右，那么渲染时间从开始到结束一共 8s-10s 左右；对于 100 个 tab 的渲染决不能渲染时间在 10s 左右，那么就是源码是可以优化的； 明确了页面渲染时间较长，接下来我们可以查看源码；更加明确页面渲染时间长的原因；\n\n`查看源码，代码行数接近 2000 行；去除 css 样式和 html，计算每个 tab 将近 8-10 行代码；并且这些代码是可以重复利用封装的；`\n\n> 分析图，如下图\n\n![GridView分析图](http://wangxiaoze-view.github.io/picx-images-hosting/images/home_gridview_1.svg)\n\n## 解决方案\n\n- 代码提炼，代码简洁优化\n- 提取公共节点元素\n- 公共渲染函数封装\n\n> 因为涉及公司源码，这里只将没有关系的图片展示出来\n\n![GridView解决图1](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_2.png)\n![GridView解决图2](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_3.png)\n![GridView解决图3](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_4.png)\n\n**以 js 追加元素 避免了编译的渲染的过程，从而避免 8s 时间的等待；在原来的基础上 优化了近 7-8s 左右；**\n","source":"_posts/总结/项目总结/GridView宫格加载渲染优化.md","raw":"---\ntitle: 工作内容-GridView宫格加载渲染优化\nabbrlink: 6cb1119a\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n公司系统首页是一个`GridView`宫格模块的界面，但是对于这样的一个界面来讲，渲染界面的时间并不会很长；接口返回的数据的耗时也是比较短的，但是整个过程加起来耗时`22s` ；很难想象为什么会花费这么长时间呢？\n\n## 分析\n\n在优化之前，要先明确优化的地方以及怎优化；只有找到来源才好找到解决方案去优化；\n\n本地调试页面首次打开，从渲染页面开始到资源加载完毕，共加载 20s-30s 左右，加载本地资源在 1s-2s 左右，由于原生系统引入 vue 的原因， vue 外链不是国内的导致下载资源时间将近在 15s 左右；\n\n本地开发去除 vue 外链引入，再次打开页面加载时间在 12s 左右，查看本地资源加载完成的时间在 1.5 左右，那么渲染时间从开始到结束一共 8s-10s 左右；对于 100 个 tab 的渲染决不能渲染时间在 10s 左右，那么就是源码是可以优化的； 明确了页面渲染时间较长，接下来我们可以查看源码；更加明确页面渲染时间长的原因；\n\n`查看源码，代码行数接近 2000 行；去除 css 样式和 html，计算每个 tab 将近 8-10 行代码；并且这些代码是可以重复利用封装的；`\n\n> 分析图，如下图\n\n![GridView分析图](http://wangxiaoze-view.github.io/picx-images-hosting/images/home_gridview_1.svg)\n\n## 解决方案\n\n- 代码提炼，代码简洁优化\n- 提取公共节点元素\n- 公共渲染函数封装\n\n> 因为涉及公司源码，这里只将没有关系的图片展示出来\n\n![GridView解决图1](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_2.png)\n![GridView解决图2](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_3.png)\n![GridView解决图3](http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_4.png)\n\n**以 js 追加元素 避免了编译的渲染的过程，从而避免 8s 时间的等待；在原来的基础上 优化了近 7-8s 左右；**\n","slug":"总结/项目总结/GridView宫格加载渲染优化","published":1,"updated":"2025-03-13T10:16:17.751Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iu0019fg9mgsxfffof","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>公司系统首页是一个<code>GridView</code>宫格模块的界面，但是对于这样的一个界面来讲，渲染界面的时间并不会很长；接口返回的数据的耗时也是比较短的，但是整个过程加起来耗时<code>22s</code> ；很难想象为什么会花费这么长时间呢？</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在优化之前，要先明确优化的地方以及怎优化；只有找到来源才好找到解决方案去优化；</p>\n<p>本地调试页面首次打开，从渲染页面开始到资源加载完毕，共加载 20s-30s 左右，加载本地资源在 1s-2s 左右，由于原生系统引入 vue 的原因， vue 外链不是国内的导致下载资源时间将近在 15s 左右；</p>\n<p>本地开发去除 vue 外链引入，再次打开页面加载时间在 12s 左右，查看本地资源加载完成的时间在 1.5 左右，那么渲染时间从开始到结束一共 8s-10s 左右；对于 100 个 tab 的渲染决不能渲染时间在 10s 左右，那么就是源码是可以优化的； 明确了页面渲染时间较长，接下来我们可以查看源码；更加明确页面渲染时间长的原因；</p>\n<p><code>查看源码，代码行数接近 2000 行；去除 css 样式和 html，计算每个 tab 将近 8-10 行代码；并且这些代码是可以重复利用封装的；</code></p>\n<blockquote>\n<p>分析图，如下图</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/home_gridview_1.svg\" alt=\"GridView分析图\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>代码提炼，代码简洁优化</li>\n<li>提取公共节点元素</li>\n<li>公共渲染函数封装</li>\n</ul>\n<blockquote>\n<p>因为涉及公司源码，这里只将没有关系的图片展示出来</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_2.png\" alt=\"GridView解决图1\"><br><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_3.png\" alt=\"GridView解决图2\"><br><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_4.png\" alt=\"GridView解决图3\"></p>\n<p><strong>以 js 追加元素 避免了编译的渲染的过程，从而避免 8s 时间的等待；在原来的基础上 优化了近 7-8s 左右；</strong></p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>公司系统首页是一个<code>GridView</code>宫格模块的界面，但是对于这样的一个界面来讲，渲染界面的时间并不会很长；接口返回的数据的耗时也是比较短的，但是整个过程加起来耗时<code>22s</code> ；很难想象为什么会花费这么长时间呢？</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>在优化之前，要先明确优化的地方以及怎优化；只有找到来源才好找到解决方案去优化；</p>\n<p>本地调试页面首次打开，从渲染页面开始到资源加载完毕，共加载 20s-30s 左右，加载本地资源在 1s-2s 左右，由于原生系统引入 vue 的原因， vue 外链不是国内的导致下载资源时间将近在 15s 左右；</p>\n<p>本地开发去除 vue 外链引入，再次打开页面加载时间在 12s 左右，查看本地资源加载完成的时间在 1.5 左右，那么渲染时间从开始到结束一共 8s-10s 左右；对于 100 个 tab 的渲染决不能渲染时间在 10s 左右，那么就是源码是可以优化的； 明确了页面渲染时间较长，接下来我们可以查看源码；更加明确页面渲染时间长的原因；</p>\n<p><code>查看源码，代码行数接近 2000 行；去除 css 样式和 html，计算每个 tab 将近 8-10 行代码；并且这些代码是可以重复利用封装的；</code></p>\n<blockquote>\n<p>分析图，如下图</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/home_gridview_1.svg\" alt=\"GridView分析图\"></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>代码提炼，代码简洁优化</li>\n<li>提取公共节点元素</li>\n<li>公共渲染函数封装</li>\n</ul>\n<blockquote>\n<p>因为涉及公司源码，这里只将没有关系的图片展示出来</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_2.png\" alt=\"GridView解决图1\"><br><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_3.png\" alt=\"GridView解决图2\"><br><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/homeGridview_4.png\" alt=\"GridView解决图3\"></p>\n<p><strong>以 js 追加元素 避免了编译的渲染的过程，从而避免 8s 时间的等待；在原来的基础上 优化了近 7-8s 左右；</strong></p>\n"},{"title":"工作内容-中英文搜索按键回车事件冲突","abbrlink":"6cb1119a","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n普通的输入框，做一个搜索的功能，那么对于搜索，输入直接调用接口就好了， 为什么还要值得做记录总结呢？是因为，搜索查询并不是你想象中的直接调用接口就可以了；考虑的因素也是挺多的，例如，搜索优化，不对服务器造成并发影响；\n\n间隔搜索等等，一般行为，为了不频繁请求接口，我们都会使用`节流函数`优化，或者失去焦点再去请求也是可以的；\n\n但是对于及查及显示的功能原则，这是就不能使用失焦查询了；这里的功能例如： 地址查询等等；\n\n那么输入查询也会出现另外的一个弊端， 那就是中文字符的影响，下面会说明 `bug` 复现的过程和解决方案!\n\n## 适用场景\n\n- 常见的搜索查询无非就那么几种，端与端的搜索也就是移动端与 pc 端；\n- 如果是移动端仅仅需要处理的是频繁请求的问题；避免频繁请求造成的服务器的压力;\n- 如果是 pc 端，就不是仅仅需要处理频繁请求的问题了； 并且你在 `input` 的情况下还要处理另外一种情况，输入中文有中文字符的情况；\n- 平常的搜索都是输入框， 按钮查询搜索;\n\n## 问题分析复盘\n\n在原有的功能上去选择化的维护与扩展；其中有关联单号，其实是个搜索查询功能, 查询输入的手机号关联的业主最新前三单的信息;\n\n因为当时考虑用户搜索查询方便，特处理输入框的事件为 oninput, 这样直接输入查询内容，在处理频繁请求的基础上去请求数据；这样就可以随查随时显示了；\n\n而不选择 onchange, onblur 是因为俩者都是失去焦点再去请求;\n\n针对三者的区别，我做了一下总结：\n\n- `oninput`: 只要输入， 输入框由内容则会执行，但是这里要区分一个问题：\n- `onchange, onblur相同点`: 俩者都是失去焦点之后再出处理对应的逻辑；\n- `onchange, onblur不同点`: `oncahnge`是在输入的基础上才会执行，而`onblur`不论是否输入都会执行；\n\n**但是：`oninput`要做一个区别，就是 pc 有其他输入法的情况下是以正常执行的，输入框不会有输入的文字或者字母， 而 Windows 自带的输入法，在输入框切换中文再去输入的情况，会将输入的英文先显示在输入框中，那样就会出现输入一个字符就会去请求一次；这样的情况就可以造成接口返回异常或者错误信息;**\n\n## 效果预览\n\n> 以下效果都是在 `windows`下的效果；\n\n### 使用其他的输入法\n\n![使用其他的输入法](http://wangxiaoze-view.github.io/picx-images-hosting/images/search_1.png)\n\n### windows 自带的输入法\n\n![自带的输入法](http://wangxiaoze-view.github.io/picx-images-hosting/images/search_2.png)\n\n> windows 自带的输入法，在这样的情况下会走请求， 还是有特殊符号的情况，如果在这样的情况下后端可能会报错；\n\n## 解决方案\n\n- 将 `oninput` 事件换成 `onchange, onblur` 事件，只有当失去焦点的情况下才会去请求， 这样可能会造成功能疑惑问题；都输入了怎么不执行呢？怎么没有数据呢？怎么操作？\n- 同样，继续使用 oninput 事件；不过在这基础上还要执行俩个事件 `compositionstart, compositionend`;\n- `compositionstart` 开始新的输入合成时会触发， `compositionend` 当文本段落的组成完成或取消时，`compositionend` 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。[compositionend](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event) [compositionstart](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event)\n\n## 实例代码\n\n```js\n// isInput 判断的是是否合并结束， 默认结束\nlet isInput = true;\ngetOrderDemo\n\t.on(\n\t\t\"input\",\n\t\tthrottle(function () {\n\t\t\t// 如果合并结束完成则， 进行下一步的逻辑操作; 没有结束合并  不会执行;\n\t\t\tif (isInput) {\n\t\t\t\tlet val = $(this)\n\t\t\t\t\t.val()\n\t\t\t\t\t.replace(/\\s|\\r|\\t|\\n/g, \"\");\n\t\t\t\t// ...code there 执行对应的逻辑操作;\n\t\t\t}\n\t\t}, 500)\n\t)\n\t.on(\"keyup\", function () {})\n\t.on(\"compositionstart\", function () {\n\t\t// 当执行如图二的情况下，说明还在合并，并没有结束\n\t\tisInput = false;\n\t})\n\t.on(\"compositionend\", function () {\n\t\t// 执行到这一步说明  合并结束， 当合并结束时，执行input\n\t\tisInput = true;\n\t});\n```\n","source":"_posts/总结/项目总结/中英文搜索按键回车事件冲突.md","raw":"---\ntitle: 工作内容-中英文搜索按键回车事件冲突\nabbrlink: 6cb1119a\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n普通的输入框，做一个搜索的功能，那么对于搜索，输入直接调用接口就好了， 为什么还要值得做记录总结呢？是因为，搜索查询并不是你想象中的直接调用接口就可以了；考虑的因素也是挺多的，例如，搜索优化，不对服务器造成并发影响；\n\n间隔搜索等等，一般行为，为了不频繁请求接口，我们都会使用`节流函数`优化，或者失去焦点再去请求也是可以的；\n\n但是对于及查及显示的功能原则，这是就不能使用失焦查询了；这里的功能例如： 地址查询等等；\n\n那么输入查询也会出现另外的一个弊端， 那就是中文字符的影响，下面会说明 `bug` 复现的过程和解决方案!\n\n## 适用场景\n\n- 常见的搜索查询无非就那么几种，端与端的搜索也就是移动端与 pc 端；\n- 如果是移动端仅仅需要处理的是频繁请求的问题；避免频繁请求造成的服务器的压力;\n- 如果是 pc 端，就不是仅仅需要处理频繁请求的问题了； 并且你在 `input` 的情况下还要处理另外一种情况，输入中文有中文字符的情况；\n- 平常的搜索都是输入框， 按钮查询搜索;\n\n## 问题分析复盘\n\n在原有的功能上去选择化的维护与扩展；其中有关联单号，其实是个搜索查询功能, 查询输入的手机号关联的业主最新前三单的信息;\n\n因为当时考虑用户搜索查询方便，特处理输入框的事件为 oninput, 这样直接输入查询内容，在处理频繁请求的基础上去请求数据；这样就可以随查随时显示了；\n\n而不选择 onchange, onblur 是因为俩者都是失去焦点再去请求;\n\n针对三者的区别，我做了一下总结：\n\n- `oninput`: 只要输入， 输入框由内容则会执行，但是这里要区分一个问题：\n- `onchange, onblur相同点`: 俩者都是失去焦点之后再出处理对应的逻辑；\n- `onchange, onblur不同点`: `oncahnge`是在输入的基础上才会执行，而`onblur`不论是否输入都会执行；\n\n**但是：`oninput`要做一个区别，就是 pc 有其他输入法的情况下是以正常执行的，输入框不会有输入的文字或者字母， 而 Windows 自带的输入法，在输入框切换中文再去输入的情况，会将输入的英文先显示在输入框中，那样就会出现输入一个字符就会去请求一次；这样的情况就可以造成接口返回异常或者错误信息;**\n\n## 效果预览\n\n> 以下效果都是在 `windows`下的效果；\n\n### 使用其他的输入法\n\n![使用其他的输入法](http://wangxiaoze-view.github.io/picx-images-hosting/images/search_1.png)\n\n### windows 自带的输入法\n\n![自带的输入法](http://wangxiaoze-view.github.io/picx-images-hosting/images/search_2.png)\n\n> windows 自带的输入法，在这样的情况下会走请求， 还是有特殊符号的情况，如果在这样的情况下后端可能会报错；\n\n## 解决方案\n\n- 将 `oninput` 事件换成 `onchange, onblur` 事件，只有当失去焦点的情况下才会去请求， 这样可能会造成功能疑惑问题；都输入了怎么不执行呢？怎么没有数据呢？怎么操作？\n- 同样，继续使用 oninput 事件；不过在这基础上还要执行俩个事件 `compositionstart, compositionend`;\n- `compositionstart` 开始新的输入合成时会触发， `compositionend` 当文本段落的组成完成或取消时，`compositionend` 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。[compositionend](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event) [compositionstart](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event)\n\n## 实例代码\n\n```js\n// isInput 判断的是是否合并结束， 默认结束\nlet isInput = true;\ngetOrderDemo\n\t.on(\n\t\t\"input\",\n\t\tthrottle(function () {\n\t\t\t// 如果合并结束完成则， 进行下一步的逻辑操作; 没有结束合并  不会执行;\n\t\t\tif (isInput) {\n\t\t\t\tlet val = $(this)\n\t\t\t\t\t.val()\n\t\t\t\t\t.replace(/\\s|\\r|\\t|\\n/g, \"\");\n\t\t\t\t// ...code there 执行对应的逻辑操作;\n\t\t\t}\n\t\t}, 500)\n\t)\n\t.on(\"keyup\", function () {})\n\t.on(\"compositionstart\", function () {\n\t\t// 当执行如图二的情况下，说明还在合并，并没有结束\n\t\tisInput = false;\n\t})\n\t.on(\"compositionend\", function () {\n\t\t// 执行到这一步说明  合并结束， 当合并结束时，执行input\n\t\tisInput = true;\n\t});\n```\n","slug":"总结/项目总结/中英文搜索按键回车事件冲突","published":1,"updated":"2025-03-13T10:16:16.551Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iu001dfg9mgzn4af8q","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>普通的输入框，做一个搜索的功能，那么对于搜索，输入直接调用接口就好了， 为什么还要值得做记录总结呢？是因为，搜索查询并不是你想象中的直接调用接口就可以了；考虑的因素也是挺多的，例如，搜索优化，不对服务器造成并发影响；</p>\n<p>间隔搜索等等，一般行为，为了不频繁请求接口，我们都会使用<code>节流函数</code>优化，或者失去焦点再去请求也是可以的；</p>\n<p>但是对于及查及显示的功能原则，这是就不能使用失焦查询了；这里的功能例如： 地址查询等等；</p>\n<p>那么输入查询也会出现另外的一个弊端， 那就是中文字符的影响，下面会说明 <code>bug</code> 复现的过程和解决方案!</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>常见的搜索查询无非就那么几种，端与端的搜索也就是移动端与 pc 端；</li>\n<li>如果是移动端仅仅需要处理的是频繁请求的问题；避免频繁请求造成的服务器的压力;</li>\n<li>如果是 pc 端，就不是仅仅需要处理频繁请求的问题了； 并且你在 <code>input</code> 的情况下还要处理另外一种情况，输入中文有中文字符的情况；</li>\n<li>平常的搜索都是输入框， 按钮查询搜索;</li>\n</ul>\n<h2 id=\"问题分析复盘\"><a href=\"#问题分析复盘\" class=\"headerlink\" title=\"问题分析复盘\"></a>问题分析复盘</h2><p>在原有的功能上去选择化的维护与扩展；其中有关联单号，其实是个搜索查询功能, 查询输入的手机号关联的业主最新前三单的信息;</p>\n<p>因为当时考虑用户搜索查询方便，特处理输入框的事件为 oninput, 这样直接输入查询内容，在处理频繁请求的基础上去请求数据；这样就可以随查随时显示了；</p>\n<p>而不选择 onchange, onblur 是因为俩者都是失去焦点再去请求;</p>\n<p>针对三者的区别，我做了一下总结：</p>\n<ul>\n<li><code>oninput</code>: 只要输入， 输入框由内容则会执行，但是这里要区分一个问题：</li>\n<li><code>onchange, onblur相同点</code>: 俩者都是失去焦点之后再出处理对应的逻辑；</li>\n<li><code>onchange, onblur不同点</code>: <code>oncahnge</code>是在输入的基础上才会执行，而<code>onblur</code>不论是否输入都会执行；</li>\n</ul>\n<p><strong>但是：<code>oninput</code>要做一个区别，就是 pc 有其他输入法的情况下是以正常执行的，输入框不会有输入的文字或者字母， 而 Windows 自带的输入法，在输入框切换中文再去输入的情况，会将输入的英文先显示在输入框中，那样就会出现输入一个字符就会去请求一次；这样的情况就可以造成接口返回异常或者错误信息;</strong></p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><blockquote>\n<p>以下效果都是在 <code>windows</code>下的效果；</p>\n</blockquote>\n<h3 id=\"使用其他的输入法\"><a href=\"#使用其他的输入法\" class=\"headerlink\" title=\"使用其他的输入法\"></a>使用其他的输入法</h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/search_1.png\" alt=\"使用其他的输入法\"></p>\n<h3 id=\"windows-自带的输入法\"><a href=\"#windows-自带的输入法\" class=\"headerlink\" title=\"windows 自带的输入法\"></a>windows 自带的输入法</h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/search_2.png\" alt=\"自带的输入法\"></p>\n<blockquote>\n<p>windows 自带的输入法，在这样的情况下会走请求， 还是有特殊符号的情况，如果在这样的情况下后端可能会报错；</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>将 <code>oninput</code> 事件换成 <code>onchange, onblur</code> 事件，只有当失去焦点的情况下才会去请求， 这样可能会造成功能疑惑问题；都输入了怎么不执行呢？怎么没有数据呢？怎么操作？</li>\n<li>同样，继续使用 oninput 事件；不过在这基础上还要执行俩个事件 <code>compositionstart, compositionend</code>;</li>\n<li><code>compositionstart</code> 开始新的输入合成时会触发， <code>compositionend</code> 当文本段落的组成完成或取消时，<code>compositionend</code> 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\">compositionend</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\">compositionstart</a></li>\n</ul>\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// isInput 判断的是是否合并结束， 默认结束</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isInput = <span class=\"literal\">true</span>;</span><br><span class=\"line\">getOrderDemo</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果合并结束完成则， 进行下一步的逻辑操作; 没有结束合并  不会执行;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isInput) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> val = $(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">\t\t\t\t\t.<span class=\"title function_\">val</span>()</span><br><span class=\"line\">\t\t\t\t\t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s|\\r|\\t|\\n/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ...code there 执行对应的逻辑操作;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;compositionstart&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当执行如图二的情况下，说明还在合并，并没有结束</span></span><br><span class=\"line\">\t\tisInput = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;compositionend&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行到这一步说明  合并结束， 当合并结束时，执行input</span></span><br><span class=\"line\">\t\tisInput = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>普通的输入框，做一个搜索的功能，那么对于搜索，输入直接调用接口就好了， 为什么还要值得做记录总结呢？是因为，搜索查询并不是你想象中的直接调用接口就可以了；考虑的因素也是挺多的，例如，搜索优化，不对服务器造成并发影响；</p>\n<p>间隔搜索等等，一般行为，为了不频繁请求接口，我们都会使用<code>节流函数</code>优化，或者失去焦点再去请求也是可以的；</p>\n<p>但是对于及查及显示的功能原则，这是就不能使用失焦查询了；这里的功能例如： 地址查询等等；</p>\n<p>那么输入查询也会出现另外的一个弊端， 那就是中文字符的影响，下面会说明 <code>bug</code> 复现的过程和解决方案!</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>常见的搜索查询无非就那么几种，端与端的搜索也就是移动端与 pc 端；</li>\n<li>如果是移动端仅仅需要处理的是频繁请求的问题；避免频繁请求造成的服务器的压力;</li>\n<li>如果是 pc 端，就不是仅仅需要处理频繁请求的问题了； 并且你在 <code>input</code> 的情况下还要处理另外一种情况，输入中文有中文字符的情况；</li>\n<li>平常的搜索都是输入框， 按钮查询搜索;</li>\n</ul>\n<h2 id=\"问题分析复盘\"><a href=\"#问题分析复盘\" class=\"headerlink\" title=\"问题分析复盘\"></a>问题分析复盘</h2><p>在原有的功能上去选择化的维护与扩展；其中有关联单号，其实是个搜索查询功能, 查询输入的手机号关联的业主最新前三单的信息;</p>\n<p>因为当时考虑用户搜索查询方便，特处理输入框的事件为 oninput, 这样直接输入查询内容，在处理频繁请求的基础上去请求数据；这样就可以随查随时显示了；</p>\n<p>而不选择 onchange, onblur 是因为俩者都是失去焦点再去请求;</p>\n<p>针对三者的区别，我做了一下总结：</p>\n<ul>\n<li><code>oninput</code>: 只要输入， 输入框由内容则会执行，但是这里要区分一个问题：</li>\n<li><code>onchange, onblur相同点</code>: 俩者都是失去焦点之后再出处理对应的逻辑；</li>\n<li><code>onchange, onblur不同点</code>: <code>oncahnge</code>是在输入的基础上才会执行，而<code>onblur</code>不论是否输入都会执行；</li>\n</ul>\n<p><strong>但是：<code>oninput</code>要做一个区别，就是 pc 有其他输入法的情况下是以正常执行的，输入框不会有输入的文字或者字母， 而 Windows 自带的输入法，在输入框切换中文再去输入的情况，会将输入的英文先显示在输入框中，那样就会出现输入一个字符就会去请求一次；这样的情况就可以造成接口返回异常或者错误信息;</strong></p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><blockquote>\n<p>以下效果都是在 <code>windows</code>下的效果；</p>\n</blockquote>\n<h3 id=\"使用其他的输入法\"><a href=\"#使用其他的输入法\" class=\"headerlink\" title=\"使用其他的输入法\"></a>使用其他的输入法</h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/search_1.png\" alt=\"使用其他的输入法\"></p>\n<h3 id=\"windows-自带的输入法\"><a href=\"#windows-自带的输入法\" class=\"headerlink\" title=\"windows 自带的输入法\"></a>windows 自带的输入法</h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/search_2.png\" alt=\"自带的输入法\"></p>\n<blockquote>\n<p>windows 自带的输入法，在这样的情况下会走请求， 还是有特殊符号的情况，如果在这样的情况下后端可能会报错；</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>将 <code>oninput</code> 事件换成 <code>onchange, onblur</code> 事件，只有当失去焦点的情况下才会去请求， 这样可能会造成功能疑惑问题；都输入了怎么不执行呢？怎么没有数据呢？怎么操作？</li>\n<li>同样，继续使用 oninput 事件；不过在这基础上还要执行俩个事件 <code>compositionstart, compositionend</code>;</li>\n<li><code>compositionstart</code> 开始新的输入合成时会触发， <code>compositionend</code> 当文本段落的组成完成或取消时，<code>compositionend</code> 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\">compositionend</a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\">compositionstart</a></li>\n</ul>\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// isInput 判断的是是否合并结束， 默认结束</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isInput = <span class=\"literal\">true</span>;</span><br><span class=\"line\">getOrderDemo</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果合并结束完成则， 进行下一步的逻辑操作; 没有结束合并  不会执行;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isInput) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> val = $(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">\t\t\t\t\t.<span class=\"title function_\">val</span>()</span><br><span class=\"line\">\t\t\t\t\t.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s|\\r|\\t|\\n/g</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ...code there 执行对应的逻辑操作;</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;keyup&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;compositionstart&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当执行如图二的情况下，说明还在合并，并没有结束</span></span><br><span class=\"line\">\t\tisInput = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;compositionend&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行到这一步说明  合并结束， 当合并结束时，执行input</span></span><br><span class=\"line\">\t\tisInput = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"工作内容-图片上传之前的自定义水印","abbrlink":"e0191395","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n前几天，公司项目中有这么一个需求，说是上传图片给图片加水印的功能，我说那还不简单，因为公司图片存储采用的是七牛云，当然七牛云后台是可以设置图片的水印；\n\n但是我一看需求，好家伙果真不简单，原来不是几个字，而是多个元素叠加在一起的；水印的数据也是动态的，而七牛云后台只能设置一些\n静态属性或者图片地址，如果`url地址`加一些参数的情况，效果也是不可观的\n\n而通过`url`地址拼接参数的情况：`/image/<encodedkodocheme>` : 水印的源路径，**目前支持 kodo 资源**。kodo 资源可由 `kodo://<bucketname>/<key> `表示（此时 bucketname 需要与输入源在同一区域），均需要经过 urlsafe_base64_encode。\n\n注意：更换图片水印时，建议更换图片的文件名。\n\n这样的情况目前只支持 `kodo`的图片资源，如果使用这样的参数，那么我在上传前就要先上传动态数据的水盈图片，之后在上传要上传的图片；\n\n虽然这样是可以做到，但是对于七牛云的存储容量和流量来讲，消耗是很大的； 所以这样的实现方式是不可取的；\n\n水印效果图：\n\n![效果](http://wangxiaoze-view.github.io/picx-images-hosting/images/qn_canvas.svg)\n\n## 传统的`canvas`\n\n也可以采用传统的 canvas 实现，但是将上传的问图片也是可以通过下面的方式转为`url`，然后在通过生成`canvas`画图功能将上传的图片文件生成\ncanvas。然后在通过文字的定位定位在图片的左下角；\n\n但是这样的方式就会大量计算文本`x, y` 在 canvas 中的位置；因为数据是动态的，所以理论上是可以实现的，但是要考虑多行文本的问题； 所以这里不建议采用该方式；\n\n## 使用 `html2canvas` 将`html` 元素组合\n\n大致的思路就是：\n\n- 先将要生成`canvas`的容器在页面可视区域不可见，这里就是将它定位出去的；\n- 然后上传前，现将图片文件生成地址，赋值给`new Image()`， 在去监听加载完成； 之后就是将定位出去的元素样式化；\n- 通过`html2canvas`将跟元素生成带水印的`canvas`, 接下来就是对`canvas` 转为文件，从而实现水印图片的上传；\n\n首先，在上传文件前先将图片文件转为对象地址，然后兼容图片的加载完成。\n\n将之前定位出去的元素的图片赋值，设置跟元素的宽度和高度为图片的宽度和高度；\n\n然后在通过`html2canvas`插件将跟元素生成`canvas`，在将`canvas`转化为`blob`， 接着`new File`将`blob`转成文件；\n\n下面就是大概的思路\n\n```js\nthis.getDom(\"#file-input\").addEventListener(\"change\", function (e) {\n\t// 这里制考虑单个图片上传的情况\n\tconst file = e.target.files[0];\n\n\tconst tempImg = new Image();\n\ttempImg.src = URL.createObjectURL(file);\n\ttempImg.addEventListener(\"load\", function () {\n\t\t// 地址类似于：src=\"blob:http://localhost:63342/4302cb32-7eba-4a89-bd4a-66649bce781e\"\n\n\t\t// 获取元素的跟节点以及渲染的图片\n\t\tconst node = _this.getDom(\"#node\");\n\t\tconst imgDom = _this.getDom(\"img\");\n\n\t\t// 设置图片的路径，以及跟元素的宽度和高度\n\t\timgDom.setAttribute(\"src\", tempImg.src);\n\t\tnode.style.width = tempImg.width + \"px\";\n\t\tnode.style.height = tempImg.height + \"px\";\n\n\t\t// 通过 html2canvas 将渲染的元素专程canvas\n\t\thtml2canvas &&\n\t\t\thtml2canvas(node).then(function (canvas) {\n\t\t\t\t// 在将canvas转成文件， 实现文件的上传\n\t\t\t\tcanvas.toBlob(blob => {\n\t\t\t\t\t// 生成的文件，这个就是你要上传的文件\n\t\t\t\t\tconst newFile = new File([blob], file.name, { type: file.type });\n\t\t\t\t\tconsole.log(newFile);\n\n\t\t\t\t\t// 预览。将生成水印的canvas在生成图片url\n\t\t\t\t\tlet imgSrc = canvas.toDataURL(\"image/jpeg\", 1);\n\t\t\t\t\tconsole.log(imgSrc);\n\t\t\t\t\t_this.getDom(\n\t\t\t\t\t\t\".temp-container\"\n\t\t\t\t\t).innerHTML = `<img class=\"show\" style=\"width: ${tempImg.width}px; height: ${tempImg.height}px\" src=\"${imgSrc}\" alt=\"\" />`;\n\t\t\t\t});\n\t\t\t});\n\t});\n});\n```\n\n## `svg`代码片段\n\n还有一种方式，就是将`svg`代码片段，而这代码片段就是左下角的水印元素，将它生成 canvas，再将上传图片生成 canvas；然后俩张`canvas`合并；\n\n```js\n// svg 片段\nlet data = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\">\n        <foreignObject width=\"100%\" height=\"100%\">\n            <div xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div style=\"color: red\">这里就是你渲染的元素</div>\n            </div>\n        </foreignObject>\n    </svg>\n`;\n// 将svg生成 image\nlet imgSvg = new Image();\nlet blob = new Blob([data], { type: \"image/svg+xml;charset=utf-8\" });\nimgSvg.src = URL.createObjectURL(blob);\n\n// 上传图片和水印合并\nfunction img2Canvas(img) {\n\tconst canvas = document.createElement(\"canvas\");\n\tcanvas.width = img.width;\n\tcanvas.height = img.height;\n\tconst ctx = canvas.getContext(\"2d\");\n\tctx.drawImage(img, 0, 0);\n\n\timgSvg.onload = function () {\n\t\tctx.drawImage(imgSvg, 20, canvas.height - 100 - 20);\n\t\t// 摧毁刚刚生产的url\n\t\tURL.revokeObjectURL(imgSvg.src);\n\t};\n\timgSvg.src = URL.createObjectURL(blob);\n\n\tdocument.body.append(canvas);\n\n\treturn canvas;\n}\n\nthis.getDom(\"#file-input2\").addEventListener(\"change\", function (e) {\n\tconst file = e.target.files[0];\n\tlet tempImg = new Image();\n\ttempImg.src = URL.createObjectURL(file);\n\ttempImg.addEventListener(\"load\", () => {\n\t\timg2Canvas(tempImg).toBlob(blob => {\n\t\t\tconst newFile = new File([blob], file.name, { type: file.type });\n\t\t\tconsole.log(newFile);\n\t\t});\n\t});\n});\n```\n","source":"_posts/总结/项目总结/图片上传之前的自定义水印.md","raw":"---\ntitle: 工作内容-图片上传之前的自定义水印\nabbrlink: e0191395\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n前几天，公司项目中有这么一个需求，说是上传图片给图片加水印的功能，我说那还不简单，因为公司图片存储采用的是七牛云，当然七牛云后台是可以设置图片的水印；\n\n但是我一看需求，好家伙果真不简单，原来不是几个字，而是多个元素叠加在一起的；水印的数据也是动态的，而七牛云后台只能设置一些\n静态属性或者图片地址，如果`url地址`加一些参数的情况，效果也是不可观的\n\n而通过`url`地址拼接参数的情况：`/image/<encodedkodocheme>` : 水印的源路径，**目前支持 kodo 资源**。kodo 资源可由 `kodo://<bucketname>/<key> `表示（此时 bucketname 需要与输入源在同一区域），均需要经过 urlsafe_base64_encode。\n\n注意：更换图片水印时，建议更换图片的文件名。\n\n这样的情况目前只支持 `kodo`的图片资源，如果使用这样的参数，那么我在上传前就要先上传动态数据的水盈图片，之后在上传要上传的图片；\n\n虽然这样是可以做到，但是对于七牛云的存储容量和流量来讲，消耗是很大的； 所以这样的实现方式是不可取的；\n\n水印效果图：\n\n![效果](http://wangxiaoze-view.github.io/picx-images-hosting/images/qn_canvas.svg)\n\n## 传统的`canvas`\n\n也可以采用传统的 canvas 实现，但是将上传的问图片也是可以通过下面的方式转为`url`，然后在通过生成`canvas`画图功能将上传的图片文件生成\ncanvas。然后在通过文字的定位定位在图片的左下角；\n\n但是这样的方式就会大量计算文本`x, y` 在 canvas 中的位置；因为数据是动态的，所以理论上是可以实现的，但是要考虑多行文本的问题； 所以这里不建议采用该方式；\n\n## 使用 `html2canvas` 将`html` 元素组合\n\n大致的思路就是：\n\n- 先将要生成`canvas`的容器在页面可视区域不可见，这里就是将它定位出去的；\n- 然后上传前，现将图片文件生成地址，赋值给`new Image()`， 在去监听加载完成； 之后就是将定位出去的元素样式化；\n- 通过`html2canvas`将跟元素生成带水印的`canvas`, 接下来就是对`canvas` 转为文件，从而实现水印图片的上传；\n\n首先，在上传文件前先将图片文件转为对象地址，然后兼容图片的加载完成。\n\n将之前定位出去的元素的图片赋值，设置跟元素的宽度和高度为图片的宽度和高度；\n\n然后在通过`html2canvas`插件将跟元素生成`canvas`，在将`canvas`转化为`blob`， 接着`new File`将`blob`转成文件；\n\n下面就是大概的思路\n\n```js\nthis.getDom(\"#file-input\").addEventListener(\"change\", function (e) {\n\t// 这里制考虑单个图片上传的情况\n\tconst file = e.target.files[0];\n\n\tconst tempImg = new Image();\n\ttempImg.src = URL.createObjectURL(file);\n\ttempImg.addEventListener(\"load\", function () {\n\t\t// 地址类似于：src=\"blob:http://localhost:63342/4302cb32-7eba-4a89-bd4a-66649bce781e\"\n\n\t\t// 获取元素的跟节点以及渲染的图片\n\t\tconst node = _this.getDom(\"#node\");\n\t\tconst imgDom = _this.getDom(\"img\");\n\n\t\t// 设置图片的路径，以及跟元素的宽度和高度\n\t\timgDom.setAttribute(\"src\", tempImg.src);\n\t\tnode.style.width = tempImg.width + \"px\";\n\t\tnode.style.height = tempImg.height + \"px\";\n\n\t\t// 通过 html2canvas 将渲染的元素专程canvas\n\t\thtml2canvas &&\n\t\t\thtml2canvas(node).then(function (canvas) {\n\t\t\t\t// 在将canvas转成文件， 实现文件的上传\n\t\t\t\tcanvas.toBlob(blob => {\n\t\t\t\t\t// 生成的文件，这个就是你要上传的文件\n\t\t\t\t\tconst newFile = new File([blob], file.name, { type: file.type });\n\t\t\t\t\tconsole.log(newFile);\n\n\t\t\t\t\t// 预览。将生成水印的canvas在生成图片url\n\t\t\t\t\tlet imgSrc = canvas.toDataURL(\"image/jpeg\", 1);\n\t\t\t\t\tconsole.log(imgSrc);\n\t\t\t\t\t_this.getDom(\n\t\t\t\t\t\t\".temp-container\"\n\t\t\t\t\t).innerHTML = `<img class=\"show\" style=\"width: ${tempImg.width}px; height: ${tempImg.height}px\" src=\"${imgSrc}\" alt=\"\" />`;\n\t\t\t\t});\n\t\t\t});\n\t});\n});\n```\n\n## `svg`代码片段\n\n还有一种方式，就是将`svg`代码片段，而这代码片段就是左下角的水印元素，将它生成 canvas，再将上传图片生成 canvas；然后俩张`canvas`合并；\n\n```js\n// svg 片段\nlet data = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\">\n        <foreignObject width=\"100%\" height=\"100%\">\n            <div xmlns=\"http://www.w3.org/1999/xhtml\">\n                <div style=\"color: red\">这里就是你渲染的元素</div>\n            </div>\n        </foreignObject>\n    </svg>\n`;\n// 将svg生成 image\nlet imgSvg = new Image();\nlet blob = new Blob([data], { type: \"image/svg+xml;charset=utf-8\" });\nimgSvg.src = URL.createObjectURL(blob);\n\n// 上传图片和水印合并\nfunction img2Canvas(img) {\n\tconst canvas = document.createElement(\"canvas\");\n\tcanvas.width = img.width;\n\tcanvas.height = img.height;\n\tconst ctx = canvas.getContext(\"2d\");\n\tctx.drawImage(img, 0, 0);\n\n\timgSvg.onload = function () {\n\t\tctx.drawImage(imgSvg, 20, canvas.height - 100 - 20);\n\t\t// 摧毁刚刚生产的url\n\t\tURL.revokeObjectURL(imgSvg.src);\n\t};\n\timgSvg.src = URL.createObjectURL(blob);\n\n\tdocument.body.append(canvas);\n\n\treturn canvas;\n}\n\nthis.getDom(\"#file-input2\").addEventListener(\"change\", function (e) {\n\tconst file = e.target.files[0];\n\tlet tempImg = new Image();\n\ttempImg.src = URL.createObjectURL(file);\n\ttempImg.addEventListener(\"load\", () => {\n\t\timg2Canvas(tempImg).toBlob(blob => {\n\t\t\tconst newFile = new File([blob], file.name, { type: file.type });\n\t\t\tconsole.log(newFile);\n\t\t});\n\t});\n});\n```\n","slug":"总结/项目总结/图片上传之前的自定义水印","published":1,"updated":"2025-03-13T10:16:16.832Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iu001hfg9mciihfy57","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前几天，公司项目中有这么一个需求，说是上传图片给图片加水印的功能，我说那还不简单，因为公司图片存储采用的是七牛云，当然七牛云后台是可以设置图片的水印；</p>\n<p>但是我一看需求，好家伙果真不简单，原来不是几个字，而是多个元素叠加在一起的；水印的数据也是动态的，而七牛云后台只能设置一些<br>静态属性或者图片地址，如果<code>url地址</code>加一些参数的情况，效果也是不可观的</p>\n<p>而通过<code>url</code>地址拼接参数的情况：<code>/image/&lt;encodedkodocheme&gt;</code> : 水印的源路径，<strong>目前支持 kodo 资源</strong>。kodo 资源可由 <code>kodo://&lt;bucketname&gt;/&lt;key&gt; </code>表示（此时 bucketname 需要与输入源在同一区域），均需要经过 urlsafe_base64_encode。</p>\n<p>注意：更换图片水印时，建议更换图片的文件名。</p>\n<p>这样的情况目前只支持 <code>kodo</code>的图片资源，如果使用这样的参数，那么我在上传前就要先上传动态数据的水盈图片，之后在上传要上传的图片；</p>\n<p>虽然这样是可以做到，但是对于七牛云的存储容量和流量来讲，消耗是很大的； 所以这样的实现方式是不可取的；</p>\n<p>水印效果图：</p>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/qn_canvas.svg\" alt=\"效果\"></p>\n<h2 id=\"传统的canvas\"><a href=\"#传统的canvas\" class=\"headerlink\" title=\"传统的canvas\"></a>传统的<code>canvas</code></h2><p>也可以采用传统的 canvas 实现，但是将上传的问图片也是可以通过下面的方式转为<code>url</code>，然后在通过生成<code>canvas</code>画图功能将上传的图片文件生成<br>canvas。然后在通过文字的定位定位在图片的左下角；</p>\n<p>但是这样的方式就会大量计算文本<code>x, y</code> 在 canvas 中的位置；因为数据是动态的，所以理论上是可以实现的，但是要考虑多行文本的问题； 所以这里不建议采用该方式；</p>\n<h2 id=\"使用-html2canvas-将html-元素组合\"><a href=\"#使用-html2canvas-将html-元素组合\" class=\"headerlink\" title=\"使用 html2canvas 将html 元素组合\"></a>使用 <code>html2canvas</code> 将<code>html</code> 元素组合</h2><p>大致的思路就是：</p>\n<ul>\n<li>先将要生成<code>canvas</code>的容器在页面可视区域不可见，这里就是将它定位出去的；</li>\n<li>然后上传前，现将图片文件生成地址，赋值给<code>new Image()</code>， 在去监听加载完成； 之后就是将定位出去的元素样式化；</li>\n<li>通过<code>html2canvas</code>将跟元素生成带水印的<code>canvas</code>, 接下来就是对<code>canvas</code> 转为文件，从而实现水印图片的上传；</li>\n</ul>\n<p>首先，在上传文件前先将图片文件转为对象地址，然后兼容图片的加载完成。</p>\n<p>将之前定位出去的元素的图片赋值，设置跟元素的宽度和高度为图片的宽度和高度；</p>\n<p>然后在通过<code>html2canvas</code>插件将跟元素生成<code>canvas</code>，在将<code>canvas</code>转化为<code>blob</code>， 接着<code>new File</code>将<code>blob</code>转成文件；</p>\n<p>下面就是大概的思路</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#file-input&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里制考虑单个图片上传的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> file = e.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tempImg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">\ttempImg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(file);</span><br><span class=\"line\">\ttempImg.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 地址类似于：src=&quot;blob:http://localhost:63342/4302cb32-7eba-4a89-bd4a-66649bce781e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取元素的跟节点以及渲染的图片</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> node = _this.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#node&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> imgDom = _this.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置图片的路径，以及跟元素的宽度和高度</span></span><br><span class=\"line\">\t\timgDom.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;src&quot;</span>, tempImg.<span class=\"property\">src</span>);</span><br><span class=\"line\">\t\tnode.<span class=\"property\">style</span>.<span class=\"property\">width</span> = tempImg.<span class=\"property\">width</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">\t\tnode.<span class=\"property\">style</span>.<span class=\"property\">height</span> = tempImg.<span class=\"property\">height</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过 html2canvas 将渲染的元素专程canvas</span></span><br><span class=\"line\">\t\thtml2canvas &amp;&amp;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">html2canvas</span>(node).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">canvas</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 在将canvas转成文件， 实现文件的上传</span></span><br><span class=\"line\">\t\t\t\tcanvas.<span class=\"title function_\">toBlob</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 生成的文件，这个就是你要上传的文件</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> newFile = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([blob], file.<span class=\"property\">name</span>, &#123; <span class=\"attr\">type</span>: file.<span class=\"property\">type</span> &#125;);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 预览。将生成水印的canvas在生成图片url</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> imgSrc = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(imgSrc);</span><br><span class=\"line\">\t\t\t\t\t_this.<span class=\"title function_\">getDom</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;.temp-container&quot;</span></span><br><span class=\"line\">\t\t\t\t\t).<span class=\"property\">innerHTML</span> = <span class=\"string\">`&lt;img class=&quot;show&quot; style=&quot;width: <span class=\"subst\">$&#123;tempImg.width&#125;</span>px; height: <span class=\"subst\">$&#123;tempImg.height&#125;</span>px&quot; src=&quot;<span class=\"subst\">$&#123;imgSrc&#125;</span>&quot; alt=&quot;&quot; /&gt;`</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"svg代码片段\"><a href=\"#svg代码片段\" class=\"headerlink\" title=\"svg代码片段\"></a><code>svg</code>代码片段</h2><p>还有一种方式，就是将<code>svg</code>代码片段，而这代码片段就是左下角的水印元素，将它生成 canvas，再将上传图片生成 canvas；然后俩张<code>canvas</code>合并；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// svg 片段</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;foreignObject width=&quot;100%&quot; height=&quot;100%&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div style=&quot;color: red&quot;&gt;这里就是你渲染的元素&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/foreignObject&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/svg&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 将svg生成 image</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imgSvg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;image/svg+xml;charset=utf-8&quot;</span> &#125;);</span><br><span class=\"line\">imgSvg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传图片和水印合并</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">img2Canvas</span>(<span class=\"params\">img</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">\tcanvas.<span class=\"property\">width</span> = img.<span class=\"property\">width</span>;</span><br><span class=\"line\">\tcanvas.<span class=\"property\">height</span> = img.<span class=\"property\">height</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">\tctx.<span class=\"title function_\">drawImage</span>(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\timgSvg.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\tctx.<span class=\"title function_\">drawImage</span>(imgSvg, <span class=\"number\">20</span>, canvas.<span class=\"property\">height</span> - <span class=\"number\">100</span> - <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 摧毁刚刚生产的url</span></span><br><span class=\"line\">\t\t<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(imgSvg.<span class=\"property\">src</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\timgSvg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#file-input2&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> file = e.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tempImg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">\ttempImg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(file);</span><br><span class=\"line\">\ttempImg.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">img2Canvas</span>(tempImg).<span class=\"title function_\">toBlob</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> newFile = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([blob], file.<span class=\"property\">name</span>, &#123; <span class=\"attr\">type</span>: file.<span class=\"property\">type</span> &#125;);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFile);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前几天，公司项目中有这么一个需求，说是上传图片给图片加水印的功能，我说那还不简单，因为公司图片存储采用的是七牛云，当然七牛云后台是可以设置图片的水印；</p>\n<p>但是我一看需求，好家伙果真不简单，原来不是几个字，而是多个元素叠加在一起的；水印的数据也是动态的，而七牛云后台只能设置一些<br>静态属性或者图片地址，如果<code>url地址</code>加一些参数的情况，效果也是不可观的</p>\n<p>而通过<code>url</code>地址拼接参数的情况：<code>/image/&lt;encodedkodocheme&gt;</code> : 水印的源路径，<strong>目前支持 kodo 资源</strong>。kodo 资源可由 <code>kodo://&lt;bucketname&gt;/&lt;key&gt; </code>表示（此时 bucketname 需要与输入源在同一区域），均需要经过 urlsafe_base64_encode。</p>\n<p>注意：更换图片水印时，建议更换图片的文件名。</p>\n<p>这样的情况目前只支持 <code>kodo</code>的图片资源，如果使用这样的参数，那么我在上传前就要先上传动态数据的水盈图片，之后在上传要上传的图片；</p>\n<p>虽然这样是可以做到，但是对于七牛云的存储容量和流量来讲，消耗是很大的； 所以这样的实现方式是不可取的；</p>\n<p>水印效果图：</p>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/qn_canvas.svg\" alt=\"效果\"></p>\n<h2 id=\"传统的canvas\"><a href=\"#传统的canvas\" class=\"headerlink\" title=\"传统的canvas\"></a>传统的<code>canvas</code></h2><p>也可以采用传统的 canvas 实现，但是将上传的问图片也是可以通过下面的方式转为<code>url</code>，然后在通过生成<code>canvas</code>画图功能将上传的图片文件生成<br>canvas。然后在通过文字的定位定位在图片的左下角；</p>\n<p>但是这样的方式就会大量计算文本<code>x, y</code> 在 canvas 中的位置；因为数据是动态的，所以理论上是可以实现的，但是要考虑多行文本的问题； 所以这里不建议采用该方式；</p>\n<h2 id=\"使用-html2canvas-将html-元素组合\"><a href=\"#使用-html2canvas-将html-元素组合\" class=\"headerlink\" title=\"使用 html2canvas 将html 元素组合\"></a>使用 <code>html2canvas</code> 将<code>html</code> 元素组合</h2><p>大致的思路就是：</p>\n<ul>\n<li>先将要生成<code>canvas</code>的容器在页面可视区域不可见，这里就是将它定位出去的；</li>\n<li>然后上传前，现将图片文件生成地址，赋值给<code>new Image()</code>， 在去监听加载完成； 之后就是将定位出去的元素样式化；</li>\n<li>通过<code>html2canvas</code>将跟元素生成带水印的<code>canvas</code>, 接下来就是对<code>canvas</code> 转为文件，从而实现水印图片的上传；</li>\n</ul>\n<p>首先，在上传文件前先将图片文件转为对象地址，然后兼容图片的加载完成。</p>\n<p>将之前定位出去的元素的图片赋值，设置跟元素的宽度和高度为图片的宽度和高度；</p>\n<p>然后在通过<code>html2canvas</code>插件将跟元素生成<code>canvas</code>，在将<code>canvas</code>转化为<code>blob</code>， 接着<code>new File</code>将<code>blob</code>转成文件；</p>\n<p>下面就是大概的思路</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#file-input&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里制考虑单个图片上传的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> file = e.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tempImg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">\ttempImg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(file);</span><br><span class=\"line\">\ttempImg.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 地址类似于：src=&quot;blob:http://localhost:63342/4302cb32-7eba-4a89-bd4a-66649bce781e&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取元素的跟节点以及渲染的图片</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> node = _this.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#node&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> imgDom = _this.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置图片的路径，以及跟元素的宽度和高度</span></span><br><span class=\"line\">\t\timgDom.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;src&quot;</span>, tempImg.<span class=\"property\">src</span>);</span><br><span class=\"line\">\t\tnode.<span class=\"property\">style</span>.<span class=\"property\">width</span> = tempImg.<span class=\"property\">width</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">\t\tnode.<span class=\"property\">style</span>.<span class=\"property\">height</span> = tempImg.<span class=\"property\">height</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过 html2canvas 将渲染的元素专程canvas</span></span><br><span class=\"line\">\t\thtml2canvas &amp;&amp;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">html2canvas</span>(node).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">canvas</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 在将canvas转成文件， 实现文件的上传</span></span><br><span class=\"line\">\t\t\t\tcanvas.<span class=\"title function_\">toBlob</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 生成的文件，这个就是你要上传的文件</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> newFile = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([blob], file.<span class=\"property\">name</span>, &#123; <span class=\"attr\">type</span>: file.<span class=\"property\">type</span> &#125;);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 预览。将生成水印的canvas在生成图片url</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> imgSrc = canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(imgSrc);</span><br><span class=\"line\">\t\t\t\t\t_this.<span class=\"title function_\">getDom</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;.temp-container&quot;</span></span><br><span class=\"line\">\t\t\t\t\t).<span class=\"property\">innerHTML</span> = <span class=\"string\">`&lt;img class=&quot;show&quot; style=&quot;width: <span class=\"subst\">$&#123;tempImg.width&#125;</span>px; height: <span class=\"subst\">$&#123;tempImg.height&#125;</span>px&quot; src=&quot;<span class=\"subst\">$&#123;imgSrc&#125;</span>&quot; alt=&quot;&quot; /&gt;`</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"svg代码片段\"><a href=\"#svg代码片段\" class=\"headerlink\" title=\"svg代码片段\"></a><code>svg</code>代码片段</h2><p>还有一种方式，就是将<code>svg</code>代码片段，而这代码片段就是左下角的水印元素，将它生成 canvas，再将上传图片生成 canvas；然后俩张<code>canvas</code>合并；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// svg 片段</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;foreignObject width=&quot;100%&quot; height=&quot;100%&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;div style=&quot;color: red&quot;&gt;这里就是你渲染的元素&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/foreignObject&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/svg&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 将svg生成 image</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imgSvg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;image/svg+xml;charset=utf-8&quot;</span> &#125;);</span><br><span class=\"line\">imgSvg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上传图片和水印合并</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">img2Canvas</span>(<span class=\"params\">img</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">\tcanvas.<span class=\"property\">width</span> = img.<span class=\"property\">width</span>;</span><br><span class=\"line\">\tcanvas.<span class=\"property\">height</span> = img.<span class=\"property\">height</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">\tctx.<span class=\"title function_\">drawImage</span>(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\timgSvg.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\tctx.<span class=\"title function_\">drawImage</span>(imgSvg, <span class=\"number\">20</span>, canvas.<span class=\"property\">height</span> - <span class=\"number\">100</span> - <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 摧毁刚刚生产的url</span></span><br><span class=\"line\">\t\t<span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(imgSvg.<span class=\"property\">src</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\timgSvg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">append</span>(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">getDom</span>(<span class=\"string\">&quot;#file-input2&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> file = e.<span class=\"property\">target</span>.<span class=\"property\">files</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> tempImg = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">\ttempImg.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(file);</span><br><span class=\"line\">\ttempImg.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">img2Canvas</span>(tempImg).<span class=\"title function_\">toBlob</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> newFile = <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>([blob], file.<span class=\"property\">name</span>, &#123; <span class=\"attr\">type</span>: file.<span class=\"property\">type</span> &#125;);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newFile);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"工作内容-支付中转页面","abbrlink":"26c32907","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n最近上线了一个新的需求，就是支付版本的升级；何为升级？那就是在原有的基础上扩展添加了不同版本的支付功能；既保持了原有正常的功能，又扩展了一些第三方的支付版本；\n\n先说说，为什么要升级，原有的版本会有什么弊端，升级之后支持了哪些或者扩展了哪些？\n\n起初的支付，是通过后端获取到对应的参数，然后进行`api`唤起支付面板进行支付，不过这样有一个弊端就是微信支付会有限制额度的说法，如果支付金额过大，那么可能会支付不了；\n\n年前上线了`商家商户端`小程序，又赶上支付版本的升级，接着俩者就结合在一起了；本来拿到该需求很快就该上手开发的，但是由于其他需求版本，开始时间延迟了；所以到后面的开发时间也就压缩了，一周的开发时间，到周五上线的；\n\n那么研究了一下这个流程，其实也没什么难度，就是一些细节是比较多的；对于参数的加解密，数据的加解密等等是比较麻烦的；\n\n其中第三方接口会有加解密的一个过程，这个加解密最后丢给了后端，直接拿接口获取，加解密放在前端的话细节太多，有点浪费时间了；\n\n## 思路\n\n接下来大致说下实现的思路：\n\n- `vue`开发一个`H5`中转页面，而这个页面也会是之后所有支付的页面，包括扫码支付，下单支付等等；\n- 中转页面兼容参数，数据兼容，`query` 参数兼容；因为在后台在生成链接渲染在前端页面上，手机扫码去支付会有`url`参数解析异常的问题，针对该问题进行优化兼容；\n- 对于预支付返回的支付参数是不统一的，那就只能存在缓存或者 `query` 参数，对该对应的字段进行加密；\n- 根据后台配置的商家支付版本判断，是否需要原生微信支付或者是跳转小程序支付；\n\n那么大致流程图如下：\n\n![效果](https://wangxiaoze-view.github.io/picx-images-hosting/images/wechat_pay.png)\n\n## 细节\n\n不过刚开始有一个问题，那么`vue`如何跳转小程序呢？\n\n看了看微信官方的开发文档, 直接看到了`开放标签`\n\n```js\n<wx-open-launch-weapp\n  id=\"launch-btn\"\n  appid=\"wx12345678\"\n  path=\"pages/home/index?user=123&action=abc\"\n>\n  <script type=\"text/wxtag-template\">\n    <style>.btn { padding: 12px }</style>\n    <button class=\"btn\">打开小程序</button>\n  </script>\n</wx-open-launch-weapp>\n<script>\n  var btn = document.getElementById('launch-btn');\n  btn.addEventListener('launch', function (e) {\n    console.log('success');\n  });\n  btn.addEventListener('error', function (e) {\n    console.log('fail', e.detail);\n  });\n</script>\n\n```\n\n不过使用该开放标签，首先需要设置对应的`wx.config`, 将对应的`开放标签配置好`， 格式如下：\n\n```js\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [], // 必填，需要使用的JS接口列表\n  openTagList: [] // 可选，需要使用的开放标签列表，例如['wx-open-launch-app']\n})\n\nwx.ready(function () {\n  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中\n});\n\nwx.error(function (res) {\n  // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名\n});\n\n```\n\n不过要说明一点，就是只有`config:ok`的时候才会渲染对应的按钮去打开小程序；这里需要一些兼容问题；但是很坑的地方就是`text/wxtag-template`样式只能写在这个里面，不能写在页面中`style`中；下面是项目中用到的部分代码：\n\n```html\n<div style=\"position: relative;\">\n\t<wx-open-launch-weapp\n\t\tid=\"launch-btn\"\n\t\tstyle=\"position: absolute; top: 1.6rem;left:0px;right: 0px;\"\n\t\t:username=\"username\"\n\t\t:env-version=\"wxMpEnvVersion\"\n\t\t:path=\"jumpWxMpPath\"\n\t>\n\t\t<div is=\"script\" type=\"text/wxtag-template\" style=\"display: block;\">\n\t\t\t<div is=\"style\">\n\t\t\t\t.pay-button {position: relative;display: inline-block;boxSizing:\n\t\t\t\tborder-box;background-color: #07c160;color: #fff;height: 44px;outline:\n\t\t\t\tnone;border: 1px solid #07c160;border-radius:\n\t\t\t\t4px;width:100%;font-size:14px;}\n\t\t\t</div>\n\t\t\t<button class=\"pay-button\" @click=\"handlerToPay('applet')\">\n\t\t\t\t立即支付\n\t\t\t</button>\n\t\t</div>\n\t</wx-open-launch-weapp>\n</div>\n```\n\n省下的就交给接口，拿到对应的版本，`V1, V2, V3`等等；根据不同的场景使用，\n\n```js\n// 微信原生,这里换成自己对应的参数\nwxJsBridge({\n    'appId': wxJsBridgeJson.appId,\n    'timeStamp': wxJsBridgeJson.timeStamp,\n    'nonceStr': wxJsBridgeJson.nonceStr,\n    'package': wxJsBridgeJson.package,\n    'signType': wxJsBridgeJson.signType,\n    'paySign': wxJsBridgeJson.sign\n}, () => {})\n\n/// 这里处理了兼容的query，后端解析问题异常所以才要这么处理\ngetUrlQuery() {\n    const { param = '' } = this.$route.query || {}\n    const hasParam = Object.keys(this.$route.query).includes('param')\n    // 兼容不同url, 普通的query, 特殊的url如上链接;\n    return hasParam ? handlerQueryParams(param) : this.$route.query\n}\n\n// 这是后端给的链接\n// http://xxx.com/payPage?param=businessType:9;payId:1668909350495006721;totalAmt:100000\n\nexport function handlerQueryParams(url) {\n  const splitArr = url.split(\";\").filter(item => item !== \"\");\n  const query = {};\n  splitArr.forEach(item => {\n    let hasSq = item.indexOf(\":\");\n    if (hasSq !== -1) {\n      let key = item.substr(0, hasSq);\n      let val = item.substr(hasSq + 1, item.length - 1);\n      query[key] = val;\n    }\n  });\n\n  return query;\n}\n\n```\n\n对于不同支付的版本，当然也会有不同的按钮，例如`v1`版本的是原生支付，`v2`的是开放标签，那么就需要对应的判断了：\n\n```js\n// 需要跳转小程序支付的\nisPayWeapp() {\n    return ['V2', 'V3'].includes(this.version)\n},\n// 需要原生微信支付的\n// 如果接口报错 或者其他情况默认支持微信原生支付\nisPayWx() {\n    return ['V1'].includes(this.version)\n}\n```\n\n对于小程序那边的处理，也很简单，就是获取到对应的 query 参数，根据版本进行加解密，获取对应的支付计算等等；\n\n因为涉及相关的第三方就不介绍那么多了；\n","source":"_posts/总结/项目总结/支付中转页面.md","raw":"---\ntitle: 工作内容-支付中转页面\nabbrlink: 26c32907\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n最近上线了一个新的需求，就是支付版本的升级；何为升级？那就是在原有的基础上扩展添加了不同版本的支付功能；既保持了原有正常的功能，又扩展了一些第三方的支付版本；\n\n先说说，为什么要升级，原有的版本会有什么弊端，升级之后支持了哪些或者扩展了哪些？\n\n起初的支付，是通过后端获取到对应的参数，然后进行`api`唤起支付面板进行支付，不过这样有一个弊端就是微信支付会有限制额度的说法，如果支付金额过大，那么可能会支付不了；\n\n年前上线了`商家商户端`小程序，又赶上支付版本的升级，接着俩者就结合在一起了；本来拿到该需求很快就该上手开发的，但是由于其他需求版本，开始时间延迟了；所以到后面的开发时间也就压缩了，一周的开发时间，到周五上线的；\n\n那么研究了一下这个流程，其实也没什么难度，就是一些细节是比较多的；对于参数的加解密，数据的加解密等等是比较麻烦的；\n\n其中第三方接口会有加解密的一个过程，这个加解密最后丢给了后端，直接拿接口获取，加解密放在前端的话细节太多，有点浪费时间了；\n\n## 思路\n\n接下来大致说下实现的思路：\n\n- `vue`开发一个`H5`中转页面，而这个页面也会是之后所有支付的页面，包括扫码支付，下单支付等等；\n- 中转页面兼容参数，数据兼容，`query` 参数兼容；因为在后台在生成链接渲染在前端页面上，手机扫码去支付会有`url`参数解析异常的问题，针对该问题进行优化兼容；\n- 对于预支付返回的支付参数是不统一的，那就只能存在缓存或者 `query` 参数，对该对应的字段进行加密；\n- 根据后台配置的商家支付版本判断，是否需要原生微信支付或者是跳转小程序支付；\n\n那么大致流程图如下：\n\n![效果](https://wangxiaoze-view.github.io/picx-images-hosting/images/wechat_pay.png)\n\n## 细节\n\n不过刚开始有一个问题，那么`vue`如何跳转小程序呢？\n\n看了看微信官方的开发文档, 直接看到了`开放标签`\n\n```js\n<wx-open-launch-weapp\n  id=\"launch-btn\"\n  appid=\"wx12345678\"\n  path=\"pages/home/index?user=123&action=abc\"\n>\n  <script type=\"text/wxtag-template\">\n    <style>.btn { padding: 12px }</style>\n    <button class=\"btn\">打开小程序</button>\n  </script>\n</wx-open-launch-weapp>\n<script>\n  var btn = document.getElementById('launch-btn');\n  btn.addEventListener('launch', function (e) {\n    console.log('success');\n  });\n  btn.addEventListener('error', function (e) {\n    console.log('fail', e.detail);\n  });\n</script>\n\n```\n\n不过使用该开放标签，首先需要设置对应的`wx.config`, 将对应的`开放标签配置好`， 格式如下：\n\n```js\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [], // 必填，需要使用的JS接口列表\n  openTagList: [] // 可选，需要使用的开放标签列表，例如['wx-open-launch-app']\n})\n\nwx.ready(function () {\n  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中\n});\n\nwx.error(function (res) {\n  // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名\n});\n\n```\n\n不过要说明一点，就是只有`config:ok`的时候才会渲染对应的按钮去打开小程序；这里需要一些兼容问题；但是很坑的地方就是`text/wxtag-template`样式只能写在这个里面，不能写在页面中`style`中；下面是项目中用到的部分代码：\n\n```html\n<div style=\"position: relative;\">\n\t<wx-open-launch-weapp\n\t\tid=\"launch-btn\"\n\t\tstyle=\"position: absolute; top: 1.6rem;left:0px;right: 0px;\"\n\t\t:username=\"username\"\n\t\t:env-version=\"wxMpEnvVersion\"\n\t\t:path=\"jumpWxMpPath\"\n\t>\n\t\t<div is=\"script\" type=\"text/wxtag-template\" style=\"display: block;\">\n\t\t\t<div is=\"style\">\n\t\t\t\t.pay-button {position: relative;display: inline-block;boxSizing:\n\t\t\t\tborder-box;background-color: #07c160;color: #fff;height: 44px;outline:\n\t\t\t\tnone;border: 1px solid #07c160;border-radius:\n\t\t\t\t4px;width:100%;font-size:14px;}\n\t\t\t</div>\n\t\t\t<button class=\"pay-button\" @click=\"handlerToPay('applet')\">\n\t\t\t\t立即支付\n\t\t\t</button>\n\t\t</div>\n\t</wx-open-launch-weapp>\n</div>\n```\n\n省下的就交给接口，拿到对应的版本，`V1, V2, V3`等等；根据不同的场景使用，\n\n```js\n// 微信原生,这里换成自己对应的参数\nwxJsBridge({\n    'appId': wxJsBridgeJson.appId,\n    'timeStamp': wxJsBridgeJson.timeStamp,\n    'nonceStr': wxJsBridgeJson.nonceStr,\n    'package': wxJsBridgeJson.package,\n    'signType': wxJsBridgeJson.signType,\n    'paySign': wxJsBridgeJson.sign\n}, () => {})\n\n/// 这里处理了兼容的query，后端解析问题异常所以才要这么处理\ngetUrlQuery() {\n    const { param = '' } = this.$route.query || {}\n    const hasParam = Object.keys(this.$route.query).includes('param')\n    // 兼容不同url, 普通的query, 特殊的url如上链接;\n    return hasParam ? handlerQueryParams(param) : this.$route.query\n}\n\n// 这是后端给的链接\n// http://xxx.com/payPage?param=businessType:9;payId:1668909350495006721;totalAmt:100000\n\nexport function handlerQueryParams(url) {\n  const splitArr = url.split(\";\").filter(item => item !== \"\");\n  const query = {};\n  splitArr.forEach(item => {\n    let hasSq = item.indexOf(\":\");\n    if (hasSq !== -1) {\n      let key = item.substr(0, hasSq);\n      let val = item.substr(hasSq + 1, item.length - 1);\n      query[key] = val;\n    }\n  });\n\n  return query;\n}\n\n```\n\n对于不同支付的版本，当然也会有不同的按钮，例如`v1`版本的是原生支付，`v2`的是开放标签，那么就需要对应的判断了：\n\n```js\n// 需要跳转小程序支付的\nisPayWeapp() {\n    return ['V2', 'V3'].includes(this.version)\n},\n// 需要原生微信支付的\n// 如果接口报错 或者其他情况默认支持微信原生支付\nisPayWx() {\n    return ['V1'].includes(this.version)\n}\n```\n\n对于小程序那边的处理，也很简单，就是获取到对应的 query 参数，根据版本进行加解密，获取对应的支付计算等等；\n\n因为涉及相关的第三方就不介绍那么多了；\n","slug":"总结/项目总结/支付中转页面","published":1,"updated":"2025-03-13T10:16:16.625Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iv001lfg9me3uvdxct","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近上线了一个新的需求，就是支付版本的升级；何为升级？那就是在原有的基础上扩展添加了不同版本的支付功能；既保持了原有正常的功能，又扩展了一些第三方的支付版本；</p>\n<p>先说说，为什么要升级，原有的版本会有什么弊端，升级之后支持了哪些或者扩展了哪些？</p>\n<p>起初的支付，是通过后端获取到对应的参数，然后进行<code>api</code>唤起支付面板进行支付，不过这样有一个弊端就是微信支付会有限制额度的说法，如果支付金额过大，那么可能会支付不了；</p>\n<p>年前上线了<code>商家商户端</code>小程序，又赶上支付版本的升级，接着俩者就结合在一起了；本来拿到该需求很快就该上手开发的，但是由于其他需求版本，开始时间延迟了；所以到后面的开发时间也就压缩了，一周的开发时间，到周五上线的；</p>\n<p>那么研究了一下这个流程，其实也没什么难度，就是一些细节是比较多的；对于参数的加解密，数据的加解密等等是比较麻烦的；</p>\n<p>其中第三方接口会有加解密的一个过程，这个加解密最后丢给了后端，直接拿接口获取，加解密放在前端的话细节太多，有点浪费时间了；</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>接下来大致说下实现的思路：</p>\n<ul>\n<li><code>vue</code>开发一个<code>H5</code>中转页面，而这个页面也会是之后所有支付的页面，包括扫码支付，下单支付等等；</li>\n<li>中转页面兼容参数，数据兼容，<code>query</code> 参数兼容；因为在后台在生成链接渲染在前端页面上，手机扫码去支付会有<code>url</code>参数解析异常的问题，针对该问题进行优化兼容；</li>\n<li>对于预支付返回的支付参数是不统一的，那就只能存在缓存或者 <code>query</code> 参数，对该对应的字段进行加密；</li>\n<li>根据后台配置的商家支付版本判断，是否需要原生微信支付或者是跳转小程序支付；</li>\n</ul>\n<p>那么大致流程图如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/wechat_pay.png\" alt=\"效果\"></p>\n<h2 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h2><p>不过刚开始有一个问题，那么<code>vue</code>如何跳转小程序呢？</p>\n<p>看了看微信官方的开发文档, 直接看到了<code>开放标签</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wx-open-launch-weapp</span><br><span class=\"line\">  id=<span class=\"string\">&quot;launch-btn&quot;</span></span><br><span class=\"line\">  appid=<span class=\"string\">&quot;wx12345678&quot;</span></span><br><span class=\"line\">  path=<span class=\"string\">&quot;pages/home/index?user=123&amp;action=abc&quot;</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/wxtag-template&quot;</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span> &#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>打开小程序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">  </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/wx-open-launch-weapp&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;launch-btn&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;launch&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fail&#x27;</span>, e.<span class=\"property\">detail</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不过使用该开放标签，首先需要设置对应的<code>wx.config</code>, 将对应的<code>开放标签配置好</code>， 格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">config</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印</span></span><br><span class=\"line\">  <span class=\"attr\">appId</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">  <span class=\"attr\">timestamp</span>: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">  <span class=\"attr\">nonceStr</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">  <span class=\"attr\">signature</span>: <span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">  <span class=\"attr\">jsApiList</span>: [], <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">  <span class=\"attr\">openTagList</span>: [] <span class=\"comment\">// 可选，需要使用的开放标签列表，例如[&#x27;wx-open-launch-app&#x27;]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wx.<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wx.<span class=\"title function_\">error</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不过要说明一点，就是只有<code>config:ok</code>的时候才会渲染对应的按钮去打开小程序；这里需要一些兼容问题；但是很坑的地方就是<code>text/wxtag-template</code>样式只能写在这个里面，不能写在页面中<code>style</code>中；下面是项目中用到的部分代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;position: relative;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">wx-open-launch-weapp</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">id</span>=<span class=\"string\">&quot;launch-btn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;position: absolute; top: 1.6rem;left:0px;right: 0px;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:username</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:env-version</span>=<span class=\"string\">&quot;wxMpEnvVersion&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:path</span>=<span class=\"string\">&quot;jumpWxMpPath&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;script&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/wxtag-template&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: block;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;style&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t.pay-button &#123;position: relative;display: inline-block;boxSizing:</span><br><span class=\"line\">\t\t\t\tborder-box;background-color: #07c160;color: #fff;height: 44px;outline:</span><br><span class=\"line\">\t\t\t\tnone;border: 1px solid #07c160;border-radius:</span><br><span class=\"line\">\t\t\t\t4px;width:100%;font-size:14px;&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pay-button&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handlerToPay(&#x27;applet&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t立即支付</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">wx-open-launch-weapp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>省下的就交给接口，拿到对应的版本，<code>V1, V2, V3</code>等等；根据不同的场景使用，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 微信原生,这里换成自己对应的参数</span></span><br><span class=\"line\"><span class=\"title function_\">wxJsBridge</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;appId&#x27;</span>: wxJsBridgeJson.<span class=\"property\">appId</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;timeStamp&#x27;</span>: wxJsBridgeJson.<span class=\"property\">timeStamp</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;nonceStr&#x27;</span>: wxJsBridgeJson.<span class=\"property\">nonceStr</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;package&#x27;</span>: wxJsBridgeJson.<span class=\"property\">package</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;signType&#x27;</span>: wxJsBridgeJson.<span class=\"property\">signType</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;paySign&#x27;</span>: wxJsBridgeJson.<span class=\"property\">sign</span></span><br><span class=\"line\">&#125;, <span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 这里处理了兼容的query，后端解析问题异常所以才要这么处理</span></span><br><span class=\"line\"><span class=\"title function_\">getUrlQuery</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; param = <span class=\"string\">&#x27;&#x27;</span> &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span> || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hasParam = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>).<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;param&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 兼容不同url, 普通的query, 特殊的url如上链接;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasParam ? <span class=\"title function_\">handlerQueryParams</span>(param) : <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是后端给的链接</span></span><br><span class=\"line\"><span class=\"comment\">// http://xxx.com/payPage?param=businessType:9;payId:1668909350495006721;totalAmt:100000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handlerQueryParams</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> splitArr = url.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;;&quot;</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = &#123;&#125;;</span><br><span class=\"line\">  splitArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasSq = item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasSq !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> key = item.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, hasSq);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> val = item.<span class=\"title function_\">substr</span>(hasSq + <span class=\"number\">1</span>, item.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">      query[key] = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于不同支付的版本，当然也会有不同的按钮，例如<code>v1</code>版本的是原生支付，<code>v2</code>的是开放标签，那么就需要对应的判断了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要跳转小程序支付的</span></span><br><span class=\"line\"><span class=\"title function_\">isPayWeapp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;V2&#x27;</span>, <span class=\"string\">&#x27;V3&#x27;</span>].<span class=\"title function_\">includes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">version</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 需要原生微信支付的</span></span><br><span class=\"line\"><span class=\"comment\">// 如果接口报错 或者其他情况默认支持微信原生支付</span></span><br><span class=\"line\"><span class=\"title function_\">isPayWx</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;V1&#x27;</span>].<span class=\"title function_\">includes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">version</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于小程序那边的处理，也很简单，就是获取到对应的 query 参数，根据版本进行加解密，获取对应的支付计算等等；</p>\n<p>因为涉及相关的第三方就不介绍那么多了；</p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近上线了一个新的需求，就是支付版本的升级；何为升级？那就是在原有的基础上扩展添加了不同版本的支付功能；既保持了原有正常的功能，又扩展了一些第三方的支付版本；</p>\n<p>先说说，为什么要升级，原有的版本会有什么弊端，升级之后支持了哪些或者扩展了哪些？</p>\n<p>起初的支付，是通过后端获取到对应的参数，然后进行<code>api</code>唤起支付面板进行支付，不过这样有一个弊端就是微信支付会有限制额度的说法，如果支付金额过大，那么可能会支付不了；</p>\n<p>年前上线了<code>商家商户端</code>小程序，又赶上支付版本的升级，接着俩者就结合在一起了；本来拿到该需求很快就该上手开发的，但是由于其他需求版本，开始时间延迟了；所以到后面的开发时间也就压缩了，一周的开发时间，到周五上线的；</p>\n<p>那么研究了一下这个流程，其实也没什么难度，就是一些细节是比较多的；对于参数的加解密，数据的加解密等等是比较麻烦的；</p>\n<p>其中第三方接口会有加解密的一个过程，这个加解密最后丢给了后端，直接拿接口获取，加解密放在前端的话细节太多，有点浪费时间了；</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>接下来大致说下实现的思路：</p>\n<ul>\n<li><code>vue</code>开发一个<code>H5</code>中转页面，而这个页面也会是之后所有支付的页面，包括扫码支付，下单支付等等；</li>\n<li>中转页面兼容参数，数据兼容，<code>query</code> 参数兼容；因为在后台在生成链接渲染在前端页面上，手机扫码去支付会有<code>url</code>参数解析异常的问题，针对该问题进行优化兼容；</li>\n<li>对于预支付返回的支付参数是不统一的，那就只能存在缓存或者 <code>query</code> 参数，对该对应的字段进行加密；</li>\n<li>根据后台配置的商家支付版本判断，是否需要原生微信支付或者是跳转小程序支付；</li>\n</ul>\n<p>那么大致流程图如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/wechat_pay.png\" alt=\"效果\"></p>\n<h2 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h2><p>不过刚开始有一个问题，那么<code>vue</code>如何跳转小程序呢？</p>\n<p>看了看微信官方的开发文档, 直接看到了<code>开放标签</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;wx-open-launch-weapp</span><br><span class=\"line\">  id=<span class=\"string\">&quot;launch-btn&quot;</span></span><br><span class=\"line\">  appid=<span class=\"string\">&quot;wx12345678&quot;</span></span><br><span class=\"line\">  path=<span class=\"string\">&quot;pages/home/index?user=123&amp;action=abc&quot;</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/wxtag-template&quot;</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"attribute\">padding</span>: <span class=\"number\">12px</span> &#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>打开小程序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">  </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/wx-open-launch-weapp&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;launch-btn&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;launch&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fail&#x27;</span>, e.<span class=\"property\">detail</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不过使用该开放标签，首先需要设置对应的<code>wx.config</code>, 将对应的<code>开放标签配置好</code>， 格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.<span class=\"title function_\">config</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印</span></span><br><span class=\"line\">  <span class=\"attr\">appId</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">  <span class=\"attr\">timestamp</span>: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">  <span class=\"attr\">nonceStr</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">  <span class=\"attr\">signature</span>: <span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">  <span class=\"attr\">jsApiList</span>: [], <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">  <span class=\"attr\">openTagList</span>: [] <span class=\"comment\">// 可选，需要使用的开放标签列表，例如[&#x27;wx-open-launch-app&#x27;]</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">wx.<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">wx.<span class=\"title function_\">error</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不过要说明一点，就是只有<code>config:ok</code>的时候才会渲染对应的按钮去打开小程序；这里需要一些兼容问题；但是很坑的地方就是<code>text/wxtag-template</code>样式只能写在这个里面，不能写在页面中<code>style</code>中；下面是项目中用到的部分代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;position: relative;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">wx-open-launch-weapp</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">id</span>=<span class=\"string\">&quot;launch-btn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">style</span>=<span class=\"string\">&quot;position: absolute; top: 1.6rem;left:0px;right: 0px;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:username</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:env-version</span>=<span class=\"string\">&quot;wxMpEnvVersion&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">:path</span>=<span class=\"string\">&quot;jumpWxMpPath&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;script&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/wxtag-template&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: block;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;style&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t.pay-button &#123;position: relative;display: inline-block;boxSizing:</span><br><span class=\"line\">\t\t\t\tborder-box;background-color: #07c160;color: #fff;height: 44px;outline:</span><br><span class=\"line\">\t\t\t\tnone;border: 1px solid #07c160;border-radius:</span><br><span class=\"line\">\t\t\t\t4px;width:100%;font-size:14px;&#125;</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pay-button&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handlerToPay(&#x27;applet&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t立即支付</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">wx-open-launch-weapp</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>省下的就交给接口，拿到对应的版本，<code>V1, V2, V3</code>等等；根据不同的场景使用，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 微信原生,这里换成自己对应的参数</span></span><br><span class=\"line\"><span class=\"title function_\">wxJsBridge</span>(&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;appId&#x27;</span>: wxJsBridgeJson.<span class=\"property\">appId</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;timeStamp&#x27;</span>: wxJsBridgeJson.<span class=\"property\">timeStamp</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;nonceStr&#x27;</span>: wxJsBridgeJson.<span class=\"property\">nonceStr</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;package&#x27;</span>: wxJsBridgeJson.<span class=\"property\">package</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;signType&#x27;</span>: wxJsBridgeJson.<span class=\"property\">signType</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;paySign&#x27;</span>: wxJsBridgeJson.<span class=\"property\">sign</span></span><br><span class=\"line\">&#125;, <span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 这里处理了兼容的query，后端解析问题异常所以才要这么处理</span></span><br><span class=\"line\"><span class=\"title function_\">getUrlQuery</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; param = <span class=\"string\">&#x27;&#x27;</span> &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span> || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hasParam = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span>).<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;param&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 兼容不同url, 普通的query, 特殊的url如上链接;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasParam ? <span class=\"title function_\">handlerQueryParams</span>(param) : <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">query</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是后端给的链接</span></span><br><span class=\"line\"><span class=\"comment\">// http://xxx.com/payPage?param=businessType:9;payId:1668909350495006721;totalAmt:100000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handlerQueryParams</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> splitArr = url.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;;&quot;</span>).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = &#123;&#125;;</span><br><span class=\"line\">  splitArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasSq = item.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasSq !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> key = item.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, hasSq);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> val = item.<span class=\"title function_\">substr</span>(hasSq + <span class=\"number\">1</span>, item.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">      query[key] = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于不同支付的版本，当然也会有不同的按钮，例如<code>v1</code>版本的是原生支付，<code>v2</code>的是开放标签，那么就需要对应的判断了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要跳转小程序支付的</span></span><br><span class=\"line\"><span class=\"title function_\">isPayWeapp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;V2&#x27;</span>, <span class=\"string\">&#x27;V3&#x27;</span>].<span class=\"title function_\">includes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">version</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 需要原生微信支付的</span></span><br><span class=\"line\"><span class=\"comment\">// 如果接口报错 或者其他情况默认支持微信原生支付</span></span><br><span class=\"line\"><span class=\"title function_\">isPayWx</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;V1&#x27;</span>].<span class=\"title function_\">includes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">version</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于小程序那边的处理，也很简单，就是获取到对应的 query 参数，根据版本进行加解密，获取对应的支付计算等等；</p>\n<p>因为涉及相关的第三方就不介绍那么多了；</p>\n"},{"title":"工作内容-移动端返回触发俩次","abbrlink":"defca8ec","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n\n前端时间移动 APP 与 h5 的一个混合式开发项目中，遇到了一个比较搞笑的 bug；刚开始有点纳闷，后来静下心来才觉得这个问题有点可笑；\nh5 的项目采用的 vue3 + vant3 开发的，h5 页面的顶部`tabBar`结构为左中右，是对 vant 的二次封装；\n\n\n## 复盘\n\n### **是一个怎样的问题？**\n\n在开发项目中，因为是混合式开发， h5 会调用原生 app 的一些方法，例如文件上传，返回上级页面，跳转 app 页面等等；\n\n一级页面为 h5 页面, 二级页面也是 h5 页面，在二级页面返回直接跳出，直接到了 app 原生页面首页；按理说这应该返回的是一级 h5 的页面；\n\n### **浏览器打开 h5 一级页面模拟 bug 复现**\n\n采用`vue-router`中的`router.back()` 和 `router.go(page)`方法，均在浏览器中返回的是一级页面；但是在`app webview`中直接跳出。执行了俩次；\n\n使用调试手段. `console日志 和 debugger` 都会发现执行了俩次；\n\n### **寻找问题来源**\n\n![效果图](http://wangxiaoze-view.github.io/picx-images-hosting/images/vue-tabbar.svg)\n\n### **解决方案**\n\n这个问题确实是粗心造成的；不过这个 bug 的解决方案也很简单，既然知道了问题的来源，那么对于解决方案，无非以下俩点：\n\n- 方案一： 去掉子组件自带的 api 方法 和 导出的`emit`\n- 方案二： 那就是将`emit` 的 name 进行修改，不要修改和子组件一致的`event name`； 当然父组件的`event name` 要和 子组件的\n  `emit` 中的`event name`一致即可；\n","source":"_posts/总结/项目总结/移动端返回触发俩次.md","raw":"---\ntitle: 工作内容-移动端返回触发俩次\nabbrlink: defca8ec\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n\n前端时间移动 APP 与 h5 的一个混合式开发项目中，遇到了一个比较搞笑的 bug；刚开始有点纳闷，后来静下心来才觉得这个问题有点可笑；\nh5 的项目采用的 vue3 + vant3 开发的，h5 页面的顶部`tabBar`结构为左中右，是对 vant 的二次封装；\n\n\n## 复盘\n\n### **是一个怎样的问题？**\n\n在开发项目中，因为是混合式开发， h5 会调用原生 app 的一些方法，例如文件上传，返回上级页面，跳转 app 页面等等；\n\n一级页面为 h5 页面, 二级页面也是 h5 页面，在二级页面返回直接跳出，直接到了 app 原生页面首页；按理说这应该返回的是一级 h5 的页面；\n\n### **浏览器打开 h5 一级页面模拟 bug 复现**\n\n采用`vue-router`中的`router.back()` 和 `router.go(page)`方法，均在浏览器中返回的是一级页面；但是在`app webview`中直接跳出。执行了俩次；\n\n使用调试手段. `console日志 和 debugger` 都会发现执行了俩次；\n\n### **寻找问题来源**\n\n![效果图](http://wangxiaoze-view.github.io/picx-images-hosting/images/vue-tabbar.svg)\n\n### **解决方案**\n\n这个问题确实是粗心造成的；不过这个 bug 的解决方案也很简单，既然知道了问题的来源，那么对于解决方案，无非以下俩点：\n\n- 方案一： 去掉子组件自带的 api 方法 和 导出的`emit`\n- 方案二： 那就是将`emit` 的 name 进行修改，不要修改和子组件一致的`event name`； 当然父组件的`event name` 要和 子组件的\n  `emit` 中的`event name`一致即可；\n","slug":"总结/项目总结/移动端返回触发俩次","published":1,"updated":"2025-03-13T10:16:16.765Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iv001pfg9m061h1yjm","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间移动 APP 与 h5 的一个混合式开发项目中，遇到了一个比较搞笑的 bug；刚开始有点纳闷，后来静下心来才觉得这个问题有点可笑；<br>h5 的项目采用的 vue3 + vant3 开发的，h5 页面的顶部<code>tabBar</code>结构为左中右，是对 vant 的二次封装；</p>\n<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><h3 id=\"是一个怎样的问题？\"><a href=\"#是一个怎样的问题？\" class=\"headerlink\" title=\"是一个怎样的问题？\"></a><strong>是一个怎样的问题？</strong></h3><p>在开发项目中，因为是混合式开发， h5 会调用原生 app 的一些方法，例如文件上传，返回上级页面，跳转 app 页面等等；</p>\n<p>一级页面为 h5 页面, 二级页面也是 h5 页面，在二级页面返回直接跳出，直接到了 app 原生页面首页；按理说这应该返回的是一级 h5 的页面；</p>\n<h3 id=\"浏览器打开-h5-一级页面模拟-bug-复现\"><a href=\"#浏览器打开-h5-一级页面模拟-bug-复现\" class=\"headerlink\" title=\"浏览器打开 h5 一级页面模拟 bug 复现\"></a><strong>浏览器打开 h5 一级页面模拟 bug 复现</strong></h3><p>采用<code>vue-router</code>中的<code>router.back()</code> 和 <code>router.go(page)</code>方法，均在浏览器中返回的是一级页面；但是在<code>app webview</code>中直接跳出。执行了俩次；</p>\n<p>使用调试手段. <code>console日志 和 debugger</code> 都会发现执行了俩次；</p>\n<h3 id=\"寻找问题来源\"><a href=\"#寻找问题来源\" class=\"headerlink\" title=\"寻找问题来源\"></a><strong>寻找问题来源</strong></h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/vue-tabbar.svg\" alt=\"效果图\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a><strong>解决方案</strong></h3><p>这个问题确实是粗心造成的；不过这个 bug 的解决方案也很简单，既然知道了问题的来源，那么对于解决方案，无非以下俩点：</p>\n<ul>\n<li>方案一： 去掉子组件自带的 api 方法 和 导出的<code>emit</code></li>\n<li>方案二： 那就是将<code>emit</code> 的 name 进行修改，不要修改和子组件一致的<code>event name</code>； 当然父组件的<code>event name</code> 要和 子组件的<br><code>emit</code> 中的<code>event name</code>一致即可；</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前端时间移动 APP 与 h5 的一个混合式开发项目中，遇到了一个比较搞笑的 bug；刚开始有点纳闷，后来静下心来才觉得这个问题有点可笑；<br>h5 的项目采用的 vue3 + vant3 开发的，h5 页面的顶部<code>tabBar</code>结构为左中右，是对 vant 的二次封装；</p>\n<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><h3 id=\"是一个怎样的问题？\"><a href=\"#是一个怎样的问题？\" class=\"headerlink\" title=\"是一个怎样的问题？\"></a><strong>是一个怎样的问题？</strong></h3><p>在开发项目中，因为是混合式开发， h5 会调用原生 app 的一些方法，例如文件上传，返回上级页面，跳转 app 页面等等；</p>\n<p>一级页面为 h5 页面, 二级页面也是 h5 页面，在二级页面返回直接跳出，直接到了 app 原生页面首页；按理说这应该返回的是一级 h5 的页面；</p>\n<h3 id=\"浏览器打开-h5-一级页面模拟-bug-复现\"><a href=\"#浏览器打开-h5-一级页面模拟-bug-复现\" class=\"headerlink\" title=\"浏览器打开 h5 一级页面模拟 bug 复现\"></a><strong>浏览器打开 h5 一级页面模拟 bug 复现</strong></h3><p>采用<code>vue-router</code>中的<code>router.back()</code> 和 <code>router.go(page)</code>方法，均在浏览器中返回的是一级页面；但是在<code>app webview</code>中直接跳出。执行了俩次；</p>\n<p>使用调试手段. <code>console日志 和 debugger</code> 都会发现执行了俩次；</p>\n<h3 id=\"寻找问题来源\"><a href=\"#寻找问题来源\" class=\"headerlink\" title=\"寻找问题来源\"></a><strong>寻找问题来源</strong></h3><p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/vue-tabbar.svg\" alt=\"效果图\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a><strong>解决方案</strong></h3><p>这个问题确实是粗心造成的；不过这个 bug 的解决方案也很简单，既然知道了问题的来源，那么对于解决方案，无非以下俩点：</p>\n<ul>\n<li>方案一： 去掉子组件自带的 api 方法 和 导出的<code>emit</code></li>\n<li>方案二： 那就是将<code>emit</code> 的 name 进行修改，不要修改和子组件一致的<code>event name</code>； 当然父组件的<code>event name</code> 要和 子组件的<br><code>emit</code> 中的<code>event name</code>一致即可；</li>\n</ul>\n"},{"title":"工作内容-系统下单(重复单提示框)的异常","abbrlink":"be214e91","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n\n针对系统中的一个功能模块来讲，系统中有这么一个下单的功能，但是在下单之前会有一个提示重复下单的功能弹框，用于提醒用户是否是重复下单，但是现在的一个异常点就是， 重复提示弹框会闪烁不显示，属于一个功能异常模块的优化；\n\n\n## 场景\n\n一个类似电商下单页面功能，填写下单用户的基本信息, 或者智能识别信息，计算自带费用以及三方费用； 下单之前检验在短时间内重复下单的提示；\n\n现在就是弹窗不显示，逻辑看上去也没报错但是就是弹框不显示，这样造成的影响虽然并不严重，但是也是一个功能异常的 bug;\n\n在短时间内重复下单，会有提示框，确保是用户自行下单操作，而不是误操作的；确保自己的数据的准确性的，但是没有了这一步，如果用户，填写了相对应的信息，在考虑要不要下单，如果不小心点了下单按钮（误操作），这是用户虽然知道下单了，但是账户金额充足的情况下会自动扣款，这样的情况，就会联系客户；或者自行撤单了；\n\n在确保业务正常的情况下，少这一步确实会有一定的影响，类似的问题在其他页面也多多少少也会有；\n\n## 问题分析\n\n> 如果图片显示较小，可以点击图片放大查看!\n\n![下单提示异常](http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_1.png)\n\n## 总结\n\n根据上图分析，可以看出，在多个请求的前提下，下一次的请求会把上一次的所有弹框清除掉，即`dialog.closeAll()`, 而对于`closeAll()`是有一个参数的，默认或者不存在值的情况会清除所有的弹框，正常的情况，加载层和逻辑弹框是不会冲突的，这样操作就会对业务的造成一定的影响；\n\n每次请求指示吧加载层去除，那么这里就不会有这样的问题；而原有获取加载层`id`的返回值为`undefined`，那么这里的`closeAll()`就会清楚所有的，优化之后的加载层`id`是一个自增的状态，不会重复，那么`closeAll(id)`就只会把加载层销毁；这样就不会对业务造成影响;\n\n因为代码业务逻辑是公司内部的，这里就不方便展示了；会用一张图片展示效果；\n\n![最终效果](http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_2.svg)\n","source":"_posts/总结/项目总结/系统下单(重复单提示框)的异常.md","raw":"---\ntitle: 工作内容-系统下单(重复单提示框)的异常\nabbrlink: be214e91\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n\n针对系统中的一个功能模块来讲，系统中有这么一个下单的功能，但是在下单之前会有一个提示重复下单的功能弹框，用于提醒用户是否是重复下单，但是现在的一个异常点就是， 重复提示弹框会闪烁不显示，属于一个功能异常模块的优化；\n\n\n## 场景\n\n一个类似电商下单页面功能，填写下单用户的基本信息, 或者智能识别信息，计算自带费用以及三方费用； 下单之前检验在短时间内重复下单的提示；\n\n现在就是弹窗不显示，逻辑看上去也没报错但是就是弹框不显示，这样造成的影响虽然并不严重，但是也是一个功能异常的 bug;\n\n在短时间内重复下单，会有提示框，确保是用户自行下单操作，而不是误操作的；确保自己的数据的准确性的，但是没有了这一步，如果用户，填写了相对应的信息，在考虑要不要下单，如果不小心点了下单按钮（误操作），这是用户虽然知道下单了，但是账户金额充足的情况下会自动扣款，这样的情况，就会联系客户；或者自行撤单了；\n\n在确保业务正常的情况下，少这一步确实会有一定的影响，类似的问题在其他页面也多多少少也会有；\n\n## 问题分析\n\n> 如果图片显示较小，可以点击图片放大查看!\n\n![下单提示异常](http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_1.png)\n\n## 总结\n\n根据上图分析，可以看出，在多个请求的前提下，下一次的请求会把上一次的所有弹框清除掉，即`dialog.closeAll()`, 而对于`closeAll()`是有一个参数的，默认或者不存在值的情况会清除所有的弹框，正常的情况，加载层和逻辑弹框是不会冲突的，这样操作就会对业务的造成一定的影响；\n\n每次请求指示吧加载层去除，那么这里就不会有这样的问题；而原有获取加载层`id`的返回值为`undefined`，那么这里的`closeAll()`就会清楚所有的，优化之后的加载层`id`是一个自增的状态，不会重复，那么`closeAll(id)`就只会把加载层销毁；这样就不会对业务造成影响;\n\n因为代码业务逻辑是公司内部的，这里就不方便展示了；会用一张图片展示效果；\n\n![最终效果](http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_2.svg)\n","slug":"总结/项目总结/系统下单(重复单提示框)的异常","published":1,"updated":"2025-03-13T10:16:16.695Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iv001rfg9mdmn24f8g","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>针对系统中的一个功能模块来讲，系统中有这么一个下单的功能，但是在下单之前会有一个提示重复下单的功能弹框，用于提醒用户是否是重复下单，但是现在的一个异常点就是， 重复提示弹框会闪烁不显示，属于一个功能异常模块的优化；</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>一个类似电商下单页面功能，填写下单用户的基本信息, 或者智能识别信息，计算自带费用以及三方费用； 下单之前检验在短时间内重复下单的提示；</p>\n<p>现在就是弹窗不显示，逻辑看上去也没报错但是就是弹框不显示，这样造成的影响虽然并不严重，但是也是一个功能异常的 bug;</p>\n<p>在短时间内重复下单，会有提示框，确保是用户自行下单操作，而不是误操作的；确保自己的数据的准确性的，但是没有了这一步，如果用户，填写了相对应的信息，在考虑要不要下单，如果不小心点了下单按钮（误操作），这是用户虽然知道下单了，但是账户金额充足的情况下会自动扣款，这样的情况，就会联系客户；或者自行撤单了；</p>\n<p>在确保业务正常的情况下，少这一步确实会有一定的影响，类似的问题在其他页面也多多少少也会有；</p>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><blockquote>\n<p>如果图片显示较小，可以点击图片放大查看!</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_1.png\" alt=\"下单提示异常\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据上图分析，可以看出，在多个请求的前提下，下一次的请求会把上一次的所有弹框清除掉，即<code>dialog.closeAll()</code>, 而对于<code>closeAll()</code>是有一个参数的，默认或者不存在值的情况会清除所有的弹框，正常的情况，加载层和逻辑弹框是不会冲突的，这样操作就会对业务的造成一定的影响；</p>\n<p>每次请求指示吧加载层去除，那么这里就不会有这样的问题；而原有获取加载层<code>id</code>的返回值为<code>undefined</code>，那么这里的<code>closeAll()</code>就会清楚所有的，优化之后的加载层<code>id</code>是一个自增的状态，不会重复，那么<code>closeAll(id)</code>就只会把加载层销毁；这样就不会对业务造成影响;</p>\n<p>因为代码业务逻辑是公司内部的，这里就不方便展示了；会用一张图片展示效果；</p>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_2.svg\" alt=\"最终效果\"></p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>针对系统中的一个功能模块来讲，系统中有这么一个下单的功能，但是在下单之前会有一个提示重复下单的功能弹框，用于提醒用户是否是重复下单，但是现在的一个异常点就是， 重复提示弹框会闪烁不显示，属于一个功能异常模块的优化；</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>一个类似电商下单页面功能，填写下单用户的基本信息, 或者智能识别信息，计算自带费用以及三方费用； 下单之前检验在短时间内重复下单的提示；</p>\n<p>现在就是弹窗不显示，逻辑看上去也没报错但是就是弹框不显示，这样造成的影响虽然并不严重，但是也是一个功能异常的 bug;</p>\n<p>在短时间内重复下单，会有提示框，确保是用户自行下单操作，而不是误操作的；确保自己的数据的准确性的，但是没有了这一步，如果用户，填写了相对应的信息，在考虑要不要下单，如果不小心点了下单按钮（误操作），这是用户虽然知道下单了，但是账户金额充足的情况下会自动扣款，这样的情况，就会联系客户；或者自行撤单了；</p>\n<p>在确保业务正常的情况下，少这一步确实会有一定的影响，类似的问题在其他页面也多多少少也会有；</p>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><blockquote>\n<p>如果图片显示较小，可以点击图片放大查看!</p>\n</blockquote>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_1.png\" alt=\"下单提示异常\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据上图分析，可以看出，在多个请求的前提下，下一次的请求会把上一次的所有弹框清除掉，即<code>dialog.closeAll()</code>, 而对于<code>closeAll()</code>是有一个参数的，默认或者不存在值的情况会清除所有的弹框，正常的情况，加载层和逻辑弹框是不会冲突的，这样操作就会对业务的造成一定的影响；</p>\n<p>每次请求指示吧加载层去除，那么这里就不会有这样的问题；而原有获取加载层<code>id</code>的返回值为<code>undefined</code>，那么这里的<code>closeAll()</code>就会清楚所有的，优化之后的加载层<code>id</code>是一个自增的状态，不会重复，那么<code>closeAll(id)</code>就只会把加载层销毁；这样就不会对业务造成影响;</p>\n<p>因为代码业务逻辑是公司内部的，这里就不方便展示了；会用一张图片展示效果；</p>\n<p><img src=\"http://wangxiaoze-view.github.io/picx-images-hosting/images/install_order_2.svg\" alt=\"最终效果\"></p>\n"},{"title":"工作内容-老系统升级问题","abbrlink":"a2b94284","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n最近在对公司`node+jquery`捞系统基层进行版本升级，使用最新技术栈`vue + ts + vite + pinia`，对于捞系统原有页面将会进行`iframe`不会再其基础上进行修改，大大减少了维护成本，但是由于其页面较多，且页面之间存在关联，所以需要对页面进行缓存，避免重复加载，提升用户体验，其中也遇到了一系列兼容问题，总结如下：\n\n对于系统升级，当然要使用最新技术栈了，这样公司使用的技术栈就会统一，也不会因为技术栈不统一导致个人成长缓慢；对于相对系列问题也可以进行小组探讨；\n\n从计划开始部署到真正上手改造花费将近一周时间，底层框架结构采用`vue`，里层内容采用`iframe`链接老项目页面；\n\n## Start\n\n开始进行对系统技术的升级，大致升级的范围：\n\n- 登录，重置密码重构，摒弃原来`jquery`页面\n- 路由，权限的重置，需要后端开发人员配合，现在市面上的中后台系统的路由和权限基本都是后端来管理，很少使用前端路由\n- 基础库，方法的编写，对于常用的方法，`hooks`需要统一封装管理\n- 常用枚举的封装，接口定义，类型定义\n- 请求拦截，相应的封装；\n\n### 环境的配置\n\n当然对于企业项目，多环境已经是常见的，开发环境，测试环境，预发布环境，线上环境等等；对于这些环境一些请求的域名，配置参数当然也是不一样的，这时候就可以在`.env`文件中配置，大概配置项如下：\n\n```sh\nVITE_APP_API_URL='http://www.wangxiaoze.wang'\nVITE_APP_API_KEY='abc'\nVITE_APP_APP_ID='123456'\n\n# 当然对于iframe页面需要相对环境的域名配置\nVITE_APP_IFRAME_HOST='http://www.wangxiaoze.wang'\n```\n\n### utils, hooks 等基础配置的封装\n\n1. `utils`基础的方法，正则的封装等等；\n2. `hooks`的封装，对于一些常用的方法，比如`loading`，`message`，`dialog`，`confirm`， `loading`等方法，需要统一封装管理；\n3. `config`对一些系统级的配置项，如：七牛的配置，标题，logo 的配置等等\n4. `store-pinia`的配置\n5. `axios`的封装，对于请求的拦截，响应的封装，请求的封装等等\n6. `api`的封装，对于一些接口的封装，如：七牛的图片上传，七牛的图片删除，七牛的图片列表等等\n\n### axios, api 的封装\n\n对于`axios`的使用，代码如下：\n\n```typescript\nconst instance: AxiosInstance = axios.create({\n\tbaseURL: `${import.meta.env.VITE_APP_BASE_URL}`,\n\ttimeout: 60000,\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(\n\t(config: InternalAxiosRequestConfig) => {\n\t\t// 根据自己的需要进行修改\n\t\treturn config;\n\t},\n\terror => error\n);\n\n// 响应拦截器\ninstance.interceptors.response.use(\n\t(response: AxiosResponse) => {\n\t\t// 根据自己的需要进行修改\n\t\treturn response.data;\n\t},\n\terror => {\n\t\treturn Promise.reject(error.response);\n\t}\n);\n\ninterface IHttpResult<T> {\n\tcode: number;\n\tmessage: string;\n\tdata: T;\n\tsuccess: boolean;\n}\n\n// 泛型T: 返回接口字段类型 泛型U: 是参数的数据类型\nconst httpServer = {\n\tget<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"get\", params));\n\t},\n\tpost<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"post\", params));\n\t},\n\tput<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"put\", params));\n\t},\n\tdelete<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"delete\", params));\n\t},\n\tpostForQuery<T = any, U = any>(\n\t\turl: string,\n\t\tparams: U\n\t): Promise<IHttpResult<T>> {\n\t\treturn instance.request(\n\t\t\tgetParamsConfig(\n\t\t\t\turl,\n\t\t\t\t\"post\",\n\t\t\t\tqs.stringify(params, {\n\t\t\t\t\tarrayFormat: \"repeat\",\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t},\n};\n\nexport { instance as axios, httpServer };\n```\n\n系统采用的是`ts`,那么对于`api`的管理使用枚举整理，相关`api`的配置如下：\n\n```typescript\nenum UsetApi {\n\t// 七牛图片上传\n\tUploadImage = \"/api/upload/image\",\n\t// 七牛图片删除\n\tDeleteImage = \"/api/upload/delete\",\n\t// 七牛图片列表\n\tImageList = \"/api/upload/list\",\n}\n\nimport { httpServer } from \"@/http\";\n\nexport function getList<T, U>(data: U) {\n\treturn httpServer.get<T>(UsetApi.ImageList, data);\n}\n```\n\n### iframe 内嵌页面缓存\n\n刚开始使用`iframe`会发现一个问题，就是`iframe`内嵌页面刷新后，`iframe`会重新加载，导致页面会重新刷新，iframe 资源也会重新加载，会造成性能影响 那么如何解决呢？\n\n- 使用`v-show`这样就可以避免刷新资源的问题\n- 定位将 iframe 页面定位可视区域之外；\n\n```vue\n<iframe\n\tv-for=\"item in routes\"\n\t:key=\"item.path\"\n\tv-show=\"item.path === route.path\"\n/>\n```\n\n虽然发现不会再次请求资源，刷新页面，但是会发现一个细节问题，那就是滚动条不会定位到上次的位置，这样用户频繁跳转页面，滚动条不会定位，会造成一定的使用不便；\n\n另外的一中方案可以解决此类问题；\n\n### 老系统的预览图片，打开标签页兼容\n\n捞系统的预览图片会打开新的标签页，但是新系统要使用`element-plus`的预览图片的样式，当然打开标签页也是同样问题；\n\n想要同时解决新老系统的兼容问题，那么可以参考一下方案：\n\n```js\n// 老系统\nwindow.parent.postMessage(\n\t{\n\t\tcommand: \"open\",\n\t\tdata: {\n\t\t\turl: url,\n\t\t},\n\t},\n\t\"*\"\n);\n\n// 新系统\nwindow.addEventListener(\"message\", function (e) {\n\tif (e.data.command === \"open\") {\n\t\t// 根据自己的情况操作逻辑\n\t\t// 判断是否是当前页面打开\n\t}\n});\n\n// 移除，避免叠加\nwindow.removeEventListener(\"message\", function (e) {\n\tif (e.data.command === \"open\") {\n\t\t// 根据自己的情况操作逻辑\n\t\t// 判断是否是当前页面打开\n\t}\n});\n```\n\n当然图片或者其他也是类似操作；\n","source":"_posts/总结/项目总结/老系统升级问题.md","raw":"---\ntitle: 工作内容-老系统升级问题\nabbrlink: a2b94284\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n最近在对公司`node+jquery`捞系统基层进行版本升级，使用最新技术栈`vue + ts + vite + pinia`，对于捞系统原有页面将会进行`iframe`不会再其基础上进行修改，大大减少了维护成本，但是由于其页面较多，且页面之间存在关联，所以需要对页面进行缓存，避免重复加载，提升用户体验，其中也遇到了一系列兼容问题，总结如下：\n\n对于系统升级，当然要使用最新技术栈了，这样公司使用的技术栈就会统一，也不会因为技术栈不统一导致个人成长缓慢；对于相对系列问题也可以进行小组探讨；\n\n从计划开始部署到真正上手改造花费将近一周时间，底层框架结构采用`vue`，里层内容采用`iframe`链接老项目页面；\n\n## Start\n\n开始进行对系统技术的升级，大致升级的范围：\n\n- 登录，重置密码重构，摒弃原来`jquery`页面\n- 路由，权限的重置，需要后端开发人员配合，现在市面上的中后台系统的路由和权限基本都是后端来管理，很少使用前端路由\n- 基础库，方法的编写，对于常用的方法，`hooks`需要统一封装管理\n- 常用枚举的封装，接口定义，类型定义\n- 请求拦截，相应的封装；\n\n### 环境的配置\n\n当然对于企业项目，多环境已经是常见的，开发环境，测试环境，预发布环境，线上环境等等；对于这些环境一些请求的域名，配置参数当然也是不一样的，这时候就可以在`.env`文件中配置，大概配置项如下：\n\n```sh\nVITE_APP_API_URL='http://www.wangxiaoze.wang'\nVITE_APP_API_KEY='abc'\nVITE_APP_APP_ID='123456'\n\n# 当然对于iframe页面需要相对环境的域名配置\nVITE_APP_IFRAME_HOST='http://www.wangxiaoze.wang'\n```\n\n### utils, hooks 等基础配置的封装\n\n1. `utils`基础的方法，正则的封装等等；\n2. `hooks`的封装，对于一些常用的方法，比如`loading`，`message`，`dialog`，`confirm`， `loading`等方法，需要统一封装管理；\n3. `config`对一些系统级的配置项，如：七牛的配置，标题，logo 的配置等等\n4. `store-pinia`的配置\n5. `axios`的封装，对于请求的拦截，响应的封装，请求的封装等等\n6. `api`的封装，对于一些接口的封装，如：七牛的图片上传，七牛的图片删除，七牛的图片列表等等\n\n### axios, api 的封装\n\n对于`axios`的使用，代码如下：\n\n```typescript\nconst instance: AxiosInstance = axios.create({\n\tbaseURL: `${import.meta.env.VITE_APP_BASE_URL}`,\n\ttimeout: 60000,\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(\n\t(config: InternalAxiosRequestConfig) => {\n\t\t// 根据自己的需要进行修改\n\t\treturn config;\n\t},\n\terror => error\n);\n\n// 响应拦截器\ninstance.interceptors.response.use(\n\t(response: AxiosResponse) => {\n\t\t// 根据自己的需要进行修改\n\t\treturn response.data;\n\t},\n\terror => {\n\t\treturn Promise.reject(error.response);\n\t}\n);\n\ninterface IHttpResult<T> {\n\tcode: number;\n\tmessage: string;\n\tdata: T;\n\tsuccess: boolean;\n}\n\n// 泛型T: 返回接口字段类型 泛型U: 是参数的数据类型\nconst httpServer = {\n\tget<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"get\", params));\n\t},\n\tpost<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"post\", params));\n\t},\n\tput<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"put\", params));\n\t},\n\tdelete<T = any, U = any>(url: string, params: U): Promise<IHttpResult<T>> {\n\t\treturn instance.request(getParamsConfig(url, \"delete\", params));\n\t},\n\tpostForQuery<T = any, U = any>(\n\t\turl: string,\n\t\tparams: U\n\t): Promise<IHttpResult<T>> {\n\t\treturn instance.request(\n\t\t\tgetParamsConfig(\n\t\t\t\turl,\n\t\t\t\t\"post\",\n\t\t\t\tqs.stringify(params, {\n\t\t\t\t\tarrayFormat: \"repeat\",\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t},\n};\n\nexport { instance as axios, httpServer };\n```\n\n系统采用的是`ts`,那么对于`api`的管理使用枚举整理，相关`api`的配置如下：\n\n```typescript\nenum UsetApi {\n\t// 七牛图片上传\n\tUploadImage = \"/api/upload/image\",\n\t// 七牛图片删除\n\tDeleteImage = \"/api/upload/delete\",\n\t// 七牛图片列表\n\tImageList = \"/api/upload/list\",\n}\n\nimport { httpServer } from \"@/http\";\n\nexport function getList<T, U>(data: U) {\n\treturn httpServer.get<T>(UsetApi.ImageList, data);\n}\n```\n\n### iframe 内嵌页面缓存\n\n刚开始使用`iframe`会发现一个问题，就是`iframe`内嵌页面刷新后，`iframe`会重新加载，导致页面会重新刷新，iframe 资源也会重新加载，会造成性能影响 那么如何解决呢？\n\n- 使用`v-show`这样就可以避免刷新资源的问题\n- 定位将 iframe 页面定位可视区域之外；\n\n```vue\n<iframe\n\tv-for=\"item in routes\"\n\t:key=\"item.path\"\n\tv-show=\"item.path === route.path\"\n/>\n```\n\n虽然发现不会再次请求资源，刷新页面，但是会发现一个细节问题，那就是滚动条不会定位到上次的位置，这样用户频繁跳转页面，滚动条不会定位，会造成一定的使用不便；\n\n另外的一中方案可以解决此类问题；\n\n### 老系统的预览图片，打开标签页兼容\n\n捞系统的预览图片会打开新的标签页，但是新系统要使用`element-plus`的预览图片的样式，当然打开标签页也是同样问题；\n\n想要同时解决新老系统的兼容问题，那么可以参考一下方案：\n\n```js\n// 老系统\nwindow.parent.postMessage(\n\t{\n\t\tcommand: \"open\",\n\t\tdata: {\n\t\t\turl: url,\n\t\t},\n\t},\n\t\"*\"\n);\n\n// 新系统\nwindow.addEventListener(\"message\", function (e) {\n\tif (e.data.command === \"open\") {\n\t\t// 根据自己的情况操作逻辑\n\t\t// 判断是否是当前页面打开\n\t}\n});\n\n// 移除，避免叠加\nwindow.removeEventListener(\"message\", function (e) {\n\tif (e.data.command === \"open\") {\n\t\t// 根据自己的情况操作逻辑\n\t\t// 判断是否是当前页面打开\n\t}\n});\n```\n\n当然图片或者其他也是类似操作；\n","slug":"总结/项目总结/老系统升级问题","published":1,"updated":"2025-03-12T09:57:01.736Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw001vfg9m7xuggqbt","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在对公司<code>node+jquery</code>捞系统基层进行版本升级，使用最新技术栈<code>vue + ts + vite + pinia</code>，对于捞系统原有页面将会进行<code>iframe</code>不会再其基础上进行修改，大大减少了维护成本，但是由于其页面较多，且页面之间存在关联，所以需要对页面进行缓存，避免重复加载，提升用户体验，其中也遇到了一系列兼容问题，总结如下：</p>\n<p>对于系统升级，当然要使用最新技术栈了，这样公司使用的技术栈就会统一，也不会因为技术栈不统一导致个人成长缓慢；对于相对系列问题也可以进行小组探讨；</p>\n<p>从计划开始部署到真正上手改造花费将近一周时间，底层框架结构采用<code>vue</code>，里层内容采用<code>iframe</code>链接老项目页面；</p>\n<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>开始进行对系统技术的升级，大致升级的范围：</p>\n<ul>\n<li>登录，重置密码重构，摒弃原来<code>jquery</code>页面</li>\n<li>路由，权限的重置，需要后端开发人员配合，现在市面上的中后台系统的路由和权限基本都是后端来管理，很少使用前端路由</li>\n<li>基础库，方法的编写，对于常用的方法，<code>hooks</code>需要统一封装管理</li>\n<li>常用枚举的封装，接口定义，类型定义</li>\n<li>请求拦截，相应的封装；</li>\n</ul>\n<h3 id=\"环境的配置\"><a href=\"#环境的配置\" class=\"headerlink\" title=\"环境的配置\"></a>环境的配置</h3><p>当然对于企业项目，多环境已经是常见的，开发环境，测试环境，预发布环境，线上环境等等；对于这些环境一些请求的域名，配置参数当然也是不一样的，这时候就可以在<code>.env</code>文件中配置，大概配置项如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VITE_APP_API_URL=<span class=\"string\">&#x27;http://www.wangxiaoze.wang&#x27;</span></span><br><span class=\"line\">VITE_APP_API_KEY=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">VITE_APP_APP_ID=<span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然对于iframe页面需要相对环境的域名配置</span></span><br><span class=\"line\">VITE_APP_IFRAME_HOST=<span class=\"string\">&#x27;http://www.wangxiaoze.wang&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"utils-hooks-等基础配置的封装\"><a href=\"#utils-hooks-等基础配置的封装\" class=\"headerlink\" title=\"utils, hooks 等基础配置的封装\"></a>utils, hooks 等基础配置的封装</h3><ol>\n<li><code>utils</code>基础的方法，正则的封装等等；</li>\n<li><code>hooks</code>的封装，对于一些常用的方法，比如<code>loading</code>，<code>message</code>，<code>dialog</code>，<code>confirm</code>， <code>loading</code>等方法，需要统一封装管理；</li>\n<li><code>config</code>对一些系统级的配置项，如：七牛的配置，标题，logo 的配置等等</li>\n<li><code>store-pinia</code>的配置</li>\n<li><code>axios</code>的封装，对于请求的拦截，响应的封装，请求的封装等等</li>\n<li><code>api</code>的封装，对于一些接口的封装，如：七牛的图片上传，七牛的图片删除，七牛的图片列表等等</li>\n</ol>\n<h3 id=\"axios-api-的封装\"><a href=\"#axios-api-的封装\" class=\"headerlink\" title=\"axios, api 的封装\"></a>axios, api 的封装</h3><p>对于<code>axios</code>的使用，代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">AxiosInstance</span> = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">baseURL</span>: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">import</span>.meta.env.VITE_APP_BASE_URL&#125;</span>`</span>,</span><br><span class=\"line\">\t<span class=\"attr\">timeout</span>: <span class=\"number\">60000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\"><span class=\"attr\">config</span>: <span class=\"title class_\">InternalAxiosRequestConfig</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的需要进行修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> config;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> error</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\"><span class=\"attr\">response</span>: <span class=\"title class_\">AxiosResponse</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的需要进行修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error.<span class=\"property\">response</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IHttpResult</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\t<span class=\"attr\">code</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">data</span>: T;</span><br><span class=\"line\">\t<span class=\"attr\">success</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 泛型T: 返回接口字段类型 泛型U: 是参数的数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpServer = &#123;</span><br><span class=\"line\">\tget&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;get&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpost&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;post&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tput&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;put&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;delete&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpostForQuery&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">params</span>: U</span><br><span class=\"line\">\t): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">getParamsConfig</span>(</span><br><span class=\"line\">\t\t\t\turl,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">\t\t\t\tqs.<span class=\"title function_\">stringify</span>(params, &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">arrayFormat</span>: <span class=\"string\">&quot;repeat&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; instance <span class=\"keyword\">as</span> axios, httpServer &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>系统采用的是<code>ts</code>,那么对于<code>api</code>的管理使用枚举整理，相关<code>api</code>的配置如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">UsetApi</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片上传</span></span><br><span class=\"line\">\t<span class=\"title class_\">UploadImage</span> = <span class=\"string\">&quot;/api/upload/image&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片删除</span></span><br><span class=\"line\">\t<span class=\"title class_\">DeleteImage</span> = <span class=\"string\">&quot;/api/upload/delete&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片列表</span></span><br><span class=\"line\">\t<span class=\"title class_\">ImageList</span> = <span class=\"string\">&quot;/api/upload/list&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; httpServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/http&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> getList&lt;T, U&gt;(<span class=\"attr\">data</span>: U) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> httpServer.<span class=\"property\">get</span>&lt;T&gt;(<span class=\"title class_\">UsetApi</span>.<span class=\"property\">ImageList</span>, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iframe-内嵌页面缓存\"><a href=\"#iframe-内嵌页面缓存\" class=\"headerlink\" title=\"iframe 内嵌页面缓存\"></a>iframe 内嵌页面缓存</h3><p>刚开始使用<code>iframe</code>会发现一个问题，就是<code>iframe</code>内嵌页面刷新后，<code>iframe</code>会重新加载，导致页面会重新刷新，iframe 资源也会重新加载，会造成性能影响 那么如何解决呢？</p>\n<ul>\n<li>使用<code>v-show</code>这样就可以避免刷新资源的问题</li>\n<li>定位将 iframe 页面定位可视区域之外；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe</span><br><span class=\"line\">\tv-for=&quot;item in routes&quot;</span><br><span class=\"line\">\t:key=&quot;item.path&quot;</span><br><span class=\"line\">\tv-show=&quot;item.path === route.path&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>虽然发现不会再次请求资源，刷新页面，但是会发现一个细节问题，那就是滚动条不会定位到上次的位置，这样用户频繁跳转页面，滚动条不会定位，会造成一定的使用不便；</p>\n<p>另外的一中方案可以解决此类问题；</p>\n<h3 id=\"老系统的预览图片，打开标签页兼容\"><a href=\"#老系统的预览图片，打开标签页兼容\" class=\"headerlink\" title=\"老系统的预览图片，打开标签页兼容\"></a>老系统的预览图片，打开标签页兼容</h3><p>捞系统的预览图片会打开新的标签页，但是新系统要使用<code>element-plus</code>的预览图片的样式，当然打开标签页也是同样问题；</p>\n<p>想要同时解决新老系统的兼容问题，那么可以参考一下方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老系统</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">parent</span>.<span class=\"title function_\">postMessage</span>(</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">command</span>: <span class=\"string\">&quot;open&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">url</span>: url,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新系统</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">command</span> === <span class=\"string\">&quot;open&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的情况操作逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是当前页面打开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除，避免叠加</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">command</span> === <span class=\"string\">&quot;open&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的情况操作逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是当前页面打开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然图片或者其他也是类似操作；</p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在对公司<code>node+jquery</code>捞系统基层进行版本升级，使用最新技术栈<code>vue + ts + vite + pinia</code>，对于捞系统原有页面将会进行<code>iframe</code>不会再其基础上进行修改，大大减少了维护成本，但是由于其页面较多，且页面之间存在关联，所以需要对页面进行缓存，避免重复加载，提升用户体验，其中也遇到了一系列兼容问题，总结如下：</p>\n<p>对于系统升级，当然要使用最新技术栈了，这样公司使用的技术栈就会统一，也不会因为技术栈不统一导致个人成长缓慢；对于相对系列问题也可以进行小组探讨；</p>\n<p>从计划开始部署到真正上手改造花费将近一周时间，底层框架结构采用<code>vue</code>，里层内容采用<code>iframe</code>链接老项目页面；</p>\n<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>开始进行对系统技术的升级，大致升级的范围：</p>\n<ul>\n<li>登录，重置密码重构，摒弃原来<code>jquery</code>页面</li>\n<li>路由，权限的重置，需要后端开发人员配合，现在市面上的中后台系统的路由和权限基本都是后端来管理，很少使用前端路由</li>\n<li>基础库，方法的编写，对于常用的方法，<code>hooks</code>需要统一封装管理</li>\n<li>常用枚举的封装，接口定义，类型定义</li>\n<li>请求拦截，相应的封装；</li>\n</ul>\n<h3 id=\"环境的配置\"><a href=\"#环境的配置\" class=\"headerlink\" title=\"环境的配置\"></a>环境的配置</h3><p>当然对于企业项目，多环境已经是常见的，开发环境，测试环境，预发布环境，线上环境等等；对于这些环境一些请求的域名，配置参数当然也是不一样的，这时候就可以在<code>.env</code>文件中配置，大概配置项如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VITE_APP_API_URL=<span class=\"string\">&#x27;http://www.wangxiaoze.wang&#x27;</span></span><br><span class=\"line\">VITE_APP_API_KEY=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\">VITE_APP_APP_ID=<span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然对于iframe页面需要相对环境的域名配置</span></span><br><span class=\"line\">VITE_APP_IFRAME_HOST=<span class=\"string\">&#x27;http://www.wangxiaoze.wang&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"utils-hooks-等基础配置的封装\"><a href=\"#utils-hooks-等基础配置的封装\" class=\"headerlink\" title=\"utils, hooks 等基础配置的封装\"></a>utils, hooks 等基础配置的封装</h3><ol>\n<li><code>utils</code>基础的方法，正则的封装等等；</li>\n<li><code>hooks</code>的封装，对于一些常用的方法，比如<code>loading</code>，<code>message</code>，<code>dialog</code>，<code>confirm</code>， <code>loading</code>等方法，需要统一封装管理；</li>\n<li><code>config</code>对一些系统级的配置项，如：七牛的配置，标题，logo 的配置等等</li>\n<li><code>store-pinia</code>的配置</li>\n<li><code>axios</code>的封装，对于请求的拦截，响应的封装，请求的封装等等</li>\n<li><code>api</code>的封装，对于一些接口的封装，如：七牛的图片上传，七牛的图片删除，七牛的图片列表等等</li>\n</ol>\n<h3 id=\"axios-api-的封装\"><a href=\"#axios-api-的封装\" class=\"headerlink\" title=\"axios, api 的封装\"></a>axios, api 的封装</h3><p>对于<code>axios</code>的使用，代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">AxiosInstance</span> = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">baseURL</span>: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">import</span>.meta.env.VITE_APP_BASE_URL&#125;</span>`</span>,</span><br><span class=\"line\">\t<span class=\"attr\">timeout</span>: <span class=\"number\">60000</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\"><span class=\"attr\">config</span>: <span class=\"title class_\">InternalAxiosRequestConfig</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的需要进行修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> config;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> error</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\"><span class=\"attr\">response</span>: <span class=\"title class_\">AxiosResponse</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的需要进行修改</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error.<span class=\"property\">response</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IHttpResult</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\t<span class=\"attr\">code</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">data</span>: T;</span><br><span class=\"line\">\t<span class=\"attr\">success</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 泛型T: 返回接口字段类型 泛型U: 是参数的数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> httpServer = &#123;</span><br><span class=\"line\">\tget&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;get&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpost&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;post&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tput&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;put&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">params</span>: U): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(<span class=\"title function_\">getParamsConfig</span>(url, <span class=\"string\">&quot;delete&quot;</span>, params));</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpostForQuery&lt;T = <span class=\"built_in\">any</span>, U = <span class=\"built_in\">any</span>&gt;(</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">params</span>: U</span><br><span class=\"line\">\t): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IHttpResult</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance.<span class=\"title function_\">request</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">getParamsConfig</span>(</span><br><span class=\"line\">\t\t\t\turl,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">\t\t\t\tqs.<span class=\"title function_\">stringify</span>(params, &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">arrayFormat</span>: <span class=\"string\">&quot;repeat&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; instance <span class=\"keyword\">as</span> axios, httpServer &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>系统采用的是<code>ts</code>,那么对于<code>api</code>的管理使用枚举整理，相关<code>api</code>的配置如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">UsetApi</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片上传</span></span><br><span class=\"line\">\t<span class=\"title class_\">UploadImage</span> = <span class=\"string\">&quot;/api/upload/image&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片删除</span></span><br><span class=\"line\">\t<span class=\"title class_\">DeleteImage</span> = <span class=\"string\">&quot;/api/upload/delete&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 七牛图片列表</span></span><br><span class=\"line\">\t<span class=\"title class_\">ImageList</span> = <span class=\"string\">&quot;/api/upload/list&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; httpServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/http&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> getList&lt;T, U&gt;(<span class=\"attr\">data</span>: U) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> httpServer.<span class=\"property\">get</span>&lt;T&gt;(<span class=\"title class_\">UsetApi</span>.<span class=\"property\">ImageList</span>, data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iframe-内嵌页面缓存\"><a href=\"#iframe-内嵌页面缓存\" class=\"headerlink\" title=\"iframe 内嵌页面缓存\"></a>iframe 内嵌页面缓存</h3><p>刚开始使用<code>iframe</code>会发现一个问题，就是<code>iframe</code>内嵌页面刷新后，<code>iframe</code>会重新加载，导致页面会重新刷新，iframe 资源也会重新加载，会造成性能影响 那么如何解决呢？</p>\n<ul>\n<li>使用<code>v-show</code>这样就可以避免刷新资源的问题</li>\n<li>定位将 iframe 页面定位可视区域之外；</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe</span><br><span class=\"line\">\tv-for=&quot;item in routes&quot;</span><br><span class=\"line\">\t:key=&quot;item.path&quot;</span><br><span class=\"line\">\tv-show=&quot;item.path === route.path&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>虽然发现不会再次请求资源，刷新页面，但是会发现一个细节问题，那就是滚动条不会定位到上次的位置，这样用户频繁跳转页面，滚动条不会定位，会造成一定的使用不便；</p>\n<p>另外的一中方案可以解决此类问题；</p>\n<h3 id=\"老系统的预览图片，打开标签页兼容\"><a href=\"#老系统的预览图片，打开标签页兼容\" class=\"headerlink\" title=\"老系统的预览图片，打开标签页兼容\"></a>老系统的预览图片，打开标签页兼容</h3><p>捞系统的预览图片会打开新的标签页，但是新系统要使用<code>element-plus</code>的预览图片的样式，当然打开标签页也是同样问题；</p>\n<p>想要同时解决新老系统的兼容问题，那么可以参考一下方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老系统</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">parent</span>.<span class=\"title function_\">postMessage</span>(</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">command</span>: <span class=\"string\">&quot;open&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">url</span>: url,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新系统</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">command</span> === <span class=\"string\">&quot;open&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的情况操作逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是当前页面打开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除，避免叠加</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">command</span> === <span class=\"string\">&quot;open&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据自己的情况操作逻辑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是当前页面打开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然图片或者其他也是类似操作；</p>\n"},{"title":"工作内容-选项卡loading","abbrlink":"337da9c4","date":"2024-07-08T01:05:01.000Z","_content":"\n# 场景\n\n\n`选项卡`切换的常见是很常见的，就比如说：不同商品种类，切换显示该对应的商品信息；但是如果在不做页面缓存的情况下，是每次切换或者点击的时候都会去请求接口的，但是对于这个切换的时候无非就是拿到对应的`id`请求；\n\n\n但是有没有一个比较好的方案呢，一个功能页面，展示的状态跟别为：请求时的`laoding`状态，请求成功渲染页面的结果页(`success`)，因为其他原因导致请求失败的失败效果(`error`)，还要有一个`重新请求或者刷新的功能`，但这个功能对于`h5`页面来讲是非常不错的一个优化方案；\n\n对于这样的功能，常规的写法就是，写一个方法用于请求数据，并且接收一个`id`的参数，拿到参数去请求，每次切换的时候重新调用该方法；页面中渲染的话，就三种情况，失败的情况渲染一个按钮，用于重新请求或者刷新；\n\n虽然这样的方案是可行的，但是有一个微小的问题，就是一个项目中有重复类似的功能，岂不是都要重新写一遍；\n\n对于企业级项目来讲， 需要封装统一一下，不然类似页面类似功能代码太多太多了；在常规方案的函数上进行优化即可；\n\n## Handler\n\n解析过程参考下图：\n![解析图](https://wangxiaoze-view.github.io/picx-images-hosting/images/tabs_loading.png)\n\n这里的案例针对于`vue`来讲的，如图，根据切换的方法，我们可以对其进行优化；优化的方案其中关键的是`对于url或者id依赖`的监听；这里可使用`computed`,为什么不同`watch`呢，`computed`是依赖缓存值的变换进行更新的，消耗小，解析`dom`元素加载后立马执行的，内部缓存机制复用，效率高，调试方便； 而`watch`在首次加载的时候默认是不进行更新，用于观察`vue`的数据变动，监听值是必须存在的；\n\n在触发某一事件后，先 `computed` 再 `methods` 再到 `watch，computed` 计算属性是基于它们的依赖进行缓存的\n\n对于`url`进行`computed`属性，发生变化自动执行请求函数，这样就不用每次都调用方法了；\n\n对于`computed`如何监听是不是就是更新了的，配合`watchEffect`搭配使用，`watchEffect`是一个监听器，会自动监听数据类型的属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。如下：\n\n```js\nimport {computed, watchEffect} from 'vue'\n\ncont id = ref(1)\n\nconst changeId = () => id.value++;\n\nconst url = computed(() => 'https://api-xxxxx.com' + id.value);\n\nwatchEffect(() => {\n    console.log('watchEffect to url', url);\n})\n\n```\n\n每次执行`changeId`， `id`的依赖就会进行更新，而`watchEffect`可以监听到`id` 和`url`的最新值；不过`watchEffect`是不能获取上一次的值的，`watch`是可以的；\n\n接着于`url`参数进行兼容判断，如果是一个`ref`类型的值，进行监听`watchEffect`，不是的情况执行自身的请求函数；如下：\n\n```js\nexport function useFetch(url) {\n\tfunction doFetch() {\n\t\t// 请求api接口...\n\t}\n\n\t// isRef: 是否是ref的值；\n\tif (isRef(url)) {\n\t\twatchEffect(doFetch);\n\t} else {\n\t\tdoFetch();\n\t}\n}\n```\n\n对于成功，失败，加载状态也很简单，如下：\n\n```js\nexport function useFetch(url) {\n\t// 数据\n\tconst data = ref(null);\n\t// 失败\n\tconst error = ref(null);\n\n\tasync function doFetch() {\n\t\tdata.value = null;\n\t\terror.value = null;\n\n\t\t// 坐下兼容，可能是ref的值，也可能是普通值\n\t\t// unref： 如果参数是 ref，则返回内部值，否则返回参数本身\n\t\tlet urlVal = unRef(url);\n\t\ttry {\n\t\t\tconst res = await fetch(urlVal);\n\t\t\tdata.value = res.json();\n\t\t} catch (err) {\n\t\t\terror.value = err;\n\t\t}\n\t\t// 请求api接口...\n\t}\n\n\t// isRef: 是否是ref的值；\n\tif (isRef(url)) {\n\t\twatchEffect(doFetch);\n\t} else {\n\t\tdoFetch();\n\t}\n\n\treturn { data, error, doFetch };\n}\n```\n\n而对于页面的渲染进程直接判断，不过这里建议封装一个公共组件；\n\n```html\n<div v-if=\"error\">错误：xxxx</div>\n\n<div v-else-if=\"data\">数据： xxxx</div>\n\n<div v-else>loading...</div>\n```\n","source":"_posts/总结/项目总结/选项卡loading.md","raw":"---\ntitle: 工作内容-选项卡loading\nabbrlink: 337da9c4\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 场景\n\n\n`选项卡`切换的常见是很常见的，就比如说：不同商品种类，切换显示该对应的商品信息；但是如果在不做页面缓存的情况下，是每次切换或者点击的时候都会去请求接口的，但是对于这个切换的时候无非就是拿到对应的`id`请求；\n\n\n但是有没有一个比较好的方案呢，一个功能页面，展示的状态跟别为：请求时的`laoding`状态，请求成功渲染页面的结果页(`success`)，因为其他原因导致请求失败的失败效果(`error`)，还要有一个`重新请求或者刷新的功能`，但这个功能对于`h5`页面来讲是非常不错的一个优化方案；\n\n对于这样的功能，常规的写法就是，写一个方法用于请求数据，并且接收一个`id`的参数，拿到参数去请求，每次切换的时候重新调用该方法；页面中渲染的话，就三种情况，失败的情况渲染一个按钮，用于重新请求或者刷新；\n\n虽然这样的方案是可行的，但是有一个微小的问题，就是一个项目中有重复类似的功能，岂不是都要重新写一遍；\n\n对于企业级项目来讲， 需要封装统一一下，不然类似页面类似功能代码太多太多了；在常规方案的函数上进行优化即可；\n\n## Handler\n\n解析过程参考下图：\n![解析图](https://wangxiaoze-view.github.io/picx-images-hosting/images/tabs_loading.png)\n\n这里的案例针对于`vue`来讲的，如图，根据切换的方法，我们可以对其进行优化；优化的方案其中关键的是`对于url或者id依赖`的监听；这里可使用`computed`,为什么不同`watch`呢，`computed`是依赖缓存值的变换进行更新的，消耗小，解析`dom`元素加载后立马执行的，内部缓存机制复用，效率高，调试方便； 而`watch`在首次加载的时候默认是不进行更新，用于观察`vue`的数据变动，监听值是必须存在的；\n\n在触发某一事件后，先 `computed` 再 `methods` 再到 `watch，computed` 计算属性是基于它们的依赖进行缓存的\n\n对于`url`进行`computed`属性，发生变化自动执行请求函数，这样就不用每次都调用方法了；\n\n对于`computed`如何监听是不是就是更新了的，配合`watchEffect`搭配使用，`watchEffect`是一个监听器，会自动监听数据类型的属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。如下：\n\n```js\nimport {computed, watchEffect} from 'vue'\n\ncont id = ref(1)\n\nconst changeId = () => id.value++;\n\nconst url = computed(() => 'https://api-xxxxx.com' + id.value);\n\nwatchEffect(() => {\n    console.log('watchEffect to url', url);\n})\n\n```\n\n每次执行`changeId`， `id`的依赖就会进行更新，而`watchEffect`可以监听到`id` 和`url`的最新值；不过`watchEffect`是不能获取上一次的值的，`watch`是可以的；\n\n接着于`url`参数进行兼容判断，如果是一个`ref`类型的值，进行监听`watchEffect`，不是的情况执行自身的请求函数；如下：\n\n```js\nexport function useFetch(url) {\n\tfunction doFetch() {\n\t\t// 请求api接口...\n\t}\n\n\t// isRef: 是否是ref的值；\n\tif (isRef(url)) {\n\t\twatchEffect(doFetch);\n\t} else {\n\t\tdoFetch();\n\t}\n}\n```\n\n对于成功，失败，加载状态也很简单，如下：\n\n```js\nexport function useFetch(url) {\n\t// 数据\n\tconst data = ref(null);\n\t// 失败\n\tconst error = ref(null);\n\n\tasync function doFetch() {\n\t\tdata.value = null;\n\t\terror.value = null;\n\n\t\t// 坐下兼容，可能是ref的值，也可能是普通值\n\t\t// unref： 如果参数是 ref，则返回内部值，否则返回参数本身\n\t\tlet urlVal = unRef(url);\n\t\ttry {\n\t\t\tconst res = await fetch(urlVal);\n\t\t\tdata.value = res.json();\n\t\t} catch (err) {\n\t\t\terror.value = err;\n\t\t}\n\t\t// 请求api接口...\n\t}\n\n\t// isRef: 是否是ref的值；\n\tif (isRef(url)) {\n\t\twatchEffect(doFetch);\n\t} else {\n\t\tdoFetch();\n\t}\n\n\treturn { data, error, doFetch };\n}\n```\n\n而对于页面的渲染进程直接判断，不过这里建议封装一个公共组件；\n\n```html\n<div v-if=\"error\">错误：xxxx</div>\n\n<div v-else-if=\"data\">数据： xxxx</div>\n\n<div v-else>loading...</div>\n```\n","slug":"总结/项目总结/选项卡loading","published":1,"updated":"2025-03-13T10:16:17.202Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw001xfg9m5i2t6v89","content":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p><code>选项卡</code>切换的常见是很常见的，就比如说：不同商品种类，切换显示该对应的商品信息；但是如果在不做页面缓存的情况下，是每次切换或者点击的时候都会去请求接口的，但是对于这个切换的时候无非就是拿到对应的<code>id</code>请求；</p>\n<p>但是有没有一个比较好的方案呢，一个功能页面，展示的状态跟别为：请求时的<code>laoding</code>状态，请求成功渲染页面的结果页(<code>success</code>)，因为其他原因导致请求失败的失败效果(<code>error</code>)，还要有一个<code>重新请求或者刷新的功能</code>，但这个功能对于<code>h5</code>页面来讲是非常不错的一个优化方案；</p>\n<p>对于这样的功能，常规的写法就是，写一个方法用于请求数据，并且接收一个<code>id</code>的参数，拿到参数去请求，每次切换的时候重新调用该方法；页面中渲染的话，就三种情况，失败的情况渲染一个按钮，用于重新请求或者刷新；</p>\n<p>虽然这样的方案是可行的，但是有一个微小的问题，就是一个项目中有重复类似的功能，岂不是都要重新写一遍；</p>\n<p>对于企业级项目来讲， 需要封装统一一下，不然类似页面类似功能代码太多太多了；在常规方案的函数上进行优化即可；</p>\n<h2 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h2><p>解析过程参考下图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/tabs_loading.png\" alt=\"解析图\"></p>\n<p>这里的案例针对于<code>vue</code>来讲的，如图，根据切换的方法，我们可以对其进行优化；优化的方案其中关键的是<code>对于url或者id依赖</code>的监听；这里可使用<code>computed</code>,为什么不同<code>watch</code>呢，<code>computed</code>是依赖缓存值的变换进行更新的，消耗小，解析<code>dom</code>元素加载后立马执行的，内部缓存机制复用，效率高，调试方便； 而<code>watch</code>在首次加载的时候默认是不进行更新，用于观察<code>vue</code>的数据变动，监听值是必须存在的；</p>\n<p>在触发某一事件后，先 <code>computed</code> 再 <code>methods</code> 再到 <code>watch，computed</code> 计算属性是基于它们的依赖进行缓存的</p>\n<p>对于<code>url</code>进行<code>computed</code>属性，发生变化自动执行请求函数，这样就不用每次都调用方法了；</p>\n<p>对于<code>computed</code>如何监听是不是就是更新了的，配合<code>watchEffect</code>搭配使用，<code>watchEffect</code>是一个监听器，会自动监听数据类型的属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;computed, watchEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cont id = <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">changeId</span> = (<span class=\"params\"></span>) =&gt; id.<span class=\"property\">value</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;https://api-xxxxx.com&#x27;</span> + id.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;watchEffect to url&#x27;</span>, url);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>每次执行<code>changeId</code>， <code>id</code>的依赖就会进行更新，而<code>watchEffect</code>可以监听到<code>id</code> 和<code>url</code>的最新值；不过<code>watchEffect</code>是不能获取上一次的值的，<code>watch</code>是可以的；</p>\n<p>接着于<code>url</code>参数进行兼容判断，如果是一个<code>ref</code>类型的值，进行监听<code>watchEffect</code>，不是的情况执行自身的请求函数；如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useFetch</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doFetch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求api接口...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isRef: 是否是ref的值；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(url)) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">watchEffect</span>(doFetch);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">doFetch</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于成功，失败，加载状态也很简单，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useFetch</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 失败</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> error = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doFetch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\tdata.<span class=\"property\">value</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\terror.<span class=\"property\">value</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 坐下兼容，可能是ref的值，也可能是普通值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// unref： 如果参数是 ref，则返回内部值，否则返回参数本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> urlVal = <span class=\"title function_\">unRef</span>(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(urlVal);</span><br><span class=\"line\">\t\t\tdata.<span class=\"property\">value</span> = res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\terror.<span class=\"property\">value</span> = err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求api接口...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isRef: 是否是ref的值；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(url)) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">watchEffect</span>(doFetch);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">doFetch</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; data, error, doFetch &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而对于页面的渲染进程直接判断，不过这里建议封装一个公共组件；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span>错误：xxxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>数据： xxxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p><code>选项卡</code>切换的常见是很常见的，就比如说：不同商品种类，切换显示该对应的商品信息；但是如果在不做页面缓存的情况下，是每次切换或者点击的时候都会去请求接口的，但是对于这个切换的时候无非就是拿到对应的<code>id</code>请求；</p>\n<p>但是有没有一个比较好的方案呢，一个功能页面，展示的状态跟别为：请求时的<code>laoding</code>状态，请求成功渲染页面的结果页(<code>success</code>)，因为其他原因导致请求失败的失败效果(<code>error</code>)，还要有一个<code>重新请求或者刷新的功能</code>，但这个功能对于<code>h5</code>页面来讲是非常不错的一个优化方案；</p>\n<p>对于这样的功能，常规的写法就是，写一个方法用于请求数据，并且接收一个<code>id</code>的参数，拿到参数去请求，每次切换的时候重新调用该方法；页面中渲染的话，就三种情况，失败的情况渲染一个按钮，用于重新请求或者刷新；</p>\n<p>虽然这样的方案是可行的，但是有一个微小的问题，就是一个项目中有重复类似的功能，岂不是都要重新写一遍；</p>\n<p>对于企业级项目来讲， 需要封装统一一下，不然类似页面类似功能代码太多太多了；在常规方案的函数上进行优化即可；</p>\n<h2 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h2><p>解析过程参考下图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/tabs_loading.png\" alt=\"解析图\"></p>\n<p>这里的案例针对于<code>vue</code>来讲的，如图，根据切换的方法，我们可以对其进行优化；优化的方案其中关键的是<code>对于url或者id依赖</code>的监听；这里可使用<code>computed</code>,为什么不同<code>watch</code>呢，<code>computed</code>是依赖缓存值的变换进行更新的，消耗小，解析<code>dom</code>元素加载后立马执行的，内部缓存机制复用，效率高，调试方便； 而<code>watch</code>在首次加载的时候默认是不进行更新，用于观察<code>vue</code>的数据变动，监听值是必须存在的；</p>\n<p>在触发某一事件后，先 <code>computed</code> 再 <code>methods</code> 再到 <code>watch，computed</code> 计算属性是基于它们的依赖进行缓存的</p>\n<p>对于<code>url</code>进行<code>computed</code>属性，发生变化自动执行请求函数，这样就不用每次都调用方法了；</p>\n<p>对于<code>computed</code>如何监听是不是就是更新了的，配合<code>watchEffect</code>搭配使用，<code>watchEffect</code>是一个监听器，会自动监听数据类型的属性，不需要具体到某个属性，一旦运行就会立即监听，组件卸载的时候会停止监听。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;computed, watchEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cont id = <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">changeId</span> = (<span class=\"params\"></span>) =&gt; id.<span class=\"property\">value</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> <span class=\"string\">&#x27;https://api-xxxxx.com&#x27;</span> + id.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;watchEffect to url&#x27;</span>, url);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>每次执行<code>changeId</code>， <code>id</code>的依赖就会进行更新，而<code>watchEffect</code>可以监听到<code>id</code> 和<code>url</code>的最新值；不过<code>watchEffect</code>是不能获取上一次的值的，<code>watch</code>是可以的；</p>\n<p>接着于<code>url</code>参数进行兼容判断，如果是一个<code>ref</code>类型的值，进行监听<code>watchEffect</code>，不是的情况执行自身的请求函数；如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useFetch</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doFetch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求api接口...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isRef: 是否是ref的值；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(url)) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">watchEffect</span>(doFetch);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">doFetch</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于成功，失败，加载状态也很简单，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useFetch</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 失败</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> error = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doFetch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\tdata.<span class=\"property\">value</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\terror.<span class=\"property\">value</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 坐下兼容，可能是ref的值，也可能是普通值</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// unref： 如果参数是 ref，则返回内部值，否则返回参数本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> urlVal = <span class=\"title function_\">unRef</span>(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(urlVal);</span><br><span class=\"line\">\t\t\tdata.<span class=\"property\">value</span> = res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\terror.<span class=\"property\">value</span> = err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求api接口...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isRef: 是否是ref的值；</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title function_\">isRef</span>(url)) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">watchEffect</span>(doFetch);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">doFetch</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; data, error, doFetch &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而对于页面的渲染进程直接判断，不过这里建议封装一个公共组件；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span>错误：xxxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;data&quot;</span>&gt;</span>数据： xxxx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"工作内容-键盘弹起底部被顶起问题","abbrlink":"98f35a35","date":"2024-07-08T01:05:01.000Z","_content":"\n平常在开发`H5`的页面时，会遇到一个很常见的问题，就是当输入框弹出键盘时，底部被顶起，导致页面显示不全或者页面样式错落；\n\n这个问题，一般都是由于`input`标签聚焦之后，键盘弹起导致的底部按钮顶上去了；\n\n不过在`IOS`上，默认是不对导致按钮顶上去的，但是在`Android`上，默认是会顶上去的；这样在混合开发或者`H5`就要解决这样的一个兼容问题了；\n\n这里提供一个解决方案，效果看起来也是不错的；\n\n```js\n// 默认的屏幕高度\nconst docH = window.innerHeight;\n// 实时屏幕高度\nlet showH = window.innerHeight;\n// 默认显示底部按钮\n// let hideShow = true;\n\nconst bottom = document.getElementById(\"bottom\");\n\n// 监听页面高度的变化\nwindow.addEventListener(\"resize\", () => {\n\tshowH = window.innerHeight;\n\n\tif (docH - showH > 50) {\n\t\t// 这里用vue的话你可以直接控制\n\t\t// hideShow = false;\n\t\tbottom.style.display = \"none\";\n\t} else {\n\t\t// hideShow = true;\n\t\tbottom.style.display = \"block\";\n\t}\n});\n```\n\n效果预览:\n\n然后你就会发现，当键盘弹起的时候底部按钮就消失不见了，键盘落下之后按钮就出来哦；\n\n这个方案基本都可以解决兼容问题呢；\n","source":"_posts/总结/项目总结/键盘弹起底部被顶起问题.md","raw":"---\ntitle: 工作内容-键盘弹起底部被顶起问题\nabbrlink: 98f35a35\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n平常在开发`H5`的页面时，会遇到一个很常见的问题，就是当输入框弹出键盘时，底部被顶起，导致页面显示不全或者页面样式错落；\n\n这个问题，一般都是由于`input`标签聚焦之后，键盘弹起导致的底部按钮顶上去了；\n\n不过在`IOS`上，默认是不对导致按钮顶上去的，但是在`Android`上，默认是会顶上去的；这样在混合开发或者`H5`就要解决这样的一个兼容问题了；\n\n这里提供一个解决方案，效果看起来也是不错的；\n\n```js\n// 默认的屏幕高度\nconst docH = window.innerHeight;\n// 实时屏幕高度\nlet showH = window.innerHeight;\n// 默认显示底部按钮\n// let hideShow = true;\n\nconst bottom = document.getElementById(\"bottom\");\n\n// 监听页面高度的变化\nwindow.addEventListener(\"resize\", () => {\n\tshowH = window.innerHeight;\n\n\tif (docH - showH > 50) {\n\t\t// 这里用vue的话你可以直接控制\n\t\t// hideShow = false;\n\t\tbottom.style.display = \"none\";\n\t} else {\n\t\t// hideShow = true;\n\t\tbottom.style.display = \"block\";\n\t}\n});\n```\n\n效果预览:\n\n然后你就会发现，当键盘弹起的时候底部按钮就消失不见了，键盘落下之后按钮就出来哦；\n\n这个方案基本都可以解决兼容问题呢；\n","slug":"总结/项目总结/键盘弹起底部被顶起问题","published":1,"updated":"2025-03-12T09:56:40.656Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw0021fg9m1o0u1fty","content":"<p>平常在开发<code>H5</code>的页面时，会遇到一个很常见的问题，就是当输入框弹出键盘时，底部被顶起，导致页面显示不全或者页面样式错落；</p>\n<p>这个问题，一般都是由于<code>input</code>标签聚焦之后，键盘弹起导致的底部按钮顶上去了；</p>\n<p>不过在<code>IOS</code>上，默认是不对导致按钮顶上去的，但是在<code>Android</code>上，默认是会顶上去的；这样在混合开发或者<code>H5</code>就要解决这样的一个兼容问题了；</p>\n<p>这里提供一个解决方案，效果看起来也是不错的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认的屏幕高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> docH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实时屏幕高度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> showH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"><span class=\"comment\">// 默认显示底部按钮</span></span><br><span class=\"line\"><span class=\"comment\">// let hideShow = true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bottom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;bottom&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听页面高度的变化</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tshowH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (docH - showH &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里用vue的话你可以直接控制</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// hideShow = false;</span></span><br><span class=\"line\">\t\tbottom.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// hideShow = true;</span></span><br><span class=\"line\">\t\tbottom.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>效果预览:</p>\n<p>然后你就会发现，当键盘弹起的时候底部按钮就消失不见了，键盘落下之后按钮就出来哦；</p>\n<p>这个方案基本都可以解决兼容问题呢；</p>\n","excerpt":"","more":"<p>平常在开发<code>H5</code>的页面时，会遇到一个很常见的问题，就是当输入框弹出键盘时，底部被顶起，导致页面显示不全或者页面样式错落；</p>\n<p>这个问题，一般都是由于<code>input</code>标签聚焦之后，键盘弹起导致的底部按钮顶上去了；</p>\n<p>不过在<code>IOS</code>上，默认是不对导致按钮顶上去的，但是在<code>Android</code>上，默认是会顶上去的；这样在混合开发或者<code>H5</code>就要解决这样的一个兼容问题了；</p>\n<p>这里提供一个解决方案，效果看起来也是不错的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认的屏幕高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> docH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实时屏幕高度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> showH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"><span class=\"comment\">// 默认显示底部按钮</span></span><br><span class=\"line\"><span class=\"comment\">// let hideShow = true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bottom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;bottom&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听页面高度的变化</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tshowH = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (docH - showH &gt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里用vue的话你可以直接控制</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// hideShow = false;</span></span><br><span class=\"line\">\t\tbottom.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// hideShow = true;</span></span><br><span class=\"line\">\t\tbottom.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>效果预览:</p>\n<p>然后你就会发现，当键盘弹起的时候底部按钮就消失不见了，键盘落下之后按钮就出来哦；</p>\n<p>这个方案基本都可以解决兼容问题呢；</p>\n"},{"title":"工作内容-防篡改水印","abbrlink":"5b79f283","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n对于水印在各个平台网站已经是很常见的功能点了，但是对于水印的理解，无非就是那么几种，其一：平台为了数据的安全性，在用户截图需要涵盖水印防止数据信息泄露问题，其二：系统在特定的情况下亦或是展示功能的特性从而生成特殊的水印方式，例如上传图片需要对图片进行处理，水印需要上传时间，上传者的信息等等；\n\n虽然，水印的功能并不复杂，但是对于`开发者`来讲，一切功能点都是为了安全，稳定考虑；对此，在网页页面的显示是不是有漏洞问题？或者说水印是否在特定的情况下会隐藏或者删除？接下来对于这个问题会大致讲解：\n\n## 水印的安全？\n\n水印一般是为了保证数据的安全性，例如有这么一个场景：公司账户登录的平台系统，每个大大笑笑的页面都需要水印，但是水印添加了登录人的信息，登录时间等，如：`张三 2023-05-27`，一张包含个人姓名的水印就此生成，如果截图反馈用户或者解决产品问题，尽可能的避免数据信息泄露问题，但是对于个别`开发者`来讲，我截图不要水印信息，只能在`控制台`找到对应的`元素节点`进行删除于修改；\n\n如果这时你的水印生成方式没做相对的安全性，那么大大降低了数据的安全性；\n\n## 提高安全？\n\n对于删除`元素节点或者属性`去手动修改水印的方式，一般情况不会有人去这么操作的，但是万一呢，所以这时的你就需要对水印提高安全性能；\n\n那么如何知道元素进行了修改或者删除呢？我要怎么监听，或者有现成的`api`呢？\n\n这里不得不说`js`还是很强大的，`MutationObserver`在`Mdn`上的解释为：`MutationObserver` 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n大致意思说，该`api`监听了对`dom`树的修改，如果元素被修改或者删除的情况，就会执行内置的回调函数，而从进行对应的逻辑；可参考以下代码：\n\n```js\n// 创建观察器，如果对应的节点有修改的迹象，那么就如回调\nconst observer = new MutationObserver(records => {});\n\n// 配置开始观察目标的节点， 观察器的配置，需要观察什么变动\nobserver.observe(元素的节点, {\n\t// 跟节点的属性\n\tattributes: true,\n\t// 观察子节点\n\tchildList: true,\n\t// 观察整个子树\n\tsubtree: true,\n});\n\n// 之后，可停止观察\nobserver.disconnect();\n```\n\n创建了观察器，那么如果提高安全呢？\n\n可以这么理解，我在观察器检测到修改或者删除的情况，重新生成水印并在元素添加；就相当于管用户是什么样的操作，删除或者修改都会在短时间内生成并重新渲染，那么水印的安全就会大大提高；\n\n现在还有一个问题，就是在什么情况下才会重新生成水印呢？\n\n![水印逻辑](https://wangxiaoze-view.github.io/picx-images-hosting/images/temper_waterremark.png)\n\n这里可参考设计模式`订阅发布`，搜集对应的依赖，如果有就发布新的资源，功能点类似于`检测网站发布版本是否更新`；对于`vue3`如何监听依赖的变动呢？`watch`和`watchEffect`也许适合不错的选择，但是俩者还是有区别的:\n\n- `wattch`必须要有监听的对象，并且可以获取到上一次的变化值，但是在不做配置的情况下首次是不会执行的；添加`immediate`代表首次会触发\n- `watchEffect`没有监听的对象，只要你对应的依赖相应数据有了变化，那么就会执行该对应的回调；首次会默认执行一次；\n\n```js\nconst count = ref(0);\n\n// 模拟的方法\nconst addCount = () => count.value++;\n\nwatch(\n\t() => count.value,\n\t(val, oldVal) => {\n\t\t// val: 最新值， oldVal: 上一次的值， 默认首次不执行\n\t},\n\t{\n\t\timmediate: true, // 首次执行\n\t\tdeep: true, // 深度监听\n\t}\n);\n\nwatchEffect(() => {\n\t// 如果执行addCount  回调生效，执行相对应的回调逻辑； 不过是有了变化才会执行，首次会执行；\n\tconsole.log(count.value);\n});\n```\n\n相对于懒监听，对应依赖变化了才会执行，而不是每次都会执行，相对于代码的简洁`watchEffect`是个不错的选择，到时候执行在这里重新生成水印即可；大致的代码如下：\n\n```js\n// parent ref, 生成水印父节点\nconst parentRef = ref();\n\n// uid，用于监听依赖，重新生成水印\nconst uId = ref(0);\n\n// bg， useWater是生成canvas的方法，\nconst bg = useWater(props);\n// base：canvas base64， styleSize: canvas的大小\nconst { base, styleSize } = bg.value;\n\n// div: 重新生成的水印\nlet div;\nwatchEffect(() => {\n\t// 搜集依赖， 如果依赖更新，那么执行下面的代码\n\tuId.value;\n\tif (!parentRef.value) return;\n\tdiv && div.remove();\n\tdiv = document.createElement(\"div\");\n\tdiv.style.backgroundImage = `url(${base})`;\n\tdiv.style.backgroundSize = `${styleSize}px ${styleSize}px`;\n\tdiv.style.backgroundRepeat = \"repeat\";\n\tdiv.style.width = \"100%\";\n\tdiv.style.height = \"100%\";\n\tdiv.style.position = \"absolute\";\n\tdiv.style.inset = \"0\";\n\tparentRef.value.appendChild(div);\n});\n\n// 初始化观察器\nlet ob;\nonMounted(() => {\n\tob = new MutationObserver(records => {\n\t\tfor (const record of records) {\n\t\t\t// 监听删除\n\t\t\tfor (const dom of record.removedNodes) {\n\t\t\t\tif (dom === div) {\n\t\t\t\t\treturn uId.value++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 监听修改属性\n\t\t\tif (record.target === div) {\n\t\t\t\treturn uId.value++;\n\t\t\t}\n\t\t}\n\t});\n\n\tob.observe(parentRef.value, {\n\t\tchildList: true, // 节点的新增与删除\n\t\tattributes: true, // 节点属性值\n\t\tsubtree: true, // 整个子树\n\t});\n});\n\n// 页面加载完毕，卸载观察器，防止对应的内存泄露\nonUnmounted(() => {\n\tob.disconnect();\n\t// 清空，避免内存泄露\n\tdiv = null;\n});\n```\n","source":"_posts/总结/项目总结/防篡改水印.md","raw":"---\ntitle: 工作内容-防篡改水印\nabbrlink: 5b79f283\ndate: 2024-07-08 09:05:01\ncategories:\n  - 总结\ntags:\n  - 工作内容\n---\n\n# 背景\n\n对于水印在各个平台网站已经是很常见的功能点了，但是对于水印的理解，无非就是那么几种，其一：平台为了数据的安全性，在用户截图需要涵盖水印防止数据信息泄露问题，其二：系统在特定的情况下亦或是展示功能的特性从而生成特殊的水印方式，例如上传图片需要对图片进行处理，水印需要上传时间，上传者的信息等等；\n\n虽然，水印的功能并不复杂，但是对于`开发者`来讲，一切功能点都是为了安全，稳定考虑；对此，在网页页面的显示是不是有漏洞问题？或者说水印是否在特定的情况下会隐藏或者删除？接下来对于这个问题会大致讲解：\n\n## 水印的安全？\n\n水印一般是为了保证数据的安全性，例如有这么一个场景：公司账户登录的平台系统，每个大大笑笑的页面都需要水印，但是水印添加了登录人的信息，登录时间等，如：`张三 2023-05-27`，一张包含个人姓名的水印就此生成，如果截图反馈用户或者解决产品问题，尽可能的避免数据信息泄露问题，但是对于个别`开发者`来讲，我截图不要水印信息，只能在`控制台`找到对应的`元素节点`进行删除于修改；\n\n如果这时你的水印生成方式没做相对的安全性，那么大大降低了数据的安全性；\n\n## 提高安全？\n\n对于删除`元素节点或者属性`去手动修改水印的方式，一般情况不会有人去这么操作的，但是万一呢，所以这时的你就需要对水印提高安全性能；\n\n那么如何知道元素进行了修改或者删除呢？我要怎么监听，或者有现成的`api`呢？\n\n这里不得不说`js`还是很强大的，`MutationObserver`在`Mdn`上的解释为：`MutationObserver` 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。\n\n大致意思说，该`api`监听了对`dom`树的修改，如果元素被修改或者删除的情况，就会执行内置的回调函数，而从进行对应的逻辑；可参考以下代码：\n\n```js\n// 创建观察器，如果对应的节点有修改的迹象，那么就如回调\nconst observer = new MutationObserver(records => {});\n\n// 配置开始观察目标的节点， 观察器的配置，需要观察什么变动\nobserver.observe(元素的节点, {\n\t// 跟节点的属性\n\tattributes: true,\n\t// 观察子节点\n\tchildList: true,\n\t// 观察整个子树\n\tsubtree: true,\n});\n\n// 之后，可停止观察\nobserver.disconnect();\n```\n\n创建了观察器，那么如果提高安全呢？\n\n可以这么理解，我在观察器检测到修改或者删除的情况，重新生成水印并在元素添加；就相当于管用户是什么样的操作，删除或者修改都会在短时间内生成并重新渲染，那么水印的安全就会大大提高；\n\n现在还有一个问题，就是在什么情况下才会重新生成水印呢？\n\n![水印逻辑](https://wangxiaoze-view.github.io/picx-images-hosting/images/temper_waterremark.png)\n\n这里可参考设计模式`订阅发布`，搜集对应的依赖，如果有就发布新的资源，功能点类似于`检测网站发布版本是否更新`；对于`vue3`如何监听依赖的变动呢？`watch`和`watchEffect`也许适合不错的选择，但是俩者还是有区别的:\n\n- `wattch`必须要有监听的对象，并且可以获取到上一次的变化值，但是在不做配置的情况下首次是不会执行的；添加`immediate`代表首次会触发\n- `watchEffect`没有监听的对象，只要你对应的依赖相应数据有了变化，那么就会执行该对应的回调；首次会默认执行一次；\n\n```js\nconst count = ref(0);\n\n// 模拟的方法\nconst addCount = () => count.value++;\n\nwatch(\n\t() => count.value,\n\t(val, oldVal) => {\n\t\t// val: 最新值， oldVal: 上一次的值， 默认首次不执行\n\t},\n\t{\n\t\timmediate: true, // 首次执行\n\t\tdeep: true, // 深度监听\n\t}\n);\n\nwatchEffect(() => {\n\t// 如果执行addCount  回调生效，执行相对应的回调逻辑； 不过是有了变化才会执行，首次会执行；\n\tconsole.log(count.value);\n});\n```\n\n相对于懒监听，对应依赖变化了才会执行，而不是每次都会执行，相对于代码的简洁`watchEffect`是个不错的选择，到时候执行在这里重新生成水印即可；大致的代码如下：\n\n```js\n// parent ref, 生成水印父节点\nconst parentRef = ref();\n\n// uid，用于监听依赖，重新生成水印\nconst uId = ref(0);\n\n// bg， useWater是生成canvas的方法，\nconst bg = useWater(props);\n// base：canvas base64， styleSize: canvas的大小\nconst { base, styleSize } = bg.value;\n\n// div: 重新生成的水印\nlet div;\nwatchEffect(() => {\n\t// 搜集依赖， 如果依赖更新，那么执行下面的代码\n\tuId.value;\n\tif (!parentRef.value) return;\n\tdiv && div.remove();\n\tdiv = document.createElement(\"div\");\n\tdiv.style.backgroundImage = `url(${base})`;\n\tdiv.style.backgroundSize = `${styleSize}px ${styleSize}px`;\n\tdiv.style.backgroundRepeat = \"repeat\";\n\tdiv.style.width = \"100%\";\n\tdiv.style.height = \"100%\";\n\tdiv.style.position = \"absolute\";\n\tdiv.style.inset = \"0\";\n\tparentRef.value.appendChild(div);\n});\n\n// 初始化观察器\nlet ob;\nonMounted(() => {\n\tob = new MutationObserver(records => {\n\t\tfor (const record of records) {\n\t\t\t// 监听删除\n\t\t\tfor (const dom of record.removedNodes) {\n\t\t\t\tif (dom === div) {\n\t\t\t\t\treturn uId.value++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 监听修改属性\n\t\t\tif (record.target === div) {\n\t\t\t\treturn uId.value++;\n\t\t\t}\n\t\t}\n\t});\n\n\tob.observe(parentRef.value, {\n\t\tchildList: true, // 节点的新增与删除\n\t\tattributes: true, // 节点属性值\n\t\tsubtree: true, // 整个子树\n\t});\n});\n\n// 页面加载完毕，卸载观察器，防止对应的内存泄露\nonUnmounted(() => {\n\tob.disconnect();\n\t// 清空，避免内存泄露\n\tdiv = null;\n});\n```\n","slug":"总结/项目总结/防篡改水印","published":1,"updated":"2025-03-13T10:16:16.975Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw0023fg9mdnnh9fxk","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>对于水印在各个平台网站已经是很常见的功能点了，但是对于水印的理解，无非就是那么几种，其一：平台为了数据的安全性，在用户截图需要涵盖水印防止数据信息泄露问题，其二：系统在特定的情况下亦或是展示功能的特性从而生成特殊的水印方式，例如上传图片需要对图片进行处理，水印需要上传时间，上传者的信息等等；</p>\n<p>虽然，水印的功能并不复杂，但是对于<code>开发者</code>来讲，一切功能点都是为了安全，稳定考虑；对此，在网页页面的显示是不是有漏洞问题？或者说水印是否在特定的情况下会隐藏或者删除？接下来对于这个问题会大致讲解：</p>\n<h2 id=\"水印的安全？\"><a href=\"#水印的安全？\" class=\"headerlink\" title=\"水印的安全？\"></a>水印的安全？</h2><p>水印一般是为了保证数据的安全性，例如有这么一个场景：公司账户登录的平台系统，每个大大笑笑的页面都需要水印，但是水印添加了登录人的信息，登录时间等，如：<code>张三 2023-05-27</code>，一张包含个人姓名的水印就此生成，如果截图反馈用户或者解决产品问题，尽可能的避免数据信息泄露问题，但是对于个别<code>开发者</code>来讲，我截图不要水印信息，只能在<code>控制台</code>找到对应的<code>元素节点</code>进行删除于修改；</p>\n<p>如果这时你的水印生成方式没做相对的安全性，那么大大降低了数据的安全性；</p>\n<h2 id=\"提高安全？\"><a href=\"#提高安全？\" class=\"headerlink\" title=\"提高安全？\"></a>提高安全？</h2><p>对于删除<code>元素节点或者属性</code>去手动修改水印的方式，一般情况不会有人去这么操作的，但是万一呢，所以这时的你就需要对水印提高安全性能；</p>\n<p>那么如何知道元素进行了修改或者删除呢？我要怎么监听，或者有现成的<code>api</code>呢？</p>\n<p>这里不得不说<code>js</code>还是很强大的，<code>MutationObserver</code>在<code>Mdn</code>上的解释为：<code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n<p>大致意思说，该<code>api</code>监听了对<code>dom</code>树的修改，如果元素被修改或者删除的情况，就会执行内置的回调函数，而从进行对应的逻辑；可参考以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建观察器，如果对应的节点有修改的迹象，那么就如回调</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\"><span class=\"params\">records</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置开始观察目标的节点， 观察器的配置，需要观察什么变动</span></span><br><span class=\"line\">observer.<span class=\"title function_\">observe</span>(元素的节点, &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 跟节点的属性</span></span><br><span class=\"line\">\t<span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 观察子节点</span></span><br><span class=\"line\">\t<span class=\"attr\">childList</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 观察整个子树</span></span><br><span class=\"line\">\t<span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后，可停止观察</span></span><br><span class=\"line\">observer.<span class=\"title function_\">disconnect</span>();</span><br></pre></td></tr></table></figure>\n\n<p>创建了观察器，那么如果提高安全呢？</p>\n<p>可以这么理解，我在观察器检测到修改或者删除的情况，重新生成水印并在元素添加；就相当于管用户是什么样的操作，删除或者修改都会在短时间内生成并重新渲染，那么水印的安全就会大大提高；</p>\n<p>现在还有一个问题，就是在什么情况下才会重新生成水印呢？</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/temper_waterremark.png\" alt=\"水印逻辑\"></p>\n<p>这里可参考设计模式<code>订阅发布</code>，搜集对应的依赖，如果有就发布新的资源，功能点类似于<code>检测网站发布版本是否更新</code>；对于<code>vue3</code>如何监听依赖的变动呢？<code>watch</code>和<code>watchEffect</code>也许适合不错的选择，但是俩者还是有区别的:</p>\n<ul>\n<li><code>wattch</code>必须要有监听的对象，并且可以获取到上一次的变化值，但是在不做配置的情况下首次是不会执行的；添加<code>immediate</code>代表首次会触发</li>\n<li><code>watchEffect</code>没有监听的对象，只要你对应的依赖相应数据有了变化，那么就会执行该对应的回调；首次会默认执行一次；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟的方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">addCount</span> = (<span class=\"params\"></span>) =&gt; count.<span class=\"property\">value</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">\t<span class=\"function\">() =&gt;</span> count.<span class=\"property\">value</span>,</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\">val, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// val: 最新值， oldVal: 上一次的值， 默认首次不执行</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 首次执行</span></span><br><span class=\"line\">\t\t<span class=\"attr\">deep</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果执行addCount  回调生效，执行相对应的回调逻辑； 不过是有了变化才会执行，首次会执行；</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count.<span class=\"property\">value</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>相对于懒监听，对应依赖变化了才会执行，而不是每次都会执行，相对于代码的简洁<code>watchEffect</code>是个不错的选择，到时候执行在这里重新生成水印即可；大致的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent ref, 生成水印父节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parentRef = <span class=\"title function_\">ref</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uid，用于监听依赖，重新生成水印</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uId = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bg， useWater是生成canvas的方法，</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bg = <span class=\"title function_\">useWater</span>(props);</span><br><span class=\"line\"><span class=\"comment\">// base：canvas base64， styleSize: canvas的大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; base, styleSize &#125; = bg.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// div: 重新生成的水印</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> div;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 搜集依赖， 如果依赖更新，那么执行下面的代码</span></span><br><span class=\"line\">\tuId.<span class=\"property\">value</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!parentRef.<span class=\"property\">value</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdiv &amp;&amp; div.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">\tdiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">`url(<span class=\"subst\">$&#123;base&#125;</span>)`</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundSize</span> = <span class=\"string\">`<span class=\"subst\">$&#123;styleSize&#125;</span>px <span class=\"subst\">$&#123;styleSize&#125;</span>px`</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundRepeat</span> = <span class=\"string\">&quot;repeat&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">inset</span> = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">\tparentRef.<span class=\"property\">value</span>.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化观察器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ob;</span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tob = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\"><span class=\"params\">records</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> record <span class=\"keyword\">of</span> records) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 监听删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dom <span class=\"keyword\">of</span> record.<span class=\"property\">removedNodes</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dom === div) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> uId.<span class=\"property\">value</span>++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 监听修改属性</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (record.<span class=\"property\">target</span> === div) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> uId.<span class=\"property\">value</span>++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tob.<span class=\"title function_\">observe</span>(parentRef.<span class=\"property\">value</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 节点的新增与删除</span></span><br><span class=\"line\">\t\t<span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 节点属性值</span></span><br><span class=\"line\">\t\t<span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 整个子树</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面加载完毕，卸载观察器，防止对应的内存泄露</span></span><br><span class=\"line\"><span class=\"title function_\">onUnmounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tob.<span class=\"title function_\">disconnect</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 清空，避免内存泄露</span></span><br><span class=\"line\">\tdiv = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>对于水印在各个平台网站已经是很常见的功能点了，但是对于水印的理解，无非就是那么几种，其一：平台为了数据的安全性，在用户截图需要涵盖水印防止数据信息泄露问题，其二：系统在特定的情况下亦或是展示功能的特性从而生成特殊的水印方式，例如上传图片需要对图片进行处理，水印需要上传时间，上传者的信息等等；</p>\n<p>虽然，水印的功能并不复杂，但是对于<code>开发者</code>来讲，一切功能点都是为了安全，稳定考虑；对此，在网页页面的显示是不是有漏洞问题？或者说水印是否在特定的情况下会隐藏或者删除？接下来对于这个问题会大致讲解：</p>\n<h2 id=\"水印的安全？\"><a href=\"#水印的安全？\" class=\"headerlink\" title=\"水印的安全？\"></a>水印的安全？</h2><p>水印一般是为了保证数据的安全性，例如有这么一个场景：公司账户登录的平台系统，每个大大笑笑的页面都需要水印，但是水印添加了登录人的信息，登录时间等，如：<code>张三 2023-05-27</code>，一张包含个人姓名的水印就此生成，如果截图反馈用户或者解决产品问题，尽可能的避免数据信息泄露问题，但是对于个别<code>开发者</code>来讲，我截图不要水印信息，只能在<code>控制台</code>找到对应的<code>元素节点</code>进行删除于修改；</p>\n<p>如果这时你的水印生成方式没做相对的安全性，那么大大降低了数据的安全性；</p>\n<h2 id=\"提高安全？\"><a href=\"#提高安全？\" class=\"headerlink\" title=\"提高安全？\"></a>提高安全？</h2><p>对于删除<code>元素节点或者属性</code>去手动修改水印的方式，一般情况不会有人去这么操作的，但是万一呢，所以这时的你就需要对水印提高安全性能；</p>\n<p>那么如何知道元素进行了修改或者删除呢？我要怎么监听，或者有现成的<code>api</code>呢？</p>\n<p>这里不得不说<code>js</code>还是很强大的，<code>MutationObserver</code>在<code>Mdn</code>上的解释为：<code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>\n<p>大致意思说，该<code>api</code>监听了对<code>dom</code>树的修改，如果元素被修改或者删除的情况，就会执行内置的回调函数，而从进行对应的逻辑；可参考以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建观察器，如果对应的节点有修改的迹象，那么就如回调</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\"><span class=\"params\">records</span> =&gt;</span> &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置开始观察目标的节点， 观察器的配置，需要观察什么变动</span></span><br><span class=\"line\">observer.<span class=\"title function_\">observe</span>(元素的节点, &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 跟节点的属性</span></span><br><span class=\"line\">\t<span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 观察子节点</span></span><br><span class=\"line\">\t<span class=\"attr\">childList</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 观察整个子树</span></span><br><span class=\"line\">\t<span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后，可停止观察</span></span><br><span class=\"line\">observer.<span class=\"title function_\">disconnect</span>();</span><br></pre></td></tr></table></figure>\n\n<p>创建了观察器，那么如果提高安全呢？</p>\n<p>可以这么理解，我在观察器检测到修改或者删除的情况，重新生成水印并在元素添加；就相当于管用户是什么样的操作，删除或者修改都会在短时间内生成并重新渲染，那么水印的安全就会大大提高；</p>\n<p>现在还有一个问题，就是在什么情况下才会重新生成水印呢？</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/temper_waterremark.png\" alt=\"水印逻辑\"></p>\n<p>这里可参考设计模式<code>订阅发布</code>，搜集对应的依赖，如果有就发布新的资源，功能点类似于<code>检测网站发布版本是否更新</code>；对于<code>vue3</code>如何监听依赖的变动呢？<code>watch</code>和<code>watchEffect</code>也许适合不错的选择，但是俩者还是有区别的:</p>\n<ul>\n<li><code>wattch</code>必须要有监听的对象，并且可以获取到上一次的变化值，但是在不做配置的情况下首次是不会执行的；添加<code>immediate</code>代表首次会触发</li>\n<li><code>watchEffect</code>没有监听的对象，只要你对应的依赖相应数据有了变化，那么就会执行该对应的回调；首次会默认执行一次；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟的方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">addCount</span> = (<span class=\"params\"></span>) =&gt; count.<span class=\"property\">value</span>++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">\t<span class=\"function\">() =&gt;</span> count.<span class=\"property\">value</span>,</span><br><span class=\"line\">\t<span class=\"function\">(<span class=\"params\">val, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// val: 最新值， oldVal: 上一次的值， 默认首次不执行</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 首次执行</span></span><br><span class=\"line\">\t\t<span class=\"attr\">deep</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 深度监听</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果执行addCount  回调生效，执行相对应的回调逻辑； 不过是有了变化才会执行，首次会执行；</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count.<span class=\"property\">value</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>相对于懒监听，对应依赖变化了才会执行，而不是每次都会执行，相对于代码的简洁<code>watchEffect</code>是个不错的选择，到时候执行在这里重新生成水印即可；大致的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parent ref, 生成水印父节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parentRef = <span class=\"title function_\">ref</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// uid，用于监听依赖，重新生成水印</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uId = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bg， useWater是生成canvas的方法，</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bg = <span class=\"title function_\">useWater</span>(props);</span><br><span class=\"line\"><span class=\"comment\">// base：canvas base64， styleSize: canvas的大小</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; base, styleSize &#125; = bg.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// div: 重新生成的水印</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> div;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 搜集依赖， 如果依赖更新，那么执行下面的代码</span></span><br><span class=\"line\">\tuId.<span class=\"property\">value</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!parentRef.<span class=\"property\">value</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tdiv &amp;&amp; div.<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">\tdiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundImage</span> = <span class=\"string\">`url(<span class=\"subst\">$&#123;base&#125;</span>)`</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundSize</span> = <span class=\"string\">`<span class=\"subst\">$&#123;styleSize&#125;</span>px <span class=\"subst\">$&#123;styleSize&#125;</span>px`</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">backgroundRepeat</span> = <span class=\"string\">&quot;repeat&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span><br><span class=\"line\">\tdiv.<span class=\"property\">style</span>.<span class=\"property\">inset</span> = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">\tparentRef.<span class=\"property\">value</span>.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化观察器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ob;</span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tob = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(<span class=\"function\"><span class=\"params\">records</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> record <span class=\"keyword\">of</span> records) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 监听删除</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dom <span class=\"keyword\">of</span> record.<span class=\"property\">removedNodes</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (dom === div) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> uId.<span class=\"property\">value</span>++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 监听修改属性</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (record.<span class=\"property\">target</span> === div) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> uId.<span class=\"property\">value</span>++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tob.<span class=\"title function_\">observe</span>(parentRef.<span class=\"property\">value</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">childList</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 节点的新增与删除</span></span><br><span class=\"line\">\t\t<span class=\"attr\">attributes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 节点属性值</span></span><br><span class=\"line\">\t\t<span class=\"attr\">subtree</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 整个子树</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面加载完毕，卸载观察器，防止对应的内存泄露</span></span><br><span class=\"line\"><span class=\"title function_\">onUnmounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tob.<span class=\"title function_\">disconnect</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 清空，避免内存泄露</span></span><br><span class=\"line\">\tdiv = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"我的项目-temp-pro","abbrlink":"1fa3a704","date":"2024-10-08T01:05:01.000Z","_content":"\n# temp-pro\n\n这是一款简单的前端脚手架工具，其中包含内部脚手架；\n\n可以通过 `npm` 命令下载不同项目（project-template）的模板的脚手架，下载项目模板分为 `pc, h5, node` 等等；极大节省配置项目的时间；\n\n## 背景\n\n在开发类似相同性质的项目，大部分情况的操作就是将原有的项目再次复制一份出来然后进行修改整理，在添加远程的仓库，这样就一个新的项目就出来了；\n\n虽然大部分人觉得复制粘贴是比较快的，但是我觉得这些重复性的操作没必要，所以就写了这个工具；\n\n## 如何使用\n\n1. 安装\n\n安装成功之后，您可以在控制台打印`temp-pro -v`，查看版本信息, 或者输入`temp-pro -help`\n\n```sh\nnpm i temp-pro\n```\n\n2. 创建对应的项目\n\n```sh\ntemp-pro create <项目名称>\n```\n\n关于具体的展示情况，可以查看下图：\n\n---\n\n![图片展示](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.51e0vc8itz.webp)\n","source":"_posts/我的项目/一键代码拉取项目模板/如何使用.md","raw":"---\ntitle: 我的项目-temp-pro\nabbrlink: 1fa3a704\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n\n# temp-pro\n\n这是一款简单的前端脚手架工具，其中包含内部脚手架；\n\n可以通过 `npm` 命令下载不同项目（project-template）的模板的脚手架，下载项目模板分为 `pc, h5, node` 等等；极大节省配置项目的时间；\n\n## 背景\n\n在开发类似相同性质的项目，大部分情况的操作就是将原有的项目再次复制一份出来然后进行修改整理，在添加远程的仓库，这样就一个新的项目就出来了；\n\n虽然大部分人觉得复制粘贴是比较快的，但是我觉得这些重复性的操作没必要，所以就写了这个工具；\n\n## 如何使用\n\n1. 安装\n\n安装成功之后，您可以在控制台打印`temp-pro -v`，查看版本信息, 或者输入`temp-pro -help`\n\n```sh\nnpm i temp-pro\n```\n\n2. 创建对应的项目\n\n```sh\ntemp-pro create <项目名称>\n```\n\n关于具体的展示情况，可以查看下图：\n\n---\n\n![图片展示](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.51e0vc8itz.webp)\n","slug":"我的项目/一键代码拉取项目模板/如何使用","published":1,"updated":"2025-03-13T10:16:16.502Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw0027fg9mc2o15ynw","content":"<h1 id=\"temp-pro\"><a href=\"#temp-pro\" class=\"headerlink\" title=\"temp-pro\"></a>temp-pro</h1><p>这是一款简单的前端脚手架工具，其中包含内部脚手架；</p>\n<p>可以通过 <code>npm</code> 命令下载不同项目（project-template）的模板的脚手架，下载项目模板分为 <code>pc, h5, node</code> 等等；极大节省配置项目的时间；</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在开发类似相同性质的项目，大部分情况的操作就是将原有的项目再次复制一份出来然后进行修改整理，在添加远程的仓库，这样就一个新的项目就出来了；</p>\n<p>虽然大部分人觉得复制粘贴是比较快的，但是我觉得这些重复性的操作没必要，所以就写了这个工具；</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol>\n<li>安装</li>\n</ol>\n<p>安装成功之后，您可以在控制台打印<code>temp-pro -v</code>，查看版本信息, 或者输入<code>temp-pro -help</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i temp-pro</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建对应的项目</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp-pro create &lt;项目名称&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关于具体的展示情况，可以查看下图：</p>\n<hr>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.51e0vc8itz.webp\" alt=\"图片展示\"></p>\n","excerpt":"","more":"<h1 id=\"temp-pro\"><a href=\"#temp-pro\" class=\"headerlink\" title=\"temp-pro\"></a>temp-pro</h1><p>这是一款简单的前端脚手架工具，其中包含内部脚手架；</p>\n<p>可以通过 <code>npm</code> 命令下载不同项目（project-template）的模板的脚手架，下载项目模板分为 <code>pc, h5, node</code> 等等；极大节省配置项目的时间；</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在开发类似相同性质的项目，大部分情况的操作就是将原有的项目再次复制一份出来然后进行修改整理，在添加远程的仓库，这样就一个新的项目就出来了；</p>\n<p>虽然大部分人觉得复制粘贴是比较快的，但是我觉得这些重复性的操作没必要，所以就写了这个工具；</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><ol>\n<li>安装</li>\n</ol>\n<p>安装成功之后，您可以在控制台打印<code>temp-pro -v</code>，查看版本信息, 或者输入<code>temp-pro -help</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i temp-pro</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建对应的项目</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp-pro create &lt;项目名称&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关于具体的展示情况，可以查看下图：</p>\n<hr>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.51e0vc8itz.webp\" alt=\"图片展示\"></p>\n"},{"title":"我的项目-log-reportingV1","abbrlink":"59c233b4","date":"2024-10-08T01:05:01.000Z","_content":"\n# log-reporting - V1\n\n本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况; 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的； 那么开发这款工具常规情况下能解决大部分的问题；\n\n## 🔈 地址\n\n- [github 地址](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n- [npm 地址](https://www.npmjs.com/package/log-reporting)\n\n## 🔈 日志搜集范围\n\n1. **资源：** 资源地址不正确或不存在导致的资源异常\n2. **代码：** 搜集报错信息，页面的崩溃等等；\n3. **请求：** 请求参数错误，访问地址不存在，异常拦截\n4. **额外添加功能：** 支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;\n\n## 🔈 如何使用\n\n### 🔈js 项目引入\n\n需要克隆下载该项目, 执行命令 pnpm run build， 之后会在根目录 dist 文件下看到打包的对应的文件信息; 根据不同平台引入即可;\n\n下面代码示例为浏览器的使用：\n\n```js\n<script src=\"dist/index.umd.js\"></script>\n\n<script>\n  logReporting.init({\n    // 上报地址\n    dsn: 'http://localhost:8888/postLog',\n    // 是否开启调试, 控制台会打印出日志信息\n    debug: false,\n    // 上报方式：fetch sendBeacon\n    logMethod: 'fetch',\n    // 配置参数\n    config: {\n      // 是否开启录制, 可以录制报错前20s的视频\n      isRecord: true,\n      // 录制的时间(20s), 最大不能超过1分钟\n      recordTime: 20 * 1000,\n      // 页面准备好，是否就立即监听\n      watchReady: true,\n      // 监听js\n      watchJsError: true,\n      // 监听资源报错\n      watchSource: true,\n      // 监听请求报错\n      watchAxios: true,\n    }\n  })\n</script>\n```\n\n### 🔈vue 项目引入\n\n在 `vue` 中使用, `pnpm install log-reporting` 安装依赖; 在 `main.js` 中引入\n\n```sh\nnpm i log-reporting\n```\n\n```js\nimport { logReporting } from \"log-reporting\";\nlogReporting.init({\n\t// 上报地址\n\tdsn: \"http://localhost:8888/postLog\",\n\t// 是否开启调试, 控制台会打印出日志信息\n\tdebug: true,\n\t// 上报方式：fetch sendBeacon\n\tlogMethod: \"fetch\",\n\t// 配置参数\n\tconfig: {\n\t\t// 是否开启录制, 可以录制报错前20s的视频\n\t\tisRecord: true,\n\t\t// 录制的时间(20s), 最大不能超过1分钟\n\t\trecordTime: 20 * 1000,\n\t\t// 页面准备好，是否就立即监听\n\t\twatchReady: true,\n\t\t// 监听js\n\t\twatchJsError: true,\n\t\t// 监听资源报错\n\t\twatchSource: true,\n\t\t// 监听请求报错\n\t\twatchAxios: true,\n\t},\n});\n```\n\n根据自己的业务需要开启对应的配置信息;\n\n## 🔈 注意事项\n\n1. 日志上报的方式有俩种: `fetch` 和 `sendBeacon`;\n2. 如果要开启屏幕录制功能那么就不能使用`sendBeacon`,如果您使用`sendBeacon`去上报, 那么在复杂的项目目前它是上传不了的, 因为会把录制的元素信息也会上传;这里使用了开源[rrweb](https://github.com/rrweb-io/rrweb)\n3. 要想使用录制视频上传, 那么请使用`fetch`方式进行上传\n4. 视频录制的信息使用[lz-string](https://github.com/pieroxy/lz-string)进行压缩加密, 如果您使用的情况, 请在服务端或者客户端对该数据进行解压解密;压缩可查阅代码`/src/lib/send.ts 13行左右`, 解压代码可查阅`/example/index.html 110-118行左右`\n5. 如果您想要体验效果：那么可以在`/example`目录下进行`pnpm install`，之后执行`app.js`，之后在`/example/index.html` 点击按钮模拟报错报错，等上报成功之后可以点击`播放按钮预览录制的视频`\n","source":"_posts/我的项目/日志上报插件/v1.md","raw":"---\ntitle: 我的项目-log-reportingV1\nabbrlink: 59c233b4\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n\n# log-reporting - V1\n\n本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况; 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的； 那么开发这款工具常规情况下能解决大部分的问题；\n\n## 🔈 地址\n\n- [github 地址](https://github.com/wangxiaoze-view/log-repeorting/tree/v1)\n- [npm 地址](https://www.npmjs.com/package/log-reporting)\n\n## 🔈 日志搜集范围\n\n1. **资源：** 资源地址不正确或不存在导致的资源异常\n2. **代码：** 搜集报错信息，页面的崩溃等等；\n3. **请求：** 请求参数错误，访问地址不存在，异常拦截\n4. **额外添加功能：** 支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;\n\n## 🔈 如何使用\n\n### 🔈js 项目引入\n\n需要克隆下载该项目, 执行命令 pnpm run build， 之后会在根目录 dist 文件下看到打包的对应的文件信息; 根据不同平台引入即可;\n\n下面代码示例为浏览器的使用：\n\n```js\n<script src=\"dist/index.umd.js\"></script>\n\n<script>\n  logReporting.init({\n    // 上报地址\n    dsn: 'http://localhost:8888/postLog',\n    // 是否开启调试, 控制台会打印出日志信息\n    debug: false,\n    // 上报方式：fetch sendBeacon\n    logMethod: 'fetch',\n    // 配置参数\n    config: {\n      // 是否开启录制, 可以录制报错前20s的视频\n      isRecord: true,\n      // 录制的时间(20s), 最大不能超过1分钟\n      recordTime: 20 * 1000,\n      // 页面准备好，是否就立即监听\n      watchReady: true,\n      // 监听js\n      watchJsError: true,\n      // 监听资源报错\n      watchSource: true,\n      // 监听请求报错\n      watchAxios: true,\n    }\n  })\n</script>\n```\n\n### 🔈vue 项目引入\n\n在 `vue` 中使用, `pnpm install log-reporting` 安装依赖; 在 `main.js` 中引入\n\n```sh\nnpm i log-reporting\n```\n\n```js\nimport { logReporting } from \"log-reporting\";\nlogReporting.init({\n\t// 上报地址\n\tdsn: \"http://localhost:8888/postLog\",\n\t// 是否开启调试, 控制台会打印出日志信息\n\tdebug: true,\n\t// 上报方式：fetch sendBeacon\n\tlogMethod: \"fetch\",\n\t// 配置参数\n\tconfig: {\n\t\t// 是否开启录制, 可以录制报错前20s的视频\n\t\tisRecord: true,\n\t\t// 录制的时间(20s), 最大不能超过1分钟\n\t\trecordTime: 20 * 1000,\n\t\t// 页面准备好，是否就立即监听\n\t\twatchReady: true,\n\t\t// 监听js\n\t\twatchJsError: true,\n\t\t// 监听资源报错\n\t\twatchSource: true,\n\t\t// 监听请求报错\n\t\twatchAxios: true,\n\t},\n});\n```\n\n根据自己的业务需要开启对应的配置信息;\n\n## 🔈 注意事项\n\n1. 日志上报的方式有俩种: `fetch` 和 `sendBeacon`;\n2. 如果要开启屏幕录制功能那么就不能使用`sendBeacon`,如果您使用`sendBeacon`去上报, 那么在复杂的项目目前它是上传不了的, 因为会把录制的元素信息也会上传;这里使用了开源[rrweb](https://github.com/rrweb-io/rrweb)\n3. 要想使用录制视频上传, 那么请使用`fetch`方式进行上传\n4. 视频录制的信息使用[lz-string](https://github.com/pieroxy/lz-string)进行压缩加密, 如果您使用的情况, 请在服务端或者客户端对该数据进行解压解密;压缩可查阅代码`/src/lib/send.ts 13行左右`, 解压代码可查阅`/example/index.html 110-118行左右`\n5. 如果您想要体验效果：那么可以在`/example`目录下进行`pnpm install`，之后执行`app.js`，之后在`/example/index.html` 点击按钮模拟报错报错，等上报成功之后可以点击`播放按钮预览录制的视频`\n","slug":"我的项目/日志上报插件/v1","published":1,"updated":"2025-03-12T10:17:09.867Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iw0029fg9mej5c0er9","content":"<h1 id=\"log-reporting-V1\"><a href=\"#log-reporting-V1\" class=\"headerlink\" title=\"log-reporting - V1\"></a>log-reporting - V1</h1><p>本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况; 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的； 那么开发这款工具常规情况下能解决大部分的问题；</p>\n<h2 id=\"🔈-地址\"><a href=\"#🔈-地址\" class=\"headerlink\" title=\"🔈 地址\"></a>🔈 地址</h2><ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">github 地址</a></li>\n<li><a href=\"https://www.npmjs.com/package/log-reporting\">npm 地址</a></li>\n</ul>\n<h2 id=\"🔈-日志搜集范围\"><a href=\"#🔈-日志搜集范围\" class=\"headerlink\" title=\"🔈 日志搜集范围\"></a>🔈 日志搜集范围</h2><ol>\n<li><strong>资源：</strong> 资源地址不正确或不存在导致的资源异常</li>\n<li><strong>代码：</strong> 搜集报错信息，页面的崩溃等等；</li>\n<li><strong>请求：</strong> 请求参数错误，访问地址不存在，异常拦截</li>\n<li><strong>额外添加功能：</strong> 支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;</li>\n</ol>\n<h2 id=\"🔈-如何使用\"><a href=\"#🔈-如何使用\" class=\"headerlink\" title=\"🔈 如何使用\"></a>🔈 如何使用</h2><h3 id=\"🔈js-项目引入\"><a href=\"#🔈js-项目引入\" class=\"headerlink\" title=\"🔈js 项目引入\"></a>🔈js 项目引入</h3><p>需要克隆下载该项目, 执行命令 pnpm run build， 之后会在根目录 dist 文件下看到打包的对应的文件信息; 根据不同平台引入即可;</p>\n<p>下面代码示例为浏览器的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;dist/index.umd.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  logReporting.<span class=\"title function_\">init</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报地址</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">dsn</span>: <span class=\"string\">&#x27;http://localhost:8888/postLog&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否开启调试, 控制台会打印出日志信息</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报方式：fetch sendBeacon</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">logMethod</span>: <span class=\"string\">&#x27;fetch&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">config</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 是否开启录制, 可以录制报错前20s的视频</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">isRecord</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 录制的时间(20s), 最大不能超过1分钟</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">recordTime</span>: <span class=\"number\">20</span> * <span class=\"number\">1000</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 页面准备好，是否就立即监听</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchReady</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听js</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchJsError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听资源报错</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchSource</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听请求报错</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchAxios</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🔈vue-项目引入\"><a href=\"#🔈vue-项目引入\" class=\"headerlink\" title=\"🔈vue 项目引入\"></a>🔈vue 项目引入</h3><p>在 <code>vue</code> 中使用, <code>pnpm install log-reporting</code> 安装依赖; 在 <code>main.js</code> 中引入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i log-reporting</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logReporting &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;log-reporting&quot;</span>;</span><br><span class=\"line\">logReporting.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 上报地址</span></span><br><span class=\"line\">\t<span class=\"attr\">dsn</span>: <span class=\"string\">&quot;http://localhost:8888/postLog&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否开启调试, 控制台会打印出日志信息</span></span><br><span class=\"line\">\t<span class=\"attr\">debug</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 上报方式：fetch sendBeacon</span></span><br><span class=\"line\">\t<span class=\"attr\">logMethod</span>: <span class=\"string\">&quot;fetch&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">\t<span class=\"attr\">config</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是否开启录制, 可以录制报错前20s的视频</span></span><br><span class=\"line\">\t\t<span class=\"attr\">isRecord</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 录制的时间(20s), 最大不能超过1分钟</span></span><br><span class=\"line\">\t\t<span class=\"attr\">recordTime</span>: <span class=\"number\">20</span> * <span class=\"number\">1000</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 页面准备好，是否就立即监听</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchReady</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听js</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchJsError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听资源报错</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchSource</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听请求报错</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchAxios</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据自己的业务需要开启对应的配置信息;</p>\n<h2 id=\"🔈-注意事项\"><a href=\"#🔈-注意事项\" class=\"headerlink\" title=\"🔈 注意事项\"></a>🔈 注意事项</h2><ol>\n<li>日志上报的方式有俩种: <code>fetch</code> 和 <code>sendBeacon</code>;</li>\n<li>如果要开启屏幕录制功能那么就不能使用<code>sendBeacon</code>,如果您使用<code>sendBeacon</code>去上报, 那么在复杂的项目目前它是上传不了的, 因为会把录制的元素信息也会上传;这里使用了开源<a href=\"https://github.com/rrweb-io/rrweb\">rrweb</a></li>\n<li>要想使用录制视频上传, 那么请使用<code>fetch</code>方式进行上传</li>\n<li>视频录制的信息使用<a href=\"https://github.com/pieroxy/lz-string\">lz-string</a>进行压缩加密, 如果您使用的情况, 请在服务端或者客户端对该数据进行解压解密;压缩可查阅代码<code>/src/lib/send.ts 13行左右</code>, 解压代码可查阅<code>/example/index.html 110-118行左右</code></li>\n<li>如果您想要体验效果：那么可以在<code>/example</code>目录下进行<code>pnpm install</code>，之后执行<code>app.js</code>，之后在<code>/example/index.html</code> 点击按钮模拟报错报错，等上报成功之后可以点击<code>播放按钮预览录制的视频</code></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"log-reporting-V1\"><a href=\"#log-reporting-V1\" class=\"headerlink\" title=\"log-reporting - V1\"></a>log-reporting - V1</h1><p>本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况; 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的； 那么开发这款工具常规情况下能解决大部分的问题；</p>\n<h2 id=\"🔈-地址\"><a href=\"#🔈-地址\" class=\"headerlink\" title=\"🔈 地址\"></a>🔈 地址</h2><ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/tree/v1\">github 地址</a></li>\n<li><a href=\"https://www.npmjs.com/package/log-reporting\">npm 地址</a></li>\n</ul>\n<h2 id=\"🔈-日志搜集范围\"><a href=\"#🔈-日志搜集范围\" class=\"headerlink\" title=\"🔈 日志搜集范围\"></a>🔈 日志搜集范围</h2><ol>\n<li><strong>资源：</strong> 资源地址不正确或不存在导致的资源异常</li>\n<li><strong>代码：</strong> 搜集报错信息，页面的崩溃等等；</li>\n<li><strong>请求：</strong> 请求参数错误，访问地址不存在，异常拦截</li>\n<li><strong>额外添加功能：</strong> 支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;</li>\n</ol>\n<h2 id=\"🔈-如何使用\"><a href=\"#🔈-如何使用\" class=\"headerlink\" title=\"🔈 如何使用\"></a>🔈 如何使用</h2><h3 id=\"🔈js-项目引入\"><a href=\"#🔈js-项目引入\" class=\"headerlink\" title=\"🔈js 项目引入\"></a>🔈js 项目引入</h3><p>需要克隆下载该项目, 执行命令 pnpm run build， 之后会在根目录 dist 文件下看到打包的对应的文件信息; 根据不同平台引入即可;</p>\n<p>下面代码示例为浏览器的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;dist/index.umd.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  logReporting.<span class=\"title function_\">init</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报地址</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">dsn</span>: <span class=\"string\">&#x27;http://localhost:8888/postLog&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否开启调试, 控制台会打印出日志信息</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报方式：fetch sendBeacon</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">logMethod</span>: <span class=\"string\">&#x27;fetch&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">config</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 是否开启录制, 可以录制报错前20s的视频</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">isRecord</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 录制的时间(20s), 最大不能超过1分钟</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">recordTime</span>: <span class=\"number\">20</span> * <span class=\"number\">1000</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 页面准备好，是否就立即监听</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchReady</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听js</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchJsError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听资源报错</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchSource</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">// 监听请求报错</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">watchAxios</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🔈vue-项目引入\"><a href=\"#🔈vue-项目引入\" class=\"headerlink\" title=\"🔈vue 项目引入\"></a>🔈vue 项目引入</h3><p>在 <code>vue</code> 中使用, <code>pnpm install log-reporting</code> 安装依赖; 在 <code>main.js</code> 中引入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i log-reporting</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logReporting &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;log-reporting&quot;</span>;</span><br><span class=\"line\">logReporting.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 上报地址</span></span><br><span class=\"line\">\t<span class=\"attr\">dsn</span>: <span class=\"string\">&quot;http://localhost:8888/postLog&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否开启调试, 控制台会打印出日志信息</span></span><br><span class=\"line\">\t<span class=\"attr\">debug</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 上报方式：fetch sendBeacon</span></span><br><span class=\"line\">\t<span class=\"attr\">logMethod</span>: <span class=\"string\">&quot;fetch&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 配置参数</span></span><br><span class=\"line\">\t<span class=\"attr\">config</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是否开启录制, 可以录制报错前20s的视频</span></span><br><span class=\"line\">\t\t<span class=\"attr\">isRecord</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 录制的时间(20s), 最大不能超过1分钟</span></span><br><span class=\"line\">\t\t<span class=\"attr\">recordTime</span>: <span class=\"number\">20</span> * <span class=\"number\">1000</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 页面准备好，是否就立即监听</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchReady</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听js</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchJsError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听资源报错</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchSource</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听请求报错</span></span><br><span class=\"line\">\t\t<span class=\"attr\">watchAxios</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据自己的业务需要开启对应的配置信息;</p>\n<h2 id=\"🔈-注意事项\"><a href=\"#🔈-注意事项\" class=\"headerlink\" title=\"🔈 注意事项\"></a>🔈 注意事项</h2><ol>\n<li>日志上报的方式有俩种: <code>fetch</code> 和 <code>sendBeacon</code>;</li>\n<li>如果要开启屏幕录制功能那么就不能使用<code>sendBeacon</code>,如果您使用<code>sendBeacon</code>去上报, 那么在复杂的项目目前它是上传不了的, 因为会把录制的元素信息也会上传;这里使用了开源<a href=\"https://github.com/rrweb-io/rrweb\">rrweb</a></li>\n<li>要想使用录制视频上传, 那么请使用<code>fetch</code>方式进行上传</li>\n<li>视频录制的信息使用<a href=\"https://github.com/pieroxy/lz-string\">lz-string</a>进行压缩加密, 如果您使用的情况, 请在服务端或者客户端对该数据进行解压解密;压缩可查阅代码<code>/src/lib/send.ts 13行左右</code>, 解压代码可查阅<code>/example/index.html 110-118行左右</code></li>\n<li>如果您想要体验效果：那么可以在<code>/example</code>目录下进行<code>pnpm install</code>，之后执行<code>app.js</code>，之后在<code>/example/index.html</code> 点击按钮模拟报错报错，等上报成功之后可以点击<code>播放按钮预览录制的视频</code></li>\n</ol>\n"},{"title":"我的项目-'@log-reporting/core - V2'","abbrlink":"7407fa48","date":"2024-10-08T01:05:01.000Z","_content":"\n# @log-reporting/core - V2\n\n**<font color=\"#ff0000\">值得注意: v2 版本的包为“@log-reporting/core”, 而 v1 版本的包为“log-reporting”； 写法参数等完全是不一样的，v2 版本为全新版本</font>**\n\n**当然， v2 版本由内置的`types`， 如果您的项目因为安装`@log-reporting/core`而导致`ts`类型报错，那就需要您安装`@log-reporting/types`了，这样就可以完全解决类型报错的问题；**\n\n**当前版本仅仅支持客户端使用，不支持在服务端使用**\n\n## 🔈 地址\n\n- [github 地址](https://github.com/wangxiaoze-view/log-repeorting/blob/main/packages/core/README.md)\n- [npm 地址](https://www.npmjs.com/package/@log-reporting/core)\n\n## 🔈 注意事项\n\n> 本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况;\n> 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的；\n> 那么开发这款工具常规情况下能解决大部分的问题；\n\n该版本为全新版本, 与之前的版本会有很大的区别;\n\n## 🔈 日志搜集范围\n\n1. 资源：资源地址不正确或不存在导致的资源异常\n2. 代码：搜集报错信息，页面的崩溃等等；\n3. 请求：截请求参数错误，访问地址不存在，异常拦\n4. 额外添加功能：支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;\n5. 支持性能监控, 白屏时间, 页面加载时间等等; <Badge type=\"tip\" text=\"新版本支持\" />\n6. 支持`pv`页面浏览, 需要手动提交; <Badge type=\"tip\" text=\"新版本支持\" />\n7. 支持`曝光`, 需要手动设置对应的元素(仅支持在可是区域内); <Badge type=\"tip\" text=\"新版本支持\" />\n\n## 🔈 如何使用\n\n### js 项目引入\n\n需要克隆下载该项目, 执行命令`pnpm run build`， 之后会在根目录`dist`文件下看到打包的对应的文件信息; 根据不同平台引入即可;\n\n下面代码示例为浏览器的使用：\n\n```js\n<script src=\"dist/index.umd.js\"></script>\n\n<script>\n  logReportingCore.init({\n    // 上报地址\n    dsn: 'http://localhost:8888/postLog',\n    // 是否开启调试\n    isDebug: true,\n    // 是否捕获错误\n    isError: true,\n    // 是否捕获console.error\n    isConsoleError: true,\n    // 是否捕获性能\n    isPerformance: true,\n    // 是否捕获资源\n    isResource: true,\n    // 是否捕获请求\n    isXhr: true,\n    // 屏幕录制\n    record: {\n      open: true,\n      time: 10 * 1000\n    },\n    // 加密方式\n    encryptMethod: 'base64',\n    // 上报方式\n    method: 'beacon',\n    // pv统计\n    isPv: true,\n    // 曝光统计\n    isExposure: true\n  })\n</script>\n```\n\n### vue 项目引入\n\n在`vue`中使用,\n`npm install @log-reporting/core` 安装依赖\n\n在`main.js`中引入\n\n```js\nimport { init } from \"@log-reporting/core\";\ninit({});\n```\n\n根据自己的业务需要开启对应的配置信息;\n\n## 🔈 关于`pv统计`与`曝光统计`\n\n目前仅仅支持手动上报；\n\n1. `pv`统计：\n\n```js\nimport { lestenPv } from \"@log-reporting/core\";\nlestenPv({\n\t// 统计信息\n\tmessage: \"测试\",\n\t// 其他参数都是可以自定义的\n\turl: \"localhost:8888/getLogData\",\n\tparams: { a: 123 },\n});\n\nexport interface IPv {\n\tmessage?: string;\n\t[k: string]: any;\n}\n```\n\n2. `曝光统计`：\n\n```js\nimport { lestenExposure } from \"@log-reporting/core\";\nlestenExposure({\n\t// 曝光元素\n\ttarget: document.querySelector(\"#btn10\"),\n\t// 曝光信息\n\tmessage: \"曝光按钮\",\n\tthreshold: 0.5,\n\t// 其他参数\n\tparams: { a: 123 },\n});\n\nexport interface IExposure extends IPv {\n\tthreshold?: number;\n\ttarget?: any; // 曝光的元素\n\tparams?: Record<string, any>;\n\ttime?: number;\n}\n```\n\n## 🔈 屏幕录制\n\n该版本中有内置的`屏幕录制`功能，也就是相对于错误日志的操作视频记录；\n\n### 为什么要添加这个功能？\n\n因为相对于日志上报，我们希望在`线上环境`中能够记录一些操作的视频，这样我们就能更好的了解用户的操作情况； 但是，由于`浏览器`本身对`屏幕录制`的支持不是很友好，所以需要我们自己实现； 所以，我们自己实现了一个简单的`屏幕录制`功能；\n\n当然主要是引入了[rrweb](https://github.com/rrweb-io/rrweb)插件；\n\n### 屏幕录制的配置\n\n```json\n{\n  record: {\n    open: true, // 是否开启录制\n    time: 10 * 1000 // 录制时间， 最大时间为1分钟\n  }\n}\n```\n\n<font color=\"#ff0000\">让然如果您觉得该功能可能涉及到隐私情况，您可以选择关闭，这样的话视频信息不会进行上报</font>\n\n### 视频信息的加密解密\n\n为了保证安全性以及性能，视频信息是做了 **安全加密** 的，所以您需要解密才能使用；\n\n目前加密的的方式分为俩中：**lz** 和 **base64**\n\n- **加密使用：** `encryptFun(value: Record<string, any>, k?: string)`;\n  - 该方法是对象进行加密，加密后的数据是字符串, 默认的加密\n  - k: 可以是固定值`snapshot`也可以是其他，当`k`为其他值时，默认加密方式为`base64`\n- **解密使用：** `decryptionFun(value: string, k?: string)`\n  - 该方法是解密，解密后的数据是`object`\n  - 将您加密后等到的字符串给到该方法即可；`k`的作用类似于上面的`k`；\n\n### 解密之后展示回放\n\n```js\nimport { decryptionFun } from \"@log-reporting/core\";\n// data: 模仿后端返回的数据\nconst { reportInfo } = data;\n// 对数据进行解密\nconst videoData = decryptionFun(reportInfo.snapshot);\n// 使用rrweb进行回放， 当然是需要安装rrweb插件\n// https://github.com/rrweb-io/rrweb/blob/master/README.zh_CN.md\nconst player = new rrweb.Replayer(JSON.parse(videoData));\n// 自动播放\nplayer.play();\n```\n\n## 🔈 额外导出的方法\n\n> 这些方法不是主要核心方法，一般情况没什么用，但是有些时候可能需要用到，所以这里导出出来；\n\n```js\nimport { _global, _support } from \"@log-reporting/core\";\n```\n\n1. **\\_global:** 全局对象，可以理解为`window`\n2. **\\_support：** 基础信息参数\n\n## 🔈 其他\n\n### @log-reortinging/types - 类型校验\n\n`@log-reporting/core`有内置的类型校验，如果您的项目是`ts`搭建，那么需要再次安装`@log-reporting/types`，否则会导致类型报错，当然，您也可以自行定义类型，但是需要您自行保证类型是否正确；\n\n如果您引入正确之后，不需要特殊使用就可以在项目中使用了；您也可以点击内置`api`可以查看源码编译而成的`index.d.ts`；\n\n### @log-reporting/logger - 日志\n\n`@log-reporting/logger`没有太大的用处，就是依赖于`@log-reporting/core`配置中的`debuge`产生的，也就是在`console.log`的基础上做了一层美化效果， 当然您也是可以关闭的，配置完全是自定义的；\n","source":"_posts/我的项目/日志上报插件/v2.md","raw":"---\ntitle: 我的项目-'@log-reporting/core - V2'\nabbrlink: 7407fa48\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n\n# @log-reporting/core - V2\n\n**<font color=\"#ff0000\">值得注意: v2 版本的包为“@log-reporting/core”, 而 v1 版本的包为“log-reporting”； 写法参数等完全是不一样的，v2 版本为全新版本</font>**\n\n**当然， v2 版本由内置的`types`， 如果您的项目因为安装`@log-reporting/core`而导致`ts`类型报错，那就需要您安装`@log-reporting/types`了，这样就可以完全解决类型报错的问题；**\n\n**当前版本仅仅支持客户端使用，不支持在服务端使用**\n\n## 🔈 地址\n\n- [github 地址](https://github.com/wangxiaoze-view/log-repeorting/blob/main/packages/core/README.md)\n- [npm 地址](https://www.npmjs.com/package/@log-reporting/core)\n\n## 🔈 注意事项\n\n> 本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况;\n> 如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的；\n> 那么开发这款工具常规情况下能解决大部分的问题；\n\n该版本为全新版本, 与之前的版本会有很大的区别;\n\n## 🔈 日志搜集范围\n\n1. 资源：资源地址不正确或不存在导致的资源异常\n2. 代码：搜集报错信息，页面的崩溃等等；\n3. 请求：截请求参数错误，访问地址不存在，异常拦\n4. 额外添加功能：支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;\n5. 支持性能监控, 白屏时间, 页面加载时间等等; <Badge type=\"tip\" text=\"新版本支持\" />\n6. 支持`pv`页面浏览, 需要手动提交; <Badge type=\"tip\" text=\"新版本支持\" />\n7. 支持`曝光`, 需要手动设置对应的元素(仅支持在可是区域内); <Badge type=\"tip\" text=\"新版本支持\" />\n\n## 🔈 如何使用\n\n### js 项目引入\n\n需要克隆下载该项目, 执行命令`pnpm run build`， 之后会在根目录`dist`文件下看到打包的对应的文件信息; 根据不同平台引入即可;\n\n下面代码示例为浏览器的使用：\n\n```js\n<script src=\"dist/index.umd.js\"></script>\n\n<script>\n  logReportingCore.init({\n    // 上报地址\n    dsn: 'http://localhost:8888/postLog',\n    // 是否开启调试\n    isDebug: true,\n    // 是否捕获错误\n    isError: true,\n    // 是否捕获console.error\n    isConsoleError: true,\n    // 是否捕获性能\n    isPerformance: true,\n    // 是否捕获资源\n    isResource: true,\n    // 是否捕获请求\n    isXhr: true,\n    // 屏幕录制\n    record: {\n      open: true,\n      time: 10 * 1000\n    },\n    // 加密方式\n    encryptMethod: 'base64',\n    // 上报方式\n    method: 'beacon',\n    // pv统计\n    isPv: true,\n    // 曝光统计\n    isExposure: true\n  })\n</script>\n```\n\n### vue 项目引入\n\n在`vue`中使用,\n`npm install @log-reporting/core` 安装依赖\n\n在`main.js`中引入\n\n```js\nimport { init } from \"@log-reporting/core\";\ninit({});\n```\n\n根据自己的业务需要开启对应的配置信息;\n\n## 🔈 关于`pv统计`与`曝光统计`\n\n目前仅仅支持手动上报；\n\n1. `pv`统计：\n\n```js\nimport { lestenPv } from \"@log-reporting/core\";\nlestenPv({\n\t// 统计信息\n\tmessage: \"测试\",\n\t// 其他参数都是可以自定义的\n\turl: \"localhost:8888/getLogData\",\n\tparams: { a: 123 },\n});\n\nexport interface IPv {\n\tmessage?: string;\n\t[k: string]: any;\n}\n```\n\n2. `曝光统计`：\n\n```js\nimport { lestenExposure } from \"@log-reporting/core\";\nlestenExposure({\n\t// 曝光元素\n\ttarget: document.querySelector(\"#btn10\"),\n\t// 曝光信息\n\tmessage: \"曝光按钮\",\n\tthreshold: 0.5,\n\t// 其他参数\n\tparams: { a: 123 },\n});\n\nexport interface IExposure extends IPv {\n\tthreshold?: number;\n\ttarget?: any; // 曝光的元素\n\tparams?: Record<string, any>;\n\ttime?: number;\n}\n```\n\n## 🔈 屏幕录制\n\n该版本中有内置的`屏幕录制`功能，也就是相对于错误日志的操作视频记录；\n\n### 为什么要添加这个功能？\n\n因为相对于日志上报，我们希望在`线上环境`中能够记录一些操作的视频，这样我们就能更好的了解用户的操作情况； 但是，由于`浏览器`本身对`屏幕录制`的支持不是很友好，所以需要我们自己实现； 所以，我们自己实现了一个简单的`屏幕录制`功能；\n\n当然主要是引入了[rrweb](https://github.com/rrweb-io/rrweb)插件；\n\n### 屏幕录制的配置\n\n```json\n{\n  record: {\n    open: true, // 是否开启录制\n    time: 10 * 1000 // 录制时间， 最大时间为1分钟\n  }\n}\n```\n\n<font color=\"#ff0000\">让然如果您觉得该功能可能涉及到隐私情况，您可以选择关闭，这样的话视频信息不会进行上报</font>\n\n### 视频信息的加密解密\n\n为了保证安全性以及性能，视频信息是做了 **安全加密** 的，所以您需要解密才能使用；\n\n目前加密的的方式分为俩中：**lz** 和 **base64**\n\n- **加密使用：** `encryptFun(value: Record<string, any>, k?: string)`;\n  - 该方法是对象进行加密，加密后的数据是字符串, 默认的加密\n  - k: 可以是固定值`snapshot`也可以是其他，当`k`为其他值时，默认加密方式为`base64`\n- **解密使用：** `decryptionFun(value: string, k?: string)`\n  - 该方法是解密，解密后的数据是`object`\n  - 将您加密后等到的字符串给到该方法即可；`k`的作用类似于上面的`k`；\n\n### 解密之后展示回放\n\n```js\nimport { decryptionFun } from \"@log-reporting/core\";\n// data: 模仿后端返回的数据\nconst { reportInfo } = data;\n// 对数据进行解密\nconst videoData = decryptionFun(reportInfo.snapshot);\n// 使用rrweb进行回放， 当然是需要安装rrweb插件\n// https://github.com/rrweb-io/rrweb/blob/master/README.zh_CN.md\nconst player = new rrweb.Replayer(JSON.parse(videoData));\n// 自动播放\nplayer.play();\n```\n\n## 🔈 额外导出的方法\n\n> 这些方法不是主要核心方法，一般情况没什么用，但是有些时候可能需要用到，所以这里导出出来；\n\n```js\nimport { _global, _support } from \"@log-reporting/core\";\n```\n\n1. **\\_global:** 全局对象，可以理解为`window`\n2. **\\_support：** 基础信息参数\n\n## 🔈 其他\n\n### @log-reortinging/types - 类型校验\n\n`@log-reporting/core`有内置的类型校验，如果您的项目是`ts`搭建，那么需要再次安装`@log-reporting/types`，否则会导致类型报错，当然，您也可以自行定义类型，但是需要您自行保证类型是否正确；\n\n如果您引入正确之后，不需要特殊使用就可以在项目中使用了；您也可以点击内置`api`可以查看源码编译而成的`index.d.ts`；\n\n### @log-reporting/logger - 日志\n\n`@log-reporting/logger`没有太大的用处，就是依赖于`@log-reporting/core`配置中的`debuge`产生的，也就是在`console.log`的基础上做了一层美化效果， 当然您也是可以关闭的，配置完全是自定义的；\n","slug":"我的项目/日志上报插件/v2","published":1,"updated":"2025-03-12T10:17:11.696Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ix002dfg9m5iha2mrc","content":"<h1 id=\"log-reporting-core-V2\"><a href=\"#log-reporting-core-V2\" class=\"headerlink\" title=\"@log-reporting&#x2F;core - V2\"></a>@log-reporting&#x2F;core - V2</h1><p><strong><font color=\"#ff0000\">值得注意: v2 版本的包为“@log-reporting&#x2F;core”, 而 v1 版本的包为“log-reporting”； 写法参数等完全是不一样的，v2 版本为全新版本</font></strong></p>\n<p><strong>当然， v2 版本由内置的<code>types</code>， 如果您的项目因为安装<code>@log-reporting/core</code>而导致<code>ts</code>类型报错，那就需要您安装<code>@log-reporting/types</code>了，这样就可以完全解决类型报错的问题；</strong></p>\n<p><strong>当前版本仅仅支持客户端使用，不支持在服务端使用</strong></p>\n<h2 id=\"🔈-地址\"><a href=\"#🔈-地址\" class=\"headerlink\" title=\"🔈 地址\"></a>🔈 地址</h2><ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/blob/main/packages/core/README.md\">github 地址</a></li>\n<li><a href=\"https://www.npmjs.com/package/@log-reporting/core\">npm 地址</a></li>\n</ul>\n<h2 id=\"🔈-注意事项\"><a href=\"#🔈-注意事项\" class=\"headerlink\" title=\"🔈 注意事项\"></a>🔈 注意事项</h2><blockquote>\n<p>本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况;<br>如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的；<br>那么开发这款工具常规情况下能解决大部分的问题；</p>\n</blockquote>\n<p>该版本为全新版本, 与之前的版本会有很大的区别;</p>\n<h2 id=\"🔈-日志搜集范围\"><a href=\"#🔈-日志搜集范围\" class=\"headerlink\" title=\"🔈 日志搜集范围\"></a>🔈 日志搜集范围</h2><ol>\n<li>资源：资源地址不正确或不存在导致的资源异常</li>\n<li>代码：搜集报错信息，页面的崩溃等等；</li>\n<li>请求：截请求参数错误，访问地址不存在，异常拦</li>\n<li>额外添加功能：支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;</li>\n<li>支持性能监控, 白屏时间, 页面加载时间等等; <Badge type=\"tip\" text=\"新版本支持\" /></li>\n<li>支持<code>pv</code>页面浏览, 需要手动提交; <Badge type=\"tip\" text=\"新版本支持\" /></li>\n<li>支持<code>曝光</code>, 需要手动设置对应的元素(仅支持在可是区域内); <Badge type=\"tip\" text=\"新版本支持\" /></li>\n</ol>\n<h2 id=\"🔈-如何使用\"><a href=\"#🔈-如何使用\" class=\"headerlink\" title=\"🔈 如何使用\"></a>🔈 如何使用</h2><h3 id=\"js-项目引入\"><a href=\"#js-项目引入\" class=\"headerlink\" title=\"js 项目引入\"></a>js 项目引入</h3><p>需要克隆下载该项目, 执行命令<code>pnpm run build</code>， 之后会在根目录<code>dist</code>文件下看到打包的对应的文件信息; 根据不同平台引入即可;</p>\n<p>下面代码示例为浏览器的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;dist/index.umd.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  logReportingCore.<span class=\"title function_\">init</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报地址</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">dsn</span>: <span class=\"string\">&#x27;http://localhost:8888/postLog&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否开启调试</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isDebug</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获错误</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获console.error</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isConsoleError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获性能</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isPerformance</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获资源</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isResource</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获请求</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isXhr</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 屏幕录制</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">record</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">time</span>: <span class=\"number\">10</span> * <span class=\"number\">1000</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 加密方式</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">encryptMethod</span>: <span class=\"string\">&#x27;base64&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报方式</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;beacon&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// pv统计</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isPv</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 曝光统计</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isExposure</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-项目引入\"><a href=\"#vue-项目引入\" class=\"headerlink\" title=\"vue 项目引入\"></a>vue 项目引入</h3><p>在<code>vue</code>中使用,<br><code>npm install @log-reporting/core</code> 安装依赖</p>\n<p>在<code>main.js</code>中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; init &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">init</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据自己的业务需要开启对应的配置信息;</p>\n<h2 id=\"🔈-关于pv统计与曝光统计\"><a href=\"#🔈-关于pv统计与曝光统计\" class=\"headerlink\" title=\"🔈 关于pv统计与曝光统计\"></a>🔈 关于<code>pv统计</code>与<code>曝光统计</code></h2><p>目前仅仅支持手动上报；</p>\n<ol>\n<li><code>pv</code>统计：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lestenPv &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">lestenPv</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 统计信息</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;测试&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他参数都是可以自定义的</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;localhost:8888/getLogData&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">params</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">IPv</span> &#123;</span><br><span class=\"line\">\tmessage?: string;</span><br><span class=\"line\">\t[<span class=\"attr\">k</span>: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>曝光统计</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lestenExposure &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">lestenExposure</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 曝光元素</span></span><br><span class=\"line\">\t<span class=\"attr\">target</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#btn10&quot;</span>),</span><br><span class=\"line\">\t<span class=\"comment\">// 曝光信息</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;曝光按钮&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">threshold</span>: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他参数</span></span><br><span class=\"line\">\t<span class=\"attr\">params</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">IExposure</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IPv</span> &#123;</span><br><span class=\"line\">\tthreshold?: number;</span><br><span class=\"line\">\ttarget?: any; <span class=\"comment\">// 曝光的元素</span></span><br><span class=\"line\">\tparams?: <span class=\"title class_\">Record</span>&lt;string, any&gt;;</span><br><span class=\"line\">\ttime?: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🔈-屏幕录制\"><a href=\"#🔈-屏幕录制\" class=\"headerlink\" title=\"🔈 屏幕录制\"></a>🔈 屏幕录制</h2><p>该版本中有内置的<code>屏幕录制</code>功能，也就是相对于错误日志的操作视频记录；</p>\n<h3 id=\"为什么要添加这个功能？\"><a href=\"#为什么要添加这个功能？\" class=\"headerlink\" title=\"为什么要添加这个功能？\"></a>为什么要添加这个功能？</h3><p>因为相对于日志上报，我们希望在<code>线上环境</code>中能够记录一些操作的视频，这样我们就能更好的了解用户的操作情况； 但是，由于<code>浏览器</code>本身对<code>屏幕录制</code>的支持不是很友好，所以需要我们自己实现； 所以，我们自己实现了一个简单的<code>屏幕录制</code>功能；</p>\n<p>当然主要是引入了<a href=\"https://github.com/rrweb-io/rrweb\">rrweb</a>插件；</p>\n<h3 id=\"屏幕录制的配置\"><a href=\"#屏幕录制的配置\" class=\"headerlink\" title=\"屏幕录制的配置\"></a>屏幕录制的配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  record<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    open<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 是否开启录制</span></span><br><span class=\"line\">    time<span class=\"punctuation\">:</span> <span class=\"number\">10</span> * <span class=\"number\">1000</span> <span class=\"comment\">// 录制时间， 最大时间为1分钟</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=\"#ff0000\">让然如果您觉得该功能可能涉及到隐私情况，您可以选择关闭，这样的话视频信息不会进行上报</font></p>\n<h3 id=\"视频信息的加密解密\"><a href=\"#视频信息的加密解密\" class=\"headerlink\" title=\"视频信息的加密解密\"></a>视频信息的加密解密</h3><p>为了保证安全性以及性能，视频信息是做了 <strong>安全加密</strong> 的，所以您需要解密才能使用；</p>\n<p>目前加密的的方式分为俩中：<strong>lz</strong> 和 <strong>base64</strong></p>\n<ul>\n<li><strong>加密使用：</strong> <code>encryptFun(value: Record&lt;string, any&gt;, k?: string)</code>;<ul>\n<li>该方法是对象进行加密，加密后的数据是字符串, 默认的加密</li>\n<li>k: 可以是固定值<code>snapshot</code>也可以是其他，当<code>k</code>为其他值时，默认加密方式为<code>base64</code></li>\n</ul>\n</li>\n<li><strong>解密使用：</strong> <code>decryptionFun(value: string, k?: string)</code><ul>\n<li>该方法是解密，解密后的数据是<code>object</code></li>\n<li>将您加密后等到的字符串给到该方法即可；<code>k</code>的作用类似于上面的<code>k</code>；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解密之后展示回放\"><a href=\"#解密之后展示回放\" class=\"headerlink\" title=\"解密之后展示回放\"></a>解密之后展示回放</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; decryptionFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// data: 模仿后端返回的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; reportInfo &#125; = data;</span><br><span class=\"line\"><span class=\"comment\">// 对数据进行解密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> videoData = <span class=\"title function_\">decryptionFun</span>(reportInfo.<span class=\"property\">snapshot</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用rrweb进行回放， 当然是需要安装rrweb插件</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/rrweb-io/rrweb/blob/master/README.zh_CN.md</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> player = <span class=\"keyword\">new</span> rrweb.<span class=\"title class_\">Replayer</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(videoData));</span><br><span class=\"line\"><span class=\"comment\">// 自动播放</span></span><br><span class=\"line\">player.<span class=\"title function_\">play</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🔈-额外导出的方法\"><a href=\"#🔈-额外导出的方法\" class=\"headerlink\" title=\"🔈 额外导出的方法\"></a>🔈 额外导出的方法</h2><blockquote>\n<p>这些方法不是主要核心方法，一般情况没什么用，但是有些时候可能需要用到，所以这里导出出来；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; _global, _support &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>_global:</strong> 全局对象，可以理解为<code>window</code></li>\n<li><strong>_support：</strong> 基础信息参数</li>\n</ol>\n<h2 id=\"🔈-其他\"><a href=\"#🔈-其他\" class=\"headerlink\" title=\"🔈 其他\"></a>🔈 其他</h2><h3 id=\"log-reortinging-types-类型校验\"><a href=\"#log-reortinging-types-类型校验\" class=\"headerlink\" title=\"@log-reortinging&#x2F;types - 类型校验\"></a>@log-reortinging&#x2F;types - 类型校验</h3><p><code>@log-reporting/core</code>有内置的类型校验，如果您的项目是<code>ts</code>搭建，那么需要再次安装<code>@log-reporting/types</code>，否则会导致类型报错，当然，您也可以自行定义类型，但是需要您自行保证类型是否正确；</p>\n<p>如果您引入正确之后，不需要特殊使用就可以在项目中使用了；您也可以点击内置<code>api</code>可以查看源码编译而成的<code>index.d.ts</code>；</p>\n<h3 id=\"log-reporting-logger-日志\"><a href=\"#log-reporting-logger-日志\" class=\"headerlink\" title=\"@log-reporting&#x2F;logger - 日志\"></a>@log-reporting&#x2F;logger - 日志</h3><p><code>@log-reporting/logger</code>没有太大的用处，就是依赖于<code>@log-reporting/core</code>配置中的<code>debuge</code>产生的，也就是在<code>console.log</code>的基础上做了一层美化效果， 当然您也是可以关闭的，配置完全是自定义的；</p>\n","excerpt":"","more":"<h1 id=\"log-reporting-core-V2\"><a href=\"#log-reporting-core-V2\" class=\"headerlink\" title=\"@log-reporting&#x2F;core - V2\"></a>@log-reporting&#x2F;core - V2</h1><p><strong><font color=\"#ff0000\">值得注意: v2 版本的包为“@log-reporting&#x2F;core”, 而 v1 版本的包为“log-reporting”； 写法参数等完全是不一样的，v2 版本为全新版本</font></strong></p>\n<p><strong>当然， v2 版本由内置的<code>types</code>， 如果您的项目因为安装<code>@log-reporting/core</code>而导致<code>ts</code>类型报错，那就需要您安装<code>@log-reporting/types</code>了，这样就可以完全解决类型报错的问题；</strong></p>\n<p><strong>当前版本仅仅支持客户端使用，不支持在服务端使用</strong></p>\n<h2 id=\"🔈-地址\"><a href=\"#🔈-地址\" class=\"headerlink\" title=\"🔈 地址\"></a>🔈 地址</h2><ul>\n<li><a href=\"https://github.com/wangxiaoze-view/log-repeorting/blob/main/packages/core/README.md\">github 地址</a></li>\n<li><a href=\"https://www.npmjs.com/package/@log-reporting/core\">npm 地址</a></li>\n</ul>\n<h2 id=\"🔈-注意事项\"><a href=\"#🔈-注意事项\" class=\"headerlink\" title=\"🔈 注意事项\"></a>🔈 注意事项</h2><blockquote>\n<p>本系统的开发目的很简单，就是为了在部分情况下搜集前端的异常日志，用于分析异常情况;<br>如：线上环境的项目我们会吧一些日志删除，如果前端报错那么日志是首选， 这样的情况我们不知道是哪里的报错导致页面崩溃的；<br>那么开发这款工具常规情况下能解决大部分的问题；</p>\n</blockquote>\n<p>该版本为全新版本, 与之前的版本会有很大的区别;</p>\n<h2 id=\"🔈-日志搜集范围\"><a href=\"#🔈-日志搜集范围\" class=\"headerlink\" title=\"🔈 日志搜集范围\"></a>🔈 日志搜集范围</h2><ol>\n<li>资源：资源地址不正确或不存在导致的资源异常</li>\n<li>代码：搜集报错信息，页面的崩溃等等；</li>\n<li>请求：截请求参数错误，访问地址不存在，异常拦</li>\n<li>额外添加功能：支持录制自定义时间的视频，但是最大时间不能超过 1 分钟;</li>\n<li>支持性能监控, 白屏时间, 页面加载时间等等; <Badge type=\"tip\" text=\"新版本支持\" /></li>\n<li>支持<code>pv</code>页面浏览, 需要手动提交; <Badge type=\"tip\" text=\"新版本支持\" /></li>\n<li>支持<code>曝光</code>, 需要手动设置对应的元素(仅支持在可是区域内); <Badge type=\"tip\" text=\"新版本支持\" /></li>\n</ol>\n<h2 id=\"🔈-如何使用\"><a href=\"#🔈-如何使用\" class=\"headerlink\" title=\"🔈 如何使用\"></a>🔈 如何使用</h2><h3 id=\"js-项目引入\"><a href=\"#js-项目引入\" class=\"headerlink\" title=\"js 项目引入\"></a>js 项目引入</h3><p>需要克隆下载该项目, 执行命令<code>pnpm run build</code>， 之后会在根目录<code>dist</code>文件下看到打包的对应的文件信息; 根据不同平台引入即可;</p>\n<p>下面代码示例为浏览器的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;dist/index.umd.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  logReportingCore.<span class=\"title function_\">init</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报地址</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">dsn</span>: <span class=\"string\">&#x27;http://localhost:8888/postLog&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否开启调试</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isDebug</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获错误</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获console.error</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isConsoleError</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获性能</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isPerformance</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获资源</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isResource</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 是否捕获请求</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isXhr</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 屏幕录制</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">record</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"attr\">time</span>: <span class=\"number\">10</span> * <span class=\"number\">1000</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 加密方式</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">encryptMethod</span>: <span class=\"string\">&#x27;base64&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 上报方式</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;beacon&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// pv统计</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isPv</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 曝光统计</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">isExposure</span>: <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-项目引入\"><a href=\"#vue-项目引入\" class=\"headerlink\" title=\"vue 项目引入\"></a>vue 项目引入</h3><p>在<code>vue</code>中使用,<br><code>npm install @log-reporting/core</code> 安装依赖</p>\n<p>在<code>main.js</code>中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; init &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">init</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>根据自己的业务需要开启对应的配置信息;</p>\n<h2 id=\"🔈-关于pv统计与曝光统计\"><a href=\"#🔈-关于pv统计与曝光统计\" class=\"headerlink\" title=\"🔈 关于pv统计与曝光统计\"></a>🔈 关于<code>pv统计</code>与<code>曝光统计</code></h2><p>目前仅仅支持手动上报；</p>\n<ol>\n<li><code>pv</code>统计：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lestenPv &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">lestenPv</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 统计信息</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;测试&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他参数都是可以自定义的</span></span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;localhost:8888/getLogData&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">params</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">IPv</span> &#123;</span><br><span class=\"line\">\tmessage?: string;</span><br><span class=\"line\">\t[<span class=\"attr\">k</span>: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>曝光统计</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; lestenExposure &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">lestenExposure</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 曝光元素</span></span><br><span class=\"line\">\t<span class=\"attr\">target</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#btn10&quot;</span>),</span><br><span class=\"line\">\t<span class=\"comment\">// 曝光信息</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;曝光按钮&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">threshold</span>: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他参数</span></span><br><span class=\"line\">\t<span class=\"attr\">params</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">123</span> &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">IExposure</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IPv</span> &#123;</span><br><span class=\"line\">\tthreshold?: number;</span><br><span class=\"line\">\ttarget?: any; <span class=\"comment\">// 曝光的元素</span></span><br><span class=\"line\">\tparams?: <span class=\"title class_\">Record</span>&lt;string, any&gt;;</span><br><span class=\"line\">\ttime?: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🔈-屏幕录制\"><a href=\"#🔈-屏幕录制\" class=\"headerlink\" title=\"🔈 屏幕录制\"></a>🔈 屏幕录制</h2><p>该版本中有内置的<code>屏幕录制</code>功能，也就是相对于错误日志的操作视频记录；</p>\n<h3 id=\"为什么要添加这个功能？\"><a href=\"#为什么要添加这个功能？\" class=\"headerlink\" title=\"为什么要添加这个功能？\"></a>为什么要添加这个功能？</h3><p>因为相对于日志上报，我们希望在<code>线上环境</code>中能够记录一些操作的视频，这样我们就能更好的了解用户的操作情况； 但是，由于<code>浏览器</code>本身对<code>屏幕录制</code>的支持不是很友好，所以需要我们自己实现； 所以，我们自己实现了一个简单的<code>屏幕录制</code>功能；</p>\n<p>当然主要是引入了<a href=\"https://github.com/rrweb-io/rrweb\">rrweb</a>插件；</p>\n<h3 id=\"屏幕录制的配置\"><a href=\"#屏幕录制的配置\" class=\"headerlink\" title=\"屏幕录制的配置\"></a>屏幕录制的配置</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  record<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    open<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 是否开启录制</span></span><br><span class=\"line\">    time<span class=\"punctuation\">:</span> <span class=\"number\">10</span> * <span class=\"number\">1000</span> <span class=\"comment\">// 录制时间， 最大时间为1分钟</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=\"#ff0000\">让然如果您觉得该功能可能涉及到隐私情况，您可以选择关闭，这样的话视频信息不会进行上报</font></p>\n<h3 id=\"视频信息的加密解密\"><a href=\"#视频信息的加密解密\" class=\"headerlink\" title=\"视频信息的加密解密\"></a>视频信息的加密解密</h3><p>为了保证安全性以及性能，视频信息是做了 <strong>安全加密</strong> 的，所以您需要解密才能使用；</p>\n<p>目前加密的的方式分为俩中：<strong>lz</strong> 和 <strong>base64</strong></p>\n<ul>\n<li><strong>加密使用：</strong> <code>encryptFun(value: Record&lt;string, any&gt;, k?: string)</code>;<ul>\n<li>该方法是对象进行加密，加密后的数据是字符串, 默认的加密</li>\n<li>k: 可以是固定值<code>snapshot</code>也可以是其他，当<code>k</code>为其他值时，默认加密方式为<code>base64</code></li>\n</ul>\n</li>\n<li><strong>解密使用：</strong> <code>decryptionFun(value: string, k?: string)</code><ul>\n<li>该方法是解密，解密后的数据是<code>object</code></li>\n<li>将您加密后等到的字符串给到该方法即可；<code>k</code>的作用类似于上面的<code>k</code>；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解密之后展示回放\"><a href=\"#解密之后展示回放\" class=\"headerlink\" title=\"解密之后展示回放\"></a>解密之后展示回放</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; decryptionFun &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// data: 模仿后端返回的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; reportInfo &#125; = data;</span><br><span class=\"line\"><span class=\"comment\">// 对数据进行解密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> videoData = <span class=\"title function_\">decryptionFun</span>(reportInfo.<span class=\"property\">snapshot</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用rrweb进行回放， 当然是需要安装rrweb插件</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/rrweb-io/rrweb/blob/master/README.zh_CN.md</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> player = <span class=\"keyword\">new</span> rrweb.<span class=\"title class_\">Replayer</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(videoData));</span><br><span class=\"line\"><span class=\"comment\">// 自动播放</span></span><br><span class=\"line\">player.<span class=\"title function_\">play</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🔈-额外导出的方法\"><a href=\"#🔈-额外导出的方法\" class=\"headerlink\" title=\"🔈 额外导出的方法\"></a>🔈 额外导出的方法</h2><blockquote>\n<p>这些方法不是主要核心方法，一般情况没什么用，但是有些时候可能需要用到，所以这里导出出来；</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; _global, _support &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@log-reporting/core&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>_global:</strong> 全局对象，可以理解为<code>window</code></li>\n<li><strong>_support：</strong> 基础信息参数</li>\n</ol>\n<h2 id=\"🔈-其他\"><a href=\"#🔈-其他\" class=\"headerlink\" title=\"🔈 其他\"></a>🔈 其他</h2><h3 id=\"log-reortinging-types-类型校验\"><a href=\"#log-reortinging-types-类型校验\" class=\"headerlink\" title=\"@log-reortinging&#x2F;types - 类型校验\"></a>@log-reortinging&#x2F;types - 类型校验</h3><p><code>@log-reporting/core</code>有内置的类型校验，如果您的项目是<code>ts</code>搭建，那么需要再次安装<code>@log-reporting/types</code>，否则会导致类型报错，当然，您也可以自行定义类型，但是需要您自行保证类型是否正确；</p>\n<p>如果您引入正确之后，不需要特殊使用就可以在项目中使用了；您也可以点击内置<code>api</code>可以查看源码编译而成的<code>index.d.ts</code>；</p>\n<h3 id=\"log-reporting-logger-日志\"><a href=\"#log-reporting-logger-日志\" class=\"headerlink\" title=\"@log-reporting&#x2F;logger - 日志\"></a>@log-reporting&#x2F;logger - 日志</h3><p><code>@log-reporting/logger</code>没有太大的用处，就是依赖于<code>@log-reporting/core</code>配置中的<code>debuge</code>产生的，也就是在<code>console.log</code>的基础上做了一层美化效果， 当然您也是可以关闭的，配置完全是自定义的；</p>\n"},{"title":"我的项目-桌面端项目常见问题","abbrlink":"e7823bf2","date":"2024-10-08T01:05:01.000Z","_content":"\n# 常见问题\n\n## node 页面什么也没有如图\n\n> 那么检测到您还未配置对应的环境变量，需手动配置； [环境配置](/personal/dev-tools/env.html)\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp)\n\n## 切换镜像源未更新\n\n### windows\n\n首先确认以下 `C:\\Users\\Administrator` 下有没有 `.npmrc` 文件，如果有，请删除 `C:\\Users\\Administrator` 下的 `.npmrc` 文件，然后重启 `node` 页面，即可更新镜像源。\n\n### mac/linux\n\n查看根目录， `.npmrc` 文件，如果有，请删除 `.npmrc` 文件，然后重启 `node` 页面，即可更新镜像源。`\n\n切换之后需要重启软件；\n\n## 软件打开页面闪退\n\n软件版本有问题，可卸载之后在重新安装；如果还是一样，那么请提交 [issues](https://github.com/wangxiaoze-view/dev-tools/issues)\n","source":"_posts/我的项目/桌面端开发工具/常见问题.md","raw":"---\ntitle: 我的项目-桌面端项目常见问题\nabbrlink: e7823bf2\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n\n# 常见问题\n\n## node 页面什么也没有如图\n\n> 那么检测到您还未配置对应的环境变量，需手动配置； [环境配置](/personal/dev-tools/env.html)\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp)\n\n## 切换镜像源未更新\n\n### windows\n\n首先确认以下 `C:\\Users\\Administrator` 下有没有 `.npmrc` 文件，如果有，请删除 `C:\\Users\\Administrator` 下的 `.npmrc` 文件，然后重启 `node` 页面，即可更新镜像源。\n\n### mac/linux\n\n查看根目录， `.npmrc` 文件，如果有，请删除 `.npmrc` 文件，然后重启 `node` 页面，即可更新镜像源。`\n\n切换之后需要重启软件；\n\n## 软件打开页面闪退\n\n软件版本有问题，可卸载之后在重新安装；如果还是一样，那么请提交 [issues](https://github.com/wangxiaoze-view/dev-tools/issues)\n","slug":"我的项目/桌面端开发工具/常见问题","published":1,"updated":"2025-03-13T10:16:16.180Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ix002gfg9m904u44au","content":"<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"node-页面什么也没有如图\"><a href=\"#node-页面什么也没有如图\" class=\"headerlink\" title=\"node 页面什么也没有如图\"></a>node 页面什么也没有如图</h2><blockquote>\n<p>那么检测到您还未配置对应的环境变量，需手动配置； <a href=\"/personal/dev-tools/env.html\">环境配置</a></p>\n</blockquote>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp\" alt=\"install\"></p>\n<h2 id=\"切换镜像源未更新\"><a href=\"#切换镜像源未更新\" class=\"headerlink\" title=\"切换镜像源未更新\"></a>切换镜像源未更新</h2><h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>首先确认以下 <code>C:\\Users\\Administrator</code> 下有没有 <code>.npmrc</code> 文件，如果有，请删除 <code>C:\\Users\\Administrator</code> 下的 <code>.npmrc</code> 文件，然后重启 <code>node</code> 页面，即可更新镜像源。</p>\n<h3 id=\"mac-linux\"><a href=\"#mac-linux\" class=\"headerlink\" title=\"mac&#x2F;linux\"></a>mac&#x2F;linux</h3><p>查看根目录， <code>.npmrc</code> 文件，如果有，请删除 <code>.npmrc</code> 文件，然后重启 <code>node</code> 页面，即可更新镜像源。&#96;</p>\n<p>切换之后需要重启软件；</p>\n<h2 id=\"软件打开页面闪退\"><a href=\"#软件打开页面闪退\" class=\"headerlink\" title=\"软件打开页面闪退\"></a>软件打开页面闪退</h2><p>软件版本有问题，可卸载之后在重新安装；如果还是一样，那么请提交 <a href=\"https://github.com/wangxiaoze-view/dev-tools/issues\">issues</a></p>\n","excerpt":"","more":"<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"node-页面什么也没有如图\"><a href=\"#node-页面什么也没有如图\" class=\"headerlink\" title=\"node 页面什么也没有如图\"></a>node 页面什么也没有如图</h2><blockquote>\n<p>那么检测到您还未配置对应的环境变量，需手动配置； <a href=\"/personal/dev-tools/env.html\">环境配置</a></p>\n</blockquote>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp\" alt=\"install\"></p>\n<h2 id=\"切换镜像源未更新\"><a href=\"#切换镜像源未更新\" class=\"headerlink\" title=\"切换镜像源未更新\"></a>切换镜像源未更新</h2><h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>首先确认以下 <code>C:\\Users\\Administrator</code> 下有没有 <code>.npmrc</code> 文件，如果有，请删除 <code>C:\\Users\\Administrator</code> 下的 <code>.npmrc</code> 文件，然后重启 <code>node</code> 页面，即可更新镜像源。</p>\n<h3 id=\"mac-linux\"><a href=\"#mac-linux\" class=\"headerlink\" title=\"mac&#x2F;linux\"></a>mac&#x2F;linux</h3><p>查看根目录， <code>.npmrc</code> 文件，如果有，请删除 <code>.npmrc</code> 文件，然后重启 <code>node</code> 页面，即可更新镜像源。&#96;</p>\n<p>切换之后需要重启软件；</p>\n<h2 id=\"软件打开页面闪退\"><a href=\"#软件打开页面闪退\" class=\"headerlink\" title=\"软件打开页面闪退\"></a>软件打开页面闪退</h2><p>软件版本有问题，可卸载之后在重新安装；如果还是一样，那么请提交 <a href=\"https://github.com/wangxiaoze-view/dev-tools/issues\">issues</a></p>\n"},{"title":"我的项目-桌面端项目环境配置","abbrlink":"80fd3486","date":"2024-10-08T01:05:01.000Z","_content":"# 环境配置\n\n\n目前该软件还做不到一体化操作，有些环境需要手动配置；主要需要配置的是 node 相关环境变量\n\n\n## 自动安装\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp)\n\n如果您还未安装`fnm`, 那么您可以点击按钮就行安装，点击之后会自动进行安装，如果您安装失败了，那么需要手动安装，具体安装方法可以参考[**fnm**](https://github.com/Schniz/fnm)\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2vemr051xe.webp)\n\n## 手动安装\n\n如果您执行这一步，那么您应该是自动安装失败了，那么您需要执行以下几个步骤即可；\n\n如果您是`mac/linux`那么请查看[这里](https://github.com/Schniz/fnm/blob/master/README.md#installation)\n\n### 下载 fnm\n\n您可以在点击[下载](https://github.com/Schniz/fnm/releases/tag/v1.37.1)下载不同平台版本；\n\n下载成功之后将其解压放在`d`盘（只要不是`c`盘即可）某个目录下（不能为中文），如：`D:\\tools\\fnm`\n\n这个时候您需要配置对应的环境变量\n\n在系统变量添加\n\n```bash\n# FNM_DIR 为变量名   D:\\tools\\fnm\\node为变量值  以下也是一样的\nFNM_DIR: D:\\tools\\fnm\\node\nFNM_NODE_DIST_MIRRORs: D:\\tools\\fnm\\node\n```\n\n这个时候需要手动重启`cmd`或者`vscode`, 输入命令`fnm -v`如果显示版本号，那么说明安装成功，可以继续往下走；\n\n想要安装 node 只需要执行 `fnm install 版本`，如：`fnm install 16.13.0`； `fnm`的使用方式和`nvm`的使用方式一样；\n\n安装 node 成功之后，您可以`node -v npm -v`查看是否安装成功； 如果出现`node 不是内部命令`那么你需要配置`node`环境；\n\n在系统变量添加\n\n```bash\n# 创建 node 目录，aliases\\default就是你当前使用的node版本\nNODE_PATH: D:\\tools\\fnm\\node\\aliases\\default\n```\n\n这个时候需要手动重启`cmd`或者`vscode`, 输入命令`node -v`如果显示版本号，那么说明安装成功；\n\n---\n\n到这里为止，大概的环境配置就完成了；\n","source":"_posts/我的项目/桌面端开发工具/环境配置.md","raw":"---\ntitle:  我的项目-桌面端项目环境配置\nabbrlink: 80fd3486\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n# 环境配置\n\n\n目前该软件还做不到一体化操作，有些环境需要手动配置；主要需要配置的是 node 相关环境变量\n\n\n## 自动安装\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp)\n\n如果您还未安装`fnm`, 那么您可以点击按钮就行安装，点击之后会自动进行安装，如果您安装失败了，那么需要手动安装，具体安装方法可以参考[**fnm**](https://github.com/Schniz/fnm)\n\n![install](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2vemr051xe.webp)\n\n## 手动安装\n\n如果您执行这一步，那么您应该是自动安装失败了，那么您需要执行以下几个步骤即可；\n\n如果您是`mac/linux`那么请查看[这里](https://github.com/Schniz/fnm/blob/master/README.md#installation)\n\n### 下载 fnm\n\n您可以在点击[下载](https://github.com/Schniz/fnm/releases/tag/v1.37.1)下载不同平台版本；\n\n下载成功之后将其解压放在`d`盘（只要不是`c`盘即可）某个目录下（不能为中文），如：`D:\\tools\\fnm`\n\n这个时候您需要配置对应的环境变量\n\n在系统变量添加\n\n```bash\n# FNM_DIR 为变量名   D:\\tools\\fnm\\node为变量值  以下也是一样的\nFNM_DIR: D:\\tools\\fnm\\node\nFNM_NODE_DIST_MIRRORs: D:\\tools\\fnm\\node\n```\n\n这个时候需要手动重启`cmd`或者`vscode`, 输入命令`fnm -v`如果显示版本号，那么说明安装成功，可以继续往下走；\n\n想要安装 node 只需要执行 `fnm install 版本`，如：`fnm install 16.13.0`； `fnm`的使用方式和`nvm`的使用方式一样；\n\n安装 node 成功之后，您可以`node -v npm -v`查看是否安装成功； 如果出现`node 不是内部命令`那么你需要配置`node`环境；\n\n在系统变量添加\n\n```bash\n# 创建 node 目录，aliases\\default就是你当前使用的node版本\nNODE_PATH: D:\\tools\\fnm\\node\\aliases\\default\n```\n\n这个时候需要手动重启`cmd`或者`vscode`, 输入命令`node -v`如果显示版本号，那么说明安装成功；\n\n---\n\n到这里为止，大概的环境配置就完成了；\n","slug":"我的项目/桌面端开发工具/环境配置","published":1,"updated":"2025-03-13T10:16:16.325Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ix002kfg9m01lzgtgg","content":"<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>目前该软件还做不到一体化操作，有些环境需要手动配置；主要需要配置的是 node 相关环境变量</p>\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp\" alt=\"install\"></p>\n<p>如果您还未安装<code>fnm</code>, 那么您可以点击按钮就行安装，点击之后会自动进行安装，如果您安装失败了，那么需要手动安装，具体安装方法可以参考<a href=\"https://github.com/Schniz/fnm\"><strong>fnm</strong></a></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2vemr051xe.webp\" alt=\"install\"></p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p>如果您执行这一步，那么您应该是自动安装失败了，那么您需要执行以下几个步骤即可；</p>\n<p>如果您是<code>mac/linux</code>那么请查看<a href=\"https://github.com/Schniz/fnm/blob/master/README.md#installation\">这里</a></p>\n<h3 id=\"下载-fnm\"><a href=\"#下载-fnm\" class=\"headerlink\" title=\"下载 fnm\"></a>下载 fnm</h3><p>您可以在点击<a href=\"https://github.com/Schniz/fnm/releases/tag/v1.37.1\">下载</a>下载不同平台版本；</p>\n<p>下载成功之后将其解压放在<code>d</code>盘（只要不是<code>c</code>盘即可）某个目录下（不能为中文），如：<code>D:\\tools\\fnm</code></p>\n<p>这个时候您需要配置对应的环境变量</p>\n<p>在系统变量添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FNM_DIR 为变量名   D:\\tools\\fnm\\node为变量值  以下也是一样的</span></span><br><span class=\"line\">FNM_DIR: D:\\tools\\fnm\\node</span><br><span class=\"line\">FNM_NODE_DIST_MIRRORs: D:\\tools\\fnm\\node</span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要手动重启<code>cmd</code>或者<code>vscode</code>, 输入命令<code>fnm -v</code>如果显示版本号，那么说明安装成功，可以继续往下走；</p>\n<p>想要安装 node 只需要执行 <code>fnm install 版本</code>，如：<code>fnm install 16.13.0</code>； <code>fnm</code>的使用方式和<code>nvm</code>的使用方式一样；</p>\n<p>安装 node 成功之后，您可以<code>node -v npm -v</code>查看是否安装成功； 如果出现<code>node 不是内部命令</code>那么你需要配置<code>node</code>环境；</p>\n<p>在系统变量添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 node 目录，aliases\\default就是你当前使用的node版本</span></span><br><span class=\"line\">NODE_PATH: D:\\tools\\fnm\\node\\aliases\\default</span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要手动重启<code>cmd</code>或者<code>vscode</code>, 输入命令<code>node -v</code>如果显示版本号，那么说明安装成功；</p>\n<hr>\n<p>到这里为止，大概的环境配置就完成了；</p>\n","excerpt":"","more":"<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>目前该软件还做不到一体化操作，有些环境需要手动配置；主要需要配置的是 node 相关环境变量</p>\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.67xcldj0yr.webp\" alt=\"install\"></p>\n<p>如果您还未安装<code>fnm</code>, 那么您可以点击按钮就行安装，点击之后会自动进行安装，如果您安装失败了，那么需要手动安装，具体安装方法可以参考<a href=\"https://github.com/Schniz/fnm\"><strong>fnm</strong></a></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2vemr051xe.webp\" alt=\"install\"></p>\n<h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><p>如果您执行这一步，那么您应该是自动安装失败了，那么您需要执行以下几个步骤即可；</p>\n<p>如果您是<code>mac/linux</code>那么请查看<a href=\"https://github.com/Schniz/fnm/blob/master/README.md#installation\">这里</a></p>\n<h3 id=\"下载-fnm\"><a href=\"#下载-fnm\" class=\"headerlink\" title=\"下载 fnm\"></a>下载 fnm</h3><p>您可以在点击<a href=\"https://github.com/Schniz/fnm/releases/tag/v1.37.1\">下载</a>下载不同平台版本；</p>\n<p>下载成功之后将其解压放在<code>d</code>盘（只要不是<code>c</code>盘即可）某个目录下（不能为中文），如：<code>D:\\tools\\fnm</code></p>\n<p>这个时候您需要配置对应的环境变量</p>\n<p>在系统变量添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FNM_DIR 为变量名   D:\\tools\\fnm\\node为变量值  以下也是一样的</span></span><br><span class=\"line\">FNM_DIR: D:\\tools\\fnm\\node</span><br><span class=\"line\">FNM_NODE_DIST_MIRRORs: D:\\tools\\fnm\\node</span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要手动重启<code>cmd</code>或者<code>vscode</code>, 输入命令<code>fnm -v</code>如果显示版本号，那么说明安装成功，可以继续往下走；</p>\n<p>想要安装 node 只需要执行 <code>fnm install 版本</code>，如：<code>fnm install 16.13.0</code>； <code>fnm</code>的使用方式和<code>nvm</code>的使用方式一样；</p>\n<p>安装 node 成功之后，您可以<code>node -v npm -v</code>查看是否安装成功； 如果出现<code>node 不是内部命令</code>那么你需要配置<code>node</code>环境；</p>\n<p>在系统变量添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 node 目录，aliases\\default就是你当前使用的node版本</span></span><br><span class=\"line\">NODE_PATH: D:\\tools\\fnm\\node\\aliases\\default</span><br></pre></td></tr></table></figure>\n\n<p>这个时候需要手动重启<code>cmd</code>或者<code>vscode</code>, 输入命令<code>node -v</code>如果显示版本号，那么说明安装成功；</p>\n<hr>\n<p>到这里为止，大概的环境配置就完成了；</p>\n"},{"title":"我的项目-桌面端项目介绍","abbrlink":"3fdfc9bb","date":"2024-10-08T01:05:01.000Z","_content":"# dev-tools\n\n该项目是是`rust + vue`开发的桌面端项目，是前端可视化开发工具，当然此开发工具不同于平常的开发工具，是有利于自己的一款工具；\n\n<font color=\"#ff0000\">目前属于测试阶段，有些问题还未发现；</font>\n\n## 背景\n\n在开发中，我曾经有个疑问，就是不论在`linux` 还是`docker`的开发环境下，它都是有专属的可视化面板的，比如`宝塔，1panel, docker桌面端`等等；就好比说您如果不清楚操作命令， 那么您就可以使用面板的简单操作；\n\n在这样的想法下， 于是我就简单的开发，之前的一个版本是`electron + vue`的开发，但是在开发过程中，遇到的问题太多太多了，`electron`操作的是`node`；于是就开发了一半； 不论是在开发过程中，还是最后的打包部署其体积都是很大的；简单的说就是底层用的是`electron`，其外层就是`webview`页面，不做优化的情况下体积很大；一个简单的工具总不是几十兆的大小吧，不合适；\n\n于是就简单的接触了`rust`,\n\n## 下载地址\n\n- [**mac 系统安装**](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg)\n- [**windows 系统安装**](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe)\n\n## 开发进度\n\n### <Badge type=\"info\" text=\"已完成\" />\n\n- 基础页面功能已完成;\n- 主题切换功能已完成；\n- git 配置功能已完成；\n- node 管理功能已完成；\n- 日志打印，代码优化\n- 操作系统的兜底\n\n## 有哪些功能\n\n1. **欢迎页：** 介绍本款软件的作用，以及简单介绍；\n2. **首页：** 涵盖前端常用的开发工具\n3. **Node 管理：** 可视化的 node 管理，可以查看 node 的版本，以及安装卸载 node；同时也可操作 npm 下载的全局包；\n4. **Git 配置：** 全局的 git 配置\n\n## 亮点有哪些\n\n1. 如果您想要切换 node 版本，那么您可以使用命令行`nvm use 16.14.0`或者`fnm use 16.14.0`；但是您想要在可视化界面上切换，那么您需要在相对应的界面进行操作；\n2. 您不需要低版本的 node，因为您只需要在`node`的版本上进行操作；当然携带了安装依赖的功能，您可以对于全局依赖进行管理\n\n## 图片\n\n![欢迎页面](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3k7wazx9ha.webp)\n\n![首页](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl6vzj1.webp)\n\n![Node管理](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7llvv3zq.webp)\n\n![安装Node](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.231r98vwy8.webp)\n\n![已经安装的Node](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6pne9xv39s.webp)\n\n![镜像源](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.32humf03cq.webp)\n\n![安装全局包](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5fkh3mew3s.webp)\n\n![git](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn3ktth5u.webp)\n\n![主题设置](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl71441.webp)\n\n![菜单模式](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2rv0t9ntpo.webp)\n","source":"_posts/我的项目/桌面端开发工具/项目介绍.md","raw":"---\ntitle: 我的项目-桌面端项目介绍\nabbrlink: 3fdfc9bb\ndate: 2024-10-08 09:05:01\ncategories:\n  - 我的项目\ntags:\n  - 项目\n---\n# dev-tools\n\n该项目是是`rust + vue`开发的桌面端项目，是前端可视化开发工具，当然此开发工具不同于平常的开发工具，是有利于自己的一款工具；\n\n<font color=\"#ff0000\">目前属于测试阶段，有些问题还未发现；</font>\n\n## 背景\n\n在开发中，我曾经有个疑问，就是不论在`linux` 还是`docker`的开发环境下，它都是有专属的可视化面板的，比如`宝塔，1panel, docker桌面端`等等；就好比说您如果不清楚操作命令， 那么您就可以使用面板的简单操作；\n\n在这样的想法下， 于是我就简单的开发，之前的一个版本是`electron + vue`的开发，但是在开发过程中，遇到的问题太多太多了，`electron`操作的是`node`；于是就开发了一半； 不论是在开发过程中，还是最后的打包部署其体积都是很大的；简单的说就是底层用的是`electron`，其外层就是`webview`页面，不做优化的情况下体积很大；一个简单的工具总不是几十兆的大小吧，不合适；\n\n于是就简单的接触了`rust`,\n\n## 下载地址\n\n- [**mac 系统安装**](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg)\n- [**windows 系统安装**](https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe)\n\n## 开发进度\n\n### <Badge type=\"info\" text=\"已完成\" />\n\n- 基础页面功能已完成;\n- 主题切换功能已完成；\n- git 配置功能已完成；\n- node 管理功能已完成；\n- 日志打印，代码优化\n- 操作系统的兜底\n\n## 有哪些功能\n\n1. **欢迎页：** 介绍本款软件的作用，以及简单介绍；\n2. **首页：** 涵盖前端常用的开发工具\n3. **Node 管理：** 可视化的 node 管理，可以查看 node 的版本，以及安装卸载 node；同时也可操作 npm 下载的全局包；\n4. **Git 配置：** 全局的 git 配置\n\n## 亮点有哪些\n\n1. 如果您想要切换 node 版本，那么您可以使用命令行`nvm use 16.14.0`或者`fnm use 16.14.0`；但是您想要在可视化界面上切换，那么您需要在相对应的界面进行操作；\n2. 您不需要低版本的 node，因为您只需要在`node`的版本上进行操作；当然携带了安装依赖的功能，您可以对于全局依赖进行管理\n\n## 图片\n\n![欢迎页面](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3k7wazx9ha.webp)\n\n![首页](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl6vzj1.webp)\n\n![Node管理](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7llvv3zq.webp)\n\n![安装Node](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.231r98vwy8.webp)\n\n![已经安装的Node](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6pne9xv39s.webp)\n\n![镜像源](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.32humf03cq.webp)\n\n![安装全局包](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5fkh3mew3s.webp)\n\n![git](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn3ktth5u.webp)\n\n![主题设置](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl71441.webp)\n\n![菜单模式](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2rv0t9ntpo.webp)\n","slug":"我的项目/桌面端开发工具/项目介绍","published":1,"updated":"2025-03-13T10:16:16.395Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ix002nfg9masalcsu2","content":"<h1 id=\"dev-tools\"><a href=\"#dev-tools\" class=\"headerlink\" title=\"dev-tools\"></a>dev-tools</h1><p>该项目是是<code>rust + vue</code>开发的桌面端项目，是前端可视化开发工具，当然此开发工具不同于平常的开发工具，是有利于自己的一款工具；</p>\n<p><font color=\"#ff0000\">目前属于测试阶段，有些问题还未发现；</font></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在开发中，我曾经有个疑问，就是不论在<code>linux</code> 还是<code>docker</code>的开发环境下，它都是有专属的可视化面板的，比如<code>宝塔，1panel, docker桌面端</code>等等；就好比说您如果不清楚操作命令， 那么您就可以使用面板的简单操作；</p>\n<p>在这样的想法下， 于是我就简单的开发，之前的一个版本是<code>electron + vue</code>的开发，但是在开发过程中，遇到的问题太多太多了，<code>electron</code>操作的是<code>node</code>；于是就开发了一半； 不论是在开发过程中，还是最后的打包部署其体积都是很大的；简单的说就是底层用的是<code>electron</code>，其外层就是<code>webview</code>页面，不做优化的情况下体积很大；一个简单的工具总不是几十兆的大小吧，不合适；</p>\n<p>于是就简单的接触了<code>rust</code>,</p>\n<h2 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h2><ul>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg\"><strong>mac 系统安装</strong></a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe\"><strong>windows 系统安装</strong></a></li>\n</ul>\n<h2 id=\"开发进度\"><a href=\"#开发进度\" class=\"headerlink\" title=\"开发进度\"></a>开发进度</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><Badge type=\"info\" text=\"已完成\" /></h3><ul>\n<li>基础页面功能已完成;</li>\n<li>主题切换功能已完成；</li>\n<li>git 配置功能已完成；</li>\n<li>node 管理功能已完成；</li>\n<li>日志打印，代码优化</li>\n<li>操作系统的兜底</li>\n</ul>\n<h2 id=\"有哪些功能\"><a href=\"#有哪些功能\" class=\"headerlink\" title=\"有哪些功能\"></a>有哪些功能</h2><ol>\n<li><strong>欢迎页：</strong> 介绍本款软件的作用，以及简单介绍；</li>\n<li><strong>首页：</strong> 涵盖前端常用的开发工具</li>\n<li><strong>Node 管理：</strong> 可视化的 node 管理，可以查看 node 的版本，以及安装卸载 node；同时也可操作 npm 下载的全局包；</li>\n<li><strong>Git 配置：</strong> 全局的 git 配置</li>\n</ol>\n<h2 id=\"亮点有哪些\"><a href=\"#亮点有哪些\" class=\"headerlink\" title=\"亮点有哪些\"></a>亮点有哪些</h2><ol>\n<li>如果您想要切换 node 版本，那么您可以使用命令行<code>nvm use 16.14.0</code>或者<code>fnm use 16.14.0</code>；但是您想要在可视化界面上切换，那么您需要在相对应的界面进行操作；</li>\n<li>您不需要低版本的 node，因为您只需要在<code>node</code>的版本上进行操作；当然携带了安装依赖的功能，您可以对于全局依赖进行管理</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3k7wazx9ha.webp\" alt=\"欢迎页面\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl6vzj1.webp\" alt=\"首页\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7llvv3zq.webp\" alt=\"Node管理\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.231r98vwy8.webp\" alt=\"安装Node\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6pne9xv39s.webp\" alt=\"已经安装的Node\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.32humf03cq.webp\" alt=\"镜像源\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5fkh3mew3s.webp\" alt=\"安装全局包\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn3ktth5u.webp\" alt=\"git\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl71441.webp\" alt=\"主题设置\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2rv0t9ntpo.webp\" alt=\"菜单模式\"></p>\n","excerpt":"","more":"<h1 id=\"dev-tools\"><a href=\"#dev-tools\" class=\"headerlink\" title=\"dev-tools\"></a>dev-tools</h1><p>该项目是是<code>rust + vue</code>开发的桌面端项目，是前端可视化开发工具，当然此开发工具不同于平常的开发工具，是有利于自己的一款工具；</p>\n<p><font color=\"#ff0000\">目前属于测试阶段，有些问题还未发现；</font></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在开发中，我曾经有个疑问，就是不论在<code>linux</code> 还是<code>docker</code>的开发环境下，它都是有专属的可视化面板的，比如<code>宝塔，1panel, docker桌面端</code>等等；就好比说您如果不清楚操作命令， 那么您就可以使用面板的简单操作；</p>\n<p>在这样的想法下， 于是我就简单的开发，之前的一个版本是<code>electron + vue</code>的开发，但是在开发过程中，遇到的问题太多太多了，<code>electron</code>操作的是<code>node</code>；于是就开发了一半； 不论是在开发过程中，还是最后的打包部署其体积都是很大的；简单的说就是底层用的是<code>electron</code>，其外层就是<code>webview</code>页面，不做优化的情况下体积很大；一个简单的工具总不是几十兆的大小吧，不合适；</p>\n<p>于是就简单的接触了<code>rust</code>,</p>\n<h2 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h2><ul>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_aarch64.dmg\"><strong>mac 系统安装</strong></a></li>\n<li><a href=\"https://wangxiaoze-view.github.io/picx-images-hosting/app/dev-tools/0.0.1/dev-tools_0.0.1_x64-setup.exe\"><strong>windows 系统安装</strong></a></li>\n</ul>\n<h2 id=\"开发进度\"><a href=\"#开发进度\" class=\"headerlink\" title=\"开发进度\"></a>开发进度</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><Badge type=\"info\" text=\"已完成\" /></h3><ul>\n<li>基础页面功能已完成;</li>\n<li>主题切换功能已完成；</li>\n<li>git 配置功能已完成；</li>\n<li>node 管理功能已完成；</li>\n<li>日志打印，代码优化</li>\n<li>操作系统的兜底</li>\n</ul>\n<h2 id=\"有哪些功能\"><a href=\"#有哪些功能\" class=\"headerlink\" title=\"有哪些功能\"></a>有哪些功能</h2><ol>\n<li><strong>欢迎页：</strong> 介绍本款软件的作用，以及简单介绍；</li>\n<li><strong>首页：</strong> 涵盖前端常用的开发工具</li>\n<li><strong>Node 管理：</strong> 可视化的 node 管理，可以查看 node 的版本，以及安装卸载 node；同时也可操作 npm 下载的全局包；</li>\n<li><strong>Git 配置：</strong> 全局的 git 配置</li>\n</ol>\n<h2 id=\"亮点有哪些\"><a href=\"#亮点有哪些\" class=\"headerlink\" title=\"亮点有哪些\"></a>亮点有哪些</h2><ol>\n<li>如果您想要切换 node 版本，那么您可以使用命令行<code>nvm use 16.14.0</code>或者<code>fnm use 16.14.0</code>；但是您想要在可视化界面上切换，那么您需要在相对应的界面进行操作；</li>\n<li>您不需要低版本的 node，因为您只需要在<code>node</code>的版本上进行操作；当然携带了安装依赖的功能，您可以对于全局依赖进行管理</li>\n</ol>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3k7wazx9ha.webp\" alt=\"欢迎页面\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl6vzj1.webp\" alt=\"首页\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7llvv3zq.webp\" alt=\"Node管理\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.231r98vwy8.webp\" alt=\"安装Node\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6pne9xv39s.webp\" alt=\"已经安装的Node\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.32humf03cq.webp\" alt=\"镜像源\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5fkh3mew3s.webp\" alt=\"安装全局包\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn3ktth5u.webp\" alt=\"git\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.lyl71441.webp\" alt=\"主题设置\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2rv0t9ntpo.webp\" alt=\"菜单模式\"></p>\n"},{"title":"Html-基础标签","abbrlink":"7d66def0","date":"2023-03-12T03:20:38.000Z","_content":"\n# 介绍\n\n{% note info simple %}\n**HTML 是创建网页的标准标记语言。**\n{% endnote %}\n- `HTML` 超文本标记语言;\n- `HTML` 是创建网页的标准标记标签语言;\n- `HTML` 描述网页的结构;\n- `HTML` 由一系列元素组成;\n- `HTML` 元素告诉浏览器如何显示内容;\n- `HTML` 元素标记内容片段，例如“这是一个标题”、“这是一个段落”、“这是一个链接”等等。\n\n## 创建一个简单的 HTML 文件\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Page Title</title>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t<style></style>\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script></script>\n\t</body>\n</html>\n```\n\n### 代码解释\n\n- 声明 `<!DOCTYPE html>` 定义此文档是 HTML5 文档\n- 该 `<html>` 元素是 HTML 页面的根元素\n- 该 `<head>` 元素包含有关 HTML 页面的元信息\n- 该 `<title>` 元素指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）\n- 元素 `<body>` 定义文档的主体，是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。\n- `<script>` 定义交互逻辑主题代码\n- `<style>` 元素样式主题\n\n### 元素\n\n`元素`就是一套标记标签语言(开始标签，结束标签)，例如：`<div>`、`<p>`、`<a>`、`<img />`、`<script>`、`<style>`、`<title>`、`<meta>`、`<body>`、`<head>`、`<html>`等。\n\n```html\n<!-- <p> 开始标签 -->\n<!-- </p> 结束标签 -->\n<p>这是一段文本</p>\n```\n\n---\n\n接下来，将带您认识`元素标签`...\n\n## 标题 `H1-H6`\n\n`HTML` 标题是您想要在网页上显示的标题或副标题。\n\n常常用于网页的标题展示，标题分为 `1-6`，然而权重是不一样的，各有个的用法； `<h1></h1>`定义最为重要的标题，也是权重最高的，而 `<h6></h6>`定义最不重要的标题，同时也是权重最小的。\n\n### 用法\n\n```html\n<h1>标题1</h1>\n<h2>标题2</h2>\n<h3>标题3</h3>\n<h4>标题4</h4>\n<h5>标题5</h5>\n<h6>标题6</h6>\n```\n\n{% note warning simple %}\n值得注意的是：\n\n浏览器会在标题的前后添加一些间距（空白距离）；同时仅仅最作为题，不建议用标题将文本**加粗或者放大**；因为浏览器默认的样式已经足够，当然权重不太一样，导致的字体大小也是不用的，当然文本加粗**是默认的**；\n{% endnote %}\n\n## 段落 `P`\n\n{% note info simple %}\n段落标签是最常用的标签，用于将文本分成段落，段落之间用 `<p></p>` 标签包裹起来。新行开始，并且通常是一块文本。经常用于文章的展示；\n\n同样，段落总是从新行开始，并且浏览器会自动在段落前后添加一些空白（边距）。\n{% endnote %}\n\n\n### 用法\n\n```html\n<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>\n```\n\n当然，`P`标签在网页中，会自动删除多余的空行与空格；\n\n### 水平规则 `hr`\n\n水平规则标签，用于在网页中添加水平分割线，例如：\n\n```html\n<p>这时一段内容</p>\n<hr />\n<p>这时一段内容</p>\n<hr />\n```\n\n该`<hr>`标签为空标签，也就是说它没有结束标签。\n\n### 换行符 `br`\n\nbr 标签，用于在网页中添加换行符，例如：\n\n```html\n<p>这是第一行</p>\n<br />\n<p>这是第二行</p>\n<br />\n<p>这是第三行</p>\n<br />\n```\n\n该`<br>`标签为空标签，也就是说它没有结束标签。\n\n## 格式化标签\n\n### 含义\n\n1. `b`标签，用于将文本标记为**粗体**，例如：\n2. `i`标签，用于将文本标记为**斜体**，例如：\n3. `u`标签，用于将文本标记为**下划线**，例如：\n4. `s`标签，用于将文本标记为**删除线**，例如：\n5. `em`标签，用于将文本标记为**斜体**，例如：\n6. `strong`标签，用于将文本标记为**粗体**，例如：\n7. `mark`标签，用于将文本标记为**标记**，例如：\n8. `del`标签，用于将文本标记为**删除线**，例如：\n9. `ins`标签，用于将文本标记为**下划线**，例如：\n10. `sub`标签，用于将文本标记为**下标**，例如：\n11. `sup`标签，用于将文本标记为**上标**，例如：\n12. `abbr`标签，用于将文本标记为**缩写**，例如：\n13. `code`标签，用于将文本标记为**代码**，例如：\n14. `kbd`标签，用于将文本标记为**键盘**，例如：\n15. `var`标签，用于将文本标记为**变量**，例如：\n16. `samp`标签，用于将文本标记为**示例**，例如：\n17. `cite`标签，用于将文本标记为**引用**，例如：\n18. `dfn`标签，用于将文本标记为**定义**，例如：\n19. `q`标签，用于将文本标记为**引用**，例如：\n20. `blockquote`标签，用于将文本标记为**引用**，例如：\n21. `address`标签，用于将文本标记为**地址**，例如：\n22. `pre`标签，用于将文本标记为**预格式文本**，例如：\n23. `small`标签，用于将文本标记为**小号**，例如：\n\n### 案例\n\n```html\n<p><b>粗体</b></p>\n<p><strong>粗体</strong></p>\n<p><em>斜体</em></p>\n<p><i>斜体</i></p>\n<p><u>下划线</u></p>\n<p><ins>下划线</ins></p>\n<p><s>删除线</s></p>\n<p><del>删除线</del></p>\n<p><mark>标记</mark></p>\n<p><sub>下标</sub></p>\n<p><sup>上标</sup></p>\n<p><small>小号</small></p>\n<p><abbr title=\"Hyper Text Markup Language\">HTML</abbr></p>\n<p><code>代码</code></p>\n<p><kbd>键盘</kbd></p>\n<p><var>变量</var></p>\n<p><samp>示例</samp></p>\n<p><cite>引用</cite></p>\n<p><dfn>定义</dfn></p>\n<p><q>引用</q></p>\n<p><blockquote>引用</blockquote></p>\n<p><cite>引用</cite></p>\n<p><address>地址</address></p>\n<p><ins>引用</ins></p>\n<p><del>引用</del></p>\n<p><s>引用</s></p>\n<p><s>引用</s></p>\n<pre>\n  My Bonnie lies over the ocean.\n</pre>\n```\n\n## 链接标签\n\n链接标签，用于在网页中添加超链接，例如：\n\n### 用法\n\n```html\n<a href=\"https://www.baidu.com\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_self\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_parent\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_top\">百度</a>\n```\n\n**几乎所有网页上都有链接。链接允许用户通过点击从一个页面到另一个页面。您可以单击链接并跳转到另一个文档。当将鼠标移到链接上时，鼠标箭头会变成一只小手。**\n\n{% note warning simple %}\n注意：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！\n{% endnote %}\n\n默认情况下，链接在所有浏览器中都会显示如下内容：\n\n- 未访问的链接带有下划线和蓝色\n- 已访问的链接带有下划线和紫色\n- 活动链接带有下划线和红色\n- 当然可以使用 CSS 设置链接样式，以获得另一种外观！\n\n### 属性\n\n默认情况下，链接的页面将显示在当前浏览器窗口中。要更改此设置，您必须为链接指定另一个目标。\n该`target`属性指定在何处打开链接的文档。\n\n- \\_self- 默认。在单击的同一窗口/选项卡中打开文档\n- \\_blank- 在新窗口或选项卡中打开文档\n- \\_parent- 在父框架中打开文档\n- \\_top- 在窗口中打开整个文档\n\n### 其他用法\n\n锚点标签，用于在网页中添加锚点，例如：\n\n```html\n<!-- 锚点标签 -->\n<a name=\"top\"></a>\n<a href=\"#top\">回到顶部</a>\n<!-- 常规用法 -->\n<a href=\"https://www.baidu.com\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_self\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_parent\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_top\">百度</a>\n<!-- 电子邮件 -->\n<a href=\"mailto:admin@example.com\">发送电子邮件</a>\n<!-- 拨打电话 -->\n<a href=\"tel:+1-555-555-5555\">拨打电话</a>\n<!-- 事件触发 -->\n<a href=\"javascript:void(0);\" onclick=\"alert('Hello World!');\">点击我</a>\n<a href=\"https://www.baidu.com\" onclick=\"return confirm('确定要访问百度吗？');\">\n\t百度\n</a>\n```\n\n## 图像\n\n使用`<img/>`可以在网页中嵌入图片，图像一般有俩个必填的参数\n\n- src：图片地址, 可以是本地地址也可以是网络资源\n- alt：图片描述，图片的描述，当图片不存在的时候会显示\n\n图像还支持宽度和高度\n\n```html\n<img src=\"xxxx\" alt=\"\" width=\"100\" height=\"100\" />\n```\n\n不过不建议这样去写宽度和高度， 因为图片加载的时候，会根据宽度和高度去计算图片的宽高，导致图片加载时间过长。\n可以使用 CSS 来设置图片的宽度和高度，例如：\n\n```css\nimg {\n\twidth: 100px;\n\theight: 100px;\n\tobject-fit: cover;\n}\n```\n\n## 表格\n\n详细介绍请看文档：[列表](https://www.w3schools.com/html/html_tables.asp)\n\n```html\n<table>\n\t<!-- 定义表格标题 -->\n\t<caption>\n\t\tMonthly savings\n\t</caption>\n\t<!-- 规定表中一个或多个列的组以进行格式化 -->\n\t<colgroup>\n\t\t<col />\n\t\t<col />\n\t\t<col />\n\t</colgroup>\n\t<!-- 将表头内容分组到表中 -->\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Person 1</th>\n\t\t\t<th>Person 2</th>\n\t\t\t<th>Person 3</th>\n\t\t</tr>\n\t</thead>\n\t<!-- 将正文内容分组到表格中 -->\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Emil</td>\n\t\t\t<td>Tobias</td>\n\t\t\t<td>Linus</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>16</td>\n\t\t\t<td>14</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t</tbody>\n\t<!-- 将页脚内容分组到表格中 -->\n\t<tfoot></tfoot>\n</table>\n```\n\n## 列表\n\n详细介绍请看文档：[列表](https://www.w3schools.com/html/html_lists.asp)\n\n```html\n<ol>\n\t<li>Coffee</li>\n\t<li>Tea</li>\n</ol>\n\n<ul>\n\t<li>Coffee</li>\n\t<li>Tea</li>\n</ul>\n\n<dl>\n\t<dt>Coffee</dt>\n\t<dd>- black hot drink</dd>\n\t<dt>Milk</dt>\n\t<dd>- white cold drink</dd>\n</dl>\n```\n","source":"_posts/技能小册/html/index.md","raw":"---\ntitle: Html-基础标签\nabbrlink: 7d66def0\ndate: 2023-03-12 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Html \n---\n\n# 介绍\n\n{% note info simple %}\n**HTML 是创建网页的标准标记语言。**\n{% endnote %}\n- `HTML` 超文本标记语言;\n- `HTML` 是创建网页的标准标记标签语言;\n- `HTML` 描述网页的结构;\n- `HTML` 由一系列元素组成;\n- `HTML` 元素告诉浏览器如何显示内容;\n- `HTML` 元素标记内容片段，例如“这是一个标题”、“这是一个段落”、“这是一个链接”等等。\n\n## 创建一个简单的 HTML 文件\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Page Title</title>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t<style></style>\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script></script>\n\t</body>\n</html>\n```\n\n### 代码解释\n\n- 声明 `<!DOCTYPE html>` 定义此文档是 HTML5 文档\n- 该 `<html>` 元素是 HTML 页面的根元素\n- 该 `<head>` 元素包含有关 HTML 页面的元信息\n- 该 `<title>` 元素指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）\n- 元素 `<body>` 定义文档的主体，是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。\n- `<script>` 定义交互逻辑主题代码\n- `<style>` 元素样式主题\n\n### 元素\n\n`元素`就是一套标记标签语言(开始标签，结束标签)，例如：`<div>`、`<p>`、`<a>`、`<img />`、`<script>`、`<style>`、`<title>`、`<meta>`、`<body>`、`<head>`、`<html>`等。\n\n```html\n<!-- <p> 开始标签 -->\n<!-- </p> 结束标签 -->\n<p>这是一段文本</p>\n```\n\n---\n\n接下来，将带您认识`元素标签`...\n\n## 标题 `H1-H6`\n\n`HTML` 标题是您想要在网页上显示的标题或副标题。\n\n常常用于网页的标题展示，标题分为 `1-6`，然而权重是不一样的，各有个的用法； `<h1></h1>`定义最为重要的标题，也是权重最高的，而 `<h6></h6>`定义最不重要的标题，同时也是权重最小的。\n\n### 用法\n\n```html\n<h1>标题1</h1>\n<h2>标题2</h2>\n<h3>标题3</h3>\n<h4>标题4</h4>\n<h5>标题5</h5>\n<h6>标题6</h6>\n```\n\n{% note warning simple %}\n值得注意的是：\n\n浏览器会在标题的前后添加一些间距（空白距离）；同时仅仅最作为题，不建议用标题将文本**加粗或者放大**；因为浏览器默认的样式已经足够，当然权重不太一样，导致的字体大小也是不用的，当然文本加粗**是默认的**；\n{% endnote %}\n\n## 段落 `P`\n\n{% note info simple %}\n段落标签是最常用的标签，用于将文本分成段落，段落之间用 `<p></p>` 标签包裹起来。新行开始，并且通常是一块文本。经常用于文章的展示；\n\n同样，段落总是从新行开始，并且浏览器会自动在段落前后添加一些空白（边距）。\n{% endnote %}\n\n\n### 用法\n\n```html\n<p>This is a paragraph.</p>\n<p>This is another paragraph.</p>\n```\n\n当然，`P`标签在网页中，会自动删除多余的空行与空格；\n\n### 水平规则 `hr`\n\n水平规则标签，用于在网页中添加水平分割线，例如：\n\n```html\n<p>这时一段内容</p>\n<hr />\n<p>这时一段内容</p>\n<hr />\n```\n\n该`<hr>`标签为空标签，也就是说它没有结束标签。\n\n### 换行符 `br`\n\nbr 标签，用于在网页中添加换行符，例如：\n\n```html\n<p>这是第一行</p>\n<br />\n<p>这是第二行</p>\n<br />\n<p>这是第三行</p>\n<br />\n```\n\n该`<br>`标签为空标签，也就是说它没有结束标签。\n\n## 格式化标签\n\n### 含义\n\n1. `b`标签，用于将文本标记为**粗体**，例如：\n2. `i`标签，用于将文本标记为**斜体**，例如：\n3. `u`标签，用于将文本标记为**下划线**，例如：\n4. `s`标签，用于将文本标记为**删除线**，例如：\n5. `em`标签，用于将文本标记为**斜体**，例如：\n6. `strong`标签，用于将文本标记为**粗体**，例如：\n7. `mark`标签，用于将文本标记为**标记**，例如：\n8. `del`标签，用于将文本标记为**删除线**，例如：\n9. `ins`标签，用于将文本标记为**下划线**，例如：\n10. `sub`标签，用于将文本标记为**下标**，例如：\n11. `sup`标签，用于将文本标记为**上标**，例如：\n12. `abbr`标签，用于将文本标记为**缩写**，例如：\n13. `code`标签，用于将文本标记为**代码**，例如：\n14. `kbd`标签，用于将文本标记为**键盘**，例如：\n15. `var`标签，用于将文本标记为**变量**，例如：\n16. `samp`标签，用于将文本标记为**示例**，例如：\n17. `cite`标签，用于将文本标记为**引用**，例如：\n18. `dfn`标签，用于将文本标记为**定义**，例如：\n19. `q`标签，用于将文本标记为**引用**，例如：\n20. `blockquote`标签，用于将文本标记为**引用**，例如：\n21. `address`标签，用于将文本标记为**地址**，例如：\n22. `pre`标签，用于将文本标记为**预格式文本**，例如：\n23. `small`标签，用于将文本标记为**小号**，例如：\n\n### 案例\n\n```html\n<p><b>粗体</b></p>\n<p><strong>粗体</strong></p>\n<p><em>斜体</em></p>\n<p><i>斜体</i></p>\n<p><u>下划线</u></p>\n<p><ins>下划线</ins></p>\n<p><s>删除线</s></p>\n<p><del>删除线</del></p>\n<p><mark>标记</mark></p>\n<p><sub>下标</sub></p>\n<p><sup>上标</sup></p>\n<p><small>小号</small></p>\n<p><abbr title=\"Hyper Text Markup Language\">HTML</abbr></p>\n<p><code>代码</code></p>\n<p><kbd>键盘</kbd></p>\n<p><var>变量</var></p>\n<p><samp>示例</samp></p>\n<p><cite>引用</cite></p>\n<p><dfn>定义</dfn></p>\n<p><q>引用</q></p>\n<p><blockquote>引用</blockquote></p>\n<p><cite>引用</cite></p>\n<p><address>地址</address></p>\n<p><ins>引用</ins></p>\n<p><del>引用</del></p>\n<p><s>引用</s></p>\n<p><s>引用</s></p>\n<pre>\n  My Bonnie lies over the ocean.\n</pre>\n```\n\n## 链接标签\n\n链接标签，用于在网页中添加超链接，例如：\n\n### 用法\n\n```html\n<a href=\"https://www.baidu.com\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_self\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_parent\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_top\">百度</a>\n```\n\n**几乎所有网页上都有链接。链接允许用户通过点击从一个页面到另一个页面。您可以单击链接并跳转到另一个文档。当将鼠标移到链接上时，鼠标箭头会变成一只小手。**\n\n{% note warning simple %}\n注意：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！\n{% endnote %}\n\n默认情况下，链接在所有浏览器中都会显示如下内容：\n\n- 未访问的链接带有下划线和蓝色\n- 已访问的链接带有下划线和紫色\n- 活动链接带有下划线和红色\n- 当然可以使用 CSS 设置链接样式，以获得另一种外观！\n\n### 属性\n\n默认情况下，链接的页面将显示在当前浏览器窗口中。要更改此设置，您必须为链接指定另一个目标。\n该`target`属性指定在何处打开链接的文档。\n\n- \\_self- 默认。在单击的同一窗口/选项卡中打开文档\n- \\_blank- 在新窗口或选项卡中打开文档\n- \\_parent- 在父框架中打开文档\n- \\_top- 在窗口中打开整个文档\n\n### 其他用法\n\n锚点标签，用于在网页中添加锚点，例如：\n\n```html\n<!-- 锚点标签 -->\n<a name=\"top\"></a>\n<a href=\"#top\">回到顶部</a>\n<!-- 常规用法 -->\n<a href=\"https://www.baidu.com\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_self\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_parent\">百度</a>\n<a href=\"https://www.baidu.com\" target=\"_top\">百度</a>\n<!-- 电子邮件 -->\n<a href=\"mailto:admin@example.com\">发送电子邮件</a>\n<!-- 拨打电话 -->\n<a href=\"tel:+1-555-555-5555\">拨打电话</a>\n<!-- 事件触发 -->\n<a href=\"javascript:void(0);\" onclick=\"alert('Hello World!');\">点击我</a>\n<a href=\"https://www.baidu.com\" onclick=\"return confirm('确定要访问百度吗？');\">\n\t百度\n</a>\n```\n\n## 图像\n\n使用`<img/>`可以在网页中嵌入图片，图像一般有俩个必填的参数\n\n- src：图片地址, 可以是本地地址也可以是网络资源\n- alt：图片描述，图片的描述，当图片不存在的时候会显示\n\n图像还支持宽度和高度\n\n```html\n<img src=\"xxxx\" alt=\"\" width=\"100\" height=\"100\" />\n```\n\n不过不建议这样去写宽度和高度， 因为图片加载的时候，会根据宽度和高度去计算图片的宽高，导致图片加载时间过长。\n可以使用 CSS 来设置图片的宽度和高度，例如：\n\n```css\nimg {\n\twidth: 100px;\n\theight: 100px;\n\tobject-fit: cover;\n}\n```\n\n## 表格\n\n详细介绍请看文档：[列表](https://www.w3schools.com/html/html_tables.asp)\n\n```html\n<table>\n\t<!-- 定义表格标题 -->\n\t<caption>\n\t\tMonthly savings\n\t</caption>\n\t<!-- 规定表中一个或多个列的组以进行格式化 -->\n\t<colgroup>\n\t\t<col />\n\t\t<col />\n\t\t<col />\n\t</colgroup>\n\t<!-- 将表头内容分组到表中 -->\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Person 1</th>\n\t\t\t<th>Person 2</th>\n\t\t\t<th>Person 3</th>\n\t\t</tr>\n\t</thead>\n\t<!-- 将正文内容分组到表格中 -->\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Emil</td>\n\t\t\t<td>Tobias</td>\n\t\t\t<td>Linus</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>16</td>\n\t\t\t<td>14</td>\n\t\t\t<td>10</td>\n\t\t</tr>\n\t</tbody>\n\t<!-- 将页脚内容分组到表格中 -->\n\t<tfoot></tfoot>\n</table>\n```\n\n## 列表\n\n详细介绍请看文档：[列表](https://www.w3schools.com/html/html_lists.asp)\n\n```html\n<ol>\n\t<li>Coffee</li>\n\t<li>Tea</li>\n</ol>\n\n<ul>\n\t<li>Coffee</li>\n\t<li>Tea</li>\n</ul>\n\n<dl>\n\t<dt>Coffee</dt>\n\t<dd>- black hot drink</dd>\n\t<dt>Milk</dt>\n\t<dd>- white cold drink</dd>\n</dl>\n```\n","slug":"技能小册/html/index","published":1,"updated":"2025-03-12T09:08:48.737Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ix002rfg9mb7ed7kjo","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><div class=\"note info simple\"><p><strong>HTML 是创建网页的标准标记语言。</strong></p>\n</div>\n<ul>\n<li><code>HTML</code> 超文本标记语言;</li>\n<li><code>HTML</code> 是创建网页的标准标记标签语言;</li>\n<li><code>HTML</code> 描述网页的结构;</li>\n<li><code>HTML</code> 由一系列元素组成;</li>\n<li><code>HTML</code> 元素告诉浏览器如何显示内容;</li>\n<li><code>HTML</code> 元素标记内容片段，例如“这是一个标题”、“这是一个段落”、“这是一个链接”等等。</li>\n</ul>\n<h2 id=\"创建一个简单的-HTML-文件\"><a href=\"#创建一个简单的-HTML-文件\" class=\"headerlink\" title=\"创建一个简单的 HTML 文件\"></a>创建一个简单的 HTML 文件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ul>\n<li>声明 <code>&lt;!DOCTYPE html&gt;</code> 定义此文档是 HTML5 文档</li>\n<li>该 <code>&lt;html&gt;</code> 元素是 HTML 页面的根元素</li>\n<li>该 <code>&lt;head&gt;</code> 元素包含有关 HTML 页面的元信息</li>\n<li>该 <code>&lt;title&gt;</code> 元素指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）</li>\n<li>元素 <code>&lt;body&gt;</code> 定义文档的主体，是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。</li>\n<li><code>&lt;script&gt;</code> 定义交互逻辑主题代码</li>\n<li><code>&lt;style&gt;</code> 元素样式主题</li>\n</ul>\n<h3 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h3><p><code>元素</code>就是一套标记标签语言(开始标签，结束标签)，例如：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img /&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;html&gt;</code>等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;p&gt; 开始标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;/p&gt; 结束标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一段文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>接下来，将带您认识<code>元素标签</code>…</p>\n<h2 id=\"标题-H1-H6\"><a href=\"#标题-H1-H6\" class=\"headerlink\" title=\"标题 H1-H6\"></a>标题 <code>H1-H6</code></h2><p><code>HTML</code> 标题是您想要在网页上显示的标题或副标题。</p>\n<p>常常用于网页的标题展示，标题分为 <code>1-6</code>，然而权重是不一样的，各有个的用法； <code>&lt;h1&gt;&lt;/h1&gt;</code>定义最为重要的标题，也是权重最高的，而 <code>&lt;h6&gt;&lt;/h6&gt;</code>定义最不重要的标题，同时也是权重最小的。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>标题1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>标题2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>标题3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>标题4<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>标题5<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>标题6<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning simple\"><p>值得注意的是：</p>\n<p>浏览器会在标题的前后添加一些间距（空白距离）；同时仅仅最作为题，不建议用标题将文本<strong>加粗或者放大</strong>；因为浏览器默认的样式已经足够，当然权重不太一样，导致的字体大小也是不用的，当然文本加粗<strong>是默认的</strong>；</p>\n</div>\n\n<h2 id=\"段落-P\"><a href=\"#段落-P\" class=\"headerlink\" title=\"段落 P\"></a>段落 <code>P</code></h2><div class=\"note info simple\"><p>段落标签是最常用的标签，用于将文本分成段落，段落之间用 <code>&lt;p&gt;&lt;/p&gt;</code> 标签包裹起来。新行开始，并且通常是一块文本。经常用于文章的展示；</p>\n<p>同样，段落总是从新行开始，并且浏览器会自动在段落前后添加一些空白（边距）。</p>\n</div>\n\n\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is another paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，<code>P</code>标签在网页中，会自动删除多余的空行与空格；</p>\n<h3 id=\"水平规则-hr\"><a href=\"#水平规则-hr\" class=\"headerlink\" title=\"水平规则 hr\"></a>水平规则 <code>hr</code></h3><p>水平规则标签，用于在网页中添加水平分割线，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这时一段内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这时一段内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该<code>&lt;hr&gt;</code>标签为空标签，也就是说它没有结束标签。</p>\n<h3 id=\"换行符-br\"><a href=\"#换行符-br\" class=\"headerlink\" title=\"换行符 br\"></a>换行符 <code>br</code></h3><p>br 标签，用于在网页中添加换行符，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该<code>&lt;br&gt;</code>标签为空标签，也就是说它没有结束标签。</p>\n<h2 id=\"格式化标签\"><a href=\"#格式化标签\" class=\"headerlink\" title=\"格式化标签\"></a>格式化标签</h2><h3 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h3><ol>\n<li><code>b</code>标签，用于将文本标记为<strong>粗体</strong>，例如：</li>\n<li><code>i</code>标签，用于将文本标记为<strong>斜体</strong>，例如：</li>\n<li><code>u</code>标签，用于将文本标记为<strong>下划线</strong>，例如：</li>\n<li><code>s</code>标签，用于将文本标记为<strong>删除线</strong>，例如：</li>\n<li><code>em</code>标签，用于将文本标记为<strong>斜体</strong>，例如：</li>\n<li><code>strong</code>标签，用于将文本标记为<strong>粗体</strong>，例如：</li>\n<li><code>mark</code>标签，用于将文本标记为<strong>标记</strong>，例如：</li>\n<li><code>del</code>标签，用于将文本标记为<strong>删除线</strong>，例如：</li>\n<li><code>ins</code>标签，用于将文本标记为<strong>下划线</strong>，例如：</li>\n<li><code>sub</code>标签，用于将文本标记为<strong>下标</strong>，例如：</li>\n<li><code>sup</code>标签，用于将文本标记为<strong>上标</strong>，例如：</li>\n<li><code>abbr</code>标签，用于将文本标记为<strong>缩写</strong>，例如：</li>\n<li><code>code</code>标签，用于将文本标记为<strong>代码</strong>，例如：</li>\n<li><code>kbd</code>标签，用于将文本标记为<strong>键盘</strong>，例如：</li>\n<li><code>var</code>标签，用于将文本标记为<strong>变量</strong>，例如：</li>\n<li><code>samp</code>标签，用于将文本标记为<strong>示例</strong>，例如：</li>\n<li><code>cite</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>dfn</code>标签，用于将文本标记为<strong>定义</strong>，例如：</li>\n<li><code>q</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>blockquote</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>address</code>标签，用于将文本标记为<strong>地址</strong>，例如：</li>\n<li><code>pre</code>标签，用于将文本标记为<strong>预格式文本</strong>，例如：</li>\n<li><code>small</code>标签，用于将文本标记为<strong>小号</strong>，例如：</li>\n</ol>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>粗体<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>粗体<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>下划线<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>下划线<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>删除线<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>删除线<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>标记<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">sub</span>&gt;</span>下标<span class=\"tag\">&lt;/<span class=\"name\">sub</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>上标<span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>小号<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Hyper Text Markup Language&quot;</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>代码<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>键盘<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>变量<span class=\"tag\">&lt;/<span class=\"name\">var</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>示例<span class=\"tag\">&lt;/<span class=\"name\">samp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">cite</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span>定义<span class=\"tag\">&lt;/<span class=\"name\">dfn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">q</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">q</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">cite</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">  My Bonnie lies over the ocean.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接标签\"><a href=\"#链接标签\" class=\"headerlink\" title=\"链接标签\"></a>链接标签</h2><p>链接标签，用于在网页中添加超链接，例如：</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_parent&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_top&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>几乎所有网页上都有链接。链接允许用户通过点击从一个页面到另一个页面。您可以单击链接并跳转到另一个文档。当将鼠标移到链接上时，鼠标箭头会变成一只小手。</strong></p>\n<div class=\"note warning simple\"><p>注意：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！</p>\n</div>\n\n<p>默认情况下，链接在所有浏览器中都会显示如下内容：</p>\n<ul>\n<li>未访问的链接带有下划线和蓝色</li>\n<li>已访问的链接带有下划线和紫色</li>\n<li>活动链接带有下划线和红色</li>\n<li>当然可以使用 CSS 设置链接样式，以获得另一种外观！</li>\n</ul>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>默认情况下，链接的页面将显示在当前浏览器窗口中。要更改此设置，您必须为链接指定另一个目标。<br>该<code>target</code>属性指定在何处打开链接的文档。</p>\n<ul>\n<li>_self- 默认。在单击的同一窗口&#x2F;选项卡中打开文档</li>\n<li>_blank- 在新窗口或选项卡中打开文档</li>\n<li>_parent- 在父框架中打开文档</li>\n<li>_top- 在窗口中打开整个文档</li>\n</ul>\n<h3 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h3><p>锚点标签，用于在网页中添加锚点，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 锚点标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;top&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#top&quot;</span>&gt;</span>回到顶部<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 常规用法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_parent&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_top&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 电子邮件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:admin@example.com&quot;</span>&gt;</span>发送电子邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 拨打电话 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;tel:+1-555-555-5555&quot;</span>&gt;</span>拨打电话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 事件触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0);&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;Hello World!&#x27;);&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return confirm(&#x27;确定要访问百度吗？&#x27;);&quot;</span>&gt;</span></span><br><span class=\"line\">\t百度</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h2><p>使用<code>&lt;img/&gt;</code>可以在网页中嵌入图片，图像一般有俩个必填的参数</p>\n<ul>\n<li>src：图片地址, 可以是本地地址也可以是网络资源</li>\n<li>alt：图片描述，图片的描述，当图片不存在的时候会显示</li>\n</ul>\n<p>图像还支持宽度和高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;xxxx&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不过不建议这样去写宽度和高度， 因为图片加载的时候，会根据宽度和高度去计算图片的宽高，导致图片加载时间过长。<br>可以使用 CSS 来设置图片的宽度和高度，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>详细介绍请看文档：<a href=\"https://www.w3schools.com/html/html_tables.asp\">列表</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义表格标题 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">\t\tMonthly savings</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 规定表中一个或多个列的组以进行格式化 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将表头内容分组到表中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 1<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 2<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 3<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将正文内容分组到表格中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Emil<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Tobias<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Linus<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将页脚内容分组到表格中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>详细介绍请看文档：<a href=\"https://www.w3schools.com/html/html_lists.asp\">列表</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>- black hot drink<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>- white cold drink<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><div class=\"note info simple\"><p><strong>HTML 是创建网页的标准标记语言。</strong></p>\n</div>\n<ul>\n<li><code>HTML</code> 超文本标记语言;</li>\n<li><code>HTML</code> 是创建网页的标准标记标签语言;</li>\n<li><code>HTML</code> 描述网页的结构;</li>\n<li><code>HTML</code> 由一系列元素组成;</li>\n<li><code>HTML</code> 元素告诉浏览器如何显示内容;</li>\n<li><code>HTML</code> 元素标记内容片段，例如“这是一个标题”、“这是一个段落”、“这是一个链接”等等。</li>\n</ul>\n<h2 id=\"创建一个简单的-HTML-文件\"><a href=\"#创建一个简单的-HTML-文件\" class=\"headerlink\" title=\"创建一个简单的 HTML 文件\"></a>创建一个简单的 HTML 文件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Page Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h3><ul>\n<li>声明 <code>&lt;!DOCTYPE html&gt;</code> 定义此文档是 HTML5 文档</li>\n<li>该 <code>&lt;html&gt;</code> 元素是 HTML 页面的根元素</li>\n<li>该 <code>&lt;head&gt;</code> 元素包含有关 HTML 页面的元信息</li>\n<li>该 <code>&lt;title&gt;</code> 元素指定 HTML 页面的标题（显示在浏览器的标题栏或页面的选项卡中）</li>\n<li>元素 <code>&lt;body&gt;</code> 定义文档的主体，是所有可见内容的容器，例如标题、段落、图像、超链接、表格、列表等。</li>\n<li><code>&lt;script&gt;</code> 定义交互逻辑主题代码</li>\n<li><code>&lt;style&gt;</code> 元素样式主题</li>\n</ul>\n<h3 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h3><p><code>元素</code>就是一套标记标签语言(开始标签，结束标签)，例如：<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img /&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;html&gt;</code>等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;p&gt; 开始标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;/p&gt; 结束标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一段文本<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>接下来，将带您认识<code>元素标签</code>…</p>\n<h2 id=\"标题-H1-H6\"><a href=\"#标题-H1-H6\" class=\"headerlink\" title=\"标题 H1-H6\"></a>标题 <code>H1-H6</code></h2><p><code>HTML</code> 标题是您想要在网页上显示的标题或副标题。</p>\n<p>常常用于网页的标题展示，标题分为 <code>1-6</code>，然而权重是不一样的，各有个的用法； <code>&lt;h1&gt;&lt;/h1&gt;</code>定义最为重要的标题，也是权重最高的，而 <code>&lt;h6&gt;&lt;/h6&gt;</code>定义最不重要的标题，同时也是权重最小的。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>标题1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>标题2<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>标题3<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>标题4<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>标题5<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>标题6<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning simple\"><p>值得注意的是：</p>\n<p>浏览器会在标题的前后添加一些间距（空白距离）；同时仅仅最作为题，不建议用标题将文本<strong>加粗或者放大</strong>；因为浏览器默认的样式已经足够，当然权重不太一样，导致的字体大小也是不用的，当然文本加粗<strong>是默认的</strong>；</p>\n</div>\n\n<h2 id=\"段落-P\"><a href=\"#段落-P\" class=\"headerlink\" title=\"段落 P\"></a>段落 <code>P</code></h2><div class=\"note info simple\"><p>段落标签是最常用的标签，用于将文本分成段落，段落之间用 <code>&lt;p&gt;&lt;/p&gt;</code> 标签包裹起来。新行开始，并且通常是一块文本。经常用于文章的展示；</p>\n<p>同样，段落总是从新行开始，并且浏览器会自动在段落前后添加一些空白（边距）。</p>\n</div>\n\n\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is a paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is another paragraph.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，<code>P</code>标签在网页中，会自动删除多余的空行与空格；</p>\n<h3 id=\"水平规则-hr\"><a href=\"#水平规则-hr\" class=\"headerlink\" title=\"水平规则 hr\"></a>水平规则 <code>hr</code></h3><p>水平规则标签，用于在网页中添加水平分割线，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这时一段内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这时一段内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该<code>&lt;hr&gt;</code>标签为空标签，也就是说它没有结束标签。</p>\n<h3 id=\"换行符-br\"><a href=\"#换行符-br\" class=\"headerlink\" title=\"换行符 br\"></a>换行符 <code>br</code></h3><p>br 标签，用于在网页中添加换行符，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第一行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第二行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是第三行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该<code>&lt;br&gt;</code>标签为空标签，也就是说它没有结束标签。</p>\n<h2 id=\"格式化标签\"><a href=\"#格式化标签\" class=\"headerlink\" title=\"格式化标签\"></a>格式化标签</h2><h3 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h3><ol>\n<li><code>b</code>标签，用于将文本标记为<strong>粗体</strong>，例如：</li>\n<li><code>i</code>标签，用于将文本标记为<strong>斜体</strong>，例如：</li>\n<li><code>u</code>标签，用于将文本标记为<strong>下划线</strong>，例如：</li>\n<li><code>s</code>标签，用于将文本标记为<strong>删除线</strong>，例如：</li>\n<li><code>em</code>标签，用于将文本标记为<strong>斜体</strong>，例如：</li>\n<li><code>strong</code>标签，用于将文本标记为<strong>粗体</strong>，例如：</li>\n<li><code>mark</code>标签，用于将文本标记为<strong>标记</strong>，例如：</li>\n<li><code>del</code>标签，用于将文本标记为<strong>删除线</strong>，例如：</li>\n<li><code>ins</code>标签，用于将文本标记为<strong>下划线</strong>，例如：</li>\n<li><code>sub</code>标签，用于将文本标记为<strong>下标</strong>，例如：</li>\n<li><code>sup</code>标签，用于将文本标记为<strong>上标</strong>，例如：</li>\n<li><code>abbr</code>标签，用于将文本标记为<strong>缩写</strong>，例如：</li>\n<li><code>code</code>标签，用于将文本标记为<strong>代码</strong>，例如：</li>\n<li><code>kbd</code>标签，用于将文本标记为<strong>键盘</strong>，例如：</li>\n<li><code>var</code>标签，用于将文本标记为<strong>变量</strong>，例如：</li>\n<li><code>samp</code>标签，用于将文本标记为<strong>示例</strong>，例如：</li>\n<li><code>cite</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>dfn</code>标签，用于将文本标记为<strong>定义</strong>，例如：</li>\n<li><code>q</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>blockquote</code>标签，用于将文本标记为<strong>引用</strong>，例如：</li>\n<li><code>address</code>标签，用于将文本标记为<strong>地址</strong>，例如：</li>\n<li><code>pre</code>标签，用于将文本标记为<strong>预格式文本</strong>，例如：</li>\n<li><code>small</code>标签，用于将文本标记为<strong>小号</strong>，例如：</li>\n</ol>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>粗体<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>粗体<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>斜体<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>下划线<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>下划线<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>删除线<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>删除线<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span>标记<span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">sub</span>&gt;</span>下标<span class=\"tag\">&lt;/<span class=\"name\">sub</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">sup</span>&gt;</span>上标<span class=\"tag\">&lt;/<span class=\"name\">sup</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>小号<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">abbr</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Hyper Text Markup Language&quot;</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">abbr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>代码<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>键盘<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">var</span>&gt;</span>变量<span class=\"tag\">&lt;/<span class=\"name\">var</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">samp</span>&gt;</span>示例<span class=\"tag\">&lt;/<span class=\"name\">samp</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">cite</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">dfn</span>&gt;</span>定义<span class=\"tag\">&lt;/<span class=\"name\">dfn</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">q</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">q</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">blockquote</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">cite</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">cite</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span>地址<span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">ins</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">ins</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">s</span>&gt;</span>引用<span class=\"tag\">&lt;/<span class=\"name\">s</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\">  My Bonnie lies over the ocean.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接标签\"><a href=\"#链接标签\" class=\"headerlink\" title=\"链接标签\"></a>链接标签</h2><p>链接标签，用于在网页中添加超链接，例如：</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_parent&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_top&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>几乎所有网页上都有链接。链接允许用户通过点击从一个页面到另一个页面。您可以单击链接并跳转到另一个文档。当将鼠标移到链接上时，鼠标箭头会变成一只小手。</strong></p>\n<div class=\"note warning simple\"><p>注意：链接不一定是文本。链接可以是图像或任何其他 HTML 元素！</p>\n</div>\n\n<p>默认情况下，链接在所有浏览器中都会显示如下内容：</p>\n<ul>\n<li>未访问的链接带有下划线和蓝色</li>\n<li>已访问的链接带有下划线和紫色</li>\n<li>活动链接带有下划线和红色</li>\n<li>当然可以使用 CSS 设置链接样式，以获得另一种外观！</li>\n</ul>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>默认情况下，链接的页面将显示在当前浏览器窗口中。要更改此设置，您必须为链接指定另一个目标。<br>该<code>target</code>属性指定在何处打开链接的文档。</p>\n<ul>\n<li>_self- 默认。在单击的同一窗口&#x2F;选项卡中打开文档</li>\n<li>_blank- 在新窗口或选项卡中打开文档</li>\n<li>_parent- 在父框架中打开文档</li>\n<li>_top- 在窗口中打开整个文档</li>\n</ul>\n<h3 id=\"其他用法\"><a href=\"#其他用法\" class=\"headerlink\" title=\"其他用法\"></a>其他用法</h3><p>锚点标签，用于在网页中添加锚点，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 锚点标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;top&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#top&quot;</span>&gt;</span>回到顶部<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 常规用法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_self&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_parent&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_top&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 电子邮件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;mailto:admin@example.com&quot;</span>&gt;</span>发送电子邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 拨打电话 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;tel:+1-555-555-5555&quot;</span>&gt;</span>拨打电话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 事件触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0);&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;Hello World!&#x27;);&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return confirm(&#x27;确定要访问百度吗？&#x27;);&quot;</span>&gt;</span></span><br><span class=\"line\">\t百度</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h2><p>使用<code>&lt;img/&gt;</code>可以在网页中嵌入图片，图像一般有俩个必填的参数</p>\n<ul>\n<li>src：图片地址, 可以是本地地址也可以是网络资源</li>\n<li>alt：图片描述，图片的描述，当图片不存在的时候会显示</li>\n</ul>\n<p>图像还支持宽度和高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;xxxx&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不过不建议这样去写宽度和高度， 因为图片加载的时候，会根据宽度和高度去计算图片的宽高，导致图片加载时间过长。<br>可以使用 CSS 来设置图片的宽度和高度，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>: cover;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>详细介绍请看文档：<a href=\"https://www.w3schools.com/html/html_tables.asp\">列表</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 定义表格标题 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">\t\tMonthly savings</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 规定表中一个或多个列的组以进行格式化 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将表头内容分组到表中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 1<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 2<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Person 3<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将正文内容分组到表格中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Emil<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Tobias<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Linus<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 将页脚内容分组到表格中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>详细介绍请看文档：<a href=\"https://www.w3schools.com/html/html_lists.asp\">列表</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>- black hot drink<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>- white cold drink<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-JWT授权","abbrlink":"dedb482b","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n身份验证是大多数应用的重要组成部分。有许多不同的方法和策略来处理身份验证。任何项目所采用的方法都取决于其特定的应用需求。本章介绍了几种可以适应各种不同要求的身份验证方法。\n\n让我们充实我们的要求。对于此用例，客户端将首先使用用户名和密码进行身份验证。一旦通过身份验证，服务器将发送一个 `JWT`，该 `JWT` 可以在后续请求的授权标头中作为 不记名令牌 发送以证明身份验证。我们还将创建一个仅供包含有效 `JWT` 的请求访问的受保护路由。\n\n我们将从第一个要求开始：验证用户。然后我们将通过发布 `JWT` 来扩展它。最后，我们将创建一个受保护的路由来检查请求中的有效 `JWT。`\n\n## JWT 令牌\n\n首先安装依赖:\n\n```ts\npnpm add --save @nestjs/jwt\n\n```\n\n安装成功之后，我们需要在`auth.module.ts`中注册：\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    // 添加这一行\n    JwtModule.register({\n      global: true,\n      secret: \"xxxxxxxxxxxxxxxx\",\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n})\n```\n\n::: warning 注意\n`secret` 当然你可以添加在环境变量中, 如果添加到环境变量中写法如下：\n:::\n\n```ts\nimport { ConfigService } from '@nestjs/config';\n@Module({\n  imports: [\n    // 添加这一行\n    JwtModule.registerAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get<string>('JWT_SECRET'),\n          signOptions: {\n            expiresIn: configService.get<string>('JWT_EXPIRES_IN'),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\n```\n\n## 通行证/身份验证\n\n身份验证用的第三方`@nestjs/passport`, 可以看文档[通行证整合](https://nest.nodejs.cn/security/authentication#%E9%80%9A%E8%A1%8C%E8%AF%81%E6%95%B4%E5%90%88)\n\n```ts\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { Payload } from \"./auth.interface\";\nimport { Request } from \"express\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private readonly authService: AuthService) {\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: process.env.JWT_SECRET,\n\t\t\tpassReqToCallback: true,\n\t\t});\n\t}\n\n\t// 身份校验器\n\tasync validate(request: Request, payload: Payload) {\n\t\tconst authorization = request.headers.authorization || \"\";\n\t\tconst token = authorization.slice(7);\n\t\t// 这一步根据自己的业务逻辑来写，我这里是读取redis的token作为比较\n\t\tconst user = await this.authService.validateToken(payload, token);\n\t\treturn user || { userId: payload.userId };\n\t}\n}\n```\n\n```ts\nexport class AuthService {\n\t// 验证token是否失效\n\tasync validateToken(payload: Payload, resToken: string) {\n\t\tconst token = await this.cacheService.get(\n\t\t\t`${REDIS_TOKEN_KEY}${payload.userId}`\n\t\t);\n\t\tif (resToken !== token)\n\t\t\tthrow new ApiException(\"登录状态已过期\", HttpStatusCode.FORBIDDEN);\n\t\t// 存在读取缓存\n\t\tconst userString = await this.cacheService.get(\n\t\t\t`${REDIS_USER_INFO_KEY}${payload.userId}`\n\t\t);\n\t\treturn userString ? JSON.parse(userString) : null;\n\t}\n}\n```\n\n最后将这个`module`挂载在`app.module.ts`中：\n\n```ts\n@Module({\n  imports: [AuthModule],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\n```\n","source":"_posts/技能小册/Nest/jwt授权.md","raw":"---\ntitle: Nest-JWT授权\nabbrlink: dedb482b\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n身份验证是大多数应用的重要组成部分。有许多不同的方法和策略来处理身份验证。任何项目所采用的方法都取决于其特定的应用需求。本章介绍了几种可以适应各种不同要求的身份验证方法。\n\n让我们充实我们的要求。对于此用例，客户端将首先使用用户名和密码进行身份验证。一旦通过身份验证，服务器将发送一个 `JWT`，该 `JWT` 可以在后续请求的授权标头中作为 不记名令牌 发送以证明身份验证。我们还将创建一个仅供包含有效 `JWT` 的请求访问的受保护路由。\n\n我们将从第一个要求开始：验证用户。然后我们将通过发布 `JWT` 来扩展它。最后，我们将创建一个受保护的路由来检查请求中的有效 `JWT。`\n\n## JWT 令牌\n\n首先安装依赖:\n\n```ts\npnpm add --save @nestjs/jwt\n\n```\n\n安装成功之后，我们需要在`auth.module.ts`中注册：\n\n```ts\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    // 添加这一行\n    JwtModule.register({\n      global: true,\n      secret: \"xxxxxxxxxxxxxxxx\",\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n})\n```\n\n::: warning 注意\n`secret` 当然你可以添加在环境变量中, 如果添加到环境变量中写法如下：\n:::\n\n```ts\nimport { ConfigService } from '@nestjs/config';\n@Module({\n  imports: [\n    // 添加这一行\n    JwtModule.registerAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          secret: configService.get<string>('JWT_SECRET'),\n          signOptions: {\n            expiresIn: configService.get<string>('JWT_EXPIRES_IN'),\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\n```\n\n## 通行证/身份验证\n\n身份验证用的第三方`@nestjs/passport`, 可以看文档[通行证整合](https://nest.nodejs.cn/security/authentication#%E9%80%9A%E8%A1%8C%E8%AF%81%E6%95%B4%E5%90%88)\n\n```ts\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { Payload } from \"./auth.interface\";\nimport { Request } from \"express\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor(private readonly authService: AuthService) {\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: process.env.JWT_SECRET,\n\t\t\tpassReqToCallback: true,\n\t\t});\n\t}\n\n\t// 身份校验器\n\tasync validate(request: Request, payload: Payload) {\n\t\tconst authorization = request.headers.authorization || \"\";\n\t\tconst token = authorization.slice(7);\n\t\t// 这一步根据自己的业务逻辑来写，我这里是读取redis的token作为比较\n\t\tconst user = await this.authService.validateToken(payload, token);\n\t\treturn user || { userId: payload.userId };\n\t}\n}\n```\n\n```ts\nexport class AuthService {\n\t// 验证token是否失效\n\tasync validateToken(payload: Payload, resToken: string) {\n\t\tconst token = await this.cacheService.get(\n\t\t\t`${REDIS_TOKEN_KEY}${payload.userId}`\n\t\t);\n\t\tif (resToken !== token)\n\t\t\tthrow new ApiException(\"登录状态已过期\", HttpStatusCode.FORBIDDEN);\n\t\t// 存在读取缓存\n\t\tconst userString = await this.cacheService.get(\n\t\t\t`${REDIS_USER_INFO_KEY}${payload.userId}`\n\t\t);\n\t\treturn userString ? JSON.parse(userString) : null;\n\t}\n}\n```\n\n最后将这个`module`挂载在`app.module.ts`中：\n\n```ts\n@Module({\n  imports: [AuthModule],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\n```\n","slug":"技能小册/Nest/jwt授权","published":1,"updated":"2025-03-12T09:44:56.211Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iy002ufg9mbgar81lv","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>身份验证是大多数应用的重要组成部分。有许多不同的方法和策略来处理身份验证。任何项目所采用的方法都取决于其特定的应用需求。本章介绍了几种可以适应各种不同要求的身份验证方法。</p>\n<p>让我们充实我们的要求。对于此用例，客户端将首先使用用户名和密码进行身份验证。一旦通过身份验证，服务器将发送一个 <code>JWT</code>，该 <code>JWT</code> 可以在后续请求的授权标头中作为 不记名令牌 发送以证明身份验证。我们还将创建一个仅供包含有效 <code>JWT</code> 的请求访问的受保护路由。</p>\n<p>我们将从第一个要求开始：验证用户。然后我们将通过发布 <code>JWT</code> 来扩展它。最后，我们将创建一个受保护的路由来检查请求中的有效 <code>JWT。</code></p>\n<h2 id=\"JWT-令牌\"><a href=\"#JWT-令牌\" class=\"headerlink\" title=\"JWT 令牌\"></a>JWT 令牌</h2><p>首先安装依赖:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add --save <span class=\"meta\">@nestjs</span>/jwt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，我们需要在<code>auth.module.ts</code>中注册：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">JwtModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"title class_\">JwtModule</span>.<span class=\"title function_\">register</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">global</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">secret</span>: <span class=\"string\">&quot;xxxxxxxxxxxxxxxx&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">signOptions</span>: &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;60s&#x27;</span> &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>::: warning 注意<br><code>secret</code> 当然你可以添加在环境变量中, 如果添加到环境变量中写法如下：<br>:::</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/config&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"title class_\">JwtModule</span>.<span class=\"title function_\">registerAsync</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"title function_\">async</span> (<span class=\"attr\">configService</span>: <span class=\"title class_\">ConfigService</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">secret</span>: configService.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;JWT_SECRET&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">signOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">expiresIn</span>: configService.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;JWT_EXPIRES_IN&#x27;</span>),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">inject</span>: [<span class=\"title class_\">ConfigService</span>],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通行证-身份验证\"><a href=\"#通行证-身份验证\" class=\"headerlink\" title=\"通行证&#x2F;身份验证\"></a>通行证&#x2F;身份验证</h2><p>身份验证用的第三方<code>@nestjs/passport</code>, 可以看文档<a href=\"https://nest.nodejs.cn/security/authentication#%E9%80%9A%E8%A1%8C%E8%AF%81%E6%95%B4%E5%90%88\">通行证整合</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExtractJwt</span>, <span class=\"title class_\">Strategy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;passport-jwt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PassportStrategy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/passport&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Payload</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./auth.interface&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AuthService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./auth.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PassportStrategy</span>(<span class=\"title class_\">Strategy</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">authService</span>: <span class=\"title class_\">AuthService</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">jwtFromRequest</span>: <span class=\"title class_\">ExtractJwt</span>.<span class=\"title function_\">fromAuthHeaderAsBearerToken</span>(),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ignoreExpiration</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">secretOrKey</span>: process.<span class=\"property\">env</span>.<span class=\"property\">JWT_SECRET</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">passReqToCallback</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 身份校验器</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">validate</span>(<span class=\"params\"><span class=\"attr\">request</span>: <span class=\"title class_\">Request</span>, <span class=\"attr\">payload</span>: <span class=\"title class_\">Payload</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> authorization = request.<span class=\"property\">headers</span>.<span class=\"property\">authorization</span> || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> token = authorization.<span class=\"title function_\">slice</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这一步根据自己的业务逻辑来写，我这里是读取redis的token作为比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">authService</span>.<span class=\"title function_\">validateToken</span>(payload, token);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user || &#123; <span class=\"attr\">userId</span>: payload.<span class=\"property\">userId</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 验证token是否失效</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">validateToken</span>(<span class=\"params\"><span class=\"attr\">payload</span>: <span class=\"title class_\">Payload</span>, <span class=\"attr\">resToken</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">cacheService</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;REDIS_TOKEN_KEY&#125;</span><span class=\"subst\">$&#123;payload.userId&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resToken !== token)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(<span class=\"string\">&quot;登录状态已过期&quot;</span>, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 存在读取缓存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> userString = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">cacheService</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;REDIS_USER_INFO_KEY&#125;</span><span class=\"subst\">$&#123;payload.userId&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userString ? <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(userString) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后将这个<code>module</code>挂载在<code>app.module.ts</code>中：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">AuthModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>身份验证是大多数应用的重要组成部分。有许多不同的方法和策略来处理身份验证。任何项目所采用的方法都取决于其特定的应用需求。本章介绍了几种可以适应各种不同要求的身份验证方法。</p>\n<p>让我们充实我们的要求。对于此用例，客户端将首先使用用户名和密码进行身份验证。一旦通过身份验证，服务器将发送一个 <code>JWT</code>，该 <code>JWT</code> 可以在后续请求的授权标头中作为 不记名令牌 发送以证明身份验证。我们还将创建一个仅供包含有效 <code>JWT</code> 的请求访问的受保护路由。</p>\n<p>我们将从第一个要求开始：验证用户。然后我们将通过发布 <code>JWT</code> 来扩展它。最后，我们将创建一个受保护的路由来检查请求中的有效 <code>JWT。</code></p>\n<h2 id=\"JWT-令牌\"><a href=\"#JWT-令牌\" class=\"headerlink\" title=\"JWT 令牌\"></a>JWT 令牌</h2><p>首先安装依赖:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add --save <span class=\"meta\">@nestjs</span>/jwt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，我们需要在<code>auth.module.ts</code>中注册：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">JwtModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"title class_\">JwtModule</span>.<span class=\"title function_\">register</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">global</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">secret</span>: <span class=\"string\">&quot;xxxxxxxxxxxxxxxx&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">signOptions</span>: &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">&#x27;60s&#x27;</span> &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>::: warning 注意<br><code>secret</code> 当然你可以添加在环境变量中, 如果添加到环境变量中写法如下：<br>:::</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/config&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"title class_\">JwtModule</span>.<span class=\"title function_\">registerAsync</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"title function_\">async</span> (<span class=\"attr\">configService</span>: <span class=\"title class_\">ConfigService</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">secret</span>: configService.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;JWT_SECRET&#x27;</span>),</span><br><span class=\"line\">          <span class=\"attr\">signOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">expiresIn</span>: configService.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;JWT_EXPIRES_IN&#x27;</span>),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">inject</span>: [<span class=\"title class_\">ConfigService</span>],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通行证-身份验证\"><a href=\"#通行证-身份验证\" class=\"headerlink\" title=\"通行证&#x2F;身份验证\"></a>通行证&#x2F;身份验证</h2><p>身份验证用的第三方<code>@nestjs/passport</code>, 可以看文档<a href=\"https://nest.nodejs.cn/security/authentication#%E9%80%9A%E8%A1%8C%E8%AF%81%E6%95%B4%E5%90%88\">通行证整合</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExtractJwt</span>, <span class=\"title class_\">Strategy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;passport-jwt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PassportStrategy</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/passport&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Payload</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./auth.interface&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AuthService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./auth.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PassportStrategy</span>(<span class=\"title class_\">Strategy</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">authService</span>: <span class=\"title class_\">AuthService</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">jwtFromRequest</span>: <span class=\"title class_\">ExtractJwt</span>.<span class=\"title function_\">fromAuthHeaderAsBearerToken</span>(),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ignoreExpiration</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">secretOrKey</span>: process.<span class=\"property\">env</span>.<span class=\"property\">JWT_SECRET</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">passReqToCallback</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 身份校验器</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">validate</span>(<span class=\"params\"><span class=\"attr\">request</span>: <span class=\"title class_\">Request</span>, <span class=\"attr\">payload</span>: <span class=\"title class_\">Payload</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> authorization = request.<span class=\"property\">headers</span>.<span class=\"property\">authorization</span> || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> token = authorization.<span class=\"title function_\">slice</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这一步根据自己的业务逻辑来写，我这里是读取redis的token作为比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">authService</span>.<span class=\"title function_\">validateToken</span>(payload, token);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user || &#123; <span class=\"attr\">userId</span>: payload.<span class=\"property\">userId</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 验证token是否失效</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">validateToken</span>(<span class=\"params\"><span class=\"attr\">payload</span>: <span class=\"title class_\">Payload</span>, <span class=\"attr\">resToken</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">cacheService</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;REDIS_TOKEN_KEY&#125;</span><span class=\"subst\">$&#123;payload.userId&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resToken !== token)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(<span class=\"string\">&quot;登录状态已过期&quot;</span>, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 存在读取缓存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> userString = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">cacheService</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;REDIS_USER_INFO_KEY&#125;</span><span class=\"subst\">$&#123;payload.userId&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> userString ? <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(userString) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后将这个<code>module</code>挂载在<code>app.module.ts</code>中：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">AuthModule</span>],</span><br><span class=\"line\">  <span class=\"attr\">controllers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-中间件","abbrlink":"e919cac4","date":"2024-11-08T01:05:01.000Z","_content":"\n# Nest 中间件\n\n> 中间件实在路由处理程序之前调用的函数；同时可以访问请求和响应对象，以及程序请求响应周期中的`next()`中间函数；\n>\n> 简单理解就是：前端路由守卫，做拦截处理；\n\n常见的中间件使用方式大致为：`class, 函数`\n\n## 使用\n\n使用`cli`命令自动生成中间件模板：`nest g mi logger`\n\n```ts\nimport { Injectable, NestMiddleware } from \"@nestjs/common\";\nimport { NextFunction, Request, Response } from \"express\";\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n\tuse(req: Request, res: Response, next: NextFunction) {\n\t\tconsole.log(req.baseUrl);\n\t\tconsole.log(`Request received at ${new Date()}`);\n\t\tnext();\n\t}\n}\n\nexport const loggerMiddleware = (\n\treq: Request,\n\tres: Response,\n\tnext: NextFunction\n) => {\n\tconsole.log(req.baseUrl);\n\tconsole.log(`Request received at ${new Date()}`);\n\tnext();\n};\n\n// app.module.ts\nexport class AppModule implements NestModule {\n\tconfigure(consumer: MiddlewareConsumer) {\n\t\t// class和函数中间件\n\t\tconsumer.apply(LoggerMiddleware, loggerMiddleware).forRoutes(\"/a\", \"/b\");\n\t}\n}\n\n// main.ts\nasync function bootstrap() {\n\tconst app = await NestFactory.create(AppModule);\n\tawait app.listen(3000);\n\t// 全局中间件\n\tapp.use(loggerMiddleware);\n}\n```\n\n## 跨域案例\n\n```ts\nimport { Injectable, NestMiddleware } from \"@nestjs/common\";\n\n@Injectable()\nexport class CorsMiddleware implements NestMiddleware {\n\tuse(req: any, res: any, next: any) {\n\t\tconst allowedOrigin = process.env.CORS_ORIGIN ?? \"*\";\n\t\tres.setHeader(\"Access-Control-Allow-Origin\", allowedOrigin);\n\t\tres.setHeader(\n\t\t\t\"Access-Control-Allow-Methods\",\n\t\t\t\"GET,HEAD,PUT,PATCH,POST,DELETE\"\n\t\t);\n\t\tres.setHeader(\n\t\t\t\"Access-Control-Allow-Headers\",\n\t\t\t\"Content-Type,Authorization, Content-Length, X-Requested-With\"\n\t\t);\n\t\tnext();\n\t}\n}\n\n// app.module.ts\nexport class AppModule implements NestModule {\n\tconfigure(consumer: MiddlewareConsumer) {\n\t\t// 设置中间件\n\t\tconsumer.apply(CorsMiddleware).forRoutes(\"*\");\n\t}\n}\n```\n","source":"_posts/技能小册/Nest/中间件.md","raw":"---\ntitle: Nest-中间件\nabbrlink: e919cac4\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# Nest 中间件\n\n> 中间件实在路由处理程序之前调用的函数；同时可以访问请求和响应对象，以及程序请求响应周期中的`next()`中间函数；\n>\n> 简单理解就是：前端路由守卫，做拦截处理；\n\n常见的中间件使用方式大致为：`class, 函数`\n\n## 使用\n\n使用`cli`命令自动生成中间件模板：`nest g mi logger`\n\n```ts\nimport { Injectable, NestMiddleware } from \"@nestjs/common\";\nimport { NextFunction, Request, Response } from \"express\";\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n\tuse(req: Request, res: Response, next: NextFunction) {\n\t\tconsole.log(req.baseUrl);\n\t\tconsole.log(`Request received at ${new Date()}`);\n\t\tnext();\n\t}\n}\n\nexport const loggerMiddleware = (\n\treq: Request,\n\tres: Response,\n\tnext: NextFunction\n) => {\n\tconsole.log(req.baseUrl);\n\tconsole.log(`Request received at ${new Date()}`);\n\tnext();\n};\n\n// app.module.ts\nexport class AppModule implements NestModule {\n\tconfigure(consumer: MiddlewareConsumer) {\n\t\t// class和函数中间件\n\t\tconsumer.apply(LoggerMiddleware, loggerMiddleware).forRoutes(\"/a\", \"/b\");\n\t}\n}\n\n// main.ts\nasync function bootstrap() {\n\tconst app = await NestFactory.create(AppModule);\n\tawait app.listen(3000);\n\t// 全局中间件\n\tapp.use(loggerMiddleware);\n}\n```\n\n## 跨域案例\n\n```ts\nimport { Injectable, NestMiddleware } from \"@nestjs/common\";\n\n@Injectable()\nexport class CorsMiddleware implements NestMiddleware {\n\tuse(req: any, res: any, next: any) {\n\t\tconst allowedOrigin = process.env.CORS_ORIGIN ?? \"*\";\n\t\tres.setHeader(\"Access-Control-Allow-Origin\", allowedOrigin);\n\t\tres.setHeader(\n\t\t\t\"Access-Control-Allow-Methods\",\n\t\t\t\"GET,HEAD,PUT,PATCH,POST,DELETE\"\n\t\t);\n\t\tres.setHeader(\n\t\t\t\"Access-Control-Allow-Headers\",\n\t\t\t\"Content-Type,Authorization, Content-Length, X-Requested-With\"\n\t\t);\n\t\tnext();\n\t}\n}\n\n// app.module.ts\nexport class AppModule implements NestModule {\n\tconfigure(consumer: MiddlewareConsumer) {\n\t\t// 设置中间件\n\t\tconsumer.apply(CorsMiddleware).forRoutes(\"*\");\n\t}\n}\n```\n","slug":"技能小册/Nest/中间件","published":1,"updated":"2025-03-12T09:44:53.011Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iy002zfg9m2bk52pd1","content":"<h1 id=\"Nest-中间件\"><a href=\"#Nest-中间件\" class=\"headerlink\" title=\"Nest 中间件\"></a>Nest 中间件</h1><blockquote>\n<p>中间件实在路由处理程序之前调用的函数；同时可以访问请求和响应对象，以及程序请求响应周期中的<code>next()</code>中间函数；</p>\n<p>简单理解就是：前端路由守卫，做拦截处理；</p>\n</blockquote>\n<p>常见的中间件使用方式大致为：<code>class, 函数</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用<code>cli</code>命令自动生成中间件模板：<code>nest g mi logger</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">NestMiddleware</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NextFunction</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerMiddleware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestMiddleware</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">use</span>(<span class=\"params\"><span class=\"attr\">req</span>: <span class=\"title class_\">Request</span>, <span class=\"attr\">res</span>: <span class=\"title class_\">Response</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">NextFunction</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">baseUrl</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Request received at <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loggerMiddleware</span> = (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">req</span>: <span class=\"title class_\">Request</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">res</span>: <span class=\"title class_\">Response</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">next</span>: <span class=\"title class_\">NextFunction</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">baseUrl</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Request received at <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestModule</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">configure</span>(<span class=\"params\"><span class=\"attr\">consumer</span>: <span class=\"title class_\">MiddlewareConsumer</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// class和函数中间件</span></span><br><span class=\"line\">\t\tconsumer.<span class=\"title function_\">apply</span>(<span class=\"title class_\">LoggerMiddleware</span>, loggerMiddleware).<span class=\"title function_\">forRoutes</span>(<span class=\"string\">&quot;/a&quot;</span>, <span class=\"string\">&quot;/b&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">AppModule</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 全局中间件</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">use</span>(loggerMiddleware);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跨域案例\"><a href=\"#跨域案例\" class=\"headerlink\" title=\"跨域案例\"></a>跨域案例</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">NestMiddleware</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsMiddleware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestMiddleware</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">use</span>(<span class=\"params\"><span class=\"attr\">req</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">res</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">next</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedOrigin = process.<span class=\"property\">env</span>.<span class=\"property\">CORS_ORIGIN</span> ?? <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, allowedOrigin);</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Content-Type,Authorization, Content-Length, X-Requested-With&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestModule</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">configure</span>(<span class=\"params\"><span class=\"attr\">consumer</span>: <span class=\"title class_\">MiddlewareConsumer</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置中间件</span></span><br><span class=\"line\">\t\tconsumer.<span class=\"title function_\">apply</span>(<span class=\"title class_\">CorsMiddleware</span>).<span class=\"title function_\">forRoutes</span>(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Nest-中间件\"><a href=\"#Nest-中间件\" class=\"headerlink\" title=\"Nest 中间件\"></a>Nest 中间件</h1><blockquote>\n<p>中间件实在路由处理程序之前调用的函数；同时可以访问请求和响应对象，以及程序请求响应周期中的<code>next()</code>中间函数；</p>\n<p>简单理解就是：前端路由守卫，做拦截处理；</p>\n</blockquote>\n<p>常见的中间件使用方式大致为：<code>class, 函数</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>使用<code>cli</code>命令自动生成中间件模板：<code>nest g mi logger</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">NestMiddleware</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">NextFunction</span>, <span class=\"title class_\">Request</span>, <span class=\"title class_\">Response</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerMiddleware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestMiddleware</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">use</span>(<span class=\"params\"><span class=\"attr\">req</span>: <span class=\"title class_\">Request</span>, <span class=\"attr\">res</span>: <span class=\"title class_\">Response</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">NextFunction</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">baseUrl</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Request received at <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loggerMiddleware</span> = (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">req</span>: <span class=\"title class_\">Request</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">res</span>: <span class=\"title class_\">Response</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">next</span>: <span class=\"title class_\">NextFunction</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">baseUrl</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Request received at <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestModule</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">configure</span>(<span class=\"params\"><span class=\"attr\">consumer</span>: <span class=\"title class_\">MiddlewareConsumer</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// class和函数中间件</span></span><br><span class=\"line\">\t\tconsumer.<span class=\"title function_\">apply</span>(<span class=\"title class_\">LoggerMiddleware</span>, loggerMiddleware).<span class=\"title function_\">forRoutes</span>(<span class=\"string\">&quot;/a&quot;</span>, <span class=\"string\">&quot;/b&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">AppModule</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 全局中间件</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">use</span>(loggerMiddleware);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跨域案例\"><a href=\"#跨域案例\" class=\"headerlink\" title=\"跨域案例\"></a>跨域案例</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">NestMiddleware</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsMiddleware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestMiddleware</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">use</span>(<span class=\"params\"><span class=\"attr\">req</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">res</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">next</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedOrigin = process.<span class=\"property\">env</span>.<span class=\"property\">CORS_ORIGIN</span> ?? <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, allowedOrigin);</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tres.<span class=\"title function_\">setHeader</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Content-Type,Authorization, Content-Length, X-Requested-With&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestModule</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">configure</span>(<span class=\"params\"><span class=\"attr\">consumer</span>: <span class=\"title class_\">MiddlewareConsumer</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置中间件</span></span><br><span class=\"line\">\t\tconsumer.<span class=\"title function_\">apply</span>(<span class=\"title class_\">CorsMiddleware</span>).<span class=\"title function_\">forRoutes</span>(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-入手Demo","abbrlink":"89a2365c","date":"2024-11-08T01:05:01.000Z","_content":"\n简单了解一些`Nest`，结合之前我开发的一个小工具日志上报插件，做一个小应用;\n\n这个应用是什么? 有这么一个场景，我在`web`页面使用了`日志上报插件`，但是插件的`dsn`地址是没有的，这个地址需要后端的一个接口地址，那我们用`Nest`模式一下这个接口地址；\n\n接下来，实践一下：\n\n## 初始化项目\n\n首先，去[官网](https://docs.nestjs.com/)找一下安装命令\n\n```shell\nnpm i -g @nestjs/cli\nnest new project-name\n```\n\n安装成功之后，所有的代码都是`ts`编写的; 关于项目的目录结构，可以参考[官方文档](https://docs.nestjs.com/first-steps)有具体说明;\n\n我们找到入口文件：`main.ts`, 其中`bootstrap()`就是启动函数了；\n\n```ts\nasync function bootstrap() {\n\t// 这里使用的是Express, 可以使用Fastify\n\tconst app = await NestFactory.create<NestExpressApplication>(AppModule, {\n\t\t// 如果上报方式使用sendBeacon， 那么就需要对请求头设置相关参数\n\t\t// 如果上报方式使用fetch, 那么就不需要设置相关参数\n\t\trawBody: true,\n\t});\n\t// 根据请求的Content-Type来解析请求体, 如果是 sendBeacon 那么需要设置相关参数\n\tapp.useBodyParser(\"text\");\n\n\t// 设置跨域\n\tapp.enableCors({\n\t\torigin: \"*\",\n\t\tcredentials: true,\n\t\tmethods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n\t\tpreflightContinue: false,\n\t\toptionsSuccessStatus: 204,\n\t});\n\n\t// 设置前缀, 可以设置也可以不设置 这里不设置\n\t// app.setGlobalPrefix(\"/api/v1\");\n\n\tawait app.listen(3000);\n}\n\nbootstrap();\n```\n\n修改之后，执行命令`npm run start`就可以了，不过这里可以使用`npm run start:dev`,只有文件变动了服务就会重新启动；就不需要每次修改之后在重启；\n\n## 实现添加功能\n\n### 数据库\n\n添加数据肯定需要数据库哇，那我们先添加下载数据库插件，我这里使用的`Mongoose,mongodb`； 具体可查看[Nest Mongo](https://docs.nestjs.com/techniques/mongodb)\n\n关于本地如何安装`mongodb`以及如何使用，可查看基础文档[MongoDb 教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n\n```shell\nnpm i --save @nestjs/mongoose mongoose\n```\n\n然后在`app.module.ts`中添加配置\n\n```ts\nimport { MongooseModule } from '@nestjs/mongoose';\n@Module({\n  imports: [\n    // 只需要在 imports 加入这一行即可;\n    MongooseModule.forRoot('mongodb://localhost/nest'),\n  ]\n}\n```\n\n**保存之后重新启动，如果出现数据库一直尝试链接那么说明你本地没有正确安装`mongoose`服务,或者您的数据库链接可能不正确;**\n\n### 添加一个日志模块\n\n要想添加一个日志模块，你可以手动在`src`目录下添加目录为`logs`的文件夹，在文件夹下添加对应的文件；\n\n不过我不建议你手动添加，不仅麻烦，而且也不好管理；\n\n可以通过命令`nest` 去添加；想要知道命令有哪些，可以在`shell`工具中输入`nest`然后回车；\n\n然后使用命令`nest g name dirFile`;\n\n我们直接使用`nest g resource logs`, 回车选择对应的`Api模式`, 之后就会生成一个完整模块的目录了；使用命令添加还会自动在`app.modules.ts`添加对应的模块哦~\n\n创建完之后，就可以在`src`目录下找到你的文件夹或者文件了\n\n### 创建一个控制器\n\n在`logs.controller.ts`中添加一个方法，用来添加`logs`数据\n\n```ts\n// 请求的前缀：https://xxx.com/logs\n@Controller(\"logs\")\nexport class LogsController {\n\t// 这里的LogsService就是服务层文件 logs.service.ts中的类\n\tconstructor(private readonly logsService: LogsService) {}\n\t// https://xxx.com/logs/setLog\n\t@Post(\"setLog\")\n\t// createLogDto 就是前端给后端的字段\n\tcreate(@Body() createLogDto: CreateLogDto) {\n\t\treturn this.logsService.create(createLogDto);\n\t}\n}\n```\n\n接着我们添加数据库需要的字段以及数据表;\n\n### 添加数据表以及对应表结构\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\nexport type LogDocument = HydratedDocument<Log>;\n\n@Schema()\nexport class Log {\n\t@Prop()\n\tname: string;\n\t@Prop()\n\turl: string;\n\t@Prop()\n\t// 创建时间\n\tcreatedAt: Date;\n\t// 更新时间\n\tupdatedAt: Date;\n\t// ...\n}\nexport const LogSchema = SchemaFactory.createForClass(Log);\n```\n\n大概的数据表结构就定好了；\n\n我们在`logs.module.ts`引入我们创建的表\n\n```ts\n// 这个是你实际创建数据表的地址， LogSchema就是你导出的表\nimport { LogSchema } from \"./schemas/log.schema\";\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: \"Log\",\n        schema: LogSchema,\n      }\n    ])\n  ]\n}\n```\n\n### 添加服务层\n\n在`logs.service.ts`中添加一个`create`方法\n\n```ts\ninterface CreateLogDto {\n\tname: string;\n\turl: string;\n}\n\n@Injectable()\nexport class LogsService {\n\tconstructor(\n\t\t// 这里是用到了数据库 这里的 @InjectModel(\"Log\") Log要个上面的 MongooseModule.forFeature 中的name保持一致;\n\t\t//  Model<Log> 中Log就是你到处的表结构 class Log{}\n\t\t@InjectModel(\"Log\") private readonly logModel: Model<Log>\n\t) {}\n\n\t// 这个方法就是 logs.controller.ts 中使用的 this.logsService.create\n\t// CreateLogDto 这个是为了检验参数的， 也就是接口 interface 你自己可以自定义\n\tcreate(createLogDto: CreateLogDto) {\n\t\t// 这里使用 Model<Log> 的 create 方法，具体mongodb如何自行百度\n\t\treturn this.logModel.create(createLogDto);\n\t}\n}\n```\n\n## 使用\n\n可以使用`postman`或者`apipost`或者`apifox`测试； 具体工具如何使用，自行百度官网;\n\n添加一个`post`接口，接口地址就是`localhost:3000/logs/setLog`, 参数就是上面自定义的接口`interface CreateLogDto`， 然后点击发送就可以了;\n\n那么一个小应用就基本完成了;\n","source":"_posts/技能小册/Nest/入手Demo.md","raw":"---\ntitle: Nest-入手Demo\nabbrlink: 89a2365c\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n简单了解一些`Nest`，结合之前我开发的一个小工具日志上报插件，做一个小应用;\n\n这个应用是什么? 有这么一个场景，我在`web`页面使用了`日志上报插件`，但是插件的`dsn`地址是没有的，这个地址需要后端的一个接口地址，那我们用`Nest`模式一下这个接口地址；\n\n接下来，实践一下：\n\n## 初始化项目\n\n首先，去[官网](https://docs.nestjs.com/)找一下安装命令\n\n```shell\nnpm i -g @nestjs/cli\nnest new project-name\n```\n\n安装成功之后，所有的代码都是`ts`编写的; 关于项目的目录结构，可以参考[官方文档](https://docs.nestjs.com/first-steps)有具体说明;\n\n我们找到入口文件：`main.ts`, 其中`bootstrap()`就是启动函数了；\n\n```ts\nasync function bootstrap() {\n\t// 这里使用的是Express, 可以使用Fastify\n\tconst app = await NestFactory.create<NestExpressApplication>(AppModule, {\n\t\t// 如果上报方式使用sendBeacon， 那么就需要对请求头设置相关参数\n\t\t// 如果上报方式使用fetch, 那么就不需要设置相关参数\n\t\trawBody: true,\n\t});\n\t// 根据请求的Content-Type来解析请求体, 如果是 sendBeacon 那么需要设置相关参数\n\tapp.useBodyParser(\"text\");\n\n\t// 设置跨域\n\tapp.enableCors({\n\t\torigin: \"*\",\n\t\tcredentials: true,\n\t\tmethods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n\t\tpreflightContinue: false,\n\t\toptionsSuccessStatus: 204,\n\t});\n\n\t// 设置前缀, 可以设置也可以不设置 这里不设置\n\t// app.setGlobalPrefix(\"/api/v1\");\n\n\tawait app.listen(3000);\n}\n\nbootstrap();\n```\n\n修改之后，执行命令`npm run start`就可以了，不过这里可以使用`npm run start:dev`,只有文件变动了服务就会重新启动；就不需要每次修改之后在重启；\n\n## 实现添加功能\n\n### 数据库\n\n添加数据肯定需要数据库哇，那我们先添加下载数据库插件，我这里使用的`Mongoose,mongodb`； 具体可查看[Nest Mongo](https://docs.nestjs.com/techniques/mongodb)\n\n关于本地如何安装`mongodb`以及如何使用，可查看基础文档[MongoDb 教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n\n```shell\nnpm i --save @nestjs/mongoose mongoose\n```\n\n然后在`app.module.ts`中添加配置\n\n```ts\nimport { MongooseModule } from '@nestjs/mongoose';\n@Module({\n  imports: [\n    // 只需要在 imports 加入这一行即可;\n    MongooseModule.forRoot('mongodb://localhost/nest'),\n  ]\n}\n```\n\n**保存之后重新启动，如果出现数据库一直尝试链接那么说明你本地没有正确安装`mongoose`服务,或者您的数据库链接可能不正确;**\n\n### 添加一个日志模块\n\n要想添加一个日志模块，你可以手动在`src`目录下添加目录为`logs`的文件夹，在文件夹下添加对应的文件；\n\n不过我不建议你手动添加，不仅麻烦，而且也不好管理；\n\n可以通过命令`nest` 去添加；想要知道命令有哪些，可以在`shell`工具中输入`nest`然后回车；\n\n然后使用命令`nest g name dirFile`;\n\n我们直接使用`nest g resource logs`, 回车选择对应的`Api模式`, 之后就会生成一个完整模块的目录了；使用命令添加还会自动在`app.modules.ts`添加对应的模块哦~\n\n创建完之后，就可以在`src`目录下找到你的文件夹或者文件了\n\n### 创建一个控制器\n\n在`logs.controller.ts`中添加一个方法，用来添加`logs`数据\n\n```ts\n// 请求的前缀：https://xxx.com/logs\n@Controller(\"logs\")\nexport class LogsController {\n\t// 这里的LogsService就是服务层文件 logs.service.ts中的类\n\tconstructor(private readonly logsService: LogsService) {}\n\t// https://xxx.com/logs/setLog\n\t@Post(\"setLog\")\n\t// createLogDto 就是前端给后端的字段\n\tcreate(@Body() createLogDto: CreateLogDto) {\n\t\treturn this.logsService.create(createLogDto);\n\t}\n}\n```\n\n接着我们添加数据库需要的字段以及数据表;\n\n### 添加数据表以及对应表结构\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { HydratedDocument } from \"mongoose\";\n\nexport type LogDocument = HydratedDocument<Log>;\n\n@Schema()\nexport class Log {\n\t@Prop()\n\tname: string;\n\t@Prop()\n\turl: string;\n\t@Prop()\n\t// 创建时间\n\tcreatedAt: Date;\n\t// 更新时间\n\tupdatedAt: Date;\n\t// ...\n}\nexport const LogSchema = SchemaFactory.createForClass(Log);\n```\n\n大概的数据表结构就定好了；\n\n我们在`logs.module.ts`引入我们创建的表\n\n```ts\n// 这个是你实际创建数据表的地址， LogSchema就是你导出的表\nimport { LogSchema } from \"./schemas/log.schema\";\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: \"Log\",\n        schema: LogSchema,\n      }\n    ])\n  ]\n}\n```\n\n### 添加服务层\n\n在`logs.service.ts`中添加一个`create`方法\n\n```ts\ninterface CreateLogDto {\n\tname: string;\n\turl: string;\n}\n\n@Injectable()\nexport class LogsService {\n\tconstructor(\n\t\t// 这里是用到了数据库 这里的 @InjectModel(\"Log\") Log要个上面的 MongooseModule.forFeature 中的name保持一致;\n\t\t//  Model<Log> 中Log就是你到处的表结构 class Log{}\n\t\t@InjectModel(\"Log\") private readonly logModel: Model<Log>\n\t) {}\n\n\t// 这个方法就是 logs.controller.ts 中使用的 this.logsService.create\n\t// CreateLogDto 这个是为了检验参数的， 也就是接口 interface 你自己可以自定义\n\tcreate(createLogDto: CreateLogDto) {\n\t\t// 这里使用 Model<Log> 的 create 方法，具体mongodb如何自行百度\n\t\treturn this.logModel.create(createLogDto);\n\t}\n}\n```\n\n## 使用\n\n可以使用`postman`或者`apipost`或者`apifox`测试； 具体工具如何使用，自行百度官网;\n\n添加一个`post`接口，接口地址就是`localhost:3000/logs/setLog`, 参数就是上面自定义的接口`interface CreateLogDto`， 然后点击发送就可以了;\n\n那么一个小应用就基本完成了;\n","slug":"技能小册/Nest/入手Demo","published":1,"updated":"2025-03-13T06:58:51.114Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iy0032fg9mao6ifol9","content":"<p>简单了解一些<code>Nest</code>，结合之前我开发的一个小工具日志上报插件，做一个小应用;</p>\n<p>这个应用是什么? 有这么一个场景，我在<code>web</code>页面使用了<code>日志上报插件</code>，但是插件的<code>dsn</code>地址是没有的，这个地址需要后端的一个接口地址，那我们用<code>Nest</code>模式一下这个接口地址；</p>\n<p>接下来，实践一下：</p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>首先，去<a href=\"https://docs.nestjs.com/\">官网</a>找一下安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @nestjs/cli</span><br><span class=\"line\">nest new project-name</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，所有的代码都是<code>ts</code>编写的; 关于项目的目录结构，可以参考<a href=\"https://docs.nestjs.com/first-steps\">官方文档</a>有具体说明;</p>\n<p>我们找到入口文件：<code>main.ts</code>, 其中<code>bootstrap()</code>就是启动函数了；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里使用的是Express, 可以使用Fastify</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"property\">create</span>&lt;<span class=\"title class_\">NestExpressApplication</span>&gt;(<span class=\"title class_\">AppModule</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果上报方式使用sendBeacon， 那么就需要对请求头设置相关参数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果上报方式使用fetch, 那么就不需要设置相关参数</span></span><br><span class=\"line\">\t\t<span class=\"attr\">rawBody</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 根据请求的Content-Type来解析请求体, 如果是 sendBeacon 那么需要设置相关参数</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">useBodyParser</span>(<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置跨域</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">enableCors</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">origin</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">credentials</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">methods</span>: <span class=\"string\">&quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">preflightContinue</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">optionsSuccessStatus</span>: <span class=\"number\">204</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置前缀, 可以设置也可以不设置 这里不设置</span></span><br><span class=\"line\">\t<span class=\"comment\">// app.setGlobalPrefix(&quot;/api/v1&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bootstrap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>修改之后，执行命令<code>npm run start</code>就可以了，不过这里可以使用<code>npm run start:dev</code>,只有文件变动了服务就会重新启动；就不需要每次修改之后在重启；</p>\n<h2 id=\"实现添加功能\"><a href=\"#实现添加功能\" class=\"headerlink\" title=\"实现添加功能\"></a>实现添加功能</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>添加数据肯定需要数据库哇，那我们先添加下载数据库插件，我这里使用的<code>Mongoose,mongodb</code>； 具体可查看<a href=\"https://docs.nestjs.com/techniques/mongodb\">Nest Mongo</a></p>\n<p>关于本地如何安装<code>mongodb</code>以及如何使用，可查看基础文档<a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">MongoDb 教程</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>app.module.ts</code>中添加配置</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 只需要在 imports 加入这一行即可;</span></span><br><span class=\"line\">    <span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forRoot</span>(<span class=\"string\">&#x27;mongodb://localhost/nest&#x27;</span>),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存之后重新启动，如果出现数据库一直尝试链接那么说明你本地没有正确安装<code>mongoose</code>服务,或者您的数据库链接可能不正确;</strong></p>\n<h3 id=\"添加一个日志模块\"><a href=\"#添加一个日志模块\" class=\"headerlink\" title=\"添加一个日志模块\"></a>添加一个日志模块</h3><p>要想添加一个日志模块，你可以手动在<code>src</code>目录下添加目录为<code>logs</code>的文件夹，在文件夹下添加对应的文件；</p>\n<p>不过我不建议你手动添加，不仅麻烦，而且也不好管理；</p>\n<p>可以通过命令<code>nest</code> 去添加；想要知道命令有哪些，可以在<code>shell</code>工具中输入<code>nest</code>然后回车；</p>\n<p>然后使用命令<code>nest g name dirFile</code>;</p>\n<p>我们直接使用<code>nest g resource logs</code>, 回车选择对应的<code>Api模式</code>, 之后就会生成一个完整模块的目录了；使用命令添加还会自动在<code>app.modules.ts</code>添加对应的模块哦~</p>\n<p>创建完之后，就可以在<code>src</code>目录下找到你的文件夹或者文件了</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>在<code>logs.controller.ts</code>中添加一个方法，用来添加<code>logs</code>数据</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 请求的前缀：https://xxx.com/logs</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogsController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的LogsService就是服务层文件 logs.service.ts中的类</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logsService</span>: <span class=\"title class_\">LogsService</span></span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// https://xxx.com/logs/setLog</span></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;setLog&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// createLogDto 就是前端给后端的字段</span></span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">createLogDto</span>: <span class=\"title class_\">CreateLogDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logsService</span>.<span class=\"title function_\">create</span>(createLogDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着我们添加数据库需要的字段以及数据表;</p>\n<h3 id=\"添加数据表以及对应表结构\"><a href=\"#添加数据表以及对应表结构\" class=\"headerlink\" title=\"添加数据表以及对应表结构\"></a>添加数据表以及对应表结构</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HydratedDocument</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;mongoose&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">LogDocument</span> = <span class=\"title class_\">HydratedDocument</span>&lt;<span class=\"title class_\">Log</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Log</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建时间</span></span><br><span class=\"line\">\t<span class=\"attr\">createdAt</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 更新时间</span></span><br><span class=\"line\">\t<span class=\"attr\">updatedAt</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LogSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Log</span>);</span><br></pre></td></tr></table></figure>\n\n<p>大概的数据表结构就定好了；</p>\n<p>我们在<code>logs.module.ts</code>引入我们创建的表</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个是你实际创建数据表的地址， LogSchema就是你导出的表</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogSchema</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/log.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forFeature</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Log&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">schema</span>: <span class=\"title class_\">LogSchema</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加服务层\"><a href=\"#添加服务层\" class=\"headerlink\" title=\"添加服务层\"></a>添加服务层</h3><p>在<code>logs.service.ts</code>中添加一个<code>create</code>方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateLogDto</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogsService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"comment\">// 这里是用到了数据库 这里的 @InjectModel(&quot;Log&quot;) Log要个上面的 MongooseModule.forFeature 中的name保持一致;</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"comment\">//  Model&lt;Log&gt; 中Log就是你到处的表结构 class Log&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectModel</span>(<span class=\"string\">&quot;Log&quot;</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logModel</span>: <span class=\"title class_\">Model</span>&lt;<span class=\"title class_\">Log</span>&gt;</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这个方法就是 logs.controller.ts 中使用的 this.logsService.create</span></span><br><span class=\"line\">\t<span class=\"comment\">// CreateLogDto 这个是为了检验参数的， 也就是接口 interface 你自己可以自定义</span></span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"attr\">createLogDto</span>: <span class=\"title class_\">CreateLogDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里使用 Model&lt;Log&gt; 的 create 方法，具体mongodb如何自行百度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logModel</span>.<span class=\"title function_\">create</span>(createLogDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>可以使用<code>postman</code>或者<code>apipost</code>或者<code>apifox</code>测试； 具体工具如何使用，自行百度官网;</p>\n<p>添加一个<code>post</code>接口，接口地址就是<code>localhost:3000/logs/setLog</code>, 参数就是上面自定义的接口<code>interface CreateLogDto</code>， 然后点击发送就可以了;</p>\n<p>那么一个小应用就基本完成了;</p>\n","excerpt":"","more":"<p>简单了解一些<code>Nest</code>，结合之前我开发的一个小工具日志上报插件，做一个小应用;</p>\n<p>这个应用是什么? 有这么一个场景，我在<code>web</code>页面使用了<code>日志上报插件</code>，但是插件的<code>dsn</code>地址是没有的，这个地址需要后端的一个接口地址，那我们用<code>Nest</code>模式一下这个接口地址；</p>\n<p>接下来，实践一下：</p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>首先，去<a href=\"https://docs.nestjs.com/\">官网</a>找一下安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @nestjs/cli</span><br><span class=\"line\">nest new project-name</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，所有的代码都是<code>ts</code>编写的; 关于项目的目录结构，可以参考<a href=\"https://docs.nestjs.com/first-steps\">官方文档</a>有具体说明;</p>\n<p>我们找到入口文件：<code>main.ts</code>, 其中<code>bootstrap()</code>就是启动函数了；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bootstrap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里使用的是Express, 可以使用Fastify</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> app = <span class=\"keyword\">await</span> <span class=\"title class_\">NestFactory</span>.<span class=\"property\">create</span>&lt;<span class=\"title class_\">NestExpressApplication</span>&gt;(<span class=\"title class_\">AppModule</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果上报方式使用sendBeacon， 那么就需要对请求头设置相关参数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果上报方式使用fetch, 那么就不需要设置相关参数</span></span><br><span class=\"line\">\t\t<span class=\"attr\">rawBody</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 根据请求的Content-Type来解析请求体, 如果是 sendBeacon 那么需要设置相关参数</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">useBodyParser</span>(<span class=\"string\">&quot;text&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置跨域</span></span><br><span class=\"line\">\tapp.<span class=\"title function_\">enableCors</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">origin</span>: <span class=\"string\">&quot;*&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">credentials</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">methods</span>: <span class=\"string\">&quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">preflightContinue</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">optionsSuccessStatus</span>: <span class=\"number\">204</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置前缀, 可以设置也可以不设置 这里不设置</span></span><br><span class=\"line\">\t<span class=\"comment\">// app.setGlobalPrefix(&quot;/api/v1&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bootstrap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>修改之后，执行命令<code>npm run start</code>就可以了，不过这里可以使用<code>npm run start:dev</code>,只有文件变动了服务就会重新启动；就不需要每次修改之后在重启；</p>\n<h2 id=\"实现添加功能\"><a href=\"#实现添加功能\" class=\"headerlink\" title=\"实现添加功能\"></a>实现添加功能</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>添加数据肯定需要数据库哇，那我们先添加下载数据库插件，我这里使用的<code>Mongoose,mongodb</code>； 具体可查看<a href=\"https://docs.nestjs.com/techniques/mongodb\">Nest Mongo</a></p>\n<p>关于本地如何安装<code>mongodb</code>以及如何使用，可查看基础文档<a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">MongoDb 教程</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>app.module.ts</code>中添加配置</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 只需要在 imports 加入这一行即可;</span></span><br><span class=\"line\">    <span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forRoot</span>(<span class=\"string\">&#x27;mongodb://localhost/nest&#x27;</span>),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存之后重新启动，如果出现数据库一直尝试链接那么说明你本地没有正确安装<code>mongoose</code>服务,或者您的数据库链接可能不正确;</strong></p>\n<h3 id=\"添加一个日志模块\"><a href=\"#添加一个日志模块\" class=\"headerlink\" title=\"添加一个日志模块\"></a>添加一个日志模块</h3><p>要想添加一个日志模块，你可以手动在<code>src</code>目录下添加目录为<code>logs</code>的文件夹，在文件夹下添加对应的文件；</p>\n<p>不过我不建议你手动添加，不仅麻烦，而且也不好管理；</p>\n<p>可以通过命令<code>nest</code> 去添加；想要知道命令有哪些，可以在<code>shell</code>工具中输入<code>nest</code>然后回车；</p>\n<p>然后使用命令<code>nest g name dirFile</code>;</p>\n<p>我们直接使用<code>nest g resource logs</code>, 回车选择对应的<code>Api模式</code>, 之后就会生成一个完整模块的目录了；使用命令添加还会自动在<code>app.modules.ts</code>添加对应的模块哦~</p>\n<p>创建完之后，就可以在<code>src</code>目录下找到你的文件夹或者文件了</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>在<code>logs.controller.ts</code>中添加一个方法，用来添加<code>logs</code>数据</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 请求的前缀：https://xxx.com/logs</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&quot;logs&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogsController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里的LogsService就是服务层文件 logs.service.ts中的类</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logsService</span>: <span class=\"title class_\">LogsService</span></span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// https://xxx.com/logs/setLog</span></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;setLog&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// createLogDto 就是前端给后端的字段</span></span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">createLogDto</span>: <span class=\"title class_\">CreateLogDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logsService</span>.<span class=\"title function_\">create</span>(createLogDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着我们添加数据库需要的字段以及数据表;</p>\n<h3 id=\"添加数据表以及对应表结构\"><a href=\"#添加数据表以及对应表结构\" class=\"headerlink\" title=\"添加数据表以及对应表结构\"></a>添加数据表以及对应表结构</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HydratedDocument</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;mongoose&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">LogDocument</span> = <span class=\"title class_\">HydratedDocument</span>&lt;<span class=\"title class_\">Log</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Log</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"comment\">// 创建时间</span></span><br><span class=\"line\">\t<span class=\"attr\">createdAt</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 更新时间</span></span><br><span class=\"line\">\t<span class=\"attr\">updatedAt</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LogSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Log</span>);</span><br></pre></td></tr></table></figure>\n\n<p>大概的数据表结构就定好了；</p>\n<p>我们在<code>logs.module.ts</code>引入我们创建的表</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个是你实际创建数据表的地址， LogSchema就是你导出的表</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogSchema</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/log.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forFeature</span>([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;Log&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">schema</span>: <span class=\"title class_\">LogSchema</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加服务层\"><a href=\"#添加服务层\" class=\"headerlink\" title=\"添加服务层\"></a>添加服务层</h3><p>在<code>logs.service.ts</code>中添加一个<code>create</code>方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateLogDto</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogsService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"comment\">// 这里是用到了数据库 这里的 @InjectModel(&quot;Log&quot;) Log要个上面的 MongooseModule.forFeature 中的name保持一致;</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"comment\">//  Model&lt;Log&gt; 中Log就是你到处的表结构 class Log&#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectModel</span>(<span class=\"string\">&quot;Log&quot;</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logModel</span>: <span class=\"title class_\">Model</span>&lt;<span class=\"title class_\">Log</span>&gt;</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这个方法就是 logs.controller.ts 中使用的 this.logsService.create</span></span><br><span class=\"line\">\t<span class=\"comment\">// CreateLogDto 这个是为了检验参数的， 也就是接口 interface 你自己可以自定义</span></span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"attr\">createLogDto</span>: <span class=\"title class_\">CreateLogDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里使用 Model&lt;Log&gt; 的 create 方法，具体mongodb如何自行百度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logModel</span>.<span class=\"title function_\">create</span>(createLogDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>可以使用<code>postman</code>或者<code>apipost</code>或者<code>apifox</code>测试； 具体工具如何使用，自行百度官网;</p>\n<p>添加一个<code>post</code>接口，接口地址就是<code>localhost:3000/logs/setLog</code>, 参数就是上面自定义的接口<code>interface CreateLogDto</code>， 然后点击发送就可以了;</p>\n<p>那么一个小应用就基本完成了;</p>\n"},{"title":"Nest-其他配置","abbrlink":"d5350a55","date":"2024-11-08T01:05:01.000Z","_content":"\n当然还有很多`nest`的配置，队列，任务调度，缓存，验证等，这里只介绍最常用的。\n\n## 验证\n\n[文档](https://docs.nestjs.com/techniques/validation#using-the-built-in-validationpipe)\n\n**举个例子来说，后端添加用户功能，肯定有很多字段是必填的，那不能每个字段都去校验吧，那么这一功能的判断就很多很多了，并且后面维护起来相当麻烦， 为了解决这一麻烦那么刚好可以使用内置的校验**\n\n```sh\npnpm add  class-validator class-transformer\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\nimport { Module, ValidationPipe } from '@nestjs/common';\n@Module({\n  providers: [\n    provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        transform: true, // 自动将请求体转换为 DTO 类型\n        whitelist: true, // 忽略未定义的属性\n        forbidNonWhitelisted: true, // 禁止未知字段\n      }),\n  ],\n})\n```\n\n### 使用\n\n```ts\nimport { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class CreateUserDto {\n\t@IsEmail()\n\temail: string;\n\n\t@IsNotEmpty({ message: \"密码不能为空\" })\n\tpassword: string;\n}\n```\n\n```ts\nimport { Body } from \"@nestjs/common\";\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Post(\"/create\")\n\tcreate(@Body() user: CreateUserDto) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n这样就避免了大量的判断了；\n\n## 速率限制\n\n[文档](https://nest.nodejs.cn/security/rate-limiting)\n\n保护应用免受暴力攻击的常用技术是限速。首先，你需要安装 @nestjs/throttler 包。\n\n### 安装\n\n```sh\npnpm add @nestjs/throttler\n```\n\n### 使用\n\n安装完成后，可以使用 `forRoot` 或 `forRootAsync` 方法将 `ThrottlerModule` 配置为任何其他 `Nest` 包。\n\n```ts\n@Module({\n\timports: [\n\t\tThrottlerModule.forRoot([\n\t\t\t{\n\t\t\t\tttl: 60000,\n\t\t\t\tlimit: 10,\n\t\t\t},\n\t\t]),\n\t],\n})\nexport class AppModule {}\n```\n\n## 任务调度\n\n[文档](https://nest.nodejs.cn/techniques/task-scheduling)\n\n> 任务调度允许你安排任意代码（方法/函数）在固定日期/时间、重复间隔或在指定间隔后执行一次\n\n### 安装\n\n```ts\npnpm add @nestjs/schedule\n```\n\n### 使用\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\n\n@Module({\n\timports: [ScheduleModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n### 定时任务\n\n```ts\nimport { Injectable, Logger } from \"@nestjs/common\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class TasksService {\n\tprivate readonly logger = new Logger(TasksService.name);\n\n\t@Cron(\"45 * * * * *\")\n\thandleCron() {\n\t\tthis.logger.debug(\"Called when the current second is 45\");\n\t}\n}\n```\n","source":"_posts/技能小册/Nest/其他配置.md","raw":"---\ntitle: Nest-其他配置\nabbrlink: d5350a55\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n当然还有很多`nest`的配置，队列，任务调度，缓存，验证等，这里只介绍最常用的。\n\n## 验证\n\n[文档](https://docs.nestjs.com/techniques/validation#using-the-built-in-validationpipe)\n\n**举个例子来说，后端添加用户功能，肯定有很多字段是必填的，那不能每个字段都去校验吧，那么这一功能的判断就很多很多了，并且后面维护起来相当麻烦， 为了解决这一麻烦那么刚好可以使用内置的校验**\n\n```sh\npnpm add  class-validator class-transformer\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\nimport { Module, ValidationPipe } from '@nestjs/common';\n@Module({\n  providers: [\n    provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        transform: true, // 自动将请求体转换为 DTO 类型\n        whitelist: true, // 忽略未定义的属性\n        forbidNonWhitelisted: true, // 禁止未知字段\n      }),\n  ],\n})\n```\n\n### 使用\n\n```ts\nimport { IsEmail, IsNotEmpty } from \"class-validator\";\n\nexport class CreateUserDto {\n\t@IsEmail()\n\temail: string;\n\n\t@IsNotEmpty({ message: \"密码不能为空\" })\n\tpassword: string;\n}\n```\n\n```ts\nimport { Body } from \"@nestjs/common\";\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Post(\"/create\")\n\tcreate(@Body() user: CreateUserDto) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n这样就避免了大量的判断了；\n\n## 速率限制\n\n[文档](https://nest.nodejs.cn/security/rate-limiting)\n\n保护应用免受暴力攻击的常用技术是限速。首先，你需要安装 @nestjs/throttler 包。\n\n### 安装\n\n```sh\npnpm add @nestjs/throttler\n```\n\n### 使用\n\n安装完成后，可以使用 `forRoot` 或 `forRootAsync` 方法将 `ThrottlerModule` 配置为任何其他 `Nest` 包。\n\n```ts\n@Module({\n\timports: [\n\t\tThrottlerModule.forRoot([\n\t\t\t{\n\t\t\t\tttl: 60000,\n\t\t\t\tlimit: 10,\n\t\t\t},\n\t\t]),\n\t],\n})\nexport class AppModule {}\n```\n\n## 任务调度\n\n[文档](https://nest.nodejs.cn/techniques/task-scheduling)\n\n> 任务调度允许你安排任意代码（方法/函数）在固定日期/时间、重复间隔或在指定间隔后执行一次\n\n### 安装\n\n```ts\npnpm add @nestjs/schedule\n```\n\n### 使用\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\n\n@Module({\n\timports: [ScheduleModule.forRoot()],\n})\nexport class AppModule {}\n```\n\n### 定时任务\n\n```ts\nimport { Injectable, Logger } from \"@nestjs/common\";\nimport { Cron } from \"@nestjs/schedule\";\n\n@Injectable()\nexport class TasksService {\n\tprivate readonly logger = new Logger(TasksService.name);\n\n\t@Cron(\"45 * * * * *\")\n\thandleCron() {\n\t\tthis.logger.debug(\"Called when the current second is 45\");\n\t}\n}\n```\n","slug":"技能小册/Nest/其他配置","published":1,"updated":"2025-03-12T09:44:37.826Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iy0036fg9m1rgz3cgn","content":"<p>当然还有很多<code>nest</code>的配置，队列，任务调度，缓存，验证等，这里只介绍最常用的。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p><a href=\"https://docs.nestjs.com/techniques/validation#using-the-built-in-validationpipe\">文档</a></p>\n<p><strong>举个例子来说，后端添加用户功能，肯定有很多字段是必填的，那不能每个字段都去校验吧，那么这一功能的判断就很多很多了，并且后面维护起来相当麻烦， 为了解决这一麻烦那么刚好可以使用内置的校验</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add  class-validator class-transformer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">ValidationPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_PIPE</span>,</span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">ValidationPipe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">transform</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将请求体转换为 DTO 类型</span></span><br><span class=\"line\">        <span class=\"attr\">whitelist</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 忽略未定义的属性</span></span><br><span class=\"line\">        <span class=\"attr\">forbidNonWhitelisted</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止未知字段</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IsEmail</span>, <span class=\"title class_\">IsNotEmpty</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;class-validator&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateUserDto</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@IsEmail</span>()</span><br><span class=\"line\">\t<span class=\"attr\">email</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@IsNotEmpty</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&quot;密码不能为空&quot;</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">password</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Body</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">appService</span>: <span class=\"title class_\">AppService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;/create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">user</span>: <span class=\"title class_\">CreateUserDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就避免了大量的判断了；</p>\n<h2 id=\"速率限制\"><a href=\"#速率限制\" class=\"headerlink\" title=\"速率限制\"></a>速率限制</h2><p><a href=\"https://nest.nodejs.cn/security/rate-limiting\">文档</a></p>\n<p>保护应用免受暴力攻击的常用技术是限速。首先，你需要安装 @nestjs&#x2F;throttler 包。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs/throttler</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>安装完成后，可以使用 <code>forRoot</code> 或 <code>forRootAsync</code> 方法将 <code>ThrottlerModule</code> 配置为任何其他 <code>Nest</code> 包。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [</span><br><span class=\"line\">\t\t<span class=\"title class_\">ThrottlerModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">ttl</span>: <span class=\"number\">60000</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">limit</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t]),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><p><a href=\"https://nest.nodejs.cn/techniques/task-scheduling\">文档</a></p>\n<blockquote>\n<p>任务调度允许你安排任意代码（方法&#x2F;函数）在固定日期&#x2F;时间、重复间隔或在指定间隔后执行一次</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add <span class=\"meta\">@nestjs</span>/schedule</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ScheduleModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/schedule&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [<span class=\"title class_\">ScheduleModule</span>.<span class=\"title function_\">forRoot</span>()],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">Logger</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Cron</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/schedule&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TasksService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> logger = <span class=\"keyword\">new</span> <span class=\"title class_\">Logger</span>(<span class=\"title class_\">TasksService</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Cron</span>(<span class=\"string\">&quot;45 * * * * *&quot;</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">handleCron</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">logger</span>.<span class=\"title function_\">debug</span>(<span class=\"string\">&quot;Called when the current second is 45&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>当然还有很多<code>nest</code>的配置，队列，任务调度，缓存，验证等，这里只介绍最常用的。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p><a href=\"https://docs.nestjs.com/techniques/validation#using-the-built-in-validationpipe\">文档</a></p>\n<p><strong>举个例子来说，后端添加用户功能，肯定有很多字段是必填的，那不能每个字段都去校验吧，那么这一功能的判断就很多很多了，并且后面维护起来相当麻烦， 为了解决这一麻烦那么刚好可以使用内置的校验</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add  class-validator class-transformer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">ValidationPipe</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_PIPE</span>,</span><br><span class=\"line\">      <span class=\"attr\">useValue</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">ValidationPipe</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">transform</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动将请求体转换为 DTO 类型</span></span><br><span class=\"line\">        <span class=\"attr\">whitelist</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 忽略未定义的属性</span></span><br><span class=\"line\">        <span class=\"attr\">forbidNonWhitelisted</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 禁止未知字段</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">IsEmail</span>, <span class=\"title class_\">IsNotEmpty</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;class-validator&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateUserDto</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@IsEmail</span>()</span><br><span class=\"line\">\t<span class=\"attr\">email</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@IsNotEmpty</span>(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&quot;密码不能为空&quot;</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">password</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Body</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">appService</span>: <span class=\"title class_\">AppService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;/create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">user</span>: <span class=\"title class_\">CreateUserDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就避免了大量的判断了；</p>\n<h2 id=\"速率限制\"><a href=\"#速率限制\" class=\"headerlink\" title=\"速率限制\"></a>速率限制</h2><p><a href=\"https://nest.nodejs.cn/security/rate-limiting\">文档</a></p>\n<p>保护应用免受暴力攻击的常用技术是限速。首先，你需要安装 @nestjs&#x2F;throttler 包。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs/throttler</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>安装完成后，可以使用 <code>forRoot</code> 或 <code>forRootAsync</code> 方法将 <code>ThrottlerModule</code> 配置为任何其他 <code>Nest</code> 包。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [</span><br><span class=\"line\">\t\t<span class=\"title class_\">ThrottlerModule</span>.<span class=\"title function_\">forRoot</span>([</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">ttl</span>: <span class=\"number\">60000</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">limit</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t]),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><p><a href=\"https://nest.nodejs.cn/techniques/task-scheduling\">文档</a></p>\n<blockquote>\n<p>任务调度允许你安排任意代码（方法&#x2F;函数）在固定日期&#x2F;时间、重复间隔或在指定间隔后执行一次</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add <span class=\"meta\">@nestjs</span>/schedule</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ScheduleModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/schedule&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [<span class=\"title class_\">ScheduleModule</span>.<span class=\"title function_\">forRoot</span>()],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span>, <span class=\"title class_\">Logger</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Cron</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/schedule&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TasksService</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> logger = <span class=\"keyword\">new</span> <span class=\"title class_\">Logger</span>(<span class=\"title class_\">TasksService</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Cron</span>(<span class=\"string\">&quot;45 * * * * *&quot;</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">handleCron</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">logger</span>.<span class=\"title function_\">debug</span>(<span class=\"string\">&quot;Called when the current second is 45&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-初识 Nest","abbrlink":"7dbeaed2","date":"2024-11-08T01:05:01.000Z","_content":"\n`Nest`是什么？`Nest`是一个用于构建高效且可伸缩的服务端应用程序的框架。明明都已经有了`node`为什么还要搞其他的呢？\n\n起初`Node`是作为服务端应用的，最熟悉的一个项目就是`Node社区`，它的源码就是用的`Node + mongodb`，可以说`Node`就是`Node社区`的灵魂。\n\n`Node社区`也是在`node`上昙花一现，也是把`Node`发挥到了最大的极致；\n\n但是说了这么多，为什么要和`Nest`联系到一起呢？\n\n1. 首先，`Nest`是在`Node, Express`基础上扩展的，功能要比原有的丰富的很多；\n2. `Nest`作为前端中的后端，但是语法上面肯定要类似于纯后端，值得一提的是`Nest`是`ts`开发的，那么在定义接口参数的时候，`Nest`提供了`DTO`的概念，`DTO`是`Data Transfer Object`的缩写，翻译过来就是数据传输对象；\n3. `Nest`在使用数据库的时候，`Nest`提供了`TypeORM`的概念，`TypeORM`是`TypeScript`的`ORM`框架，`TypeORM`是`Node`中非常流行的`ORM`框架，`Nest`使用`TypeORM`作为默认的`ORM`框架，`Nest`提供了`TypeORM`的封装，使得`Nest`的`ORM`操作更加简单；\n4. `Nest`是为了构建高效可扩展的 Nodejs 服务端的应用框架，内置完全支持 ts；\n5. `Nest` 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。\n\n既然选择`Nest`作为服务端的开发语言，那么就要简单的学习其基础知识；好在之前接触过`Node`开发经验，那上手实践就可以了；\n\n关于如何创建项目，命令行就在这里不介绍了；像前端的命令行基本都是一致的；\n\n项目文件的介绍在官网查阅； [Nest](https://nestjs.com/)\n\n## 入口文件以及项目启动\n\n有一个项目入口文件，main.ts；通过内置命令创建一个端口 3000 的服务，而引入的 module 文件指向对于项目文件的 module 文件；如下代码\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController, UserController } from \"./app.controller\";\n// 这里是我自定义写了一个简单的控制器\nimport { UserService } from \"./app.user\";\nimport { AppService } from \"./app.service\";\n\n@Module({\n\timports: [],\n\t// 引入controller控制器\n\tcontrollers: [AppController, UserController],\n\t// 引入指向controller控制器的方法\n\tproviders: [AppService, UserService],\n})\n// 导出 方便在main.js 调用\nexport class AppModule {}\n```\n\n上面代码中引入的模块是以数组的形式存在的，可以引入不同的控制器；\n\n当然我们在新建一个新的控制器，目的是为了查询数据库里的用户信息；\n\n```ts\n// app.controller.ts\n@Controller(\"user\")\nexport class UserController {\n\t// 指向的UserService类\n\tconstructor(private readonly userService: UserService) {}\n\n\t@Get(\"findOne\")\n\t// 这个接口需要接受的参数\n\tfindUser(@Query() query: any) {\n\t\treturn this.userService.findAll(query.id);\n\t}\n}\n\n// app.user.ts\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UserService {\n\t// 接受id\n\tfindAll(sid: string): string {\n\t\tconsole.log(sid);\n\t\tif (sid === \"123456\") {\n\t\t\treturn \"123456\";\n\t\t}\n\n\t\treturn \"not 123456\";\n\t}\n}\n```\n\n简单介绍一下， 后期等用到真正开发的时候具体说明； 仅仅做一个文档记录看法；\n\n之后的文章，我将会总结一些`Nest`的概念，以及一些`Nest`的实践；\n\n- `Nest`过滤器，将一些错误拦截统一返回结果\n- `Nest`管道，将一些参数拦截统一返回结果, 统一处理参数;\n- `数据库参数`拦截，摒弃之前传统的`if`判断；\n- 登录，权限拦截\n","source":"_posts/技能小册/Nest/初识.md","raw":"---\ntitle: Nest-初识 Nest\nabbrlink: 7dbeaed2\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n`Nest`是什么？`Nest`是一个用于构建高效且可伸缩的服务端应用程序的框架。明明都已经有了`node`为什么还要搞其他的呢？\n\n起初`Node`是作为服务端应用的，最熟悉的一个项目就是`Node社区`，它的源码就是用的`Node + mongodb`，可以说`Node`就是`Node社区`的灵魂。\n\n`Node社区`也是在`node`上昙花一现，也是把`Node`发挥到了最大的极致；\n\n但是说了这么多，为什么要和`Nest`联系到一起呢？\n\n1. 首先，`Nest`是在`Node, Express`基础上扩展的，功能要比原有的丰富的很多；\n2. `Nest`作为前端中的后端，但是语法上面肯定要类似于纯后端，值得一提的是`Nest`是`ts`开发的，那么在定义接口参数的时候，`Nest`提供了`DTO`的概念，`DTO`是`Data Transfer Object`的缩写，翻译过来就是数据传输对象；\n3. `Nest`在使用数据库的时候，`Nest`提供了`TypeORM`的概念，`TypeORM`是`TypeScript`的`ORM`框架，`TypeORM`是`Node`中非常流行的`ORM`框架，`Nest`使用`TypeORM`作为默认的`ORM`框架，`Nest`提供了`TypeORM`的封装，使得`Nest`的`ORM`操作更加简单；\n4. `Nest`是为了构建高效可扩展的 Nodejs 服务端的应用框架，内置完全支持 ts；\n5. `Nest` 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。\n\n既然选择`Nest`作为服务端的开发语言，那么就要简单的学习其基础知识；好在之前接触过`Node`开发经验，那上手实践就可以了；\n\n关于如何创建项目，命令行就在这里不介绍了；像前端的命令行基本都是一致的；\n\n项目文件的介绍在官网查阅； [Nest](https://nestjs.com/)\n\n## 入口文件以及项目启动\n\n有一个项目入口文件，main.ts；通过内置命令创建一个端口 3000 的服务，而引入的 module 文件指向对于项目文件的 module 文件；如下代码\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { AppController, UserController } from \"./app.controller\";\n// 这里是我自定义写了一个简单的控制器\nimport { UserService } from \"./app.user\";\nimport { AppService } from \"./app.service\";\n\n@Module({\n\timports: [],\n\t// 引入controller控制器\n\tcontrollers: [AppController, UserController],\n\t// 引入指向controller控制器的方法\n\tproviders: [AppService, UserService],\n})\n// 导出 方便在main.js 调用\nexport class AppModule {}\n```\n\n上面代码中引入的模块是以数组的形式存在的，可以引入不同的控制器；\n\n当然我们在新建一个新的控制器，目的是为了查询数据库里的用户信息；\n\n```ts\n// app.controller.ts\n@Controller(\"user\")\nexport class UserController {\n\t// 指向的UserService类\n\tconstructor(private readonly userService: UserService) {}\n\n\t@Get(\"findOne\")\n\t// 这个接口需要接受的参数\n\tfindUser(@Query() query: any) {\n\t\treturn this.userService.findAll(query.id);\n\t}\n}\n\n// app.user.ts\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class UserService {\n\t// 接受id\n\tfindAll(sid: string): string {\n\t\tconsole.log(sid);\n\t\tif (sid === \"123456\") {\n\t\t\treturn \"123456\";\n\t\t}\n\n\t\treturn \"not 123456\";\n\t}\n}\n```\n\n简单介绍一下， 后期等用到真正开发的时候具体说明； 仅仅做一个文档记录看法；\n\n之后的文章，我将会总结一些`Nest`的概念，以及一些`Nest`的实践；\n\n- `Nest`过滤器，将一些错误拦截统一返回结果\n- `Nest`管道，将一些参数拦截统一返回结果, 统一处理参数;\n- `数据库参数`拦截，摒弃之前传统的`if`判断；\n- 登录，权限拦截\n","slug":"技能小册/Nest/初识","published":1,"updated":"2025-03-12T09:44:25.558Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iy003afg9mdo05f5oh","content":"<p><code>Nest</code>是什么？<code>Nest</code>是一个用于构建高效且可伸缩的服务端应用程序的框架。明明都已经有了<code>node</code>为什么还要搞其他的呢？</p>\n<p>起初<code>Node</code>是作为服务端应用的，最熟悉的一个项目就是<code>Node社区</code>，它的源码就是用的<code>Node + mongodb</code>，可以说<code>Node</code>就是<code>Node社区</code>的灵魂。</p>\n<p><code>Node社区</code>也是在<code>node</code>上昙花一现，也是把<code>Node</code>发挥到了最大的极致；</p>\n<p>但是说了这么多，为什么要和<code>Nest</code>联系到一起呢？</p>\n<ol>\n<li>首先，<code>Nest</code>是在<code>Node, Express</code>基础上扩展的，功能要比原有的丰富的很多；</li>\n<li><code>Nest</code>作为前端中的后端，但是语法上面肯定要类似于纯后端，值得一提的是<code>Nest</code>是<code>ts</code>开发的，那么在定义接口参数的时候，<code>Nest</code>提供了<code>DTO</code>的概念，<code>DTO</code>是<code>Data Transfer Object</code>的缩写，翻译过来就是数据传输对象；</li>\n<li><code>Nest</code>在使用数据库的时候，<code>Nest</code>提供了<code>TypeORM</code>的概念，<code>TypeORM</code>是<code>TypeScript</code>的<code>ORM</code>框架，<code>TypeORM</code>是<code>Node</code>中非常流行的<code>ORM</code>框架，<code>Nest</code>使用<code>TypeORM</code>作为默认的<code>ORM</code>框架，<code>Nest</code>提供了<code>TypeORM</code>的封装，使得<code>Nest</code>的<code>ORM</code>操作更加简单；</li>\n<li><code>Nest</code>是为了构建高效可扩展的 Nodejs 服务端的应用框架，内置完全支持 ts；</li>\n<li><code>Nest</code> 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。</li>\n</ol>\n<p>既然选择<code>Nest</code>作为服务端的开发语言，那么就要简单的学习其基础知识；好在之前接触过<code>Node</code>开发经验，那上手实践就可以了；</p>\n<p>关于如何创建项目，命令行就在这里不介绍了；像前端的命令行基本都是一致的；</p>\n<p>项目文件的介绍在官网查阅； <a href=\"https://nestjs.com/\">Nest</a></p>\n<h2 id=\"入口文件以及项目启动\"><a href=\"#入口文件以及项目启动\" class=\"headerlink\" title=\"入口文件以及项目启动\"></a>入口文件以及项目启动</h2><p>有一个项目入口文件，main.ts；通过内置命令创建一个端口 3000 的服务，而引入的 module 文件指向对于项目文件的 module 文件；如下代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppController</span>, <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.controller&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里是我自定义写了一个简单的控制器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.user&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">\t<span class=\"comment\">// 引入controller控制器</span></span><br><span class=\"line\">\t<span class=\"attr\">controllers</span>: [<span class=\"title class_\">AppController</span>, <span class=\"title class_\">UserController</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 引入指向controller控制器的方法</span></span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">AppService</span>, <span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 导出 方便在main.js 调用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中引入的模块是以数组的形式存在的，可以引入不同的控制器；</p>\n<p>当然我们在新建一个新的控制器，目的是为了查询数据库里的用户信息；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.controller.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 指向的UserService类</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userService</span>: <span class=\"title class_\">UserService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>(<span class=\"string\">&quot;findOne&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 这个接口需要接受的参数</span></span><br><span class=\"line\">\t<span class=\"title function_\">findUser</span>(<span class=\"params\"><span class=\"meta\">@Query</span>() <span class=\"attr\">query</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findAll</span>(query.<span class=\"property\">id</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.user.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接受id</span></span><br><span class=\"line\">\t<span class=\"title function_\">findAll</span>(<span class=\"attr\">sid</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sid === <span class=\"string\">&quot;123456&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;not 123456&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍一下， 后期等用到真正开发的时候具体说明； 仅仅做一个文档记录看法；</p>\n<p>之后的文章，我将会总结一些<code>Nest</code>的概念，以及一些<code>Nest</code>的实践；</p>\n<ul>\n<li><code>Nest</code>过滤器，将一些错误拦截统一返回结果</li>\n<li><code>Nest</code>管道，将一些参数拦截统一返回结果, 统一处理参数;</li>\n<li><code>数据库参数</code>拦截，摒弃之前传统的<code>if</code>判断；</li>\n<li>登录，权限拦截</li>\n</ul>\n","excerpt":"","more":"<p><code>Nest</code>是什么？<code>Nest</code>是一个用于构建高效且可伸缩的服务端应用程序的框架。明明都已经有了<code>node</code>为什么还要搞其他的呢？</p>\n<p>起初<code>Node</code>是作为服务端应用的，最熟悉的一个项目就是<code>Node社区</code>，它的源码就是用的<code>Node + mongodb</code>，可以说<code>Node</code>就是<code>Node社区</code>的灵魂。</p>\n<p><code>Node社区</code>也是在<code>node</code>上昙花一现，也是把<code>Node</code>发挥到了最大的极致；</p>\n<p>但是说了这么多，为什么要和<code>Nest</code>联系到一起呢？</p>\n<ol>\n<li>首先，<code>Nest</code>是在<code>Node, Express</code>基础上扩展的，功能要比原有的丰富的很多；</li>\n<li><code>Nest</code>作为前端中的后端，但是语法上面肯定要类似于纯后端，值得一提的是<code>Nest</code>是<code>ts</code>开发的，那么在定义接口参数的时候，<code>Nest</code>提供了<code>DTO</code>的概念，<code>DTO</code>是<code>Data Transfer Object</code>的缩写，翻译过来就是数据传输对象；</li>\n<li><code>Nest</code>在使用数据库的时候，<code>Nest</code>提供了<code>TypeORM</code>的概念，<code>TypeORM</code>是<code>TypeScript</code>的<code>ORM</code>框架，<code>TypeORM</code>是<code>Node</code>中非常流行的<code>ORM</code>框架，<code>Nest</code>使用<code>TypeORM</code>作为默认的<code>ORM</code>框架，<code>Nest</code>提供了<code>TypeORM</code>的封装，使得<code>Nest</code>的<code>ORM</code>操作更加简单；</li>\n<li><code>Nest</code>是为了构建高效可扩展的 Nodejs 服务端的应用框架，内置完全支持 ts；</li>\n<li><code>Nest</code> 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。</li>\n</ol>\n<p>既然选择<code>Nest</code>作为服务端的开发语言，那么就要简单的学习其基础知识；好在之前接触过<code>Node</code>开发经验，那上手实践就可以了；</p>\n<p>关于如何创建项目，命令行就在这里不介绍了；像前端的命令行基本都是一致的；</p>\n<p>项目文件的介绍在官网查阅； <a href=\"https://nestjs.com/\">Nest</a></p>\n<h2 id=\"入口文件以及项目启动\"><a href=\"#入口文件以及项目启动\" class=\"headerlink\" title=\"入口文件以及项目启动\"></a>入口文件以及项目启动</h2><p>有一个项目入口文件，main.ts；通过内置命令创建一个端口 3000 的服务，而引入的 module 文件指向对于项目文件的 module 文件；如下代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppController</span>, <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.controller&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里是我自定义写了一个简单的控制器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.user&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AppService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">\t<span class=\"comment\">// 引入controller控制器</span></span><br><span class=\"line\">\t<span class=\"attr\">controllers</span>: [<span class=\"title class_\">AppController</span>, <span class=\"title class_\">UserController</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 引入指向controller控制器的方法</span></span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">AppService</span>, <span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 导出 方便在main.js 调用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中引入的模块是以数组的形式存在的，可以引入不同的控制器；</p>\n<p>当然我们在新建一个新的控制器，目的是为了查询数据库里的用户信息；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.controller.ts</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 指向的UserService类</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userService</span>: <span class=\"title class_\">UserService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>(<span class=\"string\">&quot;findOne&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 这个接口需要接受的参数</span></span><br><span class=\"line\">\t<span class=\"title function_\">findUser</span>(<span class=\"params\"><span class=\"meta\">@Query</span>() <span class=\"attr\">query</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">findAll</span>(query.<span class=\"property\">id</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.user.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接受id</span></span><br><span class=\"line\">\t<span class=\"title function_\">findAll</span>(<span class=\"attr\">sid</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sid);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sid === <span class=\"string\">&quot;123456&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;not 123456&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单介绍一下， 后期等用到真正开发的时候具体说明； 仅仅做一个文档记录看法；</p>\n<p>之后的文章，我将会总结一些<code>Nest</code>的概念，以及一些<code>Nest</code>的实践；</p>\n<ul>\n<li><code>Nest</code>过滤器，将一些错误拦截统一返回结果</li>\n<li><code>Nest</code>管道，将一些参数拦截统一返回结果, 统一处理参数;</li>\n<li><code>数据库参数</code>拦截，摒弃之前传统的<code>if</code>判断；</li>\n<li>登录，权限拦截</li>\n</ul>\n"},{"title":"Nest-加载环境文件","abbrlink":"b080c454","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n前俩篇讲解了快速入门`nest`，接下来大致介绍一下`nest`项目如何进行改造；\n\n项目中一般都会用到`中间件，拦截器，参数管道校验等等`，接下来分多个方向大致介绍这些如何在项目中使用；\n\n\n## 项目改造\n\n类似于`vue`项目，有一些成熟的方案去管理你的项目，`提交规范，代码风格，代码规范，环境变量等等`；改造的范围大致分为以下几点：\n\n- 不同的环境变量，设置对应不同的值\n- 设置跨域已经增强`http`工具，设置全局的访问前缀；\n- [`swagger文档`](https://swagger.io/)生产文档，不再需要自己编写具体的文档说明；\n- `中间件，拦截器，定时任务等等`；\n\n## 加载不同的环境文件\n\n这里有俩种的方案可以实现，`dotenv`和`@nestjs/config`\n\n首先需要设置环境，根据变量区分是开发环境还是生产环境；\n\n`pnpm add -D cross-env`安装`cross-env`，然后再`package.json`中找到`scripts`, 修改`start`启动命令：\n\n```json\n{\n\t\"scripts\": {\n\t\t\"start\": \"cross-env NODE_ENV=development nest start\",\n\t\t\"start:dev\": \"cross-env NODE_ENV=development nest start --watch\",\n\t\t\"start:debug\": \"cross-env NODE_ENV=development nest start --debug --watch\"\n\t}\n}\n```\n\n### dotenv\n\n在项目根目录添加`.env.development`和`.env.production`；\n\n在`main.ts`中添加如下：\n\n```ts\nimport * as dotenv from \"dotenv\";\nconst { NODE_ENV } = process.env;\nconst envFile = `.env${NODE_ENV ? `.${NODE_ENV}` : \".production\"}`;\ndotenv.config({ path: envFile });\n```\n\n这样就可以使用`process.env.XXXX`了\n\n### @nestjs/config\n\n如果使用这种方案，那么就需要引入`pnpm add @nestjs/config`\n\n```ts\nimport { ConfigModule } from \"@nestjs/config\";\n@Module({\n  imports: [\n    // 加载环境配置文件\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath:\n        process.env.NODE_ENV === 'development'\n          ? '.env.development'\n          : '.env.production',\n    }),\n  ]\n})\n```\n\n不过这需要在`app.modules.ts`中添加；\n","source":"_posts/技能小册/Nest/加载环境文件.md","raw":"---\ntitle: Nest-加载环境文件\nabbrlink: b080c454\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n前俩篇讲解了快速入门`nest`，接下来大致介绍一下`nest`项目如何进行改造；\n\n项目中一般都会用到`中间件，拦截器，参数管道校验等等`，接下来分多个方向大致介绍这些如何在项目中使用；\n\n\n## 项目改造\n\n类似于`vue`项目，有一些成熟的方案去管理你的项目，`提交规范，代码风格，代码规范，环境变量等等`；改造的范围大致分为以下几点：\n\n- 不同的环境变量，设置对应不同的值\n- 设置跨域已经增强`http`工具，设置全局的访问前缀；\n- [`swagger文档`](https://swagger.io/)生产文档，不再需要自己编写具体的文档说明；\n- `中间件，拦截器，定时任务等等`；\n\n## 加载不同的环境文件\n\n这里有俩种的方案可以实现，`dotenv`和`@nestjs/config`\n\n首先需要设置环境，根据变量区分是开发环境还是生产环境；\n\n`pnpm add -D cross-env`安装`cross-env`，然后再`package.json`中找到`scripts`, 修改`start`启动命令：\n\n```json\n{\n\t\"scripts\": {\n\t\t\"start\": \"cross-env NODE_ENV=development nest start\",\n\t\t\"start:dev\": \"cross-env NODE_ENV=development nest start --watch\",\n\t\t\"start:debug\": \"cross-env NODE_ENV=development nest start --debug --watch\"\n\t}\n}\n```\n\n### dotenv\n\n在项目根目录添加`.env.development`和`.env.production`；\n\n在`main.ts`中添加如下：\n\n```ts\nimport * as dotenv from \"dotenv\";\nconst { NODE_ENV } = process.env;\nconst envFile = `.env${NODE_ENV ? `.${NODE_ENV}` : \".production\"}`;\ndotenv.config({ path: envFile });\n```\n\n这样就可以使用`process.env.XXXX`了\n\n### @nestjs/config\n\n如果使用这种方案，那么就需要引入`pnpm add @nestjs/config`\n\n```ts\nimport { ConfigModule } from \"@nestjs/config\";\n@Module({\n  imports: [\n    // 加载环境配置文件\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath:\n        process.env.NODE_ENV === 'development'\n          ? '.env.development'\n          : '.env.production',\n    }),\n  ]\n})\n```\n\n不过这需要在`app.modules.ts`中添加；\n","slug":"技能小册/Nest/加载环境文件","published":1,"updated":"2025-03-12T09:44:28.274Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iz003efg9m9x4zareg","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>前俩篇讲解了快速入门<code>nest</code>，接下来大致介绍一下<code>nest</code>项目如何进行改造；</p>\n<p>项目中一般都会用到<code>中间件，拦截器，参数管道校验等等</code>，接下来分多个方向大致介绍这些如何在项目中使用；</p>\n<h2 id=\"项目改造\"><a href=\"#项目改造\" class=\"headerlink\" title=\"项目改造\"></a>项目改造</h2><p>类似于<code>vue</code>项目，有一些成熟的方案去管理你的项目，<code>提交规范，代码风格，代码规范，环境变量等等</code>；改造的范围大致分为以下几点：</p>\n<ul>\n<li>不同的环境变量，设置对应不同的值</li>\n<li>设置跨域已经增强<code>http</code>工具，设置全局的访问前缀；</li>\n<li><a href=\"https://swagger.io/\"><code>swagger文档</code></a>生产文档，不再需要自己编写具体的文档说明；</li>\n<li><code>中间件，拦截器，定时任务等等</code>；</li>\n</ul>\n<h2 id=\"加载不同的环境文件\"><a href=\"#加载不同的环境文件\" class=\"headerlink\" title=\"加载不同的环境文件\"></a>加载不同的环境文件</h2><p>这里有俩种的方案可以实现，<code>dotenv</code>和<code>@nestjs/config</code></p>\n<p>首先需要设置环境，根据变量区分是开发环境还是生产环境；</p>\n<p><code>pnpm add -D cross-env</code>安装<code>cross-env</code>，然后再<code>package.json</code>中找到<code>scripts</code>, 修改<code>start</code>启动命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start:debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start --debug --watch&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dotenv\"><a href=\"#dotenv\" class=\"headerlink\" title=\"dotenv\"></a>dotenv</h3><p>在项目根目录添加<code>.env.development</code>和<code>.env.production</code>；</p>\n<p>在<code>main.ts</code>中添加如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">&quot;dotenv&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">NODE_ENV</span> &#125; = process.<span class=\"property\">env</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> envFile = <span class=\"string\">`.env<span class=\"subst\">$&#123;NODE_ENV ? <span class=\"string\">`.<span class=\"subst\">$&#123;NODE_ENV&#125;</span>`</span> : <span class=\"string\">&quot;.production&quot;</span>&#125;</span>`</span>;</span><br><span class=\"line\">dotenv.<span class=\"title function_\">config</span>(&#123; <span class=\"attr\">path</span>: envFile &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以使用<code>process.env.XXXX</code>了</p>\n<h3 id=\"nestjs-config\"><a href=\"#nestjs-config\" class=\"headerlink\" title=\"@nestjs&#x2F;config\"></a>@nestjs&#x2F;config</h3><p>如果使用这种方案，那么就需要引入<code>pnpm add @nestjs/config</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/config&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 加载环境配置文件</span></span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">isGlobal</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">envFilePath</span>:</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">          ? <span class=\"string\">&#x27;.env.development&#x27;</span></span><br><span class=\"line\">          : <span class=\"string\">&#x27;.env.production&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>不过这需要在<code>app.modules.ts</code>中添加；</p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>前俩篇讲解了快速入门<code>nest</code>，接下来大致介绍一下<code>nest</code>项目如何进行改造；</p>\n<p>项目中一般都会用到<code>中间件，拦截器，参数管道校验等等</code>，接下来分多个方向大致介绍这些如何在项目中使用；</p>\n<h2 id=\"项目改造\"><a href=\"#项目改造\" class=\"headerlink\" title=\"项目改造\"></a>项目改造</h2><p>类似于<code>vue</code>项目，有一些成熟的方案去管理你的项目，<code>提交规范，代码风格，代码规范，环境变量等等</code>；改造的范围大致分为以下几点：</p>\n<ul>\n<li>不同的环境变量，设置对应不同的值</li>\n<li>设置跨域已经增强<code>http</code>工具，设置全局的访问前缀；</li>\n<li><a href=\"https://swagger.io/\"><code>swagger文档</code></a>生产文档，不再需要自己编写具体的文档说明；</li>\n<li><code>中间件，拦截器，定时任务等等</code>；</li>\n</ul>\n<h2 id=\"加载不同的环境文件\"><a href=\"#加载不同的环境文件\" class=\"headerlink\" title=\"加载不同的环境文件\"></a>加载不同的环境文件</h2><p>这里有俩种的方案可以实现，<code>dotenv</code>和<code>@nestjs/config</code></p>\n<p>首先需要设置环境，根据变量区分是开发环境还是生产环境；</p>\n<p><code>pnpm add -D cross-env</code>安装<code>cross-env</code>，然后再<code>package.json</code>中找到<code>scripts</code>, 修改<code>start</code>启动命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;start:debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest start --debug --watch&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dotenv\"><a href=\"#dotenv\" class=\"headerlink\" title=\"dotenv\"></a>dotenv</h3><p>在项目根目录添加<code>.env.development</code>和<code>.env.production</code>；</p>\n<p>在<code>main.ts</code>中添加如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">&quot;dotenv&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">NODE_ENV</span> &#125; = process.<span class=\"property\">env</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> envFile = <span class=\"string\">`.env<span class=\"subst\">$&#123;NODE_ENV ? <span class=\"string\">`.<span class=\"subst\">$&#123;NODE_ENV&#125;</span>`</span> : <span class=\"string\">&quot;.production&quot;</span>&#125;</span>`</span>;</span><br><span class=\"line\">dotenv.<span class=\"title function_\">config</span>(&#123; <span class=\"attr\">path</span>: envFile &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以使用<code>process.env.XXXX</code>了</p>\n<h3 id=\"nestjs-config\"><a href=\"#nestjs-config\" class=\"headerlink\" title=\"@nestjs&#x2F;config\"></a>@nestjs&#x2F;config</h3><p>如果使用这种方案，那么就需要引入<code>pnpm add @nestjs/config</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ConfigModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/config&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 加载环境配置文件</span></span><br><span class=\"line\">    <span class=\"title class_\">ConfigModule</span>.<span class=\"title function_\">forRoot</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">isGlobal</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">envFilePath</span>:</span><br><span class=\"line\">        process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">          ? <span class=\"string\">&#x27;.env.development&#x27;</span></span><br><span class=\"line\">          : <span class=\"string\">&#x27;.env.production&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>不过这需要在<code>app.modules.ts</code>中添加；</p>\n"},{"title":"Nest-异常过滤器","abbrlink":"f3f9f66e","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n> Nest 带有一个内置的异常层，负责处理应用中所有未处理的异常。当你的应用代码未处理异常时，该层会捕获该异常，然后自动发送适当的用户友好响应。\n>\n> 开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理 HttpException 类型（及其子类）的异常。当异常无法识别时（既不是 HttpException 也不是继承自 HttpException 的类），内置异常过滤器会生成以下默认 JSON 响应：\n\n```json\n{\n\t\"statusCode\": 500,\n\t\"message\": \"Internal server error\"\n}\n```\n\n## 内置异常\n\n例如，在 `CatsController` 中，我们有一个 `findAll()` 方法（一个 GET 路由处理程序）。假设此路由处理程序出于某种原因抛出异常。为了证明这一点，我们将硬编码如下：\n\n```ts\n@Get()\nasync findAll() {\n  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n}\n```\n\n`HttpException`参数说明:\n\n- `response` 参数定义 JSON 响应主体。它可以是 `string 或 object`，如下所述。\n- `status` 参数定义了 [HTTP 状态代码](https://web.nodejs.cn/en-us/docs/web/http/status/)。\n- 默认情况下，JSON 响应主体包含两个属性：\n  - `statusCode`：默认为 `status` 参数中提供的 `HTTP` 状态代码\n  - `message`：基于 `status` 的 `HTTP` 错误的简短描述\n\n## 自定义异常\n\n```ts\n// 常用的状态枚举\nexport enum HttpStatusCode {\n\t// 2xx 状态码表示请求已成功处理\n\tOK = 200, // 请求成功\n\tCREATED = 201, // 请求已成功创建新的资源\n\tACCEPTED = 202, // 请求已经接受，但未处理完成\n\tNO_CONTENT = 204, // 服务器已成功处理请求，但没有返回任何内容\n\tPARTIAL_CONTENT = 206, // 服务器已成功处理了部分范围请求\n\n\t// 3xx 状态码表示重定向\n\tMULTIPLE_CHOICES = 300, // 请求的目标有多个重定向地址\n\tMOVED_PERMANENTLY = 301, // 请求的资源已被永久移动到新的URI\n\tFOUND = 302, // 请求的资源临时移动到新的URI\n\tSEE_OTHER = 303, // 临时重定向，且应使用GET方法获取新的URI\n\tNOT_MODIFIED = 304, // 自上次请求以来，请求的资源未修改\n\tUSE_PROXY = 305, // 访问资源应通过代理进行\n\tTEMPORARY_REDIRECT = 307, // 临时重定向\n\tPERMANENT_REDIRECT = 308, // 永久重定向\n\n\t// 4xx 状态码表示客户端错误\n\tBAD_REQUEST = 400, // 请求的语法错误或请求无法理解\n\tUNAUTHORIZED = 401, // 未授权访问\n\tPAYMENT_REQUIRED = 402, // 暂未使用，保留给将来可能的需求\n\tFORBIDDEN = 403, // 客户端没有足够的权限访问请求的资源\n\tNOT_FOUND = 404, // 未找到请求的资源\n\tMETHOD_NOT_ALLOWED = 405, // 不允许使用此方法请求资源\n\tNOT_ACCEPTABLE = 406, // 无法使用请求的内容特性响应请求\n\tPROXY_AUTHENTICATION_REQUIRED = 407, // 通过代理服务器访问资源需要进行代理认证\n\tREQUEST_TIMEOUT = 408, // 请求超时\n\tCONFLICT = 409, // 请求的资源存在冲突\n\n\t// 更多的4xx状态码，表示客户端错误\n\tGONE = 410, // 之前可用的资源现已不可用，且将来也不会可用\n\tLENGTH_REQUIRED = 411, // 服务器拒绝在没有定义Content-Length头的情况下接受请求\n\tPRECONDITION_FAILED = 412, // 请求头中给出的条件不满足\n\tPAYLOAD_TOO_LARGE = 413, // 请求的实体太大\n\tURI_TOO_LONG = 414, // 请求的URI太长\n\tUNSUPPORTED_MEDIA_TYPE = 415, // 请求的媒体类型不受支持\n\tRANGE_NOT_SATISFIABLE = 416, // 请求的范围无效\n\tEXPECTATION_FAILED = 417, // 服务器无法满足期望头字段的要求\n\n\tUNPROCESSABLE_ENTITY = 422, // 请求的实体不可处理但可能是有效的\n\tTOO_MANY_REQUESTS = 429, // 发起的请求太多，太频繁\n\n\t// 5xx 状态码表示服务器错误\n\tINTERNAL_SERVER_ERROR = 500, // 服务器发生内部错误\n\tNOT_IMPLEMENTED = 501, // 服务器不支持请求的方法\n\tBAD_GATEWAY = 502, // 服务器作为网关或代理，从上游服务器收到无效响应\n\tSERVICE_UNAVAILABLE = 503, // 服务器目前无法使用（由于临时过载或维护）\n\tGATEWAY_TIMEOUT = 504, // 服务器作为网关或代理，但是没有及时从上游服务器收到请求\n\tHTTP_VERSION_NOT_SUPPORTED = 505, // 服务器不支持请求使用的HTTP版本\n\n\t// 表示未知的状态码\n\tUNKNOWN = 999,\n}\n\nimport { HttpException } from \"@nestjs/common\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\nexport class ApiException extends HttpException {\n\tprivate errCode: number;\n\tconstructor(\n\t\tmsg: string | Record<string, any>,\n\t\terrCode: HttpStatusCode = HttpStatusCode.OK\n\t) {\n\t\tswitch (errCode) {\n\t\t\t// 没有权限访问\n\t\t\tcase HttpStatusCode.UNAUTHORIZED:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.UNAUTHORIZED;\n\t\t\t\tbreak;\n\t\t\t// 登录失效\n\t\t\tcase HttpStatusCode.FORBIDDEN:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.FORBIDDEN;\n\t\t\t\tbreak;\n\t\t\t// 资源不存在， 验证码，接口地址，图片资源等等\n\t\t\tcase HttpStatusCode.NOT_FOUND:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.NOT_FOUND;\n\t\t\t\tbreak;\n\t\t\t// 其他归于服务器内部错误\n\t\t\tdefault:\n\t\t\t\tsuper(msg, errCode ?? HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.INTERNAL_SERVER_ERROR;\n\t\t}\n\t}\n\tgetErrCode(): number {\n\t\treturn this.errCode;\n\t}\n}\n```\n\n## 异常过滤器\n\n具体操作可查看[文档](https://nest.nodejs.cn/exception-filters#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8)\n\n```ts\nimport {\n\tArgumentsHost,\n\tCatch,\n\tExceptionFilter,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpResult } from \"../class/result.class\";\n\n@Catch()\nexport class AllExceptionFilter<T> implements ExceptionFilter {\n\tcatch(exception: T, host: ArgumentsHost) {\n\t\tconst ctx = host.switchToHttp();\n\t\tconst response = ctx.getResponse();\n\t\tconst { status, result } = this.errorResult(exception);\n\t\tresponse.header(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tresponse.status(status).json(result);\n\t}\n\n\terrorResult(exception: unknown) {\n\t\tconst status =\n\t\t\texception instanceof HttpException\n\t\t\t\t? exception.getStatus()\n\t\t\t\t: HttpStatus.INTERNAL_SERVER_ERROR;\n\n\t\tconst code =\n\t\t\texception instanceof ApiException\n\t\t\t\t? (exception as ApiException).getErrCode()\n\t\t\t\t: status;\n\n\t\tlet message: string;\n\t\tif (exception instanceof HttpException) {\n\t\t\tconst response = exception.getResponse();\n\t\t\tmessage = (response as any).message ?? response;\n\t\t} else {\n\t\t\tmessage = `${exception}`;\n\t\t}\n\n\t\tconst getMsg = message;\n\t\t// 使用ValidationPipe可能会返回数组\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage = getMsg[0];\n\t\t} else {\n\t\t\tmessage = getMsg;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: ![200, 500, 401].includes(status) ? 200 : status,\n\t\t\tresult: HttpResult.error(message, code),\n\t\t};\n\t}\n}\n```\n\n```ts\nexport class HttpResult {\n\treadonly message: string;\n\treadonly status: number;\n\treadonly timestamp: string = new Date().toISOString();\n\treadonly context: unknown;\n\tconstructor(\n\t\tcontext?: unknown,\n\t\tmessage: string = \"success\",\n\t\tstatus: number = 200\n\t) {\n\t\tthis.context = context;\n\t\tthis.message = message;\n\t\tthis.status = status;\n\t}\n\n\tstatic success(context: unknown, message = \"操作成功\") {\n\t\treturn new HttpResult(context, message, 200);\n\t}\n\n\tstatic error(message = \"操作失败\", status = 500) {\n\t\treturn new HttpResult(null, message, status);\n\t}\n}\n```\n\n### 使用\n\n在`app.module.ts`中\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionFilter,\n    },\n  ]\n})\n```\n","source":"_posts/技能小册/Nest/异常过滤器.md","raw":"---\ntitle: Nest-异常过滤器\nabbrlink: f3f9f66e\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n> Nest 带有一个内置的异常层，负责处理应用中所有未处理的异常。当你的应用代码未处理异常时，该层会捕获该异常，然后自动发送适当的用户友好响应。\n>\n> 开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理 HttpException 类型（及其子类）的异常。当异常无法识别时（既不是 HttpException 也不是继承自 HttpException 的类），内置异常过滤器会生成以下默认 JSON 响应：\n\n```json\n{\n\t\"statusCode\": 500,\n\t\"message\": \"Internal server error\"\n}\n```\n\n## 内置异常\n\n例如，在 `CatsController` 中，我们有一个 `findAll()` 方法（一个 GET 路由处理程序）。假设此路由处理程序出于某种原因抛出异常。为了证明这一点，我们将硬编码如下：\n\n```ts\n@Get()\nasync findAll() {\n  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n}\n```\n\n`HttpException`参数说明:\n\n- `response` 参数定义 JSON 响应主体。它可以是 `string 或 object`，如下所述。\n- `status` 参数定义了 [HTTP 状态代码](https://web.nodejs.cn/en-us/docs/web/http/status/)。\n- 默认情况下，JSON 响应主体包含两个属性：\n  - `statusCode`：默认为 `status` 参数中提供的 `HTTP` 状态代码\n  - `message`：基于 `status` 的 `HTTP` 错误的简短描述\n\n## 自定义异常\n\n```ts\n// 常用的状态枚举\nexport enum HttpStatusCode {\n\t// 2xx 状态码表示请求已成功处理\n\tOK = 200, // 请求成功\n\tCREATED = 201, // 请求已成功创建新的资源\n\tACCEPTED = 202, // 请求已经接受，但未处理完成\n\tNO_CONTENT = 204, // 服务器已成功处理请求，但没有返回任何内容\n\tPARTIAL_CONTENT = 206, // 服务器已成功处理了部分范围请求\n\n\t// 3xx 状态码表示重定向\n\tMULTIPLE_CHOICES = 300, // 请求的目标有多个重定向地址\n\tMOVED_PERMANENTLY = 301, // 请求的资源已被永久移动到新的URI\n\tFOUND = 302, // 请求的资源临时移动到新的URI\n\tSEE_OTHER = 303, // 临时重定向，且应使用GET方法获取新的URI\n\tNOT_MODIFIED = 304, // 自上次请求以来，请求的资源未修改\n\tUSE_PROXY = 305, // 访问资源应通过代理进行\n\tTEMPORARY_REDIRECT = 307, // 临时重定向\n\tPERMANENT_REDIRECT = 308, // 永久重定向\n\n\t// 4xx 状态码表示客户端错误\n\tBAD_REQUEST = 400, // 请求的语法错误或请求无法理解\n\tUNAUTHORIZED = 401, // 未授权访问\n\tPAYMENT_REQUIRED = 402, // 暂未使用，保留给将来可能的需求\n\tFORBIDDEN = 403, // 客户端没有足够的权限访问请求的资源\n\tNOT_FOUND = 404, // 未找到请求的资源\n\tMETHOD_NOT_ALLOWED = 405, // 不允许使用此方法请求资源\n\tNOT_ACCEPTABLE = 406, // 无法使用请求的内容特性响应请求\n\tPROXY_AUTHENTICATION_REQUIRED = 407, // 通过代理服务器访问资源需要进行代理认证\n\tREQUEST_TIMEOUT = 408, // 请求超时\n\tCONFLICT = 409, // 请求的资源存在冲突\n\n\t// 更多的4xx状态码，表示客户端错误\n\tGONE = 410, // 之前可用的资源现已不可用，且将来也不会可用\n\tLENGTH_REQUIRED = 411, // 服务器拒绝在没有定义Content-Length头的情况下接受请求\n\tPRECONDITION_FAILED = 412, // 请求头中给出的条件不满足\n\tPAYLOAD_TOO_LARGE = 413, // 请求的实体太大\n\tURI_TOO_LONG = 414, // 请求的URI太长\n\tUNSUPPORTED_MEDIA_TYPE = 415, // 请求的媒体类型不受支持\n\tRANGE_NOT_SATISFIABLE = 416, // 请求的范围无效\n\tEXPECTATION_FAILED = 417, // 服务器无法满足期望头字段的要求\n\n\tUNPROCESSABLE_ENTITY = 422, // 请求的实体不可处理但可能是有效的\n\tTOO_MANY_REQUESTS = 429, // 发起的请求太多，太频繁\n\n\t// 5xx 状态码表示服务器错误\n\tINTERNAL_SERVER_ERROR = 500, // 服务器发生内部错误\n\tNOT_IMPLEMENTED = 501, // 服务器不支持请求的方法\n\tBAD_GATEWAY = 502, // 服务器作为网关或代理，从上游服务器收到无效响应\n\tSERVICE_UNAVAILABLE = 503, // 服务器目前无法使用（由于临时过载或维护）\n\tGATEWAY_TIMEOUT = 504, // 服务器作为网关或代理，但是没有及时从上游服务器收到请求\n\tHTTP_VERSION_NOT_SUPPORTED = 505, // 服务器不支持请求使用的HTTP版本\n\n\t// 表示未知的状态码\n\tUNKNOWN = 999,\n}\n\nimport { HttpException } from \"@nestjs/common\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\nexport class ApiException extends HttpException {\n\tprivate errCode: number;\n\tconstructor(\n\t\tmsg: string | Record<string, any>,\n\t\terrCode: HttpStatusCode = HttpStatusCode.OK\n\t) {\n\t\tswitch (errCode) {\n\t\t\t// 没有权限访问\n\t\t\tcase HttpStatusCode.UNAUTHORIZED:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.UNAUTHORIZED;\n\t\t\t\tbreak;\n\t\t\t// 登录失效\n\t\t\tcase HttpStatusCode.FORBIDDEN:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.FORBIDDEN;\n\t\t\t\tbreak;\n\t\t\t// 资源不存在， 验证码，接口地址，图片资源等等\n\t\t\tcase HttpStatusCode.NOT_FOUND:\n\t\t\t\tsuper(msg, HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.NOT_FOUND;\n\t\t\t\tbreak;\n\t\t\t// 其他归于服务器内部错误\n\t\t\tdefault:\n\t\t\t\tsuper(msg, errCode ?? HttpStatusCode.OK);\n\t\t\t\tthis.errCode = HttpStatusCode.INTERNAL_SERVER_ERROR;\n\t\t}\n\t}\n\tgetErrCode(): number {\n\t\treturn this.errCode;\n\t}\n}\n```\n\n## 异常过滤器\n\n具体操作可查看[文档](https://nest.nodejs.cn/exception-filters#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8)\n\n```ts\nimport {\n\tArgumentsHost,\n\tCatch,\n\tExceptionFilter,\n\tHttpException,\n\tHttpStatus,\n} from \"@nestjs/common\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpResult } from \"../class/result.class\";\n\n@Catch()\nexport class AllExceptionFilter<T> implements ExceptionFilter {\n\tcatch(exception: T, host: ArgumentsHost) {\n\t\tconst ctx = host.switchToHttp();\n\t\tconst response = ctx.getResponse();\n\t\tconst { status, result } = this.errorResult(exception);\n\t\tresponse.header(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tresponse.status(status).json(result);\n\t}\n\n\terrorResult(exception: unknown) {\n\t\tconst status =\n\t\t\texception instanceof HttpException\n\t\t\t\t? exception.getStatus()\n\t\t\t\t: HttpStatus.INTERNAL_SERVER_ERROR;\n\n\t\tconst code =\n\t\t\texception instanceof ApiException\n\t\t\t\t? (exception as ApiException).getErrCode()\n\t\t\t\t: status;\n\n\t\tlet message: string;\n\t\tif (exception instanceof HttpException) {\n\t\t\tconst response = exception.getResponse();\n\t\t\tmessage = (response as any).message ?? response;\n\t\t} else {\n\t\t\tmessage = `${exception}`;\n\t\t}\n\n\t\tconst getMsg = message;\n\t\t// 使用ValidationPipe可能会返回数组\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage = getMsg[0];\n\t\t} else {\n\t\t\tmessage = getMsg;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: ![200, 500, 401].includes(status) ? 200 : status,\n\t\t\tresult: HttpResult.error(message, code),\n\t\t};\n\t}\n}\n```\n\n```ts\nexport class HttpResult {\n\treadonly message: string;\n\treadonly status: number;\n\treadonly timestamp: string = new Date().toISOString();\n\treadonly context: unknown;\n\tconstructor(\n\t\tcontext?: unknown,\n\t\tmessage: string = \"success\",\n\t\tstatus: number = 200\n\t) {\n\t\tthis.context = context;\n\t\tthis.message = message;\n\t\tthis.status = status;\n\t}\n\n\tstatic success(context: unknown, message = \"操作成功\") {\n\t\treturn new HttpResult(context, message, 200);\n\t}\n\n\tstatic error(message = \"操作失败\", status = 500) {\n\t\treturn new HttpResult(null, message, status);\n\t}\n}\n```\n\n### 使用\n\n在`app.module.ts`中\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: AllExceptionFilter,\n    },\n  ]\n})\n```\n","slug":"技能小册/Nest/异常过滤器","published":1,"updated":"2025-03-12T09:44:47.937Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iz003ifg9m498l9j1d","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p>Nest 带有一个内置的异常层，负责处理应用中所有未处理的异常。当你的应用代码未处理异常时，该层会捕获该异常，然后自动发送适当的用户友好响应。</p>\n<p>开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理 HttpException 类型（及其子类）的异常。当异常无法识别时（既不是 HttpException 也不是继承自 HttpException 的类），内置异常过滤器会生成以下默认 JSON 响应：</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;statusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Internal server error&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置异常\"><a href=\"#内置异常\" class=\"headerlink\" title=\"内置异常\"></a>内置异常</h2><p>例如，在 <code>CatsController</code> 中，我们有一个 <code>findAll()</code> 方法（一个 GET 路由处理程序）。假设此路由处理程序出于某种原因抛出异常。为了证明这一点，我们将硬编码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Get</span>()</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">findAll</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(<span class=\"string\">&#x27;Forbidden&#x27;</span>, <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HttpException</code>参数说明:</p>\n<ul>\n<li><code>response</code> 参数定义 JSON 响应主体。它可以是 <code>string 或 object</code>，如下所述。</li>\n<li><code>status</code> 参数定义了 <a href=\"https://web.nodejs.cn/en-us/docs/web/http/status/\">HTTP 状态代码</a>。</li>\n<li>默认情况下，JSON 响应主体包含两个属性：<ul>\n<li><code>statusCode</code>：默认为 <code>status</code> 参数中提供的 <code>HTTP</code> 状态代码</li>\n<li><code>message</code>：基于 <code>status</code> 的 <code>HTTP</code> 错误的简短描述</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用的状态枚举</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">HttpStatusCode</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 2xx 状态码表示请求已成功处理</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OK</span> = <span class=\"number\">200</span>, <span class=\"comment\">// 请求成功</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">CREATED</span> = <span class=\"number\">201</span>, <span class=\"comment\">// 请求已成功创建新的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">ACCEPTED</span> = <span class=\"number\">202</span>, <span class=\"comment\">// 请求已经接受，但未处理完成</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NO_CONTENT</span> = <span class=\"number\">204</span>, <span class=\"comment\">// 服务器已成功处理请求，但没有返回任何内容</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PARTIAL_CONTENT</span> = <span class=\"number\">206</span>, <span class=\"comment\">// 服务器已成功处理了部分范围请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3xx 状态码表示重定向</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MULTIPLE_CHOICES</span> = <span class=\"number\">300</span>, <span class=\"comment\">// 请求的目标有多个重定向地址</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MOVED_PERMANENTLY</span> = <span class=\"number\">301</span>, <span class=\"comment\">// 请求的资源已被永久移动到新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FOUND</span> = <span class=\"number\">302</span>, <span class=\"comment\">// 请求的资源临时移动到新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SEE_OTHER</span> = <span class=\"number\">303</span>, <span class=\"comment\">// 临时重定向，且应使用GET方法获取新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_MODIFIED</span> = <span class=\"number\">304</span>, <span class=\"comment\">// 自上次请求以来，请求的资源未修改</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">USE_PROXY</span> = <span class=\"number\">305</span>, <span class=\"comment\">// 访问资源应通过代理进行</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">TEMPORARY_REDIRECT</span> = <span class=\"number\">307</span>, <span class=\"comment\">// 临时重定向</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PERMANENT_REDIRECT</span> = <span class=\"number\">308</span>, <span class=\"comment\">// 永久重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 4xx 状态码表示客户端错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">BAD_REQUEST</span> = <span class=\"number\">400</span>, <span class=\"comment\">// 请求的语法错误或请求无法理解</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNAUTHORIZED</span> = <span class=\"number\">401</span>, <span class=\"comment\">// 未授权访问</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PAYMENT_REQUIRED</span> = <span class=\"number\">402</span>, <span class=\"comment\">// 暂未使用，保留给将来可能的需求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FORBIDDEN</span> = <span class=\"number\">403</span>, <span class=\"comment\">// 客户端没有足够的权限访问请求的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_FOUND</span> = <span class=\"number\">404</span>, <span class=\"comment\">// 未找到请求的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">METHOD_NOT_ALLOWED</span> = <span class=\"number\">405</span>, <span class=\"comment\">// 不允许使用此方法请求资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_ACCEPTABLE</span> = <span class=\"number\">406</span>, <span class=\"comment\">// 无法使用请求的内容特性响应请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PROXY_AUTHENTICATION_REQUIRED</span> = <span class=\"number\">407</span>, <span class=\"comment\">// 通过代理服务器访问资源需要进行代理认证</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">REQUEST_TIMEOUT</span> = <span class=\"number\">408</span>, <span class=\"comment\">// 请求超时</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">CONFLICT</span> = <span class=\"number\">409</span>, <span class=\"comment\">// 请求的资源存在冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更多的4xx状态码，表示客户端错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GONE</span> = <span class=\"number\">410</span>, <span class=\"comment\">// 之前可用的资源现已不可用，且将来也不会可用</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">LENGTH_REQUIRED</span> = <span class=\"number\">411</span>, <span class=\"comment\">// 服务器拒绝在没有定义Content-Length头的情况下接受请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PRECONDITION_FAILED</span> = <span class=\"number\">412</span>, <span class=\"comment\">// 请求头中给出的条件不满足</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PAYLOAD_TOO_LARGE</span> = <span class=\"number\">413</span>, <span class=\"comment\">// 请求的实体太大</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">URI_TOO_LONG</span> = <span class=\"number\">414</span>, <span class=\"comment\">// 请求的URI太长</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNSUPPORTED_MEDIA_TYPE</span> = <span class=\"number\">415</span>, <span class=\"comment\">// 请求的媒体类型不受支持</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">RANGE_NOT_SATISFIABLE</span> = <span class=\"number\">416</span>, <span class=\"comment\">// 请求的范围无效</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">EXPECTATION_FAILED</span> = <span class=\"number\">417</span>, <span class=\"comment\">// 服务器无法满足期望头字段的要求</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNPROCESSABLE_ENTITY</span> = <span class=\"number\">422</span>, <span class=\"comment\">// 请求的实体不可处理但可能是有效的</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">TOO_MANY_REQUESTS</span> = <span class=\"number\">429</span>, <span class=\"comment\">// 发起的请求太多，太频繁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 5xx 状态码表示服务器错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">INTERNAL_SERVER_ERROR</span> = <span class=\"number\">500</span>, <span class=\"comment\">// 服务器发生内部错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_IMPLEMENTED</span> = <span class=\"number\">501</span>, <span class=\"comment\">// 服务器不支持请求的方法</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">BAD_GATEWAY</span> = <span class=\"number\">502</span>, <span class=\"comment\">// 服务器作为网关或代理，从上游服务器收到无效响应</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SERVICE_UNAVAILABLE</span> = <span class=\"number\">503</span>, <span class=\"comment\">// 服务器目前无法使用（由于临时过载或维护）</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GATEWAY_TIMEOUT</span> = <span class=\"number\">504</span>, <span class=\"comment\">// 服务器作为网关或代理，但是没有及时从上游服务器收到请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">HTTP_VERSION_NOT_SUPPORTED</span> = <span class=\"number\">505</span>, <span class=\"comment\">// 服务器不支持请求使用的HTTP版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 表示未知的状态码</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNKNOWN</span> = <span class=\"number\">999</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiException</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HttpException</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"attr\">errCode</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">msg</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">errCode</span>: <span class=\"title class_\">HttpStatusCode</span> = <span class=\"title class_\">HttpStatusCode</span>.OK</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (errCode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 没有权限访问</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 登录失效</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 资源不存在， 验证码，接口地址，图片资源等等</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">NOT_FOUND</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">NOT_FOUND</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 其他归于服务器内部错误</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, errCode ?? <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">getErrCode</span>(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常过滤器\"><a href=\"#异常过滤器\" class=\"headerlink\" title=\"异常过滤器\"></a>异常过滤器</h2><p>具体操作可查看<a href=\"https://nest.nodejs.cn/exception-filters#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\">文档</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">ArgumentsHost</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Catch</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExceptionFilter</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpException</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpStatus</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Catch</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AllExceptionFilter</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ExceptionFilter</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span>(<span class=\"attr\">exception</span>: T, <span class=\"attr\">host</span>: <span class=\"title class_\">ArgumentsHost</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ctx = host.<span class=\"title function_\">switchToHttp</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> response = ctx.<span class=\"title function_\">getResponse</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> &#123; status, result &#125; = <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorResult</span>(exception);</span><br><span class=\"line\">\t\tresponse.<span class=\"title function_\">header</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t\tresponse.<span class=\"title function_\">status</span>(status).<span class=\"title function_\">json</span>(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">errorResult</span>(<span class=\"params\"><span class=\"attr\">exception</span>: <span class=\"built_in\">unknown</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> status =</span><br><span class=\"line\">\t\t\texception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span></span><br><span class=\"line\">\t\t\t\t? exception.<span class=\"title function_\">getStatus</span>()</span><br><span class=\"line\">\t\t\t\t: <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> code =</span><br><span class=\"line\">\t\t\texception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiException</span></span><br><span class=\"line\">\t\t\t\t? (exception <span class=\"keyword\">as</span> <span class=\"title class_\">ApiException</span>).<span class=\"title function_\">getErrCode</span>()</span><br><span class=\"line\">\t\t\t\t: status;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> response = exception.<span class=\"title function_\">getResponse</span>();</span><br><span class=\"line\">\t\t\tmessage = (response <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">message</span> ?? response;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmessage = <span class=\"string\">`<span class=\"subst\">$&#123;exception&#125;</span>`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> getMsg = message;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用ValidationPipe可能会返回数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(message)) &#123;</span><br><span class=\"line\">\t\t\tmessage = getMsg[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmessage = getMsg;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">status</span>: ![<span class=\"number\">200</span>, <span class=\"number\">500</span>, <span class=\"number\">401</span>].<span class=\"title function_\">includes</span>(status) ? <span class=\"number\">200</span> : status,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">result</span>: <span class=\"title class_\">HttpResult</span>.<span class=\"title function_\">error</span>(message, code),</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpResult</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">timestamp</span>: <span class=\"built_in\">string</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">context</span>: <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">context</span>?: <span class=\"built_in\">unknown</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;success&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">status</span>: <span class=\"built_in\">number</span> = <span class=\"number\">200</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = message;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">success</span>(<span class=\"params\"><span class=\"attr\">context</span>: <span class=\"built_in\">unknown</span>, message = <span class=\"string\">&quot;操作成功&quot;</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpResult</span>(context, message, <span class=\"number\">200</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">error</span>(<span class=\"params\">message = <span class=\"string\">&quot;操作失败&quot;</span>, status = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpResult</span>(<span class=\"literal\">null</span>, message, status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在<code>app.module.ts</code>中</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_FILTER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AllExceptionFilter</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><blockquote>\n<p>Nest 带有一个内置的异常层，负责处理应用中所有未处理的异常。当你的应用代码未处理异常时，该层会捕获该异常，然后自动发送适当的用户友好响应。</p>\n<p>开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理 HttpException 类型（及其子类）的异常。当异常无法识别时（既不是 HttpException 也不是继承自 HttpException 的类），内置异常过滤器会生成以下默认 JSON 响应：</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;statusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">500</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Internal server error&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置异常\"><a href=\"#内置异常\" class=\"headerlink\" title=\"内置异常\"></a>内置异常</h2><p>例如，在 <code>CatsController</code> 中，我们有一个 <code>findAll()</code> 方法（一个 GET 路由处理程序）。假设此路由处理程序出于某种原因抛出异常。为了证明这一点，我们将硬编码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Get</span>()</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">findAll</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(<span class=\"string\">&#x27;Forbidden&#x27;</span>, <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>HttpException</code>参数说明:</p>\n<ul>\n<li><code>response</code> 参数定义 JSON 响应主体。它可以是 <code>string 或 object</code>，如下所述。</li>\n<li><code>status</code> 参数定义了 <a href=\"https://web.nodejs.cn/en-us/docs/web/http/status/\">HTTP 状态代码</a>。</li>\n<li>默认情况下，JSON 响应主体包含两个属性：<ul>\n<li><code>statusCode</code>：默认为 <code>status</code> 参数中提供的 <code>HTTP</code> 状态代码</li>\n<li><code>message</code>：基于 <code>status</code> 的 <code>HTTP</code> 错误的简短描述</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用的状态枚举</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">HttpStatusCode</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 2xx 状态码表示请求已成功处理</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OK</span> = <span class=\"number\">200</span>, <span class=\"comment\">// 请求成功</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">CREATED</span> = <span class=\"number\">201</span>, <span class=\"comment\">// 请求已成功创建新的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">ACCEPTED</span> = <span class=\"number\">202</span>, <span class=\"comment\">// 请求已经接受，但未处理完成</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NO_CONTENT</span> = <span class=\"number\">204</span>, <span class=\"comment\">// 服务器已成功处理请求，但没有返回任何内容</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PARTIAL_CONTENT</span> = <span class=\"number\">206</span>, <span class=\"comment\">// 服务器已成功处理了部分范围请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3xx 状态码表示重定向</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MULTIPLE_CHOICES</span> = <span class=\"number\">300</span>, <span class=\"comment\">// 请求的目标有多个重定向地址</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MOVED_PERMANENTLY</span> = <span class=\"number\">301</span>, <span class=\"comment\">// 请求的资源已被永久移动到新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FOUND</span> = <span class=\"number\">302</span>, <span class=\"comment\">// 请求的资源临时移动到新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SEE_OTHER</span> = <span class=\"number\">303</span>, <span class=\"comment\">// 临时重定向，且应使用GET方法获取新的URI</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_MODIFIED</span> = <span class=\"number\">304</span>, <span class=\"comment\">// 自上次请求以来，请求的资源未修改</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">USE_PROXY</span> = <span class=\"number\">305</span>, <span class=\"comment\">// 访问资源应通过代理进行</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">TEMPORARY_REDIRECT</span> = <span class=\"number\">307</span>, <span class=\"comment\">// 临时重定向</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PERMANENT_REDIRECT</span> = <span class=\"number\">308</span>, <span class=\"comment\">// 永久重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 4xx 状态码表示客户端错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">BAD_REQUEST</span> = <span class=\"number\">400</span>, <span class=\"comment\">// 请求的语法错误或请求无法理解</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNAUTHORIZED</span> = <span class=\"number\">401</span>, <span class=\"comment\">// 未授权访问</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PAYMENT_REQUIRED</span> = <span class=\"number\">402</span>, <span class=\"comment\">// 暂未使用，保留给将来可能的需求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FORBIDDEN</span> = <span class=\"number\">403</span>, <span class=\"comment\">// 客户端没有足够的权限访问请求的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_FOUND</span> = <span class=\"number\">404</span>, <span class=\"comment\">// 未找到请求的资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">METHOD_NOT_ALLOWED</span> = <span class=\"number\">405</span>, <span class=\"comment\">// 不允许使用此方法请求资源</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_ACCEPTABLE</span> = <span class=\"number\">406</span>, <span class=\"comment\">// 无法使用请求的内容特性响应请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PROXY_AUTHENTICATION_REQUIRED</span> = <span class=\"number\">407</span>, <span class=\"comment\">// 通过代理服务器访问资源需要进行代理认证</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">REQUEST_TIMEOUT</span> = <span class=\"number\">408</span>, <span class=\"comment\">// 请求超时</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">CONFLICT</span> = <span class=\"number\">409</span>, <span class=\"comment\">// 请求的资源存在冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更多的4xx状态码，表示客户端错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GONE</span> = <span class=\"number\">410</span>, <span class=\"comment\">// 之前可用的资源现已不可用，且将来也不会可用</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">LENGTH_REQUIRED</span> = <span class=\"number\">411</span>, <span class=\"comment\">// 服务器拒绝在没有定义Content-Length头的情况下接受请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PRECONDITION_FAILED</span> = <span class=\"number\">412</span>, <span class=\"comment\">// 请求头中给出的条件不满足</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PAYLOAD_TOO_LARGE</span> = <span class=\"number\">413</span>, <span class=\"comment\">// 请求的实体太大</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">URI_TOO_LONG</span> = <span class=\"number\">414</span>, <span class=\"comment\">// 请求的URI太长</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNSUPPORTED_MEDIA_TYPE</span> = <span class=\"number\">415</span>, <span class=\"comment\">// 请求的媒体类型不受支持</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">RANGE_NOT_SATISFIABLE</span> = <span class=\"number\">416</span>, <span class=\"comment\">// 请求的范围无效</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">EXPECTATION_FAILED</span> = <span class=\"number\">417</span>, <span class=\"comment\">// 服务器无法满足期望头字段的要求</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNPROCESSABLE_ENTITY</span> = <span class=\"number\">422</span>, <span class=\"comment\">// 请求的实体不可处理但可能是有效的</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">TOO_MANY_REQUESTS</span> = <span class=\"number\">429</span>, <span class=\"comment\">// 发起的请求太多，太频繁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 5xx 状态码表示服务器错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">INTERNAL_SERVER_ERROR</span> = <span class=\"number\">500</span>, <span class=\"comment\">// 服务器发生内部错误</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">NOT_IMPLEMENTED</span> = <span class=\"number\">501</span>, <span class=\"comment\">// 服务器不支持请求的方法</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">BAD_GATEWAY</span> = <span class=\"number\">502</span>, <span class=\"comment\">// 服务器作为网关或代理，从上游服务器收到无效响应</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SERVICE_UNAVAILABLE</span> = <span class=\"number\">503</span>, <span class=\"comment\">// 服务器目前无法使用（由于临时过载或维护）</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GATEWAY_TIMEOUT</span> = <span class=\"number\">504</span>, <span class=\"comment\">// 服务器作为网关或代理，但是没有及时从上游服务器收到请求</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">HTTP_VERSION_NOT_SUPPORTED</span> = <span class=\"number\">505</span>, <span class=\"comment\">// 服务器不支持请求使用的HTTP版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 表示未知的状态码</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UNKNOWN</span> = <span class=\"number\">999</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiException</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HttpException</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"attr\">errCode</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">msg</span>: <span class=\"built_in\">string</span> | <span class=\"title class_\">Record</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">any</span>&gt;,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">errCode</span>: <span class=\"title class_\">HttpStatusCode</span> = <span class=\"title class_\">HttpStatusCode</span>.OK</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (errCode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 没有权限访问</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 登录失效</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 资源不存在， 验证码，接口地址，图片资源等等</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">NOT_FOUND</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">NOT_FOUND</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 其他归于服务器内部错误</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">super</span>(msg, errCode ?? <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span> = <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">getErrCode</span>(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">errCode</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常过滤器\"><a href=\"#异常过滤器\" class=\"headerlink\" title=\"异常过滤器\"></a>异常过滤器</h2><p>具体操作可查看<a href=\"https://nest.nodejs.cn/exception-filters#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\">文档</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">ArgumentsHost</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Catch</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExceptionFilter</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpException</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpStatus</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Catch</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AllExceptionFilter</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ExceptionFilter</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span>(<span class=\"attr\">exception</span>: T, <span class=\"attr\">host</span>: <span class=\"title class_\">ArgumentsHost</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ctx = host.<span class=\"title function_\">switchToHttp</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> response = ctx.<span class=\"title function_\">getResponse</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> &#123; status, result &#125; = <span class=\"variable language_\">this</span>.<span class=\"title function_\">errorResult</span>(exception);</span><br><span class=\"line\">\t\tresponse.<span class=\"title function_\">header</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class=\"line\">\t\tresponse.<span class=\"title function_\">status</span>(status).<span class=\"title function_\">json</span>(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">errorResult</span>(<span class=\"params\"><span class=\"attr\">exception</span>: <span class=\"built_in\">unknown</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> status =</span><br><span class=\"line\">\t\t\texception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span></span><br><span class=\"line\">\t\t\t\t? exception.<span class=\"title function_\">getStatus</span>()</span><br><span class=\"line\">\t\t\t\t: <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> code =</span><br><span class=\"line\">\t\t\texception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiException</span></span><br><span class=\"line\">\t\t\t\t? (exception <span class=\"keyword\">as</span> <span class=\"title class_\">ApiException</span>).<span class=\"title function_\">getErrCode</span>()</span><br><span class=\"line\">\t\t\t\t: status;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> response = exception.<span class=\"title function_\">getResponse</span>();</span><br><span class=\"line\">\t\t\tmessage = (response <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">message</span> ?? response;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmessage = <span class=\"string\">`<span class=\"subst\">$&#123;exception&#125;</span>`</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> getMsg = message;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用ValidationPipe可能会返回数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(message)) &#123;</span><br><span class=\"line\">\t\t\tmessage = getMsg[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tmessage = getMsg;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">status</span>: ![<span class=\"number\">200</span>, <span class=\"number\">500</span>, <span class=\"number\">401</span>].<span class=\"title function_\">includes</span>(status) ? <span class=\"number\">200</span> : status,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">result</span>: <span class=\"title class_\">HttpResult</span>.<span class=\"title function_\">error</span>(message, code),</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpResult</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">timestamp</span>: <span class=\"built_in\">string</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">readonly</span> <span class=\"attr\">context</span>: <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">context</span>?: <span class=\"built_in\">unknown</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;success&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"attr\">status</span>: <span class=\"built_in\">number</span> = <span class=\"number\">200</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = message;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">success</span>(<span class=\"params\"><span class=\"attr\">context</span>: <span class=\"built_in\">unknown</span>, message = <span class=\"string\">&quot;操作成功&quot;</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpResult</span>(context, message, <span class=\"number\">200</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">error</span>(<span class=\"params\">message = <span class=\"string\">&quot;操作失败&quot;</span>, status = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpResult</span>(<span class=\"literal\">null</span>, message, status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在<code>app.module.ts</code>中</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_FILTER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">AllExceptionFilter</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-拦截器","abbrlink":"31f56178","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n拦截器是用 `@Injectable()` 装饰器注释并实现 `NestInterceptor` 接口的类。\n\n拦截器具有一组有用的功能，这些功能的灵感来自 面向方面编程 (AOP) 技术。它们可以：\n\n- 在方法执行之前/之后绑定额外的逻辑\n- 转换函数返回的结果\n- 转换函数抛出的异常\n- 扩展基本功能行为\n- 根据特定条件完全覆盖函数（例如，出于缓存目的）\n\n在日常接口调试中，总会看到后端返回的数据格式都是一致的，例如：\n\n```json\n{\n\t\"success\": true,\n\t\"message\": \"操作成功\",\n\t\"context\": {},\n\t\"code\": 200\n}\n```\n\n接下来我会提到俩个案例，一个是接口返回拦截，一个是接口日志记录\n\n## 接口调用记录\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { LOG_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { BusinessTypeEnum, LogProductEnum } from \"../enum/log.enum\";\n\nexport class LogOption {\n\tprojectCode: LogProductEnum;\n\ttitle: string;\n\tbusinessType?: BusinessTypeEnum = BusinessTypeEnum.OTHER;\n}\nexport const Log = (logOption: LogOption) => {\n\treturn SetMetadata(\n\t\tLOG_KEY_METADATA,\n\t\tObject.assign(new LogOption(), logOption)\n\t);\n};\n```\n\n### 表结构\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { DeviceSysCodeEnum } from \"src/common/enum/device.enum\";\nimport {\n\tBusinessTypeEnum,\n\tLogProductEnum,\n\tLogStatusEnum,\n} from \"src/common/enum/log.enum\";\n\nexport const LOG_MODEL_NAME = \"db_logs\";\n\n@Schema()\nexport class Log_Schema {\n\t// 模块标题\n\t@Prop()\n\ttitle: string;\n\n\t// 业务类型, 添加还是修改\n\t@Prop({ default: BusinessTypeEnum.OTHER })\n\tbusinessType: number;\n\n\t// 请求平台code\n\t@Prop({ default: DeviceSysCodeEnum.OTHER })\n\tplatformCode: string;\n\n\t// 项目code\n\t@Prop({ default: LogProductEnum.OTHER })\n\tprojectCode: number;\n\n\t// 请求方法\n\t@Prop()\n\tmethod: string;\n\n\t// 请求参数\n\t@Prop()\n\trequestParam: string;\n\n\t// 请求用户\n\t@Prop()\n\toperateUser: string;\n\n\t// 请求用户id\n\t@Prop()\n\toperateUserId: string;\n\n\t// 请求ip\n\t@Prop()\n\tip: string;\n\n\t// 请求的地址\n\t@Prop()\n\taddress: string;\n\n\t// 请求的状态\n\t@Prop({ default: LogStatusEnum.SUCCESS })\n\tstatus: number;\n\n\t// 请求异常原因\n\t@Prop()\n\terrorMsg: string;\n\n\t// 请求地址\n\t@Prop()\n\turl: string;\n\n\t// 操作时间\n\t@Prop()\n\tcreateTime: string;\n}\n\nexport const LogSchema = SchemaFactory.createForClass(Log_Schema);\n```\n\n### 涉及到的枚举\n\n```ts\nexport enum LogProductEnum {\n\t// 其他\n\tOTHER = 0,\n\t// 后台\n\tADMIN = 1,\n\t// 商家\n\tMERCHANT = 2,\n\t// 全局\n\tGLOBAL = 3,\n}\n\nexport enum BusinessTypeEnum {\n\t// 其它\n\tOTHER = 0,\n\t// 新增\n\tINSERT = 1,\n\t// 修改\n\tUPDATE = 2,\n\t// 删除\n\tDELETE = 3,\n\t// 查询\n\tSELECT = 4,\n\t// 授权\n\tGRANT = 5,\n\t// 导出\n\tEXPORT = 6,\n\t// 导入\n\tIMPORT = 7,\n}\n\nexport enum LogStatusEnum {\n\t// 成功\n\tSUCCESS = 0,\n\t// 失败\n\tFAIL = 1,\n}\n\nexport enum DeviceSysCodeEnum {\n\t// h5\n\tH5 = \"H5\",\n\t// pc\n\tPC = \"PC\",\n\t// 移动端\n\tMOBILE = \"MOBILE\",\n\t// 小程序\n\tMINI_PROGRAM = \"MINI_PROGRAM\",\n\t// 其他\n\tOTHER = \"OTHER\",\n}\n```\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tInjectable,\n\tNestInterceptor,\n\tStreamableFile,\n} from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable, tap } from \"rxjs\";\nimport { CommonService } from \"src/shared/common/common.service\";\nimport { LOG_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { LogOption } from \"../decorator/log.decorator\";\nimport { HttpResult } from \"../class/result.class\";\nimport { DeviceSysCodeEnum } from \"../enum/device.enum\";\nimport { LogStatusEnum } from \"../enum/log.enum\";\nimport { AllExceptionFilter } from \"../filter/all-exception.filter\";\nimport { LogService } from \"src/shared/log/log.service\";\nimport { Log_Schema } from \"src/shared/log/schemas/log.schema\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\nexport class LogInterceptor implements NestInterceptor {\n\tconstructor(\n\t\tprivate readonly reflector: Reflector,\n\t\tprivate readonly commonService: CommonService,\n\t\tprivate readonly logService: LogService\n\t) {}\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\treturn next.handle().pipe(\n\t\t\ttap({\n\t\t\t\tnext: data => {\n\t\t\t\t\treturn this.log(context, data);\n\t\t\t\t},\n\t\t\t\terror: error => {\n\t\t\t\t\tconst allExceptionFilter = new AllExceptionFilter();\n\t\t\t\t\tconst { result } = allExceptionFilter.errorResult(error);\n\t\t\t\t\treturn this.log(context, result);\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\tasync log(context: ExecutionContext, data: HttpResult) {\n\t\tconst logOption = this.reflector.get<LogOption>(\n\t\t\t// 可以看上一章路由守卫\n\t\t\tLOG_KEY_METADATA,\n\t\t\tcontext.getHandler()\n\t\t);\n\t\tif (!logOption) return true;\n\t\tconst request = context.switchToHttp().getRequest();\n\t\tconst method = request.method.toUpperCase();\n\t\tconst logDto = new Log_Schema();\n\t\t// 模块标题\n\t\tlogDto.title = logOption.title;\n\t\t// 业务类型\n\t\tlogDto.businessType = logOption.businessType;\n\t\t// 请求平台code\n\t\tlogDto.platformCode =\n\t\t\trequest.headers[\"platformCode\"] ?? DeviceSysCodeEnum.OTHER;\n\t\t// 项目code\n\t\tlogDto.projectCode = logOption.projectCode;\n\t\t// 请求方式\n\t\tlogDto.method = method;\n\t\t// 请求参数\n\t\tlogDto.requestParam = JSON.stringify({\n\t\t\tparams: request.params,\n\t\t\tquery: request.query,\n\t\t\tbody: request.body,\n\t\t});\n\t\t// 请求地址\n\t\tlogDto.url = request.url;\n\t\t// 请求用户\n\t\tlogDto.operateUser = request?.user?.username ?? \"\";\n\t\t// 请求用户id\n\t\tlogDto.operateUserId = request?.user?._id ?? \"\";\n\t\t// 请求ip\n\t\tlogDto.ip = this.commonService.getIp(request);\n\t\t// 请求的地址\n\t\tlogDto.address = await this.commonService.getLocation(logDto.ip);\n\t\t// 操作时间\n\t\tlogDto.createTime = this.commonService.formatDate();\n\t\t// 成功的请求\n\t\tif (\n\t\t\t(data && data.status === HttpStatusCode.OK) ||\n\t\t\tdata instanceof StreamableFile\n\t\t) {\n\t\t\t//如果是流，都算成功\n\t\t\tlogDto.status = LogStatusEnum.SUCCESS;\n\t\t} else {\n\t\t\t//失败的请求\n\t\t\tlogDto.status = LogStatusEnum.FAIL;\n\t\t\tlogDto.errorMsg = data && data.message;\n\t\t}\n\t\t// 这里自己写，就是将这条数据添加到数据库\n\t\tawait this.logService.create(logDto);\n\t}\n}\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LogInterceptor,\n    },\n  ],\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码\n\t@Log({\n\t\ttitle: \"添加用户\",\n\t\tprojectCode: LogProductEnum.ADMIN,\n\t})\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 拦截器\n\n### 拦截器代码\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tInjectable,\n\tNestInterceptor,\n} from \"@nestjs/common\";\nimport { map, Observable, tap } from \"rxjs\";\nimport { HttpResult } from \"../class/result.class\";\n\n@Injectable()\nexport class InterceptorInterceptor implements NestInterceptor {\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\tconst request = context.switchToHttp().getRequest();\n\t\treturn next.handle().pipe(\n\t\t\ttap(() => {\n\t\t\t\tconsole.log(request);\n\t\t\t}),\n\t\t\tmap(data => {\n\t\t\t\treturn HttpResult.success(\n\t\t\t\t\tdata?.context ?? data,\n\t\t\t\t\tdata?.message ?? \"操作成功\"\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n}\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: InterceptorInterceptor,\n    },\n  ],\n})\n```\n\n---\n\n## 注意\n\n1. [`LOG_KEY_METADATA` 在这里](/brochure/nest/base/canActive.html#常量文件)\n2. [`AllExceptionFilter` 在这里](/brochure/nest/base/exceptionFilter.html#异常过滤器)\n3. [`HttpResult` 在这里](/brochure/nest/base/exceptionFilter.html#异常过滤器)\n","source":"_posts/技能小册/Nest/拦截器.md","raw":"---\ntitle: Nest-拦截器\nabbrlink: 31f56178\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n拦截器是用 `@Injectable()` 装饰器注释并实现 `NestInterceptor` 接口的类。\n\n拦截器具有一组有用的功能，这些功能的灵感来自 面向方面编程 (AOP) 技术。它们可以：\n\n- 在方法执行之前/之后绑定额外的逻辑\n- 转换函数返回的结果\n- 转换函数抛出的异常\n- 扩展基本功能行为\n- 根据特定条件完全覆盖函数（例如，出于缓存目的）\n\n在日常接口调试中，总会看到后端返回的数据格式都是一致的，例如：\n\n```json\n{\n\t\"success\": true,\n\t\"message\": \"操作成功\",\n\t\"context\": {},\n\t\"code\": 200\n}\n```\n\n接下来我会提到俩个案例，一个是接口返回拦截，一个是接口日志记录\n\n## 接口调用记录\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { LOG_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { BusinessTypeEnum, LogProductEnum } from \"../enum/log.enum\";\n\nexport class LogOption {\n\tprojectCode: LogProductEnum;\n\ttitle: string;\n\tbusinessType?: BusinessTypeEnum = BusinessTypeEnum.OTHER;\n}\nexport const Log = (logOption: LogOption) => {\n\treturn SetMetadata(\n\t\tLOG_KEY_METADATA,\n\t\tObject.assign(new LogOption(), logOption)\n\t);\n};\n```\n\n### 表结构\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { DeviceSysCodeEnum } from \"src/common/enum/device.enum\";\nimport {\n\tBusinessTypeEnum,\n\tLogProductEnum,\n\tLogStatusEnum,\n} from \"src/common/enum/log.enum\";\n\nexport const LOG_MODEL_NAME = \"db_logs\";\n\n@Schema()\nexport class Log_Schema {\n\t// 模块标题\n\t@Prop()\n\ttitle: string;\n\n\t// 业务类型, 添加还是修改\n\t@Prop({ default: BusinessTypeEnum.OTHER })\n\tbusinessType: number;\n\n\t// 请求平台code\n\t@Prop({ default: DeviceSysCodeEnum.OTHER })\n\tplatformCode: string;\n\n\t// 项目code\n\t@Prop({ default: LogProductEnum.OTHER })\n\tprojectCode: number;\n\n\t// 请求方法\n\t@Prop()\n\tmethod: string;\n\n\t// 请求参数\n\t@Prop()\n\trequestParam: string;\n\n\t// 请求用户\n\t@Prop()\n\toperateUser: string;\n\n\t// 请求用户id\n\t@Prop()\n\toperateUserId: string;\n\n\t// 请求ip\n\t@Prop()\n\tip: string;\n\n\t// 请求的地址\n\t@Prop()\n\taddress: string;\n\n\t// 请求的状态\n\t@Prop({ default: LogStatusEnum.SUCCESS })\n\tstatus: number;\n\n\t// 请求异常原因\n\t@Prop()\n\terrorMsg: string;\n\n\t// 请求地址\n\t@Prop()\n\turl: string;\n\n\t// 操作时间\n\t@Prop()\n\tcreateTime: string;\n}\n\nexport const LogSchema = SchemaFactory.createForClass(Log_Schema);\n```\n\n### 涉及到的枚举\n\n```ts\nexport enum LogProductEnum {\n\t// 其他\n\tOTHER = 0,\n\t// 后台\n\tADMIN = 1,\n\t// 商家\n\tMERCHANT = 2,\n\t// 全局\n\tGLOBAL = 3,\n}\n\nexport enum BusinessTypeEnum {\n\t// 其它\n\tOTHER = 0,\n\t// 新增\n\tINSERT = 1,\n\t// 修改\n\tUPDATE = 2,\n\t// 删除\n\tDELETE = 3,\n\t// 查询\n\tSELECT = 4,\n\t// 授权\n\tGRANT = 5,\n\t// 导出\n\tEXPORT = 6,\n\t// 导入\n\tIMPORT = 7,\n}\n\nexport enum LogStatusEnum {\n\t// 成功\n\tSUCCESS = 0,\n\t// 失败\n\tFAIL = 1,\n}\n\nexport enum DeviceSysCodeEnum {\n\t// h5\n\tH5 = \"H5\",\n\t// pc\n\tPC = \"PC\",\n\t// 移动端\n\tMOBILE = \"MOBILE\",\n\t// 小程序\n\tMINI_PROGRAM = \"MINI_PROGRAM\",\n\t// 其他\n\tOTHER = \"OTHER\",\n}\n```\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tInjectable,\n\tNestInterceptor,\n\tStreamableFile,\n} from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable, tap } from \"rxjs\";\nimport { CommonService } from \"src/shared/common/common.service\";\nimport { LOG_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { LogOption } from \"../decorator/log.decorator\";\nimport { HttpResult } from \"../class/result.class\";\nimport { DeviceSysCodeEnum } from \"../enum/device.enum\";\nimport { LogStatusEnum } from \"../enum/log.enum\";\nimport { AllExceptionFilter } from \"../filter/all-exception.filter\";\nimport { LogService } from \"src/shared/log/log.service\";\nimport { Log_Schema } from \"src/shared/log/schemas/log.schema\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\nexport class LogInterceptor implements NestInterceptor {\n\tconstructor(\n\t\tprivate readonly reflector: Reflector,\n\t\tprivate readonly commonService: CommonService,\n\t\tprivate readonly logService: LogService\n\t) {}\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\treturn next.handle().pipe(\n\t\t\ttap({\n\t\t\t\tnext: data => {\n\t\t\t\t\treturn this.log(context, data);\n\t\t\t\t},\n\t\t\t\terror: error => {\n\t\t\t\t\tconst allExceptionFilter = new AllExceptionFilter();\n\t\t\t\t\tconst { result } = allExceptionFilter.errorResult(error);\n\t\t\t\t\treturn this.log(context, result);\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\tasync log(context: ExecutionContext, data: HttpResult) {\n\t\tconst logOption = this.reflector.get<LogOption>(\n\t\t\t// 可以看上一章路由守卫\n\t\t\tLOG_KEY_METADATA,\n\t\t\tcontext.getHandler()\n\t\t);\n\t\tif (!logOption) return true;\n\t\tconst request = context.switchToHttp().getRequest();\n\t\tconst method = request.method.toUpperCase();\n\t\tconst logDto = new Log_Schema();\n\t\t// 模块标题\n\t\tlogDto.title = logOption.title;\n\t\t// 业务类型\n\t\tlogDto.businessType = logOption.businessType;\n\t\t// 请求平台code\n\t\tlogDto.platformCode =\n\t\t\trequest.headers[\"platformCode\"] ?? DeviceSysCodeEnum.OTHER;\n\t\t// 项目code\n\t\tlogDto.projectCode = logOption.projectCode;\n\t\t// 请求方式\n\t\tlogDto.method = method;\n\t\t// 请求参数\n\t\tlogDto.requestParam = JSON.stringify({\n\t\t\tparams: request.params,\n\t\t\tquery: request.query,\n\t\t\tbody: request.body,\n\t\t});\n\t\t// 请求地址\n\t\tlogDto.url = request.url;\n\t\t// 请求用户\n\t\tlogDto.operateUser = request?.user?.username ?? \"\";\n\t\t// 请求用户id\n\t\tlogDto.operateUserId = request?.user?._id ?? \"\";\n\t\t// 请求ip\n\t\tlogDto.ip = this.commonService.getIp(request);\n\t\t// 请求的地址\n\t\tlogDto.address = await this.commonService.getLocation(logDto.ip);\n\t\t// 操作时间\n\t\tlogDto.createTime = this.commonService.formatDate();\n\t\t// 成功的请求\n\t\tif (\n\t\t\t(data && data.status === HttpStatusCode.OK) ||\n\t\t\tdata instanceof StreamableFile\n\t\t) {\n\t\t\t//如果是流，都算成功\n\t\t\tlogDto.status = LogStatusEnum.SUCCESS;\n\t\t} else {\n\t\t\t//失败的请求\n\t\t\tlogDto.status = LogStatusEnum.FAIL;\n\t\t\tlogDto.errorMsg = data && data.message;\n\t\t}\n\t\t// 这里自己写，就是将这条数据添加到数据库\n\t\tawait this.logService.create(logDto);\n\t}\n}\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LogInterceptor,\n    },\n  ],\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码\n\t@Log({\n\t\ttitle: \"添加用户\",\n\t\tprojectCode: LogProductEnum.ADMIN,\n\t})\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 拦截器\n\n### 拦截器代码\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tInjectable,\n\tNestInterceptor,\n} from \"@nestjs/common\";\nimport { map, Observable, tap } from \"rxjs\";\nimport { HttpResult } from \"../class/result.class\";\n\n@Injectable()\nexport class InterceptorInterceptor implements NestInterceptor {\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\tconst request = context.switchToHttp().getRequest();\n\t\treturn next.handle().pipe(\n\t\t\ttap(() => {\n\t\t\t\tconsole.log(request);\n\t\t\t}),\n\t\t\tmap(data => {\n\t\t\t\treturn HttpResult.success(\n\t\t\t\t\tdata?.context ?? data,\n\t\t\t\t\tdata?.message ?? \"操作成功\"\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n}\n```\n\n### 注册\n\n在 `app.module.ts`中:\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: InterceptorInterceptor,\n    },\n  ],\n})\n```\n\n---\n\n## 注意\n\n1. [`LOG_KEY_METADATA` 在这里](/brochure/nest/base/canActive.html#常量文件)\n2. [`AllExceptionFilter` 在这里](/brochure/nest/base/exceptionFilter.html#异常过滤器)\n3. [`HttpResult` 在这里](/brochure/nest/base/exceptionFilter.html#异常过滤器)\n","slug":"技能小册/Nest/拦截器","published":1,"updated":"2025-03-12T09:44:30.928Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iz003lfg9mc0xf3pui","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>拦截器是用 <code>@Injectable()</code> 装饰器注释并实现 <code>NestInterceptor</code> 接口的类。</p>\n<p>拦截器具有一组有用的功能，这些功能的灵感来自 面向方面编程 (AOP) 技术。它们可以：</p>\n<ul>\n<li>在方法执行之前&#x2F;之后绑定额外的逻辑</li>\n<li>转换函数返回的结果</li>\n<li>转换函数抛出的异常</li>\n<li>扩展基本功能行为</li>\n<li>根据特定条件完全覆盖函数（例如，出于缓存目的）</li>\n</ul>\n<p>在日常接口调试中，总会看到后端返回的数据格式都是一致的，例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;操作成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;context&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我会提到俩个案例，一个是接口返回拦截，一个是接口日志记录</p>\n<h2 id=\"接口调用记录\"><a href=\"#接口调用记录\" class=\"headerlink\" title=\"接口调用记录\"></a>接口调用记录</h2><h3 id=\"自定义元数据\"><a href=\"#自定义元数据\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">LOG_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BusinessTypeEnum</span>, <span class=\"title class_\">LogProductEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/log.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">projectCode</span>: <span class=\"title class_\">LogProductEnum</span>;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">businessType</span>?: <span class=\"title class_\">BusinessTypeEnum</span> = <span class=\"title class_\">BusinessTypeEnum</span>.<span class=\"property\">OTHER</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Log</span> = (<span class=\"params\"><span class=\"attr\">logOption</span>: <span class=\"title class_\">LogOption</span></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">LOG_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">LogOption</span>(), logOption)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeviceSysCodeEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/common/enum/device.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BusinessTypeEnum</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">LogProductEnum</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">LogStatusEnum</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/common/enum/log.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOG_MODEL_NAME</span> = <span class=\"string\">&quot;db_logs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Log_Schema</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模块标题</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 业务类型, 添加还是修改</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">BusinessTypeEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">businessType</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求平台code</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">DeviceSysCodeEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">platformCode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 项目code</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">LogProductEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">projectCode</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求方法</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">method</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">requestParam</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求用户</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">operateUser</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求用户id</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">operateUserId</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求ip</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">ip</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求的地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">address</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求的状态</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">SUCCESS</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求异常原因</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">errorMsg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 操作时间</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">createTime</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LogSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Log</span>_Schema);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"涉及到的枚举\"><a href=\"#涉及到的枚举\" class=\"headerlink\" title=\"涉及到的枚举\"></a>涉及到的枚举</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">LogProductEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 其他</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 后台</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">ADMIN</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 商家</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MERCHANT</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 全局</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GLOBAL</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">BusinessTypeEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 其它</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 新增</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">INSERT</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 修改</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UPDATE</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">DELETE</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SELECT</span> = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 授权</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GRANT</span> = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 导出</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">EXPORT</span> = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 导入</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">IMPORT</span> = <span class=\"number\">7</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">LogStatusEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 成功</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SUCCESS</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 失败</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FAIL</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">DeviceSysCodeEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// h5</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">H5</span> = <span class=\"string\">&quot;H5&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// pc</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PC</span> = <span class=\"string\">&quot;PC&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 移动端</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MOBILE</span> = <span class=\"string\">&quot;MOBILE&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 小程序</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MINI_PROGRAM</span> = <span class=\"string\">&quot;MINI_PROGRAM&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"string\">&quot;OTHER&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">StreamableFile</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span>, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/common/common.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">LOG_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/log.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeviceSysCodeEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/device.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogStatusEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/log.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AllExceptionFilter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../filter/all-exception.filter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/log/log.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Log</span>_Schema &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/log/schemas/log.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">commonService</span>: <span class=\"title class_\">CommonService</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logService</span>: <span class=\"title class_\">LogService</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">tap</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">next</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(context, data);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> allExceptionFilter = <span class=\"keyword\">new</span> <span class=\"title class_\">AllExceptionFilter</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> &#123; result &#125; = allExceptionFilter.<span class=\"title function_\">errorResult</span>(error);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(context, result);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">log</span>(<span class=\"params\"><span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HttpResult</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logOption = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">LogOption</span>&gt;(</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可以看上一章路由守卫</span></span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">LOG_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\tcontext.<span class=\"title function_\">getHandler</span>()</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!logOption) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> method = request.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logDto = <span class=\"keyword\">new</span> <span class=\"title class_\">Log</span>_Schema();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模块标题</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">title</span> = logOption.<span class=\"property\">title</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 业务类型</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">businessType</span> = logOption.<span class=\"property\">businessType</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求平台code</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">platformCode</span> =</span><br><span class=\"line\">\t\t\trequest.<span class=\"property\">headers</span>[<span class=\"string\">&quot;platformCode&quot;</span>] ?? <span class=\"title class_\">DeviceSysCodeEnum</span>.<span class=\"property\">OTHER</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 项目code</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">projectCode</span> = logOption.<span class=\"property\">projectCode</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求方式</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">method</span> = method;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">requestParam</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">params</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">url</span> = request.<span class=\"property\">url</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求用户</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">operateUser</span> = request?.<span class=\"property\">user</span>?.<span class=\"property\">username</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求用户id</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">operateUserId</span> = request?.<span class=\"property\">user</span>?.<span class=\"property\">_id</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求ip</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">ip</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getIp</span>(request);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求的地址</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">address</span> = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getLocation</span>(logDto.<span class=\"property\">ip</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作时间</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">createTime</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">formatDate</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 成功的请求</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (</span><br><span class=\"line\">\t\t\t(data &amp;&amp; data.<span class=\"property\">status</span> === <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>) ||</span><br><span class=\"line\">\t\t\tdata <span class=\"keyword\">instanceof</span> <span class=\"title class_\">StreamableFile</span></span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果是流，都算成功</span></span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">status</span> = <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">SUCCESS</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//失败的请求</span></span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">status</span> = <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">FAIL</span>;</span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">errorMsg</span> = data &amp;&amp; data.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里自己写，就是将这条数据添加到数据库</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logService</span>.<span class=\"title function_\">create</span>(logDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">LogInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用\"><a href=\"#控制层使用\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码</span></span><br><span class=\"line\">\t<span class=\"meta\">@Log</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;添加用户&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">projectCode</span>: <span class=\"title class_\">LogProductEnum</span>.<span class=\"property\">ADMIN</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><h3 id=\"拦截器代码\"><a href=\"#拦截器代码\" class=\"headerlink\" title=\"拦截器代码\"></a>拦截器代码</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, <span class=\"title class_\">Observable</span>, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">tap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(request);</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">HttpResult</span>.<span class=\"title function_\">success</span>(</span><br><span class=\"line\">\t\t\t\t\tdata?.<span class=\"property\">context</span> ?? data,</span><br><span class=\"line\">\t\t\t\t\tdata?.<span class=\"property\">message</span> ?? <span class=\"string\">&quot;操作成功&quot;</span></span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-1\"><a href=\"#注册-1\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">InterceptorInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><a href=\"/brochure/nest/base/canActive.html#%E5%B8%B8%E9%87%8F%E6%96%87%E4%BB%B6\"><code>LOG_KEY_METADATA</code> 在这里</a></li>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E5%BC%82%E5%B8%B8%E8%BF%87%E6%BB%A4%E5%99%A8\"><code>AllExceptionFilter</code> 在这里</a></li>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E5%BC%82%E5%B8%B8%E8%BF%87%E6%BB%A4%E5%99%A8\"><code>HttpResult</code> 在这里</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>拦截器是用 <code>@Injectable()</code> 装饰器注释并实现 <code>NestInterceptor</code> 接口的类。</p>\n<p>拦截器具有一组有用的功能，这些功能的灵感来自 面向方面编程 (AOP) 技术。它们可以：</p>\n<ul>\n<li>在方法执行之前&#x2F;之后绑定额外的逻辑</li>\n<li>转换函数返回的结果</li>\n<li>转换函数抛出的异常</li>\n<li>扩展基本功能行为</li>\n<li>根据特定条件完全覆盖函数（例如，出于缓存目的）</li>\n</ul>\n<p>在日常接口调试中，总会看到后端返回的数据格式都是一致的，例如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;操作成功&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;context&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来我会提到俩个案例，一个是接口返回拦截，一个是接口日志记录</p>\n<h2 id=\"接口调用记录\"><a href=\"#接口调用记录\" class=\"headerlink\" title=\"接口调用记录\"></a>接口调用记录</h2><h3 id=\"自定义元数据\"><a href=\"#自定义元数据\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">LOG_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">BusinessTypeEnum</span>, <span class=\"title class_\">LogProductEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/log.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">projectCode</span>: <span class=\"title class_\">LogProductEnum</span>;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">businessType</span>?: <span class=\"title class_\">BusinessTypeEnum</span> = <span class=\"title class_\">BusinessTypeEnum</span>.<span class=\"property\">OTHER</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Log</span> = (<span class=\"params\"><span class=\"attr\">logOption</span>: <span class=\"title class_\">LogOption</span></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">LOG_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">LogOption</span>(), logOption)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeviceSysCodeEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/common/enum/device.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BusinessTypeEnum</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">LogProductEnum</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">LogStatusEnum</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/common/enum/log.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOG_MODEL_NAME</span> = <span class=\"string\">&quot;db_logs&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Log_Schema</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 模块标题</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 业务类型, 添加还是修改</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">BusinessTypeEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">businessType</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求平台code</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">DeviceSysCodeEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">platformCode</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 项目code</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">LogProductEnum</span>.<span class=\"property\">OTHER</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">projectCode</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求方法</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">method</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">requestParam</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求用户</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">operateUser</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求用户id</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">operateUserId</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求ip</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">ip</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求的地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">address</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求的状态</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>(&#123; <span class=\"attr\">default</span>: <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">SUCCESS</span> &#125;)</span><br><span class=\"line\">\t<span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求异常原因</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">errorMsg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 操作时间</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">createTime</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LogSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Log</span>_Schema);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"涉及到的枚举\"><a href=\"#涉及到的枚举\" class=\"headerlink\" title=\"涉及到的枚举\"></a>涉及到的枚举</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">LogProductEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 其他</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 后台</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">ADMIN</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 商家</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MERCHANT</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 全局</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GLOBAL</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">BusinessTypeEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 其它</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 新增</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">INSERT</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 修改</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">UPDATE</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">DELETE</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 查询</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SELECT</span> = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 授权</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">GRANT</span> = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 导出</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">EXPORT</span> = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 导入</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">IMPORT</span> = <span class=\"number\">7</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">LogStatusEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 成功</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">SUCCESS</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 失败</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">FAIL</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">DeviceSysCodeEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// h5</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">H5</span> = <span class=\"string\">&quot;H5&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// pc</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">PC</span> = <span class=\"string\">&quot;PC&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 移动端</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MOBILE</span> = <span class=\"string\">&quot;MOBILE&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 小程序</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">MINI_PROGRAM</span> = <span class=\"string\">&quot;MINI_PROGRAM&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 其他</span></span><br><span class=\"line\">\t<span class=\"variable constant_\">OTHER</span> = <span class=\"string\">&quot;OTHER&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">StreamableFile</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span>, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/common/common.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">LOG_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/log.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DeviceSysCodeEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/device.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogStatusEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/log.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AllExceptionFilter</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../filter/all-exception.filter&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">LogService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/log/log.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Log</span>_Schema &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/log/schemas/log.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">commonService</span>: <span class=\"title class_\">CommonService</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">logService</span>: <span class=\"title class_\">LogService</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">tap</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">next</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(context, data);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> allExceptionFilter = <span class=\"keyword\">new</span> <span class=\"title class_\">AllExceptionFilter</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> &#123; result &#125; = allExceptionFilter.<span class=\"title function_\">errorResult</span>(error);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(context, result);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">log</span>(<span class=\"params\"><span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">HttpResult</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logOption = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">LogOption</span>&gt;(</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可以看上一章路由守卫</span></span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">LOG_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\tcontext.<span class=\"title function_\">getHandler</span>()</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!logOption) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> method = request.<span class=\"property\">method</span>.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logDto = <span class=\"keyword\">new</span> <span class=\"title class_\">Log</span>_Schema();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模块标题</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">title</span> = logOption.<span class=\"property\">title</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 业务类型</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">businessType</span> = logOption.<span class=\"property\">businessType</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求平台code</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">platformCode</span> =</span><br><span class=\"line\">\t\t\trequest.<span class=\"property\">headers</span>[<span class=\"string\">&quot;platformCode&quot;</span>] ?? <span class=\"title class_\">DeviceSysCodeEnum</span>.<span class=\"property\">OTHER</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 项目code</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">projectCode</span> = logOption.<span class=\"property\">projectCode</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求方式</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">method</span> = method;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求参数</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">requestParam</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">params</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求地址</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">url</span> = request.<span class=\"property\">url</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求用户</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">operateUser</span> = request?.<span class=\"property\">user</span>?.<span class=\"property\">username</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求用户id</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">operateUserId</span> = request?.<span class=\"property\">user</span>?.<span class=\"property\">_id</span> ?? <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求ip</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">ip</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getIp</span>(request);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求的地址</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">address</span> = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getLocation</span>(logDto.<span class=\"property\">ip</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作时间</span></span><br><span class=\"line\">\t\tlogDto.<span class=\"property\">createTime</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">formatDate</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 成功的请求</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (</span><br><span class=\"line\">\t\t\t(data &amp;&amp; data.<span class=\"property\">status</span> === <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">OK</span>) ||</span><br><span class=\"line\">\t\t\tdata <span class=\"keyword\">instanceof</span> <span class=\"title class_\">StreamableFile</span></span><br><span class=\"line\">\t\t) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果是流，都算成功</span></span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">status</span> = <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">SUCCESS</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//失败的请求</span></span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">status</span> = <span class=\"title class_\">LogStatusEnum</span>.<span class=\"property\">FAIL</span>;</span><br><span class=\"line\">\t\t\tlogDto.<span class=\"property\">errorMsg</span> = data &amp;&amp; data.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里自己写，就是将这条数据添加到数据库</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">logService</span>.<span class=\"title function_\">create</span>(logDto);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">LogInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用\"><a href=\"#控制层使用\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码</span></span><br><span class=\"line\">\t<span class=\"meta\">@Log</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;添加用户&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">projectCode</span>: <span class=\"title class_\">LogProductEnum</span>.<span class=\"property\">ADMIN</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><h3 id=\"拦截器代码\"><a href=\"#拦截器代码\" class=\"headerlink\" title=\"拦截器代码\"></a>拦截器代码</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, <span class=\"title class_\">Observable</span>, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpResult</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../class/result.class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">tap</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(request);</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">HttpResult</span>.<span class=\"title function_\">success</span>(</span><br><span class=\"line\">\t\t\t\t\tdata?.<span class=\"property\">context</span> ?? data,</span><br><span class=\"line\">\t\t\t\t\tdata?.<span class=\"property\">message</span> ?? <span class=\"string\">&quot;操作成功&quot;</span></span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-1\"><a href=\"#注册-1\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>在 <code>app.module.ts</code>中:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">InterceptorInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><a href=\"/brochure/nest/base/canActive.html#%E5%B8%B8%E9%87%8F%E6%96%87%E4%BB%B6\"><code>LOG_KEY_METADATA</code> 在这里</a></li>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E5%BC%82%E5%B8%B8%E8%BF%87%E6%BB%A4%E5%99%A8\"><code>AllExceptionFilter</code> 在这里</a></li>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E5%BC%82%E5%B8%B8%E8%BF%87%E6%BB%A4%E5%99%A8\"><code>HttpResult</code> 在这里</a></li>\n</ol>\n"},{"title":"Nest-数据库的配置","abbrlink":"677fbfc8","date":"2024-11-08T01:05:01.000Z","_content":"\n# 数据库的配置\n\n> 在`node`服务中，不论使用的`express`还是`nest`，都是有一些配置，环境的配置，数据库的配置等等； 那么俩者还是有些差别的；\n\n这里我列举`mongodb和redis`在`nest`中的使用；\n\n## Mongodb\n\n### 依赖安装\n\n首先安装依赖:\n\n```sh\npnpm add @nestjs/mongoose mongoose\n```\n\n安装成功之后, 那么只需要在`app.module.ts`中配置：\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\n@Module({\n\t// 不过建议可以将链接放到环境变量里，更安全\n\timports: [MongooseModule.forRoot(\"mongodb://localhost/nest\")],\n})\nexport class AppModule {}\n```\n\n这样就可以链接数据库了，数据库名为`nest`；不过这只是能保证数据库的连接，但是想要添加数据等操作还需要配置其他；\n\n这里我按照一个例子去讲解，**就比如添加用户**, 运行`nest-cli`命令\n\n```sh\nnest g res users\n```\n\n这样会创建`users`文件夹\n\n### 模型注入\n\n创建文件`user.schema.ts`, 代码如下\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nexport const ADMIN_USER_MODEL_NAME = \"db_admin_users\";\n\n@Schema()\nexport class Admin_User_Schema {\n\t_id: string;\n\t// 用户名\n\t@Prop()\n\tusername: string;\n\t// 密码\n\t@Prop()\n\tpassword: string;\n}\nexport const AdminUserSchema = SchemaFactory.createForClass(Admin_User_Schema);\n```\n\n代码讲解：\n\n- `@Schema` 标记为数据库的模型(简单理解就是表结构)， `ADMIN_USER_MODEL_NAME` 为数据库的表名， `AdminUserSchema` 为数据库的模型；\n- `@Prop` 标记为数据库的属性， `username` 为数据库的属性名， `password` 为数据库的属性名；\n- `_id` 为数据库的主键(mongodb 会自动生成主键，这里不写都没关系)， `@Prop` 标记为数据库的属性， `type` 为数据库的类型， `string` 为数据库的类型；\n\n这样数据库的表结构就设计完成了，接下来需要连接表，这样后续才能对表进行操作(CURD)；\n\n### 表链接\n\n在`user`目录下操作`user.module.ts`\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ADMIN_USER_MODEL_NAME, AdminUserSchema } from \"./schemas/user.schema\";\n\n@Module({\n\timports: [\n\t\t// 核心代码\n\t\tMongooseModule.forFeature([\n\t\t\t{\n\t\t\t\t// 表名\n\t\t\t\tname: ADMIN_USER_MODEL_NAME,\n\t\t\t\t// 表模型\n\t\t\t\tschema: AdminUserSchema,\n\t\t\t},\n\t\t]),\n\t],\n\tcontrollers: [UserController],\n\tproviders: [UserService],\n\texports: [UserService],\n})\nexport class UserModule {}\n```\n\n这样数据表是没有数据的，那么接着将一条测试数据添加在数据表里：\n\n在`user.controller.ts`中进行模型的注入：\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nexport class UserController {\n\t// 服务层\n\tconstructor(private readonly userService: UserService) {}\n\n\t// 接口地址\n\t@Post(\"create\")\n\t// 请求的参数\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\t// 调用的服务层\n\t\treturn await this.userService.create(body);\n\t}\n}\n```\n\n`user.service.ts`代码如下：\n\n```ts\nimport { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n\tADMIN_USER_MODEL_NAME,\n\tAdmin_User_Schema,\n} from \"./schemas/user.schema\";\n@Injectable()\nexport class UserService {\n\tconstructor(\n\t\t@InjectModel(ADMIN_USER_MODEL_NAME)\n\t\tprivate readonly userModel: Model<Admin_User_Schema>\n\t) {}\n\tasync create(createUserDto: CreateUserDto) {\n\t\tconst result = await this.userModel.create(createUserDto);\n\t\treturn null;\n\t}\n}\n```\n\n当你使用`apiFox or postman`调用`http://localhost:3000/create`就会发现数据表里有一条数据了；\n\n## Redis\n\n### 依赖安装\n\n```sh\npnpm add @nestjs-modules/ioredis ioredis\n```\n\n安装成功之后，同样在`app.module.ts`中配置：\n\n```ts\nimport { RedisModule } from '@nestjs-modules/ioredis';\n\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      useFactory: () => ({\n        type: 'single',\n        // 俩种方式\n        // url: process.env.REDIS_URL,\n        // 密码格式： redis\"//密码@localhost:27017/nest-app\n        url: `redis://${process.env.REDIS_PWD ? process.env.REDIS_PWD + '@' : ''}${process.env.REDIS_HOST}:${process.env.REDIS_PORT}/${process.env.REDIS_DB}`,\n      }),\n    }),\n  ]\n})\n```\n\n### 模块注入\n\n```ts\nimport { InjectRedis } from \"@nestjs-modules/ioredis\";\nimport { Injectable } from \"@nestjs/common\";\nimport Redis from \"ioredis\";\n\n@Injectable()\nexport class CacheService {\n\tconstructor(@InjectRedis() private readonly redis: Redis) {}\n\n\tasync get(key: string) {\n\t\treturn await this.redis.get(key);\n\t}\n\n\tasync set(key: string, value: string, expire?: number) {\n\t\treturn expire\n\t\t\t? await this.redis.set(key, value, \"EX\", expire)\n\t\t\t: await this.redis.set(key, value);\n\t}\n\n\tasync del(key: string) {\n\t\treturn await this.redis.del(key);\n\t}\n}\n```\n","source":"_posts/技能小册/Nest/数据库的配置.md","raw":"---\ntitle: Nest-数据库的配置\nabbrlink: 677fbfc8\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 数据库的配置\n\n> 在`node`服务中，不论使用的`express`还是`nest`，都是有一些配置，环境的配置，数据库的配置等等； 那么俩者还是有些差别的；\n\n这里我列举`mongodb和redis`在`nest`中的使用；\n\n## Mongodb\n\n### 依赖安装\n\n首先安装依赖:\n\n```sh\npnpm add @nestjs/mongoose mongoose\n```\n\n安装成功之后, 那么只需要在`app.module.ts`中配置：\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\n@Module({\n\t// 不过建议可以将链接放到环境变量里，更安全\n\timports: [MongooseModule.forRoot(\"mongodb://localhost/nest\")],\n})\nexport class AppModule {}\n```\n\n这样就可以链接数据库了，数据库名为`nest`；不过这只是能保证数据库的连接，但是想要添加数据等操作还需要配置其他；\n\n这里我按照一个例子去讲解，**就比如添加用户**, 运行`nest-cli`命令\n\n```sh\nnest g res users\n```\n\n这样会创建`users`文件夹\n\n### 模型注入\n\n创建文件`user.schema.ts`, 代码如下\n\n```ts\nimport { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nexport const ADMIN_USER_MODEL_NAME = \"db_admin_users\";\n\n@Schema()\nexport class Admin_User_Schema {\n\t_id: string;\n\t// 用户名\n\t@Prop()\n\tusername: string;\n\t// 密码\n\t@Prop()\n\tpassword: string;\n}\nexport const AdminUserSchema = SchemaFactory.createForClass(Admin_User_Schema);\n```\n\n代码讲解：\n\n- `@Schema` 标记为数据库的模型(简单理解就是表结构)， `ADMIN_USER_MODEL_NAME` 为数据库的表名， `AdminUserSchema` 为数据库的模型；\n- `@Prop` 标记为数据库的属性， `username` 为数据库的属性名， `password` 为数据库的属性名；\n- `_id` 为数据库的主键(mongodb 会自动生成主键，这里不写都没关系)， `@Prop` 标记为数据库的属性， `type` 为数据库的类型， `string` 为数据库的类型；\n\n这样数据库的表结构就设计完成了，接下来需要连接表，这样后续才能对表进行操作(CURD)；\n\n### 表链接\n\n在`user`目录下操作`user.module.ts`\n\n```ts\nimport { Module } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ADMIN_USER_MODEL_NAME, AdminUserSchema } from \"./schemas/user.schema\";\n\n@Module({\n\timports: [\n\t\t// 核心代码\n\t\tMongooseModule.forFeature([\n\t\t\t{\n\t\t\t\t// 表名\n\t\t\t\tname: ADMIN_USER_MODEL_NAME,\n\t\t\t\t// 表模型\n\t\t\t\tschema: AdminUserSchema,\n\t\t\t},\n\t\t]),\n\t],\n\tcontrollers: [UserController],\n\tproviders: [UserService],\n\texports: [UserService],\n})\nexport class UserModule {}\n```\n\n这样数据表是没有数据的，那么接着将一条测试数据添加在数据表里：\n\n在`user.controller.ts`中进行模型的注入：\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nexport class UserController {\n\t// 服务层\n\tconstructor(private readonly userService: UserService) {}\n\n\t// 接口地址\n\t@Post(\"create\")\n\t// 请求的参数\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\t// 调用的服务层\n\t\treturn await this.userService.create(body);\n\t}\n}\n```\n\n`user.service.ts`代码如下：\n\n```ts\nimport { Injectable } from \"@nestjs/common\";\nimport { Model } from \"mongoose\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport {\n\tADMIN_USER_MODEL_NAME,\n\tAdmin_User_Schema,\n} from \"./schemas/user.schema\";\n@Injectable()\nexport class UserService {\n\tconstructor(\n\t\t@InjectModel(ADMIN_USER_MODEL_NAME)\n\t\tprivate readonly userModel: Model<Admin_User_Schema>\n\t) {}\n\tasync create(createUserDto: CreateUserDto) {\n\t\tconst result = await this.userModel.create(createUserDto);\n\t\treturn null;\n\t}\n}\n```\n\n当你使用`apiFox or postman`调用`http://localhost:3000/create`就会发现数据表里有一条数据了；\n\n## Redis\n\n### 依赖安装\n\n```sh\npnpm add @nestjs-modules/ioredis ioredis\n```\n\n安装成功之后，同样在`app.module.ts`中配置：\n\n```ts\nimport { RedisModule } from '@nestjs-modules/ioredis';\n\n\n@Module({\n  imports: [\n    RedisModule.forRootAsync({\n      useFactory: () => ({\n        type: 'single',\n        // 俩种方式\n        // url: process.env.REDIS_URL,\n        // 密码格式： redis\"//密码@localhost:27017/nest-app\n        url: `redis://${process.env.REDIS_PWD ? process.env.REDIS_PWD + '@' : ''}${process.env.REDIS_HOST}:${process.env.REDIS_PORT}/${process.env.REDIS_DB}`,\n      }),\n    }),\n  ]\n})\n```\n\n### 模块注入\n\n```ts\nimport { InjectRedis } from \"@nestjs-modules/ioredis\";\nimport { Injectable } from \"@nestjs/common\";\nimport Redis from \"ioredis\";\n\n@Injectable()\nexport class CacheService {\n\tconstructor(@InjectRedis() private readonly redis: Redis) {}\n\n\tasync get(key: string) {\n\t\treturn await this.redis.get(key);\n\t}\n\n\tasync set(key: string, value: string, expire?: number) {\n\t\treturn expire\n\t\t\t? await this.redis.set(key, value, \"EX\", expire)\n\t\t\t: await this.redis.set(key, value);\n\t}\n\n\tasync del(key: string) {\n\t\treturn await this.redis.del(key);\n\t}\n}\n```\n","slug":"技能小册/Nest/数据库的配置","published":1,"updated":"2025-03-12T09:44:45.738Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0iz003ofg9m817c6z08","content":"<h1 id=\"数据库的配置\"><a href=\"#数据库的配置\" class=\"headerlink\" title=\"数据库的配置\"></a>数据库的配置</h1><blockquote>\n<p>在<code>node</code>服务中，不论使用的<code>express</code>还是<code>nest</code>，都是有一些配置，环境的配置，数据库的配置等等； 那么俩者还是有些差别的；</p>\n</blockquote>\n<p>这里我列举<code>mongodb和redis</code>在<code>nest</code>中的使用；</p>\n<h2 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>首先安装依赖:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后, 那么只需要在<code>app.module.ts</code>中配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不过建议可以将链接放到环境变量里，更安全</span></span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [<span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forRoot</span>(<span class=\"string\">&quot;mongodb://localhost/nest&quot;</span>)],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以链接数据库了，数据库名为<code>nest</code>；不过这只是能保证数据库的连接，但是想要添加数据等操作还需要配置其他；</p>\n<p>这里我按照一个例子去讲解，<strong>就比如添加用户</strong>, 运行<code>nest-cli</code>命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g res <span class=\"built_in\">users</span></span><br></pre></td></tr></table></figure>\n\n<p>这样会创建<code>users</code>文件夹</p>\n<h3 id=\"模型注入\"><a href=\"#模型注入\" class=\"headerlink\" title=\"模型注入\"></a>模型注入</h3><p>创建文件<code>user.schema.ts</code>, 代码如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span> = <span class=\"string\">&quot;db_admin_users&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Admin_User_Schema</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">_id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 用户名</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">username</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 密码</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">password</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">AdminUserSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Admin</span>_User_Schema);</span><br></pre></td></tr></table></figure>\n\n<p>代码讲解：</p>\n<ul>\n<li><code>@Schema</code> 标记为数据库的模型(简单理解就是表结构)， <code>ADMIN_USER_MODEL_NAME</code> 为数据库的表名， <code>AdminUserSchema</code> 为数据库的模型；</li>\n<li><code>@Prop</code> 标记为数据库的属性， <code>username</code> 为数据库的属性名， <code>password</code> 为数据库的属性名；</li>\n<li><code>_id</code> 为数据库的主键(mongodb 会自动生成主键，这里不写都没关系)， <code>@Prop</code> 标记为数据库的属性， <code>type</code> 为数据库的类型， <code>string</code> 为数据库的类型；</li>\n</ul>\n<p>这样数据库的表结构就设计完成了，接下来需要连接表，这样后续才能对表进行操作(CURD)；</p>\n<h3 id=\"表链接\"><a href=\"#表链接\" class=\"headerlink\" title=\"表链接\"></a>表链接</h3><p>在<code>user</code>目录下操作<code>user.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.controller&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>, <span class=\"title class_\">AdminUserSchema</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/user.schema&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// 核心代码</span></span><br><span class=\"line\">\t\t<span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forFeature</span>([</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 表名</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 表模型</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">schema</span>: <span class=\"title class_\">AdminUserSchema</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t]),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">controllers</span>: [<span class=\"title class_\">UserController</span>],</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">\t<span class=\"attr\">exports</span>: [<span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样数据表是没有数据的，那么接着将一条测试数据添加在数据表里：</p>\n<p>在<code>user.controller.ts</code>中进行模型的注入：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 服务层</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userService</span>: <span class=\"title class_\">UserService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接口地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 请求的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用的服务层</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">create</span>(body);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>user.service.ts</code>代码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Model</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectModel</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Admin</span>_User_Schema,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/user.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectModel</span>(ADMIN_USER_MODEL_NAME)</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userModel</span>: <span class=\"title class_\">Model</span>&lt;<span class=\"title class_\">Admin</span>_User_Schema&gt;</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"attr\">createUserDto</span>: <span class=\"title class_\">CreateUserDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userModel</span>.<span class=\"title function_\">create</span>(createUserDto);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你使用<code>apiFox or postman</code>调用<code>http://localhost:3000/create</code>就会发现数据表里有一条数据了；</p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"依赖安装-1\"><a href=\"#依赖安装-1\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs-modules/ioredis ioredis</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，同样在<code>app.module.ts</code>中配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RedisModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs-modules/ioredis&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">RedisModule</span>.<span class=\"title function_\">forRootAsync</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;single&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 俩种方式</span></span><br><span class=\"line\">        <span class=\"comment\">// url: process.env.REDIS_URL,</span></span><br><span class=\"line\">        <span class=\"comment\">// 密码格式： redis&quot;//密码@localhost:27017/nest-app</span></span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">`redis://<span class=\"subst\">$&#123;process.env.REDIS_PWD ? process.env.REDIS_PWD + <span class=\"string\">&#x27;@&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><span class=\"subst\">$&#123;process.env.REDIS_HOST&#125;</span>:<span class=\"subst\">$&#123;process.env.REDIS_PORT&#125;</span>/<span class=\"subst\">$&#123;process.env.REDIS_DB&#125;</span>`</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块注入\"><a href=\"#模块注入\" class=\"headerlink\" title=\"模块注入\"></a>模块注入</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRedis</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs-modules/ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Redis</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;ioredis&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CacheService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@InjectRedis</span>() <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">redis</span>: <span class=\"title class_\">Redis</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">get</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">set</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">expire</span>?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> expire</span><br><span class=\"line\">\t\t\t? <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(key, value, <span class=\"string\">&quot;EX&quot;</span>, expire)</span><br><span class=\"line\">\t\t\t: <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">del</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">del</span>(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"数据库的配置\"><a href=\"#数据库的配置\" class=\"headerlink\" title=\"数据库的配置\"></a>数据库的配置</h1><blockquote>\n<p>在<code>node</code>服务中，不论使用的<code>express</code>还是<code>nest</code>，都是有一些配置，环境的配置，数据库的配置等等； 那么俩者还是有些差别的；</p>\n</blockquote>\n<p>这里我列举<code>mongodb和redis</code>在<code>nest</code>中的使用；</p>\n<h2 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>首先安装依赖:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后, 那么只需要在<code>app.module.ts</code>中配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不过建议可以将链接放到环境变量里，更安全</span></span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [<span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forRoot</span>(<span class=\"string\">&quot;mongodb://localhost/nest&quot;</span>)],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以链接数据库了，数据库名为<code>nest</code>；不过这只是能保证数据库的连接，但是想要添加数据等操作还需要配置其他；</p>\n<p>这里我按照一个例子去讲解，<strong>就比如添加用户</strong>, 运行<code>nest-cli</code>命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nest g res <span class=\"built_in\">users</span></span><br></pre></td></tr></table></figure>\n\n<p>这样会创建<code>users</code>文件夹</p>\n<h3 id=\"模型注入\"><a href=\"#模型注入\" class=\"headerlink\" title=\"模型注入\"></a>模型注入</h3><p>创建文件<code>user.schema.ts</code>, 代码如下</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Prop</span>, <span class=\"title class_\">Schema</span>, <span class=\"title class_\">SchemaFactory</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span> = <span class=\"string\">&quot;db_admin_users&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Schema</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Admin_User_Schema</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">_id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 用户名</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">username</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 密码</span></span><br><span class=\"line\">\t<span class=\"meta\">@Prop</span>()</span><br><span class=\"line\">\t<span class=\"attr\">password</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">AdminUserSchema</span> = <span class=\"title class_\">SchemaFactory</span>.<span class=\"title function_\">createForClass</span>(<span class=\"title class_\">Admin</span>_User_Schema);</span><br></pre></td></tr></table></figure>\n\n<p>代码讲解：</p>\n<ul>\n<li><code>@Schema</code> 标记为数据库的模型(简单理解就是表结构)， <code>ADMIN_USER_MODEL_NAME</code> 为数据库的表名， <code>AdminUserSchema</code> 为数据库的模型；</li>\n<li><code>@Prop</code> 标记为数据库的属性， <code>username</code> 为数据库的属性名， <code>password</code> 为数据库的属性名；</li>\n<li><code>_id</code> 为数据库的主键(mongodb 会自动生成主键，这里不写都没关系)， <code>@Prop</code> 标记为数据库的属性， <code>type</code> 为数据库的类型， <code>string</code> 为数据库的类型；</li>\n</ul>\n<p>这样数据库的表结构就设计完成了，接下来需要连接表，这样后续才能对表进行操作(CURD)；</p>\n<h3 id=\"表链接\"><a href=\"#表链接\" class=\"headerlink\" title=\"表链接\"></a>表链接</h3><p>在<code>user</code>目录下操作<code>user.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserController</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.controller&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MongooseModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>, <span class=\"title class_\">AdminUserSchema</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/user.schema&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">imports</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// 核心代码</span></span><br><span class=\"line\">\t\t<span class=\"title class_\">MongooseModule</span>.<span class=\"title function_\">forFeature</span>([</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 表名</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 表模型</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">schema</span>: <span class=\"title class_\">AdminUserSchema</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t]),</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">controllers</span>: [<span class=\"title class_\">UserController</span>],</span><br><span class=\"line\">\t<span class=\"attr\">providers</span>: [<span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">\t<span class=\"attr\">exports</span>: [<span class=\"title class_\">UserService</span>],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样数据表是没有数据的，那么接着将一条测试数据添加在数据表里：</p>\n<p>在<code>user.controller.ts</code>中进行模型的注入：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">UserService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./user.service&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 服务层</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userService</span>: <span class=\"title class_\">UserService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接口地址</span></span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 请求的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用的服务层</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userService</span>.<span class=\"title function_\">create</span>(body);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>user.service.ts</code>代码如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Model</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectModel</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/mongoose&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">ADMIN_USER_MODEL_NAME</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Admin</span>_User_Schema,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./schemas/user.schema&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectModel</span>(ADMIN_USER_MODEL_NAME)</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">userModel</span>: <span class=\"title class_\">Model</span>&lt;<span class=\"title class_\">Admin</span>_User_Schema&gt;</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"attr\">createUserDto</span>: <span class=\"title class_\">CreateUserDto</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">userModel</span>.<span class=\"title function_\">create</span>(createUserDto);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你使用<code>apiFox or postman</code>调用<code>http://localhost:3000/create</code>就会发现数据表里有一条数据了；</p>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"依赖安装-1\"><a href=\"#依赖安装-1\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @nestjs-modules/ioredis ioredis</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，同样在<code>app.module.ts</code>中配置：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RedisModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs-modules/ioredis&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">RedisModule</span>.<span class=\"title function_\">forRootAsync</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;single&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 俩种方式</span></span><br><span class=\"line\">        <span class=\"comment\">// url: process.env.REDIS_URL,</span></span><br><span class=\"line\">        <span class=\"comment\">// 密码格式： redis&quot;//密码@localhost:27017/nest-app</span></span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">`redis://<span class=\"subst\">$&#123;process.env.REDIS_PWD ? process.env.REDIS_PWD + <span class=\"string\">&#x27;@&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><span class=\"subst\">$&#123;process.env.REDIS_HOST&#125;</span>:<span class=\"subst\">$&#123;process.env.REDIS_PORT&#125;</span>/<span class=\"subst\">$&#123;process.env.REDIS_DB&#125;</span>`</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块注入\"><a href=\"#模块注入\" class=\"headerlink\" title=\"模块注入\"></a>模块注入</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRedis</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs-modules/ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Redis</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;ioredis&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CacheService</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"meta\">@InjectRedis</span>() <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">redis</span>: <span class=\"title class_\">Redis</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">get</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">set</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">value</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">expire</span>?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> expire</span><br><span class=\"line\">\t\t\t? <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(key, value, <span class=\"string\">&quot;EX&quot;</span>, expire)</span><br><span class=\"line\">\t\t\t: <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">del</span>(<span class=\"params\"><span class=\"attr\">key</span>: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">del</span>(key);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-请求拦截器","abbrlink":"daa13c35","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n在日常开发中，我们经常会碰见后端接口返回的信息数据，会发现不管请求成功还是失败返回的数据格式都是一样的，这个是如何做到的呢？\n\n## 编写\n\n使用`nest`命令`nest g itc interceptor`,这个时候会生成一个文件，我们只需要在这个文件编写即可；\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tLogger,\n\tNestInterceptor,\n} from \"@nestjs/common\";\nimport * as kleur from \"kleur\";\nimport { catchError, map, Observable, tap, throwError } from \"rxjs\";\nimport { getMessage } from \"../utils/interceptor.utils\";\n\n@Injectable()\nexport class InterceptorInterceptor implements NestInterceptor {\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\tconst now = Date.now();\n\t\tconst request = context.switchToHttp().getRequest();\n\t\tconst logOptions = {\n\t\t\turl: request.url,\n\t\t\tmethod: request.method,\n\t\t\tparams: request.params,\n\t\t\tquery: request.query,\n\t\t\tbody: request.body,\n\t\t\tip: request.ip,\n\t\t};\n\t\t// 请求时将请求的一些基础信息打印在终端\n\t\tLogger.debug(\n\t\t\t`${kleur.yellow(\"[API-LOG]\")} ${kleur.blue(\n\t\t\t\tJSON.stringify(logOptions)\n\t\t\t)} ${kleur.yellow(\" +\" + (Date.now() - now) + \"ms\")}`\n\t\t);\n\t\treturn next.handle().pipe(\n\t\t\tcatchError(error => {\n\t\t\t\t// 异常处理，异常大致分为俩种，\n\t\t\t\t// 一种是服务异常，比如你服务代码编写错误\n\t\t\t\t// 二是请求异常，比如404等\n\t\t\t\t// 返回的请求状态码也是不一样的，404，200，500等\n\t\t\t\t// http请求\n\t\t\t\tif (error instanceof HttpException) {\n\t\t\t\t\tlet msg = error.message;\n\t\t\t\t\tconst getMsg = (error.getResponse() as any).message || error.message;\n\t\t\t\t\tif (Array.isArray(getMsg)) {\n\t\t\t\t\t\tmsg = getMsg[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsg = getMsg;\n\t\t\t\t\t}\n\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tnew HttpException(\n\t\t\t\t\t\t\t\tgetMessage({\n\t\t\t\t\t\t\t\t\tcontext: null,\n\t\t\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\t\t\tstatus: error.getStatus(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tHttpStatus.OK\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// 服务起内部错误\n\t\t\t\treturn throwError(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tnew HttpException(\n\t\t\t\t\t\t\tgetMessage({\n\t\t\t\t\t\t\t\tcontext: null,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t\tstatus: HttpStatus.INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tHttpStatus.INTERNAL_SERVER_ERROR\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}),\n\t\t\tmap(data => {\n\t\t\t\t// 没有异常拦截，那么正常返回\n\t\t\t\treturn getMessage({\n\t\t\t\t\tcontext: data,\n\t\t\t\t\tmessage: \"操作成功\",\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n```\n\n```ts\nimport { Logger } from \"@nestjs/common\";\nimport * as kleur from \"kleur\";\n\ninterface IMessage {\n\tmessage: string;\n\tcontext: object;\n\tstatus?: number;\n\ttimestamp?: string;\n}\nexport function getMessage(options: IMessage) {\n\toptions.status !== 200 &&\n\t\tLogger.debug(`${kleur.yellow(\"[API-LOG]\")} ${kleur.red(options.message)} `);\n\t// 正常返回的接口信息\n\treturn {\n\t\tmessage: options.message,\n\t\tstatus: options.status || 200,\n\t\ttimestamp: new Date().toISOString(),\n\t\tcontext: options.context,\n\t};\n}\n```\n\n## 使用\n\n> 使用的方式大致分为俩种，全局使用和局部使用\n\n### 全局使用\n\n#### 在`app.module.ts`中添加如下：\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: InterceptorInterceptor,\n    },\n  ]\n})\n```\n\n#### 在`main.ts`中使用:\n\n```ts\napp.useGlobalInterceptors(new InterceptorInterceptor());\n```\n\n### 局部使用\n\n在需要的`controller`添加，如下：\n\n```ts\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Get()\n\tgetHello(): string {\n\t\treturn this.appService.getHello();\n\t}\n\n\t@Get(\"/a\")\n\t@UseInterceptors(InterceptorInterceptor)\n\tgetA(): string {\n\t\t// throw new Error('Something went wrong');\n\t\treturn this.appService.getA();\n\t}\n}\n```\n","source":"_posts/技能小册/Nest/请求拦截器.md","raw":"---\ntitle: Nest-请求拦截器\nabbrlink: daa13c35\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n在日常开发中，我们经常会碰见后端接口返回的信息数据，会发现不管请求成功还是失败返回的数据格式都是一样的，这个是如何做到的呢？\n\n## 编写\n\n使用`nest`命令`nest g itc interceptor`,这个时候会生成一个文件，我们只需要在这个文件编写即可；\n\n```ts\nimport {\n\tCallHandler,\n\tExecutionContext,\n\tHttpException,\n\tHttpStatus,\n\tInjectable,\n\tLogger,\n\tNestInterceptor,\n} from \"@nestjs/common\";\nimport * as kleur from \"kleur\";\nimport { catchError, map, Observable, tap, throwError } from \"rxjs\";\nimport { getMessage } from \"../utils/interceptor.utils\";\n\n@Injectable()\nexport class InterceptorInterceptor implements NestInterceptor {\n\tintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n\t\tconst now = Date.now();\n\t\tconst request = context.switchToHttp().getRequest();\n\t\tconst logOptions = {\n\t\t\turl: request.url,\n\t\t\tmethod: request.method,\n\t\t\tparams: request.params,\n\t\t\tquery: request.query,\n\t\t\tbody: request.body,\n\t\t\tip: request.ip,\n\t\t};\n\t\t// 请求时将请求的一些基础信息打印在终端\n\t\tLogger.debug(\n\t\t\t`${kleur.yellow(\"[API-LOG]\")} ${kleur.blue(\n\t\t\t\tJSON.stringify(logOptions)\n\t\t\t)} ${kleur.yellow(\" +\" + (Date.now() - now) + \"ms\")}`\n\t\t);\n\t\treturn next.handle().pipe(\n\t\t\tcatchError(error => {\n\t\t\t\t// 异常处理，异常大致分为俩种，\n\t\t\t\t// 一种是服务异常，比如你服务代码编写错误\n\t\t\t\t// 二是请求异常，比如404等\n\t\t\t\t// 返回的请求状态码也是不一样的，404，200，500等\n\t\t\t\t// http请求\n\t\t\t\tif (error instanceof HttpException) {\n\t\t\t\t\tlet msg = error.message;\n\t\t\t\t\tconst getMsg = (error.getResponse() as any).message || error.message;\n\t\t\t\t\tif (Array.isArray(getMsg)) {\n\t\t\t\t\t\tmsg = getMsg[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsg = getMsg;\n\t\t\t\t\t}\n\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tnew HttpException(\n\t\t\t\t\t\t\t\tgetMessage({\n\t\t\t\t\t\t\t\t\tcontext: null,\n\t\t\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\t\t\tstatus: error.getStatus(),\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tHttpStatus.OK\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// 服务起内部错误\n\t\t\t\treturn throwError(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tnew HttpException(\n\t\t\t\t\t\t\tgetMessage({\n\t\t\t\t\t\t\t\tcontext: null,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t\tstatus: HttpStatus.INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tHttpStatus.INTERNAL_SERVER_ERROR\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}),\n\t\t\tmap(data => {\n\t\t\t\t// 没有异常拦截，那么正常返回\n\t\t\t\treturn getMessage({\n\t\t\t\t\tcontext: data,\n\t\t\t\t\tmessage: \"操作成功\",\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n```\n\n```ts\nimport { Logger } from \"@nestjs/common\";\nimport * as kleur from \"kleur\";\n\ninterface IMessage {\n\tmessage: string;\n\tcontext: object;\n\tstatus?: number;\n\ttimestamp?: string;\n}\nexport function getMessage(options: IMessage) {\n\toptions.status !== 200 &&\n\t\tLogger.debug(`${kleur.yellow(\"[API-LOG]\")} ${kleur.red(options.message)} `);\n\t// 正常返回的接口信息\n\treturn {\n\t\tmessage: options.message,\n\t\tstatus: options.status || 200,\n\t\ttimestamp: new Date().toISOString(),\n\t\tcontext: options.context,\n\t};\n}\n```\n\n## 使用\n\n> 使用的方式大致分为俩种，全局使用和局部使用\n\n### 全局使用\n\n#### 在`app.module.ts`中添加如下：\n\n```ts\n@Module({\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: InterceptorInterceptor,\n    },\n  ]\n})\n```\n\n#### 在`main.ts`中使用:\n\n```ts\napp.useGlobalInterceptors(new InterceptorInterceptor());\n```\n\n### 局部使用\n\n在需要的`controller`添加，如下：\n\n```ts\n@Controller()\nexport class AppController {\n\tconstructor(private readonly appService: AppService) {}\n\n\t@Get()\n\tgetHello(): string {\n\t\treturn this.appService.getHello();\n\t}\n\n\t@Get(\"/a\")\n\t@UseInterceptors(InterceptorInterceptor)\n\tgetA(): string {\n\t\t// throw new Error('Something went wrong');\n\t\treturn this.appService.getA();\n\t}\n}\n```\n","slug":"技能小册/Nest/请求拦截器","published":1,"updated":"2025-03-12T09:43:04.403Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j0003rfg9mcvtpewhd","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在日常开发中，我们经常会碰见后端接口返回的信息数据，会发现不管请求成功还是失败返回的数据格式都是一样的，这个是如何做到的呢？</p>\n<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p>使用<code>nest</code>命令<code>nest g itc interceptor</code>,这个时候会生成一个文件，我们只需要在这个文件编写即可；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpException</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpStatus</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Logger</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> kleur <span class=\"keyword\">from</span> <span class=\"string\">&quot;kleur&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; catchError, map, <span class=\"title class_\">Observable</span>, tap, throwError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/interceptor.utils&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logOptions = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">url</span>: request.<span class=\"property\">url</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">method</span>: request.<span class=\"property\">method</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">params</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ip</span>: request.<span class=\"property\">ip</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求时将请求的一些基础信息打印在终端</span></span><br><span class=\"line\">\t\t<span class=\"title class_\">Logger</span>.<span class=\"title function_\">debug</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot;[API-LOG]&quot;</span>)&#125;</span> <span class=\"subst\">$&#123;kleur.blue(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t\t<span class=\"built_in\">JSON</span>.stringify(logOptions)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t)&#125;</span> <span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot; +&quot;</span> + (<span class=\"built_in\">Date</span>.now() - now) + <span class=\"string\">&quot;ms&quot;</span>)&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">catchError</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 异常处理，异常大致分为俩种，</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 一种是服务异常，比如你服务代码编写错误</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 二是请求异常，比如404等</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 返回的请求状态码也是不一样的，404，200，500等</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// http请求</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (error <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> msg = error.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> getMsg = (error.<span class=\"title function_\">getResponse</span>() <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">message</span> || error.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(getMsg)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmsg = getMsg[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmsg = getMsg;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">context</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">message</span>: msg,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">status</span>: error.<span class=\"title function_\">getStatus</span>(),</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"title class_\">HttpStatus</span>.<span class=\"property\">OK</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 服务起内部错误</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">context</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">message</span>: error.<span class=\"property\">message</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span></span><br><span class=\"line\">\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 没有异常拦截，那么正常返回</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">context</span>: data,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;操作成功&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Logger</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> kleur <span class=\"keyword\">from</span> <span class=\"string\">&quot;kleur&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IMessage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">context</span>: <span class=\"built_in\">object</span>;</span><br><span class=\"line\">\t<span class=\"attr\">status</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"attr\">timestamp</span>?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMessage</span>(<span class=\"params\"><span class=\"attr\">options</span>: <span class=\"title class_\">IMessage</span></span>) &#123;</span><br><span class=\"line\">\toptions.<span class=\"property\">status</span> !== <span class=\"number\">200</span> &amp;&amp;</span><br><span class=\"line\">\t\t<span class=\"title class_\">Logger</span>.<span class=\"title function_\">debug</span>(<span class=\"string\">`<span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot;[API-LOG]&quot;</span>)&#125;</span> <span class=\"subst\">$&#123;kleur.red(options.message)&#125;</span> `</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 正常返回的接口信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">message</span>: options.<span class=\"property\">message</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">status</span>: options.<span class=\"property\">status</span> || <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>(),</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: options.<span class=\"property\">context</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>使用的方式大致分为俩种，全局使用和局部使用</p>\n</blockquote>\n<h3 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h3><h4 id=\"在app-module-ts中添加如下：\"><a href=\"#在app-module-ts中添加如下：\" class=\"headerlink\" title=\"在app.module.ts中添加如下：\"></a>在<code>app.module.ts</code>中添加如下：</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">InterceptorInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在main-ts中使用\"><a href=\"#在main-ts中使用\" class=\"headerlink\" title=\"在main.ts中使用:\"></a>在<code>main.ts</code>中使用:</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">useGlobalInterceptors</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InterceptorInterceptor</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部使用\"><a href=\"#局部使用\" class=\"headerlink\" title=\"局部使用\"></a>局部使用</h3><p>在需要的<code>controller</code>添加，如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">appService</span>: <span class=\"title class_\">AppService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>()</span><br><span class=\"line\">\t<span class=\"title function_\">getHello</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getHello</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>(<span class=\"string\">&quot;/a&quot;</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@UseInterceptors</span>(<span class=\"title class_\">InterceptorInterceptor</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">getA</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// throw new Error(&#x27;Something went wrong&#x27;);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getA</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在日常开发中，我们经常会碰见后端接口返回的信息数据，会发现不管请求成功还是失败返回的数据格式都是一样的，这个是如何做到的呢？</p>\n<h2 id=\"编写\"><a href=\"#编写\" class=\"headerlink\" title=\"编写\"></a>编写</h2><p>使用<code>nest</code>命令<code>nest g itc interceptor</code>,这个时候会生成一个文件，我们只需要在这个文件编写即可；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">CallHandler</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">ExecutionContext</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpException</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">HttpStatus</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Injectable</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">Logger</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">NestInterceptor</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> kleur <span class=\"keyword\">from</span> <span class=\"string\">&quot;kleur&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; catchError, map, <span class=\"title class_\">Observable</span>, tap, throwError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getMessage &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../utils/interceptor.utils&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">NestInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">intercept</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>, <span class=\"attr\">next</span>: <span class=\"title class_\">CallHandler</span>): <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> logOptions = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">url</span>: request.<span class=\"property\">url</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">method</span>: request.<span class=\"property\">method</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">params</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ip</span>: request.<span class=\"property\">ip</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求时将请求的一些基础信息打印在终端</span></span><br><span class=\"line\">\t\t<span class=\"title class_\">Logger</span>.<span class=\"title function_\">debug</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">`<span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot;[API-LOG]&quot;</span>)&#125;</span> <span class=\"subst\">$&#123;kleur.blue(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t\t<span class=\"built_in\">JSON</span>.stringify(logOptions)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t)&#125;</span> <span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot; +&quot;</span> + (<span class=\"built_in\">Date</span>.now() - now) + <span class=\"string\">&quot;ms&quot;</span>)&#125;</span>`</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> next.<span class=\"title function_\">handle</span>().<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">catchError</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 异常处理，异常大致分为俩种，</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 一种是服务异常，比如你服务代码编写错误</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 二是请求异常，比如404等</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 返回的请求状态码也是不一样的，404，200，500等</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// http请求</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (error <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HttpException</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> msg = error.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> getMsg = (error.<span class=\"title function_\">getResponse</span>() <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">message</span> || error.<span class=\"property\">message</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(getMsg)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmsg = getMsg[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmsg = getMsg;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">context</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">message</span>: msg,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">status</span>: error.<span class=\"title function_\">getStatus</span>(),</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"title class_\">HttpStatus</span>.<span class=\"property\">OK</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 服务起内部错误</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">throwError</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HttpException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">context</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">message</span>: error.<span class=\"property\">message</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"title class_\">HttpStatus</span>.<span class=\"property\">INTERNAL_SERVER_ERROR</span></span><br><span class=\"line\">\t\t\t\t\t\t)</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 没有异常拦截，那么正常返回</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">getMessage</span>(&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">context</span>: data,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;操作成功&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Logger</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> kleur <span class=\"keyword\">from</span> <span class=\"string\">&quot;kleur&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IMessage</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">message</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\t<span class=\"attr\">context</span>: <span class=\"built_in\">object</span>;</span><br><span class=\"line\">\t<span class=\"attr\">status</span>?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">\t<span class=\"attr\">timestamp</span>?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMessage</span>(<span class=\"params\"><span class=\"attr\">options</span>: <span class=\"title class_\">IMessage</span></span>) &#123;</span><br><span class=\"line\">\toptions.<span class=\"property\">status</span> !== <span class=\"number\">200</span> &amp;&amp;</span><br><span class=\"line\">\t\t<span class=\"title class_\">Logger</span>.<span class=\"title function_\">debug</span>(<span class=\"string\">`<span class=\"subst\">$&#123;kleur.yellow(<span class=\"string\">&quot;[API-LOG]&quot;</span>)&#125;</span> <span class=\"subst\">$&#123;kleur.red(options.message)&#125;</span> `</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 正常返回的接口信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">message</span>: options.<span class=\"property\">message</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">status</span>: options.<span class=\"property\">status</span> || <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">timestamp</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>(),</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: options.<span class=\"property\">context</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>使用的方式大致分为俩种，全局使用和局部使用</p>\n</blockquote>\n<h3 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h3><h4 id=\"在app-module-ts中添加如下：\"><a href=\"#在app-module-ts中添加如下：\" class=\"headerlink\" title=\"在app.module.ts中添加如下：\"></a>在<code>app.module.ts</code>中添加如下：</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INTERCEPTOR</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">InterceptorInterceptor</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在main-ts中使用\"><a href=\"#在main-ts中使用\" class=\"headerlink\" title=\"在main.ts中使用:\"></a>在<code>main.ts</code>中使用:</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">useGlobalInterceptors</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InterceptorInterceptor</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部使用\"><a href=\"#局部使用\" class=\"headerlink\" title=\"局部使用\"></a>局部使用</h3><p>在需要的<code>controller</code>添加，如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">appService</span>: <span class=\"title class_\">AppService</span></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>()</span><br><span class=\"line\">\t<span class=\"title function_\">getHello</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getHello</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Get</span>(<span class=\"string\">&quot;/a&quot;</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@UseInterceptors</span>(<span class=\"title class_\">InterceptorInterceptor</span>)</span><br><span class=\"line\">\t<span class=\"title function_\">getA</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// throw new Error(&#x27;Something went wrong&#x27;);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">appService</span>.<span class=\"title function_\">getA</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nest-路由守卫","abbrlink":"a9432027","date":"2024-11-08T01:05:01.000Z","_content":"\n# 介绍\n\n守卫是一个用 `@Injectable()` 装饰器注释的类，它实现了 `CanActivate` 接口。\n\n守卫有单一的责任。它们根据运行时存在的某些条件（如权限、角色、ACL 等）确定给定请求是否将由路由处理程序处理。这通常称为授权。授权（及其通常与之合作的身份验证）通常由传统 `Express` 应用中的 中间件 处理。中间件是身份验证的不错选择，因为诸如令牌验证和将属性附加到 `request` 对象之类的事情与特定路由上下文（及其元数据）没有紧密联系。\n\n但是中间件，就其本质而言，是愚蠢的。它不知道调用 `next()` 函数后将执行哪个处理程序。另一方面，Guards 可以访问 `ExecutionContext` 实例，因此确切地知道接下来要执行什么。它们的设计与异常过滤器、管道和拦截器非常相似，可让你在请求/响应周期的正确位置插入处理逻辑，并以声明方式进行。这有助于使你的代码保持干爽和声明式。\n\n**为了让程序更加智能，这里使用装饰器功能，例如在某一个请求接口上添加一个装饰器，限制重复请求等等， 接下来以俩个案例：**\n\n## 重复请求限制\n\n### 常量文件\n\n为什么要使用常量文件？好处就是统一管理；首先创建文件作为常量：\n\n```ts\n// 记录日志的key\nexport const LOG_KEY_METADATA = \"__log__\";\n// 重复提交的key\nexport const REPEAT_SUBMIT_KEY_METADATA = \"__repeat_submit__\";\n// public: 不需要token校验\nexport const PUBLIC_KEY_METADATA = \"__public__\";\n// 权限的key\nexport const PERMISSION_KEY_METADATA = \"__permission__\";\n\n// ===== Redis缓存\n// Redis 重复提交的key, 目录的形式， 例如： __redis_repeat__:/api/user/list\nexport const REDIS_REPEAT_SUBMIT_KEY = \"__redis_repeat__:\";\n// 存储验证码图片\nexport const REDIS_CAPTCHA_KEY = \"__captcha__:\";\n// 存储用户的token或者userId\nexport const REDIS_TOKEN_KEY = \"__token__:\";\n// 存储用户的信息\nexport const REDIS_USER_INFO_KEY = \"__user_info__:\";\n```\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { REPEAT_SUBMIT_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport class RepeatSubmitOption {\n\tinterval?: number = 1; //默认1s\n\tmessage?: string = \"操作过于频繁\"; // 可以自定义\n}\nexport const RepeatSubmit = (option?: RepeatSubmitOption) => {\n\treturn SetMetadata(\n\t\tREPEAT_SUBMIT_KEY_METADATA,\n\t\tObject.assign(new RepeatSubmitOption(), option)\n\t);\n};\n```\n\n### 自定义守卫\n\n```ts\nimport { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { RepeatSubmitOption } from \"../decorator/repeat-submit.decorator\";\nimport {\n\tREDIS_REPEAT_SUBMIT_KEY,\n\tREPEAT_SUBMIT_KEY_METADATA,\n} from \"../constants/metadata.constant\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { InjectRedis } from \"@nestjs-modules/ioredis\";\nimport Redis from \"ioredis\";\nimport { Request } from \"express\";\nimport { CommonService } from \"src/shared/common/common.service\";\n\n@Injectable()\nexport class RepeatSubmitGuard implements CanActivate {\n\tconstructor(\n\t\tprivate readonly reflector: Reflector,\n\t\t@InjectRedis() private readonly redis: Redis,\n\t\tprivate readonly commonService: CommonService\n\t) {}\n\tasync canActivate(context: ExecutionContext): Promise<boolean> {\n\t\tconst repeatSubmitOption: RepeatSubmitOption = this.reflector.get(\n\t\t\tREPEAT_SUBMIT_KEY_METADATA,\n\t\t\tcontext.getHandler()\n\t\t);\n\t\tif (!repeatSubmitOption) return true;\n\t\tconst request: Request = context.switchToHttp().getRequest();\n\t\tconst _key = `${REDIS_REPEAT_SUBMIT_KEY}${request.url}`;\n\t\tconst cache = await this.redis.get(_key);\n\t\tconst data = {\n\t\t\tip: this.commonService.getIp(request),\n\t\t\tbody: request.body,\n\t\t\tprams: request.params,\n\t\t\tquery: request.query,\n\t\t};\n\t\tconst dataStr = JSON.stringify(data);\n\t\tif (!cache) {\n\t\t\tif (dataStr) {\n\t\t\t\t// 以url作为key去做缓存，缓存时间设置为元信息传递的时间 默认时间1s\n\t\t\t\tthis.redis.set(_key, dataStr, \"EX\", repeatSubmitOption.interval);\n\t\t\t}\n\t\t} else {\n\t\t\tif (dataStr && dataStr === cache) {\n\t\t\t\t// ApiException是什么可以查看 异常过滤器\n\t\t\t\tthrow new ApiException(repeatSubmitOption.message);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: RepeatSubmitGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。如果2s请求频繁那么就会提示 “操作过于频繁”\n\t@RepeatSubmit({\n\t\tinterval: 2,\n\t\tmessage: \"操作过于频繁\",\n\t})\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 操作权限\n\n### 自定义元数据\n\n```ts\nexport enum PermissionRelationEnum {\n\tAND = \"AND\",\n\tOR = \"OR\",\n}\n```\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { PermissionRelationEnum } from \"../enum/permission.enum\";\nimport { PERMISSION_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport class PermissionOption {\n\tpermissionArr: string[];\n\trelation: PermissionRelationEnum;\n}\nexport const Permission = (\n\tpermissions: string | string[],\n\trelation: PermissionRelationEnum = PermissionRelationEnum.OR // 权限的关系， 是并且还是或者的关系\n) => {\n\tconst permissionObj: PermissionOption = {\n\t\tpermissionArr: [],\n\t\trelation,\n\t};\n\tif (typeof permissions === \"string\") {\n\t\tpermissionObj.permissionArr = [permissions];\n\t} else if (permissions instanceof Array) {\n\t\tpermissionObj.permissionArr = permissions;\n\t}\n\treturn SetMetadata(PERMISSION_KEY_METADATA, permissionObj);\n};\n```\n\n### 自定义守卫\n\n```ts\nimport { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { PermissionOption } from \"../decorator/permission.decorator\";\nimport { PERMISSION_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { PermissionRelationEnum } from \"../enum/permission.enum\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n\tconstructor(private readonly reflector: Reflector) {}\n\tcanActivate(\n\t\tcontext: ExecutionContext\n\t): boolean | Promise<boolean> | Observable<boolean> {\n\t\tconst permissionObj = this.reflector.getAllAndOverride<PermissionOption>(\n\t\t\tPERMISSION_KEY_METADATA,\n\t\t\t[context.getHandler(), context.getClass()]\n\t\t);\n\t\tif (!permissionObj || !permissionObj.permissionArr.length) return true;\n\n\t\tconst request = context.switchToHttp().getRequest();\n\t\t// 权限挂载在用户信心之上\n\t\tconst user = request.user;\n\t\tconst permissions = user?.permissions || [];\n\t\tif (permissions.includes(\"*\")) return true;\n\t\tlet result = false;\n\t\tif (permissionObj.relation === PermissionRelationEnum.OR) {\n\t\t\tresult = permissionObj.permissionArr.some(userPermission => {\n\t\t\t\treturn permissions.includes(userPermission);\n\t\t\t});\n\t\t} else if (permissionObj.relation === PermissionRelationEnum.AND) {\n\t\t\tresult = permissionObj.permissionArr.every(userPermission => {\n\t\t\t\treturn permissions.includes(userPermission);\n\t\t\t});\n\t\t}\n\t\tif (!result)\n\t\t\tthrow new ApiException(\n\t\t\t\t\"暂无权限访问，请联系管理员\",\n\t\t\t\tHttpStatusCode.UNAUTHORIZED\n\t\t\t);\n\t\treturn result;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    // 权限守卫\n    {\n      provide: APP_GUARD,\n      useClass: PermissionGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。如果没有权限 会提示'暂无权限访问，请联系管理员'\n\t@Permission([\"v1:order:create\"], PermissionRelationEnum.OR)\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 是否登录\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { PUBLIC_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport const Public = () => SetMetadata(PUBLIC_KEY_METADATA, true);\n```\n\n### 自定义守卫\n\n```ts\nimport { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PUBLIC_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\n// https://github.com/jaredhanson/passport\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n\tconstructor(private reflector: Reflector) {\n\t\tsuper();\n\t}\n\tcanActivate(\n\t\tcontext: ExecutionContext\n\t): boolean | Promise<boolean> | Observable<boolean> {\n\t\tconst noInterception = this.reflector.getAllAndOverride(\n\t\t\tPUBLIC_KEY_METADATA,\n\t\t\t[context.getHandler(), context.getClass()]\n\t\t);\n\t\tif (noInterception) return true;\n\t\treturn super.canActivate(context);\n\t}\n\n\thandleRequest(err: any, user: any) {\n\t\tif (err || !user) {\n\t\t\tthrow err || new ApiException(\"登录状态已过期\", HttpStatusCode.FORBIDDEN);\n\t\t}\n\t\treturn user;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    // jwt守卫\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。说明不需要token校验\n\t@Public()\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n注意：\n\n1. [`ApiException是什么可以查看 异常过滤器`](/brochure/nest/base/exceptionFilter.html#自定义异常)\n2. [`Redis使用`](/brochure/nest/base/database.html#redis)\n3. [`JWT使用`](/brochure/nest/base/jwt)\n","source":"_posts/技能小册/Nest/路由守卫.md","raw":"---\ntitle: Nest-路由守卫\nabbrlink: a9432027\ndate: 2024-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - Nest\n---\n\n# 介绍\n\n守卫是一个用 `@Injectable()` 装饰器注释的类，它实现了 `CanActivate` 接口。\n\n守卫有单一的责任。它们根据运行时存在的某些条件（如权限、角色、ACL 等）确定给定请求是否将由路由处理程序处理。这通常称为授权。授权（及其通常与之合作的身份验证）通常由传统 `Express` 应用中的 中间件 处理。中间件是身份验证的不错选择，因为诸如令牌验证和将属性附加到 `request` 对象之类的事情与特定路由上下文（及其元数据）没有紧密联系。\n\n但是中间件，就其本质而言，是愚蠢的。它不知道调用 `next()` 函数后将执行哪个处理程序。另一方面，Guards 可以访问 `ExecutionContext` 实例，因此确切地知道接下来要执行什么。它们的设计与异常过滤器、管道和拦截器非常相似，可让你在请求/响应周期的正确位置插入处理逻辑，并以声明方式进行。这有助于使你的代码保持干爽和声明式。\n\n**为了让程序更加智能，这里使用装饰器功能，例如在某一个请求接口上添加一个装饰器，限制重复请求等等， 接下来以俩个案例：**\n\n## 重复请求限制\n\n### 常量文件\n\n为什么要使用常量文件？好处就是统一管理；首先创建文件作为常量：\n\n```ts\n// 记录日志的key\nexport const LOG_KEY_METADATA = \"__log__\";\n// 重复提交的key\nexport const REPEAT_SUBMIT_KEY_METADATA = \"__repeat_submit__\";\n// public: 不需要token校验\nexport const PUBLIC_KEY_METADATA = \"__public__\";\n// 权限的key\nexport const PERMISSION_KEY_METADATA = \"__permission__\";\n\n// ===== Redis缓存\n// Redis 重复提交的key, 目录的形式， 例如： __redis_repeat__:/api/user/list\nexport const REDIS_REPEAT_SUBMIT_KEY = \"__redis_repeat__:\";\n// 存储验证码图片\nexport const REDIS_CAPTCHA_KEY = \"__captcha__:\";\n// 存储用户的token或者userId\nexport const REDIS_TOKEN_KEY = \"__token__:\";\n// 存储用户的信息\nexport const REDIS_USER_INFO_KEY = \"__user_info__:\";\n```\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { REPEAT_SUBMIT_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport class RepeatSubmitOption {\n\tinterval?: number = 1; //默认1s\n\tmessage?: string = \"操作过于频繁\"; // 可以自定义\n}\nexport const RepeatSubmit = (option?: RepeatSubmitOption) => {\n\treturn SetMetadata(\n\t\tREPEAT_SUBMIT_KEY_METADATA,\n\t\tObject.assign(new RepeatSubmitOption(), option)\n\t);\n};\n```\n\n### 自定义守卫\n\n```ts\nimport { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { RepeatSubmitOption } from \"../decorator/repeat-submit.decorator\";\nimport {\n\tREDIS_REPEAT_SUBMIT_KEY,\n\tREPEAT_SUBMIT_KEY_METADATA,\n} from \"../constants/metadata.constant\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { InjectRedis } from \"@nestjs-modules/ioredis\";\nimport Redis from \"ioredis\";\nimport { Request } from \"express\";\nimport { CommonService } from \"src/shared/common/common.service\";\n\n@Injectable()\nexport class RepeatSubmitGuard implements CanActivate {\n\tconstructor(\n\t\tprivate readonly reflector: Reflector,\n\t\t@InjectRedis() private readonly redis: Redis,\n\t\tprivate readonly commonService: CommonService\n\t) {}\n\tasync canActivate(context: ExecutionContext): Promise<boolean> {\n\t\tconst repeatSubmitOption: RepeatSubmitOption = this.reflector.get(\n\t\t\tREPEAT_SUBMIT_KEY_METADATA,\n\t\t\tcontext.getHandler()\n\t\t);\n\t\tif (!repeatSubmitOption) return true;\n\t\tconst request: Request = context.switchToHttp().getRequest();\n\t\tconst _key = `${REDIS_REPEAT_SUBMIT_KEY}${request.url}`;\n\t\tconst cache = await this.redis.get(_key);\n\t\tconst data = {\n\t\t\tip: this.commonService.getIp(request),\n\t\t\tbody: request.body,\n\t\t\tprams: request.params,\n\t\t\tquery: request.query,\n\t\t};\n\t\tconst dataStr = JSON.stringify(data);\n\t\tif (!cache) {\n\t\t\tif (dataStr) {\n\t\t\t\t// 以url作为key去做缓存，缓存时间设置为元信息传递的时间 默认时间1s\n\t\t\t\tthis.redis.set(_key, dataStr, \"EX\", repeatSubmitOption.interval);\n\t\t\t}\n\t\t} else {\n\t\t\tif (dataStr && dataStr === cache) {\n\t\t\t\t// ApiException是什么可以查看 异常过滤器\n\t\t\t\tthrow new ApiException(repeatSubmitOption.message);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: RepeatSubmitGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。如果2s请求频繁那么就会提示 “操作过于频繁”\n\t@RepeatSubmit({\n\t\tinterval: 2,\n\t\tmessage: \"操作过于频繁\",\n\t})\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 操作权限\n\n### 自定义元数据\n\n```ts\nexport enum PermissionRelationEnum {\n\tAND = \"AND\",\n\tOR = \"OR\",\n}\n```\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { PermissionRelationEnum } from \"../enum/permission.enum\";\nimport { PERMISSION_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport class PermissionOption {\n\tpermissionArr: string[];\n\trelation: PermissionRelationEnum;\n}\nexport const Permission = (\n\tpermissions: string | string[],\n\trelation: PermissionRelationEnum = PermissionRelationEnum.OR // 权限的关系， 是并且还是或者的关系\n) => {\n\tconst permissionObj: PermissionOption = {\n\t\tpermissionArr: [],\n\t\trelation,\n\t};\n\tif (typeof permissions === \"string\") {\n\t\tpermissionObj.permissionArr = [permissions];\n\t} else if (permissions instanceof Array) {\n\t\tpermissionObj.permissionArr = permissions;\n\t}\n\treturn SetMetadata(PERMISSION_KEY_METADATA, permissionObj);\n};\n```\n\n### 自定义守卫\n\n```ts\nimport { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { PermissionOption } from \"../decorator/permission.decorator\";\nimport { PERMISSION_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { PermissionRelationEnum } from \"../enum/permission.enum\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n\tconstructor(private readonly reflector: Reflector) {}\n\tcanActivate(\n\t\tcontext: ExecutionContext\n\t): boolean | Promise<boolean> | Observable<boolean> {\n\t\tconst permissionObj = this.reflector.getAllAndOverride<PermissionOption>(\n\t\t\tPERMISSION_KEY_METADATA,\n\t\t\t[context.getHandler(), context.getClass()]\n\t\t);\n\t\tif (!permissionObj || !permissionObj.permissionArr.length) return true;\n\n\t\tconst request = context.switchToHttp().getRequest();\n\t\t// 权限挂载在用户信心之上\n\t\tconst user = request.user;\n\t\tconst permissions = user?.permissions || [];\n\t\tif (permissions.includes(\"*\")) return true;\n\t\tlet result = false;\n\t\tif (permissionObj.relation === PermissionRelationEnum.OR) {\n\t\t\tresult = permissionObj.permissionArr.some(userPermission => {\n\t\t\t\treturn permissions.includes(userPermission);\n\t\t\t});\n\t\t} else if (permissionObj.relation === PermissionRelationEnum.AND) {\n\t\t\tresult = permissionObj.permissionArr.every(userPermission => {\n\t\t\t\treturn permissions.includes(userPermission);\n\t\t\t});\n\t\t}\n\t\tif (!result)\n\t\t\tthrow new ApiException(\n\t\t\t\t\"暂无权限访问，请联系管理员\",\n\t\t\t\tHttpStatusCode.UNAUTHORIZED\n\t\t\t);\n\t\treturn result;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    // 权限守卫\n    {\n      provide: APP_GUARD,\n      useClass: PermissionGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。如果没有权限 会提示'暂无权限访问，请联系管理员'\n\t@Permission([\"v1:order:create\"], PermissionRelationEnum.OR)\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n## 是否登录\n\n### 自定义元数据\n\n```ts\nimport { SetMetadata } from \"@nestjs/common\";\nimport { PUBLIC_KEY_METADATA } from \"../constants/metadata.constant\";\n\nexport const Public = () => SetMetadata(PUBLIC_KEY_METADATA, true);\n```\n\n### 自定义守卫\n\n```ts\nimport { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PUBLIC_KEY_METADATA } from \"../constants/metadata.constant\";\nimport { ApiException } from \"../exception/api.exception\";\nimport { HttpStatusCode } from \"../enum/http.enum\";\n\n@Injectable()\n// https://github.com/jaredhanson/passport\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n\tconstructor(private reflector: Reflector) {\n\t\tsuper();\n\t}\n\tcanActivate(\n\t\tcontext: ExecutionContext\n\t): boolean | Promise<boolean> | Observable<boolean> {\n\t\tconst noInterception = this.reflector.getAllAndOverride(\n\t\t\tPUBLIC_KEY_METADATA,\n\t\t\t[context.getHandler(), context.getClass()]\n\t\t);\n\t\tif (noInterception) return true;\n\t\treturn super.canActivate(context);\n\t}\n\n\thandleRequest(err: any, user: any) {\n\t\tif (err || !user) {\n\t\t\tthrow err || new ApiException(\"登录状态已过期\", HttpStatusCode.FORBIDDEN);\n\t\t}\n\t\treturn user;\n\t}\n}\n```\n\n### 注册\n\n`app.module.ts`使用:\n\n```ts\n@Module({\n  imports: [],\n  providers: [\n    // jwt守卫\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ]\n})\n```\n\n### 控制层使用\n\n```ts\nimport { Controller, Post, Body, Get, Request } from \"@nestjs/common\";\nexport class UserController {\n\tconstructor() {}\n\n\t// 添加这一行代码。说明不需要token校验\n\t@Public()\n\t@Post(\"create\")\n\tasync create(@Body() body: { username: string; password: string }) {\n\t\treturn \"success\";\n\t}\n}\n```\n\n注意：\n\n1. [`ApiException是什么可以查看 异常过滤器`](/brochure/nest/base/exceptionFilter.html#自定义异常)\n2. [`Redis使用`](/brochure/nest/base/database.html#redis)\n3. [`JWT使用`](/brochure/nest/base/jwt)\n","slug":"技能小册/Nest/路由守卫","published":1,"updated":"2025-03-12T09:44:33.509Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j0003ufg9mdnjwek8v","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>守卫是一个用 <code>@Injectable()</code> 装饰器注释的类，它实现了 <code>CanActivate</code> 接口。</p>\n<p>守卫有单一的责任。它们根据运行时存在的某些条件（如权限、角色、ACL 等）确定给定请求是否将由路由处理程序处理。这通常称为授权。授权（及其通常与之合作的身份验证）通常由传统 <code>Express</code> 应用中的 中间件 处理。中间件是身份验证的不错选择，因为诸如令牌验证和将属性附加到 <code>request</code> 对象之类的事情与特定路由上下文（及其元数据）没有紧密联系。</p>\n<p>但是中间件，就其本质而言，是愚蠢的。它不知道调用 <code>next()</code> 函数后将执行哪个处理程序。另一方面，Guards 可以访问 <code>ExecutionContext</code> 实例，因此确切地知道接下来要执行什么。它们的设计与异常过滤器、管道和拦截器非常相似，可让你在请求&#x2F;响应周期的正确位置插入处理逻辑，并以声明方式进行。这有助于使你的代码保持干爽和声明式。</p>\n<p><strong>为了让程序更加智能，这里使用装饰器功能，例如在某一个请求接口上添加一个装饰器，限制重复请求等等， 接下来以俩个案例：</strong></p>\n<h2 id=\"重复请求限制\"><a href=\"#重复请求限制\" class=\"headerlink\" title=\"重复请求限制\"></a>重复请求限制</h2><h3 id=\"常量文件\"><a href=\"#常量文件\" class=\"headerlink\" title=\"常量文件\"></a>常量文件</h3><p>为什么要使用常量文件？好处就是统一管理；首先创建文件作为常量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记录日志的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOG_KEY_METADATA</span> = <span class=\"string\">&quot;__log__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 重复提交的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span> = <span class=\"string\">&quot;__repeat_submit__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// public: 不需要token校验</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> = <span class=\"string\">&quot;__public__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 权限的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> = <span class=\"string\">&quot;__permission__&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ===== Redis缓存</span></span><br><span class=\"line\"><span class=\"comment\">// Redis 重复提交的key, 目录的形式， 例如： __redis_repeat__:/api/user/list</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_REPEAT_SUBMIT_KEY</span> = <span class=\"string\">&quot;__redis_repeat__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储验证码图片</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_CAPTCHA_KEY</span> = <span class=\"string\">&quot;__captcha__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储用户的token或者userId</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_TOKEN_KEY</span> = <span class=\"string\">&quot;__token__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储用户的信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_USER_INFO_KEY</span> = <span class=\"string\">&quot;__user_info__:&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义元数据\"><a href=\"#自定义元数据\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatSubmitOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">interval</span>?: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>; <span class=\"comment\">//默认1s</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>?: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;操作过于频繁&quot;</span>; <span class=\"comment\">// 可以自定义</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">RepeatSubmit</span> = (<span class=\"params\"><span class=\"attr\">option</span>?: <span class=\"title class_\">RepeatSubmitOption</span></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RepeatSubmitOption</span>(), option)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫\"><a href=\"#自定义守卫\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CanActivate</span>, <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RepeatSubmitOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/repeat-submit.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">REDIS_REPEAT_SUBMIT_KEY</span>,</span><br><span class=\"line\">\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRedis</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs-modules/ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Redis</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/common/common.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatSubmitGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectRedis</span>() <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">redis</span>: <span class=\"title class_\">Redis</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">commonService</span>: <span class=\"title class_\">CommonService</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">canActivate</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"attr\">repeatSubmitOption</span>: <span class=\"title class_\">RepeatSubmitOption</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\tcontext.<span class=\"title function_\">getHandler</span>()</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!repeatSubmitOption) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"attr\">request</span>: <span class=\"title class_\">Request</span> = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> _key = <span class=\"string\">`<span class=\"subst\">$&#123;REDIS_REPEAT_SUBMIT_KEY&#125;</span><span class=\"subst\">$&#123;request.url&#125;</span>`</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> cache = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">get</span>(_key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ip</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getIp</span>(request),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">prams</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> dataStr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cache) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dataStr) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以url作为key去做缓存，缓存时间设置为元信息传递的时间 默认时间1s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(_key, dataStr, <span class=\"string\">&quot;EX&quot;</span>, repeatSubmitOption.<span class=\"property\">interval</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dataStr &amp;&amp; dataStr === cache) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ApiException是什么可以查看 异常过滤器</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(repeatSubmitOption.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">RepeatSubmitGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用\"><a href=\"#控制层使用\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。如果2s请求频繁那么就会提示 “操作过于频繁”</span></span><br><span class=\"line\">\t<span class=\"meta\">@RepeatSubmit</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">interval</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;操作过于频繁&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作权限\"><a href=\"#操作权限\" class=\"headerlink\" title=\"操作权限\"></a>操作权限</h2><h3 id=\"自定义元数据-1\"><a href=\"#自定义元数据-1\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">PermissionRelationEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">AND</span> = <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">\t<span class=\"variable constant_\">OR</span> = <span class=\"string\">&quot;OR&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionRelationEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/permission.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PermissionOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">permissionArr</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">\t<span class=\"attr\">relation</span>: <span class=\"title class_\">PermissionRelationEnum</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Permission</span> = (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">permissions</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">string</span>[],</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">relation</span>: <span class=\"title class_\">PermissionRelationEnum</span> = <span class=\"title class_\">PermissionRelationEnum</span>.OR <span class=\"comment\">// 权限的关系， 是并且还是或者的关系</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"attr\">permissionObj</span>: <span class=\"title class_\">PermissionOption</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">permissionArr</span>: [],</span><br><span class=\"line\">\t\trelation,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> permissions === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\tpermissionObj.<span class=\"property\">permissionArr</span> = [permissions];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissions <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">\t\tpermissionObj.<span class=\"property\">permissionArr</span> = permissions;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">PERMISSION_KEY_METADATA</span>, permissionObj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫-1\"><a href=\"#自定义守卫-1\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CanActivate</span>, <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/permission.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionRelationEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/permission.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PermissionGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span></span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span></span><br><span class=\"line\">\t): <span class=\"built_in\">boolean</span> | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> permissionObj = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">getAllAndOverride</span>&lt;<span class=\"title class_\">PermissionOption</span>&gt;(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">PERMISSION_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\t[context.<span class=\"title function_\">getHandler</span>(), context.<span class=\"title function_\">getClass</span>()]</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!permissionObj || !permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 权限挂载在用户信心之上</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> user = request.<span class=\"property\">user</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> permissions = user?.<span class=\"property\">permissions</span> || [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (permissions.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;*&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (permissionObj.<span class=\"property\">relation</span> === <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">OR</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">userPermission</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> permissions.<span class=\"title function_\">includes</span>(userPermission);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissionObj.<span class=\"property\">relation</span> === <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">AND</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">userPermission</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> permissions.<span class=\"title function_\">includes</span>(userPermission);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!result)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;暂无权限访问，请联系管理员&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-1\"><a href=\"#注册-1\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 权限守卫</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">PermissionGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用-1\"><a href=\"#控制层使用-1\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。如果没有权限 会提示&#x27;暂无权限访问，请联系管理员&#x27;</span></span><br><span class=\"line\">\t<span class=\"meta\">@Permission</span>([<span class=\"string\">&quot;v1:order:create&quot;</span>], <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">OR</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"是否登录\"><a href=\"#是否登录\" class=\"headerlink\" title=\"是否登录\"></a>是否登录</h2><h3 id=\"自定义元数据-2\"><a href=\"#自定义元数据-2\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Public</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">PUBLIC_KEY_METADATA</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫-2\"><a href=\"#自定义守卫-2\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AuthGuard</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/passport&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"comment\">// https://github.com/jaredhanson/passport</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtAuthGuard</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">AuthGuard</span>(<span class=\"string\">&quot;jwt&quot;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span></span><br><span class=\"line\">\t): <span class=\"built_in\">boolean</span> | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> noInterception = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"title function_\">getAllAndOverride</span>(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">PUBLIC_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\t[context.<span class=\"title function_\">getHandler</span>(), context.<span class=\"title function_\">getClass</span>()]</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (noInterception) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"title function_\">canActivate</span>(context);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">handleRequest</span>(<span class=\"params\"><span class=\"attr\">err</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">user</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err || !user) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err || <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(<span class=\"string\">&quot;登录状态已过期&quot;</span>, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-2\"><a href=\"#注册-2\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// jwt守卫</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">JwtAuthGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用-2\"><a href=\"#控制层使用-2\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。说明不需要token校验</span></span><br><span class=\"line\">\t<span class=\"meta\">@Public</span>()</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><code>ApiException是什么可以查看 异常过滤器</code></a></li>\n<li><a href=\"/brochure/nest/base/database.html#redis\"><code>Redis使用</code></a></li>\n<li><a href=\"/brochure/nest/base/jwt\"><code>JWT使用</code></a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>守卫是一个用 <code>@Injectable()</code> 装饰器注释的类，它实现了 <code>CanActivate</code> 接口。</p>\n<p>守卫有单一的责任。它们根据运行时存在的某些条件（如权限、角色、ACL 等）确定给定请求是否将由路由处理程序处理。这通常称为授权。授权（及其通常与之合作的身份验证）通常由传统 <code>Express</code> 应用中的 中间件 处理。中间件是身份验证的不错选择，因为诸如令牌验证和将属性附加到 <code>request</code> 对象之类的事情与特定路由上下文（及其元数据）没有紧密联系。</p>\n<p>但是中间件，就其本质而言，是愚蠢的。它不知道调用 <code>next()</code> 函数后将执行哪个处理程序。另一方面，Guards 可以访问 <code>ExecutionContext</code> 实例，因此确切地知道接下来要执行什么。它们的设计与异常过滤器、管道和拦截器非常相似，可让你在请求&#x2F;响应周期的正确位置插入处理逻辑，并以声明方式进行。这有助于使你的代码保持干爽和声明式。</p>\n<p><strong>为了让程序更加智能，这里使用装饰器功能，例如在某一个请求接口上添加一个装饰器，限制重复请求等等， 接下来以俩个案例：</strong></p>\n<h2 id=\"重复请求限制\"><a href=\"#重复请求限制\" class=\"headerlink\" title=\"重复请求限制\"></a>重复请求限制</h2><h3 id=\"常量文件\"><a href=\"#常量文件\" class=\"headerlink\" title=\"常量文件\"></a>常量文件</h3><p>为什么要使用常量文件？好处就是统一管理；首先创建文件作为常量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记录日志的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">LOG_KEY_METADATA</span> = <span class=\"string\">&quot;__log__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 重复提交的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span> = <span class=\"string\">&quot;__repeat_submit__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// public: 不需要token校验</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> = <span class=\"string\">&quot;__public__&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 权限的key</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> = <span class=\"string\">&quot;__permission__&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ===== Redis缓存</span></span><br><span class=\"line\"><span class=\"comment\">// Redis 重复提交的key, 目录的形式， 例如： __redis_repeat__:/api/user/list</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_REPEAT_SUBMIT_KEY</span> = <span class=\"string\">&quot;__redis_repeat__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储验证码图片</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_CAPTCHA_KEY</span> = <span class=\"string\">&quot;__captcha__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储用户的token或者userId</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_TOKEN_KEY</span> = <span class=\"string\">&quot;__token__:&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 存储用户的信息</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REDIS_USER_INFO_KEY</span> = <span class=\"string\">&quot;__user_info__:&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义元数据\"><a href=\"#自定义元数据\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatSubmitOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">interval</span>?: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>; <span class=\"comment\">//默认1s</span></span><br><span class=\"line\">\t<span class=\"attr\">message</span>?: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;操作过于频繁&quot;</span>; <span class=\"comment\">// 可以自定义</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">RepeatSubmit</span> = (<span class=\"params\"><span class=\"attr\">option</span>?: <span class=\"title class_\">RepeatSubmitOption</span></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(</span><br><span class=\"line\">\t\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RepeatSubmitOption</span>(), option)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫\"><a href=\"#自定义守卫\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CanActivate</span>, <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">RepeatSubmitOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/repeat-submit.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">REDIS_REPEAT_SUBMIT_KEY</span>,</span><br><span class=\"line\">\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectRedis</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs-modules/ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Redis</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;ioredis&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;express&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CommonService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;src/shared/common/common.service&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatSubmitGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@InjectRedis</span>() <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">redis</span>: <span class=\"title class_\">Redis</span>,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">commonService</span>: <span class=\"title class_\">CommonService</span></span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">canActivate</span>(<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"attr\">repeatSubmitOption</span>: <span class=\"title class_\">RepeatSubmitOption</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"title function_\">get</span>(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">REPEAT_SUBMIT_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\tcontext.<span class=\"title function_\">getHandler</span>()</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!repeatSubmitOption) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"attr\">request</span>: <span class=\"title class_\">Request</span> = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> _key = <span class=\"string\">`<span class=\"subst\">$&#123;REDIS_REPEAT_SUBMIT_KEY&#125;</span><span class=\"subst\">$&#123;request.url&#125;</span>`</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> cache = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">get</span>(_key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ip</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">commonService</span>.<span class=\"title function_\">getIp</span>(request),</span><br><span class=\"line\">\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">prams</span>: request.<span class=\"property\">params</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">query</span>: request.<span class=\"property\">query</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> dataStr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cache) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dataStr) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 以url作为key去做缓存，缓存时间设置为元信息传递的时间 默认时间1s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">redis</span>.<span class=\"title function_\">set</span>(_key, dataStr, <span class=\"string\">&quot;EX&quot;</span>, repeatSubmitOption.<span class=\"property\">interval</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dataStr &amp;&amp; dataStr === cache) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ApiException是什么可以查看 异常过滤器</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(repeatSubmitOption.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">RepeatSubmitGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用\"><a href=\"#控制层使用\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。如果2s请求频繁那么就会提示 “操作过于频繁”</span></span><br><span class=\"line\">\t<span class=\"meta\">@RepeatSubmit</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">interval</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;操作过于频繁&quot;</span>,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作权限\"><a href=\"#操作权限\" class=\"headerlink\" title=\"操作权限\"></a>操作权限</h2><h3 id=\"自定义元数据-1\"><a href=\"#自定义元数据-1\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">PermissionRelationEnum</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable constant_\">AND</span> = <span class=\"string\">&quot;AND&quot;</span>,</span><br><span class=\"line\">\t<span class=\"variable constant_\">OR</span> = <span class=\"string\">&quot;OR&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionRelationEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/permission.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PermissionOption</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">permissionArr</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">\t<span class=\"attr\">relation</span>: <span class=\"title class_\">PermissionRelationEnum</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Permission</span> = (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">permissions</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">string</span>[],</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"attr\">relation</span>: <span class=\"title class_\">PermissionRelationEnum</span> = <span class=\"title class_\">PermissionRelationEnum</span>.OR <span class=\"comment\">// 权限的关系， 是并且还是或者的关系</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"attr\">permissionObj</span>: <span class=\"title class_\">PermissionOption</span> = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">permissionArr</span>: [],</span><br><span class=\"line\">\t\trelation,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> permissions === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\tpermissionObj.<span class=\"property\">permissionArr</span> = [permissions];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissions <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">\t\tpermissionObj.<span class=\"property\">permissionArr</span> = permissions;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">PERMISSION_KEY_METADATA</span>, permissionObj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫-1\"><a href=\"#自定义守卫-1\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">CanActivate</span>, <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionOption</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../decorator/permission.decorator&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PERMISSION_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">PermissionRelationEnum</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/permission.enum&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PermissionGuard</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CanActivate</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span></span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span></span><br><span class=\"line\">\t): <span class=\"built_in\">boolean</span> | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> permissionObj = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">getAllAndOverride</span>&lt;<span class=\"title class_\">PermissionOption</span>&gt;(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">PERMISSION_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\t[context.<span class=\"title function_\">getHandler</span>(), context.<span class=\"title function_\">getClass</span>()]</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!permissionObj || !permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> request = context.<span class=\"title function_\">switchToHttp</span>().<span class=\"title function_\">getRequest</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 权限挂载在用户信心之上</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> user = request.<span class=\"property\">user</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> permissions = user?.<span class=\"property\">permissions</span> || [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (permissions.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;*&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (permissionObj.<span class=\"property\">relation</span> === <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">OR</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">userPermission</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> permissions.<span class=\"title function_\">includes</span>(userPermission);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (permissionObj.<span class=\"property\">relation</span> === <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">AND</span>) &#123;</span><br><span class=\"line\">\t\t\tresult = permissionObj.<span class=\"property\">permissionArr</span>.<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">userPermission</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> permissions.<span class=\"title function_\">includes</span>(userPermission);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!result)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;暂无权限访问，请联系管理员&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">UNAUTHORIZED</span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-1\"><a href=\"#注册-1\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 权限守卫</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">PermissionGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用-1\"><a href=\"#控制层使用-1\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。如果没有权限 会提示&#x27;暂无权限访问，请联系管理员&#x27;</span></span><br><span class=\"line\">\t<span class=\"meta\">@Permission</span>([<span class=\"string\">&quot;v1:order:create&quot;</span>], <span class=\"title class_\">PermissionRelationEnum</span>.<span class=\"property\">OR</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"是否登录\"><a href=\"#是否登录\" class=\"headerlink\" title=\"是否登录\"></a>是否登录</h2><h3 id=\"自定义元数据-2\"><a href=\"#自定义元数据-2\" class=\"headerlink\" title=\"自定义元数据\"></a>自定义元数据</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">Public</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">PUBLIC_KEY_METADATA</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义守卫-2\"><a href=\"#自定义守卫-2\" class=\"headerlink\" title=\"自定义守卫\"></a>自定义守卫</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ExecutionContext</span>, <span class=\"title class_\">Injectable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rxjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AuthGuard</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/passport&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Reflector</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">PUBLIC_KEY_METADATA</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../constants/metadata.constant&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ApiException</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../exception/api.exception&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">HttpStatusCode</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../enum/http.enum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"comment\">// https://github.com/jaredhanson/passport</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtAuthGuard</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">AuthGuard</span>(<span class=\"string\">&quot;jwt&quot;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> <span class=\"attr\">reflector</span>: <span class=\"title class_\">Reflector</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">canActivate</span>(</span><br><span class=\"line\">\t\t<span class=\"attr\">context</span>: <span class=\"title class_\">ExecutionContext</span></span><br><span class=\"line\">\t): <span class=\"built_in\">boolean</span> | <span class=\"title class_\">Promise</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"title class_\">Observable</span>&lt;<span class=\"built_in\">boolean</span>&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> noInterception = <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"title function_\">getAllAndOverride</span>(</span><br><span class=\"line\">\t\t\t<span class=\"variable constant_\">PUBLIC_KEY_METADATA</span>,</span><br><span class=\"line\">\t\t\t[context.<span class=\"title function_\">getHandler</span>(), context.<span class=\"title function_\">getClass</span>()]</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (noInterception) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"title function_\">canActivate</span>(context);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">handleRequest</span>(<span class=\"params\"><span class=\"attr\">err</span>: <span class=\"built_in\">any</span>, <span class=\"attr\">user</span>: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err || !user) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err || <span class=\"keyword\">new</span> <span class=\"title class_\">ApiException</span>(<span class=\"string\">&quot;登录状态已过期&quot;</span>, <span class=\"title class_\">HttpStatusCode</span>.<span class=\"property\">FORBIDDEN</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册-2\"><a href=\"#注册-2\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p><code>app.module.ts</code>使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// jwt守卫</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_GUARD</span>,</span><br><span class=\"line\">      <span class=\"attr\">useClass</span>: <span class=\"title class_\">JwtAuthGuard</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制层使用-2\"><a href=\"#控制层使用-2\" class=\"headerlink\" title=\"控制层使用\"></a>控制层使用</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Post</span>, <span class=\"title class_\">Body</span>, <span class=\"title class_\">Get</span>, <span class=\"title class_\">Request</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@nestjs/common&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加这一行代码。说明不需要token校验</span></span><br><span class=\"line\">\t<span class=\"meta\">@Public</span>()</span><br><span class=\"line\">\t<span class=\"meta\">@Post</span>(<span class=\"string\">&quot;create&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">create</span>(<span class=\"params\"><span class=\"meta\">@Body</span>() <span class=\"attr\">body</span>: &#123; username: <span class=\"built_in\">string</span>; password: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li><a href=\"/brochure/nest/base/exceptionFilter.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><code>ApiException是什么可以查看 异常过滤器</code></a></li>\n<li><a href=\"/brochure/nest/base/database.html#redis\"><code>Redis使用</code></a></li>\n<li><a href=\"/brochure/nest/base/jwt\"><code>JWT使用</code></a></li>\n</ol>\n"},{"title":"created和mounted的区别","abbrlink":"87869eae","date":"2024-04-14T03:20:38.000Z","_content":"\n\n{% note info simple %}\n`Vue`中的`created`和`mounted`在生命周期函数中承担了不同的角色, 他们分别在组件的不同阶段调用，分别对应这组件生命周期的不同状态。\n{% endnote %}\n\n## 调用时机\n\n1. `created`在组件实例创建后立即调用，此时已经完成模板编译、数据观测（data observer）、属性注入（props）以及计算属性/computed、方法/watcher 的设置等工作。在这个阶段，组件的属性和数据已经绑定，但是 DOM 还未生成，也就是`html`标签还未挂在在页面上;\n2. `mouted`在组件挂载完成之后调用，此时 DOM 已经生成，组件已经挂载到页面上，可以通过`this.$el`获取组件的根元素。我们通常想要获取某个元素的时候，可以在`mounted`中获取。\n\n## 使用场景\n\n1. `created`常用于进行非 DOM 依赖的初始化工作：\n\n   - 数据的预处理或默认值设置， 一般初始化操作。\n   - 发起异步请求以获取数据（如果不需要等待 DOM 就绪就可以开始）。\n   - 注册全局事件监听器或插件。\n   - 如果有其他组件依赖于此组件的状态，那么在 `created` 阶段设置好这些状态可以让依赖组件更快地得到更新。\n\n2. `mounted`适合进行与 DOM 相关的操作或第三方库的初始化，如：\n   - 操作组件本身或其子组件的 DOM 节点。\n   - 初始化需要真实 DOM 的第三方库或插件（如地图组件、图表库、富文本编辑器等）。\n   - 执行依赖于 DOM 尺寸、位置或其他计算的 JavaScript 库或 CSS 动画。\n   - 如果有需要在 DOM 加载后才进行的异步操作（比如基于某个 DOM 元素尺寸的计算或操作），也可以在 mounted 中进行。\n\n## 生命周期影响：\n\n1. `created` 只会在组件实例首次被创建时执行一次。如果组件因为路由切换、条件性渲染等原因被销毁后再次创建，`created` 仍然会再次执行。\n2. `mounted `也是如此，每次组件被挂载到 DOM 中时都会触发。因此，在单页应用中，当路由切换导致组件被卸载后又重新进入视图时，`mounted` 钩子会再次执行。\n\n## 总结：\n\n1. `created`一般用于初始化操作, 如：数据预处理等；适合处理数据初始化和非 `DOM` 相关的任务。\n2. `mounted`在实例挂载到 DOM 后被调用，适合进行 DOM 操作、初始化第三方库和绑定事件监听。\n","source":"_posts/技能小册/vue/created和mounted的区别.md","raw":"---\ntitle: created和mounted的区别\nabbrlink: 87869eae\ndate: 2024-04-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue \n---\n\n\n{% note info simple %}\n`Vue`中的`created`和`mounted`在生命周期函数中承担了不同的角色, 他们分别在组件的不同阶段调用，分别对应这组件生命周期的不同状态。\n{% endnote %}\n\n## 调用时机\n\n1. `created`在组件实例创建后立即调用，此时已经完成模板编译、数据观测（data observer）、属性注入（props）以及计算属性/computed、方法/watcher 的设置等工作。在这个阶段，组件的属性和数据已经绑定，但是 DOM 还未生成，也就是`html`标签还未挂在在页面上;\n2. `mouted`在组件挂载完成之后调用，此时 DOM 已经生成，组件已经挂载到页面上，可以通过`this.$el`获取组件的根元素。我们通常想要获取某个元素的时候，可以在`mounted`中获取。\n\n## 使用场景\n\n1. `created`常用于进行非 DOM 依赖的初始化工作：\n\n   - 数据的预处理或默认值设置， 一般初始化操作。\n   - 发起异步请求以获取数据（如果不需要等待 DOM 就绪就可以开始）。\n   - 注册全局事件监听器或插件。\n   - 如果有其他组件依赖于此组件的状态，那么在 `created` 阶段设置好这些状态可以让依赖组件更快地得到更新。\n\n2. `mounted`适合进行与 DOM 相关的操作或第三方库的初始化，如：\n   - 操作组件本身或其子组件的 DOM 节点。\n   - 初始化需要真实 DOM 的第三方库或插件（如地图组件、图表库、富文本编辑器等）。\n   - 执行依赖于 DOM 尺寸、位置或其他计算的 JavaScript 库或 CSS 动画。\n   - 如果有需要在 DOM 加载后才进行的异步操作（比如基于某个 DOM 元素尺寸的计算或操作），也可以在 mounted 中进行。\n\n## 生命周期影响：\n\n1. `created` 只会在组件实例首次被创建时执行一次。如果组件因为路由切换、条件性渲染等原因被销毁后再次创建，`created` 仍然会再次执行。\n2. `mounted `也是如此，每次组件被挂载到 DOM 中时都会触发。因此，在单页应用中，当路由切换导致组件被卸载后又重新进入视图时，`mounted` 钩子会再次执行。\n\n## 总结：\n\n1. `created`一般用于初始化操作, 如：数据预处理等；适合处理数据初始化和非 `DOM` 相关的任务。\n2. `mounted`在实例挂载到 DOM 后被调用，适合进行 DOM 操作、初始化第三方库和绑定事件监听。\n","slug":"技能小册/vue/created和mounted的区别","published":1,"updated":"2025-03-12T09:27:28.357Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j0003xfg9mecrc2esz","content":"<div class=\"note info simple\"><p><code>Vue</code>中的<code>created</code>和<code>mounted</code>在生命周期函数中承担了不同的角色, 他们分别在组件的不同阶段调用，分别对应这组件生命周期的不同状态。</p>\n</div>\n\n<h2 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h2><ol>\n<li><code>created</code>在组件实例创建后立即调用，此时已经完成模板编译、数据观测（data observer）、属性注入（props）以及计算属性&#x2F;computed、方法&#x2F;watcher 的设置等工作。在这个阶段，组件的属性和数据已经绑定，但是 DOM 还未生成，也就是<code>html</code>标签还未挂在在页面上;</li>\n<li><code>mouted</code>在组件挂载完成之后调用，此时 DOM 已经生成，组件已经挂载到页面上，可以通过<code>this.$el</code>获取组件的根元素。我们通常想要获取某个元素的时候，可以在<code>mounted</code>中获取。</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li><p><code>created</code>常用于进行非 DOM 依赖的初始化工作：</p>\n<ul>\n<li>数据的预处理或默认值设置， 一般初始化操作。</li>\n<li>发起异步请求以获取数据（如果不需要等待 DOM 就绪就可以开始）。</li>\n<li>注册全局事件监听器或插件。</li>\n<li>如果有其他组件依赖于此组件的状态，那么在 <code>created</code> 阶段设置好这些状态可以让依赖组件更快地得到更新。</li>\n</ul>\n</li>\n<li><p><code>mounted</code>适合进行与 DOM 相关的操作或第三方库的初始化，如：</p>\n<ul>\n<li>操作组件本身或其子组件的 DOM 节点。</li>\n<li>初始化需要真实 DOM 的第三方库或插件（如地图组件、图表库、富文本编辑器等）。</li>\n<li>执行依赖于 DOM 尺寸、位置或其他计算的 JavaScript 库或 CSS 动画。</li>\n<li>如果有需要在 DOM 加载后才进行的异步操作（比如基于某个 DOM 元素尺寸的计算或操作），也可以在 mounted 中进行。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"生命周期影响：\"><a href=\"#生命周期影响：\" class=\"headerlink\" title=\"生命周期影响：\"></a>生命周期影响：</h2><ol>\n<li><code>created</code> 只会在组件实例首次被创建时执行一次。如果组件因为路由切换、条件性渲染等原因被销毁后再次创建，<code>created</code> 仍然会再次执行。</li>\n<li><code>mounted </code>也是如此，每次组件被挂载到 DOM 中时都会触发。因此，在单页应用中，当路由切换导致组件被卸载后又重新进入视图时，<code>mounted</code> 钩子会再次执行。</li>\n</ol>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li><code>created</code>一般用于初始化操作, 如：数据预处理等；适合处理数据初始化和非 <code>DOM</code> 相关的任务。</li>\n<li><code>mounted</code>在实例挂载到 DOM 后被调用，适合进行 DOM 操作、初始化第三方库和绑定事件监听。</li>\n</ol>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>Vue</code>中的<code>created</code>和<code>mounted</code>在生命周期函数中承担了不同的角色, 他们分别在组件的不同阶段调用，分别对应这组件生命周期的不同状态。</p>\n</div>\n\n<h2 id=\"调用时机\"><a href=\"#调用时机\" class=\"headerlink\" title=\"调用时机\"></a>调用时机</h2><ol>\n<li><code>created</code>在组件实例创建后立即调用，此时已经完成模板编译、数据观测（data observer）、属性注入（props）以及计算属性&#x2F;computed、方法&#x2F;watcher 的设置等工作。在这个阶段，组件的属性和数据已经绑定，但是 DOM 还未生成，也就是<code>html</code>标签还未挂在在页面上;</li>\n<li><code>mouted</code>在组件挂载完成之后调用，此时 DOM 已经生成，组件已经挂载到页面上，可以通过<code>this.$el</code>获取组件的根元素。我们通常想要获取某个元素的时候，可以在<code>mounted</code>中获取。</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li><p><code>created</code>常用于进行非 DOM 依赖的初始化工作：</p>\n<ul>\n<li>数据的预处理或默认值设置， 一般初始化操作。</li>\n<li>发起异步请求以获取数据（如果不需要等待 DOM 就绪就可以开始）。</li>\n<li>注册全局事件监听器或插件。</li>\n<li>如果有其他组件依赖于此组件的状态，那么在 <code>created</code> 阶段设置好这些状态可以让依赖组件更快地得到更新。</li>\n</ul>\n</li>\n<li><p><code>mounted</code>适合进行与 DOM 相关的操作或第三方库的初始化，如：</p>\n<ul>\n<li>操作组件本身或其子组件的 DOM 节点。</li>\n<li>初始化需要真实 DOM 的第三方库或插件（如地图组件、图表库、富文本编辑器等）。</li>\n<li>执行依赖于 DOM 尺寸、位置或其他计算的 JavaScript 库或 CSS 动画。</li>\n<li>如果有需要在 DOM 加载后才进行的异步操作（比如基于某个 DOM 元素尺寸的计算或操作），也可以在 mounted 中进行。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"生命周期影响：\"><a href=\"#生命周期影响：\" class=\"headerlink\" title=\"生命周期影响：\"></a>生命周期影响：</h2><ol>\n<li><code>created</code> 只会在组件实例首次被创建时执行一次。如果组件因为路由切换、条件性渲染等原因被销毁后再次创建，<code>created</code> 仍然会再次执行。</li>\n<li><code>mounted </code>也是如此，每次组件被挂载到 DOM 中时都会触发。因此，在单页应用中，当路由切换导致组件被卸载后又重新进入视图时，<code>mounted</code> 钩子会再次执行。</li>\n</ol>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li><code>created</code>一般用于初始化操作, 如：数据预处理等；适合处理数据初始化和非 <code>DOM</code> 相关的任务。</li>\n<li><code>mounted</code>在实例挂载到 DOM 后被调用，适合进行 DOM 操作、初始化第三方库和绑定事件监听。</li>\n</ol>\n"},{"title":"v-for和v-if不能同时使用","abbrlink":"4237922f","date":"2024-04-14T03:20:38.000Z","_content":"\n{% note info simple %}\nVue 中 `v-for 和 v-if` 不建议同时直接应用于同一元素的原因主要涉及以下几个方面：\n{% endnote %}\n\n\n## 优先级问题\n\n1. **Vue 2.x** 在早期的 Vue 2 版本中，v-for 指令的优先级高于 v-if。这意味着即使 v-if 的条件可能过滤掉大部分项，v-for 仍然会先遍历整个列表。即便最终只有少数几项（甚至一项）需要渲染，也会导致对整个列表进行无谓的迭代和条件判断，从而造成性能浪费。\n\n2. **Vue 3.x**Vue 3 对这一行为进行了调整，使得 v-if 的优先级高于 v-for。虽然这解决了之前版本中不必要的遍历问题，但新的问题随之出现：如果 v-if 先于 v-for 执行，它可能会尝试访问由 v-for 循环尚未创建的变量，导致运行时错误。这是因为 v-if 在没有循环上下文的情况下无法正确评估其条件表达式。\n\n## 性能与效率\n\n当 v-if 和 v-for 同时作用于一个元素时，无论优先级如何，都可能导致不必要的计算。在 Vue 2 中，即使 v-if 条件仅筛选出列表的一小部分，也必须遍历整个列表。在 Vue 3 中，尽管避免了这种遍历，但若 v-if 依赖于循环变量，可能会触发错误或导致难以预料的行为。\n\n## 最佳实践与官方指导\n\nVue 官方文档明确指出不应在同一元素上同时使用 v-if 和 v-for。这是因为这样的用法通常暗示了逻辑组织上的不足，且容易引发上述性能问题或运行时错误。遵循最佳实践有助于编写更清晰、更高效的代码。\n\n## 解决方案与替代策略\n\n针对 `v-if 和 v-for` 需要在逻辑上结合使用的情况，推荐以下两种替代方案：\n\n- 在外部容器元素上使用 v-if：将 v-if 移动到包含 v-for 循环的父元素上，这样可以在循环整个列表之前先对整个集合进行条件过滤。例如：\n\n```html\n<ul v-if=\"isName\">\n\t<li v-for=\"item in names\" :key=\"item.id\">{{ item.name }}</li>\n</ul>\n```\n\n- 在循环内部使用 v-if：将 v-if 放在 v-for 循环内部的单个元素上，以便对每个单独的项进行条件判断。这样可以避免遍历未通过条件检查的项，同时避免了优先级冲突。例如：\n\n```html\n<ul>\n\t<li v-for=\"item in names\" :key=\"item.id\">\n\t\t<div v-if=\"item.isName\">{{ item.name }}</div>\n\t</li>\n</ul>\n```\n\n总之，Vue 中 v-for 和 v-if 不建议同时直接使用于同一元素，主要是为了避免性能损失、潜在的运行时错误，以及遵循官方的最佳实践。通过合理地分离这两个指令，可以确保代码既高效又易于维护。\n","source":"_posts/技能小册/vue/v-for和v-if不能同时使用.md","raw":"---\ntitle: v-for和v-if不能同时使用\nabbrlink: 4237922f\ndate: 2024-04-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue \n---\n\n{% note info simple %}\nVue 中 `v-for 和 v-if` 不建议同时直接应用于同一元素的原因主要涉及以下几个方面：\n{% endnote %}\n\n\n## 优先级问题\n\n1. **Vue 2.x** 在早期的 Vue 2 版本中，v-for 指令的优先级高于 v-if。这意味着即使 v-if 的条件可能过滤掉大部分项，v-for 仍然会先遍历整个列表。即便最终只有少数几项（甚至一项）需要渲染，也会导致对整个列表进行无谓的迭代和条件判断，从而造成性能浪费。\n\n2. **Vue 3.x**Vue 3 对这一行为进行了调整，使得 v-if 的优先级高于 v-for。虽然这解决了之前版本中不必要的遍历问题，但新的问题随之出现：如果 v-if 先于 v-for 执行，它可能会尝试访问由 v-for 循环尚未创建的变量，导致运行时错误。这是因为 v-if 在没有循环上下文的情况下无法正确评估其条件表达式。\n\n## 性能与效率\n\n当 v-if 和 v-for 同时作用于一个元素时，无论优先级如何，都可能导致不必要的计算。在 Vue 2 中，即使 v-if 条件仅筛选出列表的一小部分，也必须遍历整个列表。在 Vue 3 中，尽管避免了这种遍历，但若 v-if 依赖于循环变量，可能会触发错误或导致难以预料的行为。\n\n## 最佳实践与官方指导\n\nVue 官方文档明确指出不应在同一元素上同时使用 v-if 和 v-for。这是因为这样的用法通常暗示了逻辑组织上的不足，且容易引发上述性能问题或运行时错误。遵循最佳实践有助于编写更清晰、更高效的代码。\n\n## 解决方案与替代策略\n\n针对 `v-if 和 v-for` 需要在逻辑上结合使用的情况，推荐以下两种替代方案：\n\n- 在外部容器元素上使用 v-if：将 v-if 移动到包含 v-for 循环的父元素上，这样可以在循环整个列表之前先对整个集合进行条件过滤。例如：\n\n```html\n<ul v-if=\"isName\">\n\t<li v-for=\"item in names\" :key=\"item.id\">{{ item.name }}</li>\n</ul>\n```\n\n- 在循环内部使用 v-if：将 v-if 放在 v-for 循环内部的单个元素上，以便对每个单独的项进行条件判断。这样可以避免遍历未通过条件检查的项，同时避免了优先级冲突。例如：\n\n```html\n<ul>\n\t<li v-for=\"item in names\" :key=\"item.id\">\n\t\t<div v-if=\"item.isName\">{{ item.name }}</div>\n\t</li>\n</ul>\n```\n\n总之，Vue 中 v-for 和 v-if 不建议同时直接使用于同一元素，主要是为了避免性能损失、潜在的运行时错误，以及遵循官方的最佳实践。通过合理地分离这两个指令，可以确保代码既高效又易于维护。\n","slug":"技能小册/vue/v-for和v-if不能同时使用","published":1,"updated":"2025-03-12T09:27:46.996Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j00040fg9m8nwj7tz4","content":"<div class=\"note info simple\"><p>Vue 中 <code>v-for 和 v-if</code> 不建议同时直接应用于同一元素的原因主要涉及以下几个方面：</p>\n</div>\n\n\n<h2 id=\"优先级问题\"><a href=\"#优先级问题\" class=\"headerlink\" title=\"优先级问题\"></a>优先级问题</h2><ol>\n<li><p><strong>Vue 2.x</strong> 在早期的 Vue 2 版本中，v-for 指令的优先级高于 v-if。这意味着即使 v-if 的条件可能过滤掉大部分项，v-for 仍然会先遍历整个列表。即便最终只有少数几项（甚至一项）需要渲染，也会导致对整个列表进行无谓的迭代和条件判断，从而造成性能浪费。</p>\n</li>\n<li><p><strong>Vue 3.x</strong>Vue 3 对这一行为进行了调整，使得 v-if 的优先级高于 v-for。虽然这解决了之前版本中不必要的遍历问题，但新的问题随之出现：如果 v-if 先于 v-for 执行，它可能会尝试访问由 v-for 循环尚未创建的变量，导致运行时错误。这是因为 v-if 在没有循环上下文的情况下无法正确评估其条件表达式。</p>\n</li>\n</ol>\n<h2 id=\"性能与效率\"><a href=\"#性能与效率\" class=\"headerlink\" title=\"性能与效率\"></a>性能与效率</h2><p>当 v-if 和 v-for 同时作用于一个元素时，无论优先级如何，都可能导致不必要的计算。在 Vue 2 中，即使 v-if 条件仅筛选出列表的一小部分，也必须遍历整个列表。在 Vue 3 中，尽管避免了这种遍历，但若 v-if 依赖于循环变量，可能会触发错误或导致难以预料的行为。</p>\n<h2 id=\"最佳实践与官方指导\"><a href=\"#最佳实践与官方指导\" class=\"headerlink\" title=\"最佳实践与官方指导\"></a>最佳实践与官方指导</h2><p>Vue 官方文档明确指出不应在同一元素上同时使用 v-if 和 v-for。这是因为这样的用法通常暗示了逻辑组织上的不足，且容易引发上述性能问题或运行时错误。遵循最佳实践有助于编写更清晰、更高效的代码。</p>\n<h2 id=\"解决方案与替代策略\"><a href=\"#解决方案与替代策略\" class=\"headerlink\" title=\"解决方案与替代策略\"></a>解决方案与替代策略</h2><p>针对 <code>v-if 和 v-for</code> 需要在逻辑上结合使用的情况，推荐以下两种替代方案：</p>\n<ul>\n<li>在外部容器元素上使用 v-if：将 v-if 移动到包含 v-for 循环的父元素上，这样可以在循环整个列表之前先对整个集合进行条件过滤。例如：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isName&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在循环内部使用 v-if：将 v-if 放在 v-for 循环内部的单个元素上，以便对每个单独的项进行条件判断。这样可以避免遍历未通过条件检查的项，同时避免了优先级冲突。例如：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;item.isName&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总之，Vue 中 v-for 和 v-if 不建议同时直接使用于同一元素，主要是为了避免性能损失、潜在的运行时错误，以及遵循官方的最佳实践。通过合理地分离这两个指令，可以确保代码既高效又易于维护。</p>\n","excerpt":"","more":"<div class=\"note info simple\"><p>Vue 中 <code>v-for 和 v-if</code> 不建议同时直接应用于同一元素的原因主要涉及以下几个方面：</p>\n</div>\n\n\n<h2 id=\"优先级问题\"><a href=\"#优先级问题\" class=\"headerlink\" title=\"优先级问题\"></a>优先级问题</h2><ol>\n<li><p><strong>Vue 2.x</strong> 在早期的 Vue 2 版本中，v-for 指令的优先级高于 v-if。这意味着即使 v-if 的条件可能过滤掉大部分项，v-for 仍然会先遍历整个列表。即便最终只有少数几项（甚至一项）需要渲染，也会导致对整个列表进行无谓的迭代和条件判断，从而造成性能浪费。</p>\n</li>\n<li><p><strong>Vue 3.x</strong>Vue 3 对这一行为进行了调整，使得 v-if 的优先级高于 v-for。虽然这解决了之前版本中不必要的遍历问题，但新的问题随之出现：如果 v-if 先于 v-for 执行，它可能会尝试访问由 v-for 循环尚未创建的变量，导致运行时错误。这是因为 v-if 在没有循环上下文的情况下无法正确评估其条件表达式。</p>\n</li>\n</ol>\n<h2 id=\"性能与效率\"><a href=\"#性能与效率\" class=\"headerlink\" title=\"性能与效率\"></a>性能与效率</h2><p>当 v-if 和 v-for 同时作用于一个元素时，无论优先级如何，都可能导致不必要的计算。在 Vue 2 中，即使 v-if 条件仅筛选出列表的一小部分，也必须遍历整个列表。在 Vue 3 中，尽管避免了这种遍历，但若 v-if 依赖于循环变量，可能会触发错误或导致难以预料的行为。</p>\n<h2 id=\"最佳实践与官方指导\"><a href=\"#最佳实践与官方指导\" class=\"headerlink\" title=\"最佳实践与官方指导\"></a>最佳实践与官方指导</h2><p>Vue 官方文档明确指出不应在同一元素上同时使用 v-if 和 v-for。这是因为这样的用法通常暗示了逻辑组织上的不足，且容易引发上述性能问题或运行时错误。遵循最佳实践有助于编写更清晰、更高效的代码。</p>\n<h2 id=\"解决方案与替代策略\"><a href=\"#解决方案与替代策略\" class=\"headerlink\" title=\"解决方案与替代策略\"></a>解决方案与替代策略</h2><p>针对 <code>v-if 和 v-for</code> 需要在逻辑上结合使用的情况，推荐以下两种替代方案：</p>\n<ul>\n<li>在外部容器元素上使用 v-if：将 v-if 移动到包含 v-for 循环的父元素上，这样可以在循环整个列表之前先对整个集合进行条件过滤。例如：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isName&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在循环内部使用 v-if：将 v-if 放在 v-for 循环内部的单个元素上，以便对每个单独的项进行条件判断。这样可以避免遍历未通过条件检查的项，同时避免了优先级冲突。例如：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;item.isName&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>总之，Vue 中 v-for 和 v-if 不建议同时直接使用于同一元素，主要是为了避免性能损失、潜在的运行时错误，以及遵循官方的最佳实践。通过合理地分离这两个指令，可以确保代码既高效又易于维护。</p>\n"},{"title":"v-if和v-show的区别","abbrlink":"61e3fd80","date":"2024-04-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`Vue` 中的` v-if 和 v-show` 都是用来实现条件性渲染的指令，它们都允许根据表达式的真假值来决定是否显示对应的 DOM 元素。然而，二者在实现机制、性能影响及适用场景上存在显著差异。\n{% endnote %}\n\n\n## 渲染机制\n\n1. `v-if`控制元素的显示与否，当条件为`false`时，vue 在编译阶段会跳过该元素以及子元素的渲染, 这些元素不会在 DOM 树中创建；当条件为 true 时，vue 会动态添加该元素以及子元素。`true变为false`，相应的元素也会销毁在 DOM 中也会移除；这意味着使用 `v-if` 的元素会经历一个局部编译/卸载的过程，包括其内部的事件监听器和子组件也会被适当地销毁和重建。\n2. `v-show`不论初始条件如何，带有` v-show` 的元素总会被渲染到 DOM 中。它通过动态修改元素的 CSS 属性（通常是 `display: none 或 display: block`）来控制元素的显示与隐藏。这意味着当条件变化时，元素本身始终存在于 DOM 结构中，只是简单地改变了其可见性。\n\n## 编译开销与性能影响：\n\n1. `v-if`由于它会根据条件动态地添加或删除 DOM 元素，因此在初次渲染时，如果条件为 false，可以节省不必要的 DOM 构建和渲染成本。对于复杂的元素或组件，这种策略能更高效地利用资源。然而，当条件频繁切换时，每次切换都需要重新编译、创建或销毁元素，这可能会带来较高的性能开销。\n\n2. `v-show`由于始终渲染元素到 DOM 中，初次渲染时无论条件如何，都会产生一定的 DOM 构建成本。但后续条件切换时，只需简单地更新 CSS 属性，无需进行 DOM 节点的增删操作，因此在频繁切换显示状态的情况下，v-show 的性能通常优于 v-if。不过，即使元素被隐藏，它仍会影响文档流布局，占用内存资源。\n\n## 适用场景总结\n\n1. `v-if`适用于那些在大部分时间内不需要渲染，或者条件变化不频繁，且渲染代价较大的情况。例如，加载额外数据的分页组件、用户登录后才显示的个人资料区域、根据权限控制的高级功能模块等\n2. `v-show`适合于条件变化频繁，且元素本身相对简单，或者切换显示状态的开销远小于 DOM 操作的情况。比如，用户交互频繁的切换按钮、滑动展开/收起的内容区域、切换不同视图的同一部分 UI 元素等。\n","source":"_posts/技能小册/vue/v-if和v-show的区别.md","raw":"---\ntitle: v-if和v-show的区别\nabbrlink: 61e3fd80\ndate: 2024-04-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue \n---\n\n{% note info simple %}\n`Vue` 中的` v-if 和 v-show` 都是用来实现条件性渲染的指令，它们都允许根据表达式的真假值来决定是否显示对应的 DOM 元素。然而，二者在实现机制、性能影响及适用场景上存在显著差异。\n{% endnote %}\n\n\n## 渲染机制\n\n1. `v-if`控制元素的显示与否，当条件为`false`时，vue 在编译阶段会跳过该元素以及子元素的渲染, 这些元素不会在 DOM 树中创建；当条件为 true 时，vue 会动态添加该元素以及子元素。`true变为false`，相应的元素也会销毁在 DOM 中也会移除；这意味着使用 `v-if` 的元素会经历一个局部编译/卸载的过程，包括其内部的事件监听器和子组件也会被适当地销毁和重建。\n2. `v-show`不论初始条件如何，带有` v-show` 的元素总会被渲染到 DOM 中。它通过动态修改元素的 CSS 属性（通常是 `display: none 或 display: block`）来控制元素的显示与隐藏。这意味着当条件变化时，元素本身始终存在于 DOM 结构中，只是简单地改变了其可见性。\n\n## 编译开销与性能影响：\n\n1. `v-if`由于它会根据条件动态地添加或删除 DOM 元素，因此在初次渲染时，如果条件为 false，可以节省不必要的 DOM 构建和渲染成本。对于复杂的元素或组件，这种策略能更高效地利用资源。然而，当条件频繁切换时，每次切换都需要重新编译、创建或销毁元素，这可能会带来较高的性能开销。\n\n2. `v-show`由于始终渲染元素到 DOM 中，初次渲染时无论条件如何，都会产生一定的 DOM 构建成本。但后续条件切换时，只需简单地更新 CSS 属性，无需进行 DOM 节点的增删操作，因此在频繁切换显示状态的情况下，v-show 的性能通常优于 v-if。不过，即使元素被隐藏，它仍会影响文档流布局，占用内存资源。\n\n## 适用场景总结\n\n1. `v-if`适用于那些在大部分时间内不需要渲染，或者条件变化不频繁，且渲染代价较大的情况。例如，加载额外数据的分页组件、用户登录后才显示的个人资料区域、根据权限控制的高级功能模块等\n2. `v-show`适合于条件变化频繁，且元素本身相对简单，或者切换显示状态的开销远小于 DOM 操作的情况。比如，用户交互频繁的切换按钮、滑动展开/收起的内容区域、切换不同视图的同一部分 UI 元素等。\n","slug":"技能小册/vue/v-if和v-show的区别","published":1,"updated":"2025-03-12T09:28:07.525Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j00043fg9mgxd9hvjb","content":"<div class=\"note info simple\"><p><code>Vue</code> 中的<code> v-if 和 v-show</code> 都是用来实现条件性渲染的指令，它们都允许根据表达式的真假值来决定是否显示对应的 DOM 元素。然而，二者在实现机制、性能影响及适用场景上存在显著差异。</p>\n</div>\n\n\n<h2 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h2><ol>\n<li><code>v-if</code>控制元素的显示与否，当条件为<code>false</code>时，vue 在编译阶段会跳过该元素以及子元素的渲染, 这些元素不会在 DOM 树中创建；当条件为 true 时，vue 会动态添加该元素以及子元素。<code>true变为false</code>，相应的元素也会销毁在 DOM 中也会移除；这意味着使用 <code>v-if</code> 的元素会经历一个局部编译&#x2F;卸载的过程，包括其内部的事件监听器和子组件也会被适当地销毁和重建。</li>\n<li><code>v-show</code>不论初始条件如何，带有<code> v-show</code> 的元素总会被渲染到 DOM 中。它通过动态修改元素的 CSS 属性（通常是 <code>display: none 或 display: block</code>）来控制元素的显示与隐藏。这意味着当条件变化时，元素本身始终存在于 DOM 结构中，只是简单地改变了其可见性。</li>\n</ol>\n<h2 id=\"编译开销与性能影响：\"><a href=\"#编译开销与性能影响：\" class=\"headerlink\" title=\"编译开销与性能影响：\"></a>编译开销与性能影响：</h2><ol>\n<li><p><code>v-if</code>由于它会根据条件动态地添加或删除 DOM 元素，因此在初次渲染时，如果条件为 false，可以节省不必要的 DOM 构建和渲染成本。对于复杂的元素或组件，这种策略能更高效地利用资源。然而，当条件频繁切换时，每次切换都需要重新编译、创建或销毁元素，这可能会带来较高的性能开销。</p>\n</li>\n<li><p><code>v-show</code>由于始终渲染元素到 DOM 中，初次渲染时无论条件如何，都会产生一定的 DOM 构建成本。但后续条件切换时，只需简单地更新 CSS 属性，无需进行 DOM 节点的增删操作，因此在频繁切换显示状态的情况下，v-show 的性能通常优于 v-if。不过，即使元素被隐藏，它仍会影响文档流布局，占用内存资源。</p>\n</li>\n</ol>\n<h2 id=\"适用场景总结\"><a href=\"#适用场景总结\" class=\"headerlink\" title=\"适用场景总结\"></a>适用场景总结</h2><ol>\n<li><code>v-if</code>适用于那些在大部分时间内不需要渲染，或者条件变化不频繁，且渲染代价较大的情况。例如，加载额外数据的分页组件、用户登录后才显示的个人资料区域、根据权限控制的高级功能模块等</li>\n<li><code>v-show</code>适合于条件变化频繁，且元素本身相对简单，或者切换显示状态的开销远小于 DOM 操作的情况。比如，用户交互频繁的切换按钮、滑动展开&#x2F;收起的内容区域、切换不同视图的同一部分 UI 元素等。</li>\n</ol>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>Vue</code> 中的<code> v-if 和 v-show</code> 都是用来实现条件性渲染的指令，它们都允许根据表达式的真假值来决定是否显示对应的 DOM 元素。然而，二者在实现机制、性能影响及适用场景上存在显著差异。</p>\n</div>\n\n\n<h2 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h2><ol>\n<li><code>v-if</code>控制元素的显示与否，当条件为<code>false</code>时，vue 在编译阶段会跳过该元素以及子元素的渲染, 这些元素不会在 DOM 树中创建；当条件为 true 时，vue 会动态添加该元素以及子元素。<code>true变为false</code>，相应的元素也会销毁在 DOM 中也会移除；这意味着使用 <code>v-if</code> 的元素会经历一个局部编译&#x2F;卸载的过程，包括其内部的事件监听器和子组件也会被适当地销毁和重建。</li>\n<li><code>v-show</code>不论初始条件如何，带有<code> v-show</code> 的元素总会被渲染到 DOM 中。它通过动态修改元素的 CSS 属性（通常是 <code>display: none 或 display: block</code>）来控制元素的显示与隐藏。这意味着当条件变化时，元素本身始终存在于 DOM 结构中，只是简单地改变了其可见性。</li>\n</ol>\n<h2 id=\"编译开销与性能影响：\"><a href=\"#编译开销与性能影响：\" class=\"headerlink\" title=\"编译开销与性能影响：\"></a>编译开销与性能影响：</h2><ol>\n<li><p><code>v-if</code>由于它会根据条件动态地添加或删除 DOM 元素，因此在初次渲染时，如果条件为 false，可以节省不必要的 DOM 构建和渲染成本。对于复杂的元素或组件，这种策略能更高效地利用资源。然而，当条件频繁切换时，每次切换都需要重新编译、创建或销毁元素，这可能会带来较高的性能开销。</p>\n</li>\n<li><p><code>v-show</code>由于始终渲染元素到 DOM 中，初次渲染时无论条件如何，都会产生一定的 DOM 构建成本。但后续条件切换时，只需简单地更新 CSS 属性，无需进行 DOM 节点的增删操作，因此在频繁切换显示状态的情况下，v-show 的性能通常优于 v-if。不过，即使元素被隐藏，它仍会影响文档流布局，占用内存资源。</p>\n</li>\n</ol>\n<h2 id=\"适用场景总结\"><a href=\"#适用场景总结\" class=\"headerlink\" title=\"适用场景总结\"></a>适用场景总结</h2><ol>\n<li><code>v-if</code>适用于那些在大部分时间内不需要渲染，或者条件变化不频繁，且渲染代价较大的情况。例如，加载额外数据的分页组件、用户登录后才显示的个人资料区域、根据权限控制的高级功能模块等</li>\n<li><code>v-show</code>适合于条件变化频繁，且元素本身相对简单，或者切换显示状态的开销远小于 DOM 操作的情况。比如，用户交互频繁的切换按钮、滑动展开&#x2F;收起的内容区域、切换不同视图的同一部分 UI 元素等。</li>\n</ol>\n"},{"title":"watch,watchEffect和computed","abbrlink":"9da764d1","date":"2024-04-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`vue`中的`watch, watchEffect,computed`是三个不同的工具，用于处理数据响应式和根据数据的改变而执行对应的逻辑。\n{% endnote %}\n\n## computed\n\n### 作用\n\n计算属性。`computed` 用于定义那些基于组件状态`（如 data、其他 computed 属性、props 等）`的衍生值。当其依赖的状态发生变化时，计算属性会自动重新计算并返回结果。\n\n### 特性\n\n1. **缓存机制：** `computed`是有缓存的，只有依赖的状态发生变化时，才会重新计算。如果依赖未发生变化，则直接返回之前计算的结果，**避免了不必要的重复计算，提高了性能**\n2. **声明式：** 在模板中可直接使用`computed`属性，就像访问普通函数一样\n3. **读取优先：** `computed`主要用于**读取**场景，其值由`vue`自动维护, 通常不建议在业务逻辑中直接修改`computed`属性, 因为这会破坏依赖追踪机制，导致计算属性的依赖项变化无法触发重新计算。`computed`默认是可读的状态；\n\n### 使用场景\n\n1. 当需要对数据进行复杂计算或者逻辑出库，并且结果仅仅依赖于输入状态时\n2. 需要以高效，声明式的方式展示经过处理的数据(格式化，筛选，汇总)\n\n## watch\n\n### 作用\n\n响应式监听器， 允许指定单个或者多个数据源(可以是任意数据, 数据属性，对象，数组甚至是`props, computed`)， 当这数据源的值发生变化并执行回调函数\n\n### 特性\n\n1. **准确监听：** 可以精确监听指定的数据源的深度，控制监听粒度\n2. **选项丰富：** 提供了多种选项去定制监听行为，如`deep深度监听`，`immediate立即执行`, `flush队列刷新策略`等\n3. **手动控制：** 回调函数内可以进行复杂的异步操作、资源清理等工作，并能访问到新旧值。\n\n### 使用场景\n\n1. 当需要在特定数据变化时执行异步操作、昂贵计算或者进行副作用处理（如更新 DOM、发送网络请求、更新外部状态等）。\n2. 需要对数据变化进行精细控制，如深度监听、处理特定类型的变更事件等。\n\n## watchEffect\n\n### 作用\n\n自动追踪副作用函数；`watchEffect`立即执行传入的回调函数，并在此之后持续追踪其内部依赖（所有响应式引用），每当这些依赖变化时，回调函数会再次执行。\n\n### 特性\n\n1. **自动搜集依赖：** 不需要明确指定要监听的数据源，函数体内部访问到的所有响应式数据都会被自动追踪\n2. **立即执行：** 创建时立即运行一次，无需 immediate 选项，默认总是同步执行回调。\n3. **关注副作用：** 更关注于副作用（side effect）的执行，而非具体监听哪个数据的变化。\n\n### 使用场景\n\n1. 当需要自动追踪和即时响应所有影响组件状态变化的因素时，无需关心具体是哪些数据变化。\n2. 用于处理初始化逻辑或依赖复杂且动态变化的情况，简化代码编写。\n\n## 总结\n\n- `computed` 适用于定义基于状态的衍生值，提供高效的缓存机制，常用于视图渲染。\n- `watch` 用于监听特定数据的变化，并在变化时执行特定的回调，适合处理复杂副作用。\n- `watchEffect` 自动追踪副作用函数的依赖，无须指定监听目标，常用于初始化和简单即时响应场景。\n","source":"_posts/技能小册/vue/watch,watchEffect和computed.md","raw":"---\ntitle: watch,watchEffect和computed\nabbrlink: 9da764d1\ndate: 2024-04-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue\n---\n\n{% note info simple %}\n`vue`中的`watch, watchEffect,computed`是三个不同的工具，用于处理数据响应式和根据数据的改变而执行对应的逻辑。\n{% endnote %}\n\n## computed\n\n### 作用\n\n计算属性。`computed` 用于定义那些基于组件状态`（如 data、其他 computed 属性、props 等）`的衍生值。当其依赖的状态发生变化时，计算属性会自动重新计算并返回结果。\n\n### 特性\n\n1. **缓存机制：** `computed`是有缓存的，只有依赖的状态发生变化时，才会重新计算。如果依赖未发生变化，则直接返回之前计算的结果，**避免了不必要的重复计算，提高了性能**\n2. **声明式：** 在模板中可直接使用`computed`属性，就像访问普通函数一样\n3. **读取优先：** `computed`主要用于**读取**场景，其值由`vue`自动维护, 通常不建议在业务逻辑中直接修改`computed`属性, 因为这会破坏依赖追踪机制，导致计算属性的依赖项变化无法触发重新计算。`computed`默认是可读的状态；\n\n### 使用场景\n\n1. 当需要对数据进行复杂计算或者逻辑出库，并且结果仅仅依赖于输入状态时\n2. 需要以高效，声明式的方式展示经过处理的数据(格式化，筛选，汇总)\n\n## watch\n\n### 作用\n\n响应式监听器， 允许指定单个或者多个数据源(可以是任意数据, 数据属性，对象，数组甚至是`props, computed`)， 当这数据源的值发生变化并执行回调函数\n\n### 特性\n\n1. **准确监听：** 可以精确监听指定的数据源的深度，控制监听粒度\n2. **选项丰富：** 提供了多种选项去定制监听行为，如`deep深度监听`，`immediate立即执行`, `flush队列刷新策略`等\n3. **手动控制：** 回调函数内可以进行复杂的异步操作、资源清理等工作，并能访问到新旧值。\n\n### 使用场景\n\n1. 当需要在特定数据变化时执行异步操作、昂贵计算或者进行副作用处理（如更新 DOM、发送网络请求、更新外部状态等）。\n2. 需要对数据变化进行精细控制，如深度监听、处理特定类型的变更事件等。\n\n## watchEffect\n\n### 作用\n\n自动追踪副作用函数；`watchEffect`立即执行传入的回调函数，并在此之后持续追踪其内部依赖（所有响应式引用），每当这些依赖变化时，回调函数会再次执行。\n\n### 特性\n\n1. **自动搜集依赖：** 不需要明确指定要监听的数据源，函数体内部访问到的所有响应式数据都会被自动追踪\n2. **立即执行：** 创建时立即运行一次，无需 immediate 选项，默认总是同步执行回调。\n3. **关注副作用：** 更关注于副作用（side effect）的执行，而非具体监听哪个数据的变化。\n\n### 使用场景\n\n1. 当需要自动追踪和即时响应所有影响组件状态变化的因素时，无需关心具体是哪些数据变化。\n2. 用于处理初始化逻辑或依赖复杂且动态变化的情况，简化代码编写。\n\n## 总结\n\n- `computed` 适用于定义基于状态的衍生值，提供高效的缓存机制，常用于视图渲染。\n- `watch` 用于监听特定数据的变化，并在变化时执行特定的回调，适合处理复杂副作用。\n- `watchEffect` 自动追踪副作用函数的依赖，无须指定监听目标，常用于初始化和简单即时响应场景。\n","slug":"技能小册/vue/watch,watchEffect和computed","published":1,"updated":"2025-03-12T09:29:12.969Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j00046fg9m1y1yhh6k","content":"<div class=\"note info simple\"><p><code>vue</code>中的<code>watch, watchEffect,computed</code>是三个不同的工具，用于处理数据响应式和根据数据的改变而执行对应的逻辑。</p>\n</div>\n\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>计算属性。<code>computed</code> 用于定义那些基于组件状态<code>（如 data、其他 computed 属性、props 等）</code>的衍生值。当其依赖的状态发生变化时，计算属性会自动重新计算并返回结果。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>缓存机制：</strong> <code>computed</code>是有缓存的，只有依赖的状态发生变化时，才会重新计算。如果依赖未发生变化，则直接返回之前计算的结果，<strong>避免了不必要的重复计算，提高了性能</strong></li>\n<li><strong>声明式：</strong> 在模板中可直接使用<code>computed</code>属性，就像访问普通函数一样</li>\n<li><strong>读取优先：</strong> <code>computed</code>主要用于<strong>读取</strong>场景，其值由<code>vue</code>自动维护, 通常不建议在业务逻辑中直接修改<code>computed</code>属性, 因为这会破坏依赖追踪机制，导致计算属性的依赖项变化无法触发重新计算。<code>computed</code>默认是可读的状态；</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要对数据进行复杂计算或者逻辑出库，并且结果仅仅依赖于输入状态时</li>\n<li>需要以高效，声明式的方式展示经过处理的数据(格式化，筛选，汇总)</li>\n</ol>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>响应式监听器， 允许指定单个或者多个数据源(可以是任意数据, 数据属性，对象，数组甚至是<code>props, computed</code>)， 当这数据源的值发生变化并执行回调函数</p>\n<h3 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>准确监听：</strong> 可以精确监听指定的数据源的深度，控制监听粒度</li>\n<li><strong>选项丰富：</strong> 提供了多种选项去定制监听行为，如<code>deep深度监听</code>，<code>immediate立即执行</code>, <code>flush队列刷新策略</code>等</li>\n<li><strong>手动控制：</strong> 回调函数内可以进行复杂的异步操作、资源清理等工作，并能访问到新旧值。</li>\n</ol>\n<h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要在特定数据变化时执行异步操作、昂贵计算或者进行副作用处理（如更新 DOM、发送网络请求、更新外部状态等）。</li>\n<li>需要对数据变化进行精细控制，如深度监听、处理特定类型的变更事件等。</li>\n</ol>\n<h2 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h2><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>自动追踪副作用函数；<code>watchEffect</code>立即执行传入的回调函数，并在此之后持续追踪其内部依赖（所有响应式引用），每当这些依赖变化时，回调函数会再次执行。</p>\n<h3 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>自动搜集依赖：</strong> 不需要明确指定要监听的数据源，函数体内部访问到的所有响应式数据都会被自动追踪</li>\n<li><strong>立即执行：</strong> 创建时立即运行一次，无需 immediate 选项，默认总是同步执行回调。</li>\n<li><strong>关注副作用：</strong> 更关注于副作用（side effect）的执行，而非具体监听哪个数据的变化。</li>\n</ol>\n<h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要自动追踪和即时响应所有影响组件状态变化的因素时，无需关心具体是哪些数据变化。</li>\n<li>用于处理初始化逻辑或依赖复杂且动态变化的情况，简化代码编写。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>computed</code> 适用于定义基于状态的衍生值，提供高效的缓存机制，常用于视图渲染。</li>\n<li><code>watch</code> 用于监听特定数据的变化，并在变化时执行特定的回调，适合处理复杂副作用。</li>\n<li><code>watchEffect</code> 自动追踪副作用函数的依赖，无须指定监听目标，常用于初始化和简单即时响应场景。</li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>vue</code>中的<code>watch, watchEffect,computed</code>是三个不同的工具，用于处理数据响应式和根据数据的改变而执行对应的逻辑。</p>\n</div>\n\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>计算属性。<code>computed</code> 用于定义那些基于组件状态<code>（如 data、其他 computed 属性、props 等）</code>的衍生值。当其依赖的状态发生变化时，计算属性会自动重新计算并返回结果。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>缓存机制：</strong> <code>computed</code>是有缓存的，只有依赖的状态发生变化时，才会重新计算。如果依赖未发生变化，则直接返回之前计算的结果，<strong>避免了不必要的重复计算，提高了性能</strong></li>\n<li><strong>声明式：</strong> 在模板中可直接使用<code>computed</code>属性，就像访问普通函数一样</li>\n<li><strong>读取优先：</strong> <code>computed</code>主要用于<strong>读取</strong>场景，其值由<code>vue</code>自动维护, 通常不建议在业务逻辑中直接修改<code>computed</code>属性, 因为这会破坏依赖追踪机制，导致计算属性的依赖项变化无法触发重新计算。<code>computed</code>默认是可读的状态；</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要对数据进行复杂计算或者逻辑出库，并且结果仅仅依赖于输入状态时</li>\n<li>需要以高效，声明式的方式展示经过处理的数据(格式化，筛选，汇总)</li>\n</ol>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>响应式监听器， 允许指定单个或者多个数据源(可以是任意数据, 数据属性，对象，数组甚至是<code>props, computed</code>)， 当这数据源的值发生变化并执行回调函数</p>\n<h3 id=\"特性-1\"><a href=\"#特性-1\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>准确监听：</strong> 可以精确监听指定的数据源的深度，控制监听粒度</li>\n<li><strong>选项丰富：</strong> 提供了多种选项去定制监听行为，如<code>deep深度监听</code>，<code>immediate立即执行</code>, <code>flush队列刷新策略</code>等</li>\n<li><strong>手动控制：</strong> 回调函数内可以进行复杂的异步操作、资源清理等工作，并能访问到新旧值。</li>\n</ol>\n<h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要在特定数据变化时执行异步操作、昂贵计算或者进行副作用处理（如更新 DOM、发送网络请求、更新外部状态等）。</li>\n<li>需要对数据变化进行精细控制，如深度监听、处理特定类型的变更事件等。</li>\n</ol>\n<h2 id=\"watchEffect\"><a href=\"#watchEffect\" class=\"headerlink\" title=\"watchEffect\"></a>watchEffect</h2><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>自动追踪副作用函数；<code>watchEffect</code>立即执行传入的回调函数，并在此之后持续追踪其内部依赖（所有响应式引用），每当这些依赖变化时，回调函数会再次执行。</p>\n<h3 id=\"特性-2\"><a href=\"#特性-2\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ol>\n<li><strong>自动搜集依赖：</strong> 不需要明确指定要监听的数据源，函数体内部访问到的所有响应式数据都会被自动追踪</li>\n<li><strong>立即执行：</strong> 创建时立即运行一次，无需 immediate 选项，默认总是同步执行回调。</li>\n<li><strong>关注副作用：</strong> 更关注于副作用（side effect）的执行，而非具体监听哪个数据的变化。</li>\n</ol>\n<h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>当需要自动追踪和即时响应所有影响组件状态变化的因素时，无需关心具体是哪些数据变化。</li>\n<li>用于处理初始化逻辑或依赖复杂且动态变化的情况，简化代码编写。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>computed</code> 适用于定义基于状态的衍生值，提供高效的缓存机制，常用于视图渲染。</li>\n<li><code>watch</code> 用于监听特定数据的变化，并在变化时执行特定的回调，适合处理复杂副作用。</li>\n<li><code>watchEffect</code> 自动追踪副作用函数的依赖，无须指定监听目标，常用于初始化和简单即时响应场景。</li>\n</ul>\n"},{"title":"渐进式框架的理解","abbrlink":"6efa47fd","date":"2024-04-14T03:20:38.000Z","_content":"\n{% note info simple %}\n渐进式框架是一种软件开发框架，它体现了渐进增强的理念和技术实践，为开发者提供了灵活、模块化且适应性强的工具集，以支持逐步构建、优化和扩展应用程序。\n{% endnote %}\n\n## 特性\n\n1. 逐步增强\n\n   - 渐进式框架强调逐步增强，即从基础功能逐步扩展功能，而不是一次性构建整个应用程序。这种思路强调了模块化设计，将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。\n\n2. 模块化与可重复性\n\n   - 模块化是指将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。这种设计方式使得应用程序更加可重复和可维护，因为每个模块都可以独立开发、测试和部署。\n\n   - 可重复性是指应用程序的模块化程度越高，模块之间的依赖关系越少，模块的可复用性越高，应用程序的可维护性越高。\n\n3. 可扩展性与灵活性\n\n   - 渐进式框架支持按需加载资源和动态添加功能，允许应用程序随着用户交互或业务需求的增长而逐步扩展。这种灵活性体现在框架能够适应不同规模的项目，从简单的单页应用到复杂的多页面应用，甚至跨平台的混合移动应用。开发人员可以根据实际需求选择性地集成框架提供的功能，避免了不必要的性能开销。\n\n4. 响应式与跨平台\n\n   - 渐进式框架通常具备良好的响应式设计支持，使得同一套代码可以适应不同的屏幕尺寸和设备类型。- 渐进式框架通常具备良好的响应式设计支持，使得同一套代码能够在不同屏幕尺寸和设备类型（如桌面、平板、手机）上提供适应性的用户体验。此外，许多渐进式框架（尤其是基于 Web 技术的框架，如 Vue.js、React 等）能够通过封装或原生桥接技术，轻松打包为原生应用，实现跨 iOS、Android 等多个平台的部署。\n\n5. 迭代与增量开发\n\n   - 渐进式框架强调以模块化的方式进行开发，每个模块都以一个单独的模块来完成，而不是一次性完成整个项目。- 渐进式框架鼓励迭代和增量开发过程，即在项目初期先实现核心功能，然后通过不断的反馈和优化循环，逐步添加新功能、修复问题或提升性能。这种开发模式有助于降低项目风险，更快地向市场交付可用产品，并能更好地应对需求变更和市场反馈。\n\n6. 社区支持与生态系统：\n\n   - 渐进式框架通常拥有活跃的开发者社区和丰富的生态系统，包括大量的第三方插件、库、模板、UI 组件、开发工具、最佳实践文档等资源。这些资源极大地加速了开发进程，减少了重复造轮子的工作，并确保了框架的持续更新和进化以适应技术发展趋势。\n\n7. SEO 友好：\n\n   - 对于基于 Web 技术的渐进式框架，它们往往注重搜索引擎优化（SEO）。通过预渲染、服务器端渲染（SSR）等技术，确保应用程序的内容可以被搜索引擎有效地抓取和索引，这对于依赖搜索引擎流量的网站至关重要\n\n**渐进式框架以其渐进增强、模块化、可扩展、灵活和生态丰富的特性，为开发人员提供了一种高效、适应性强的手段来构建高性能、跨平台且用户体验优秀的应用程序。这种框架设计不仅关注当下项目的快速实现，也着眼于未来的技术演进和业务需求变化，确保了应用程序的长期生命力和可持续发展能力**\n\n## 总结\n\n1. 渐进式是一种灵活可扩展的软件实际理念， 允许开发人员逐步添加新功能，而不会破坏现有功能。\n2. 提供灵活性与可扩展性，降低学习成本，优化性能并提供代码重复机制； 可根据项目需要的选择引入实现高效精确的开发过程。\n3. 定制配置，组件复用以及调试满足项目要求以及提高开发效率\n","source":"_posts/技能小册/vue/渐进式框架的理解.md","raw":"---\ntitle: 渐进式框架的理解\nabbrlink: 6efa47fd\ndate: 2024-04-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue \n---\n\n{% note info simple %}\n渐进式框架是一种软件开发框架，它体现了渐进增强的理念和技术实践，为开发者提供了灵活、模块化且适应性强的工具集，以支持逐步构建、优化和扩展应用程序。\n{% endnote %}\n\n## 特性\n\n1. 逐步增强\n\n   - 渐进式框架强调逐步增强，即从基础功能逐步扩展功能，而不是一次性构建整个应用程序。这种思路强调了模块化设计，将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。\n\n2. 模块化与可重复性\n\n   - 模块化是指将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。这种设计方式使得应用程序更加可重复和可维护，因为每个模块都可以独立开发、测试和部署。\n\n   - 可重复性是指应用程序的模块化程度越高，模块之间的依赖关系越少，模块的可复用性越高，应用程序的可维护性越高。\n\n3. 可扩展性与灵活性\n\n   - 渐进式框架支持按需加载资源和动态添加功能，允许应用程序随着用户交互或业务需求的增长而逐步扩展。这种灵活性体现在框架能够适应不同规模的项目，从简单的单页应用到复杂的多页面应用，甚至跨平台的混合移动应用。开发人员可以根据实际需求选择性地集成框架提供的功能，避免了不必要的性能开销。\n\n4. 响应式与跨平台\n\n   - 渐进式框架通常具备良好的响应式设计支持，使得同一套代码可以适应不同的屏幕尺寸和设备类型。- 渐进式框架通常具备良好的响应式设计支持，使得同一套代码能够在不同屏幕尺寸和设备类型（如桌面、平板、手机）上提供适应性的用户体验。此外，许多渐进式框架（尤其是基于 Web 技术的框架，如 Vue.js、React 等）能够通过封装或原生桥接技术，轻松打包为原生应用，实现跨 iOS、Android 等多个平台的部署。\n\n5. 迭代与增量开发\n\n   - 渐进式框架强调以模块化的方式进行开发，每个模块都以一个单独的模块来完成，而不是一次性完成整个项目。- 渐进式框架鼓励迭代和增量开发过程，即在项目初期先实现核心功能，然后通过不断的反馈和优化循环，逐步添加新功能、修复问题或提升性能。这种开发模式有助于降低项目风险，更快地向市场交付可用产品，并能更好地应对需求变更和市场反馈。\n\n6. 社区支持与生态系统：\n\n   - 渐进式框架通常拥有活跃的开发者社区和丰富的生态系统，包括大量的第三方插件、库、模板、UI 组件、开发工具、最佳实践文档等资源。这些资源极大地加速了开发进程，减少了重复造轮子的工作，并确保了框架的持续更新和进化以适应技术发展趋势。\n\n7. SEO 友好：\n\n   - 对于基于 Web 技术的渐进式框架，它们往往注重搜索引擎优化（SEO）。通过预渲染、服务器端渲染（SSR）等技术，确保应用程序的内容可以被搜索引擎有效地抓取和索引，这对于依赖搜索引擎流量的网站至关重要\n\n**渐进式框架以其渐进增强、模块化、可扩展、灵活和生态丰富的特性，为开发人员提供了一种高效、适应性强的手段来构建高性能、跨平台且用户体验优秀的应用程序。这种框架设计不仅关注当下项目的快速实现，也着眼于未来的技术演进和业务需求变化，确保了应用程序的长期生命力和可持续发展能力**\n\n## 总结\n\n1. 渐进式是一种灵活可扩展的软件实际理念， 允许开发人员逐步添加新功能，而不会破坏现有功能。\n2. 提供灵活性与可扩展性，降低学习成本，优化性能并提供代码重复机制； 可根据项目需要的选择引入实现高效精确的开发过程。\n3. 定制配置，组件复用以及调试满足项目要求以及提高开发效率\n","slug":"技能小册/vue/渐进式框架的理解","published":1,"updated":"2025-03-12T09:27:09.780Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j10049fg9m55pgblq5","content":"<div class=\"note info simple\"><p>渐进式框架是一种软件开发框架，它体现了渐进增强的理念和技术实践，为开发者提供了灵活、模块化且适应性强的工具集，以支持逐步构建、优化和扩展应用程序。</p>\n</div>\n\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li><p>逐步增强</p>\n<ul>\n<li>渐进式框架强调逐步增强，即从基础功能逐步扩展功能，而不是一次性构建整个应用程序。这种思路强调了模块化设计，将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。</li>\n</ul>\n</li>\n<li><p>模块化与可重复性</p>\n<ul>\n<li><p>模块化是指将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。这种设计方式使得应用程序更加可重复和可维护，因为每个模块都可以独立开发、测试和部署。</p>\n</li>\n<li><p>可重复性是指应用程序的模块化程度越高，模块之间的依赖关系越少，模块的可复用性越高，应用程序的可维护性越高。</p>\n</li>\n</ul>\n</li>\n<li><p>可扩展性与灵活性</p>\n<ul>\n<li>渐进式框架支持按需加载资源和动态添加功能，允许应用程序随着用户交互或业务需求的增长而逐步扩展。这种灵活性体现在框架能够适应不同规模的项目，从简单的单页应用到复杂的多页面应用，甚至跨平台的混合移动应用。开发人员可以根据实际需求选择性地集成框架提供的功能，避免了不必要的性能开销。</li>\n</ul>\n</li>\n<li><p>响应式与跨平台</p>\n<ul>\n<li>渐进式框架通常具备良好的响应式设计支持，使得同一套代码可以适应不同的屏幕尺寸和设备类型。- 渐进式框架通常具备良好的响应式设计支持，使得同一套代码能够在不同屏幕尺寸和设备类型（如桌面、平板、手机）上提供适应性的用户体验。此外，许多渐进式框架（尤其是基于 Web 技术的框架，如 Vue.js、React 等）能够通过封装或原生桥接技术，轻松打包为原生应用，实现跨 iOS、Android 等多个平台的部署。</li>\n</ul>\n</li>\n<li><p>迭代与增量开发</p>\n<ul>\n<li>渐进式框架强调以模块化的方式进行开发，每个模块都以一个单独的模块来完成，而不是一次性完成整个项目。- 渐进式框架鼓励迭代和增量开发过程，即在项目初期先实现核心功能，然后通过不断的反馈和优化循环，逐步添加新功能、修复问题或提升性能。这种开发模式有助于降低项目风险，更快地向市场交付可用产品，并能更好地应对需求变更和市场反馈。</li>\n</ul>\n</li>\n<li><p>社区支持与生态系统：</p>\n<ul>\n<li>渐进式框架通常拥有活跃的开发者社区和丰富的生态系统，包括大量的第三方插件、库、模板、UI 组件、开发工具、最佳实践文档等资源。这些资源极大地加速了开发进程，减少了重复造轮子的工作，并确保了框架的持续更新和进化以适应技术发展趋势。</li>\n</ul>\n</li>\n<li><p>SEO 友好：</p>\n<ul>\n<li>对于基于 Web 技术的渐进式框架，它们往往注重搜索引擎优化（SEO）。通过预渲染、服务器端渲染（SSR）等技术，确保应用程序的内容可以被搜索引擎有效地抓取和索引，这对于依赖搜索引擎流量的网站至关重要</li>\n</ul>\n</li>\n</ol>\n<p><strong>渐进式框架以其渐进增强、模块化、可扩展、灵活和生态丰富的特性，为开发人员提供了一种高效、适应性强的手段来构建高性能、跨平台且用户体验优秀的应用程序。这种框架设计不仅关注当下项目的快速实现，也着眼于未来的技术演进和业务需求变化，确保了应用程序的长期生命力和可持续发展能力</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>渐进式是一种灵活可扩展的软件实际理念， 允许开发人员逐步添加新功能，而不会破坏现有功能。</li>\n<li>提供灵活性与可扩展性，降低学习成本，优化性能并提供代码重复机制； 可根据项目需要的选择引入实现高效精确的开发过程。</li>\n<li>定制配置，组件复用以及调试满足项目要求以及提高开发效率</li>\n</ol>\n","excerpt":"","more":"<div class=\"note info simple\"><p>渐进式框架是一种软件开发框架，它体现了渐进增强的理念和技术实践，为开发者提供了灵活、模块化且适应性强的工具集，以支持逐步构建、优化和扩展应用程序。</p>\n</div>\n\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li><p>逐步增强</p>\n<ul>\n<li>渐进式框架强调逐步增强，即从基础功能逐步扩展功能，而不是一次性构建整个应用程序。这种思路强调了模块化设计，将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。</li>\n</ul>\n</li>\n<li><p>模块化与可重复性</p>\n<ul>\n<li><p>模块化是指将应用程序分解为多个模块，每个模块都提供了特定的功能，并通过适当的组合和扩展来实现应用程序的功能。这种设计方式使得应用程序更加可重复和可维护，因为每个模块都可以独立开发、测试和部署。</p>\n</li>\n<li><p>可重复性是指应用程序的模块化程度越高，模块之间的依赖关系越少，模块的可复用性越高，应用程序的可维护性越高。</p>\n</li>\n</ul>\n</li>\n<li><p>可扩展性与灵活性</p>\n<ul>\n<li>渐进式框架支持按需加载资源和动态添加功能，允许应用程序随着用户交互或业务需求的增长而逐步扩展。这种灵活性体现在框架能够适应不同规模的项目，从简单的单页应用到复杂的多页面应用，甚至跨平台的混合移动应用。开发人员可以根据实际需求选择性地集成框架提供的功能，避免了不必要的性能开销。</li>\n</ul>\n</li>\n<li><p>响应式与跨平台</p>\n<ul>\n<li>渐进式框架通常具备良好的响应式设计支持，使得同一套代码可以适应不同的屏幕尺寸和设备类型。- 渐进式框架通常具备良好的响应式设计支持，使得同一套代码能够在不同屏幕尺寸和设备类型（如桌面、平板、手机）上提供适应性的用户体验。此外，许多渐进式框架（尤其是基于 Web 技术的框架，如 Vue.js、React 等）能够通过封装或原生桥接技术，轻松打包为原生应用，实现跨 iOS、Android 等多个平台的部署。</li>\n</ul>\n</li>\n<li><p>迭代与增量开发</p>\n<ul>\n<li>渐进式框架强调以模块化的方式进行开发，每个模块都以一个单独的模块来完成，而不是一次性完成整个项目。- 渐进式框架鼓励迭代和增量开发过程，即在项目初期先实现核心功能，然后通过不断的反馈和优化循环，逐步添加新功能、修复问题或提升性能。这种开发模式有助于降低项目风险，更快地向市场交付可用产品，并能更好地应对需求变更和市场反馈。</li>\n</ul>\n</li>\n<li><p>社区支持与生态系统：</p>\n<ul>\n<li>渐进式框架通常拥有活跃的开发者社区和丰富的生态系统，包括大量的第三方插件、库、模板、UI 组件、开发工具、最佳实践文档等资源。这些资源极大地加速了开发进程，减少了重复造轮子的工作，并确保了框架的持续更新和进化以适应技术发展趋势。</li>\n</ul>\n</li>\n<li><p>SEO 友好：</p>\n<ul>\n<li>对于基于 Web 技术的渐进式框架，它们往往注重搜索引擎优化（SEO）。通过预渲染、服务器端渲染（SSR）等技术，确保应用程序的内容可以被搜索引擎有效地抓取和索引，这对于依赖搜索引擎流量的网站至关重要</li>\n</ul>\n</li>\n</ol>\n<p><strong>渐进式框架以其渐进增强、模块化、可扩展、灵活和生态丰富的特性，为开发人员提供了一种高效、适应性强的手段来构建高性能、跨平台且用户体验优秀的应用程序。这种框架设计不仅关注当下项目的快速实现，也着眼于未来的技术演进和业务需求变化，确保了应用程序的长期生命力和可持续发展能力</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>渐进式是一种灵活可扩展的软件实际理念， 允许开发人员逐步添加新功能，而不会破坏现有功能。</li>\n<li>提供灵活性与可扩展性，降低学习成本，优化性能并提供代码重复机制； 可根据项目需要的选择引入实现高效精确的开发过程。</li>\n<li>定制配置，组件复用以及调试满足项目要求以及提高开发效率</li>\n</ol>\n"},{"title":"备忘录-brew","abbrlink":"31f527d7","date":"2024-07-08T01:05:01.000Z","_content":"\n# 命令备忘录\n\n对于`brew`安装的插件等需要特定的命令启动该服务，针对于`mac`而记录;\n\n## 🪫 mongodb\n\n[安装地址: https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/](https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/)\n\n1. 启动服务\n   ```bash\n   brew services start mongodb/brew/mongodb-community\n   ```\n2. 停止服务\n   ```bash\n   brew services stop mongodb/brew/mongodb-community\n   ```\n\n## 🪫 nginx\n\n1. 安装\n   ```bash\n   brew install nginx\n   ```\n2. 启动\n\n   ```bash\n   brew services start nginx\n   ```\n\n3. 停止\n\n   ```bash\n   brew services stop nginx\n   ```\n\n4. 重启\n\n   ```bash\n   brew services restart nginx\n   ```\n\n5. 重新加载配置文件\n\n   ```bash\n   nginx -s reload\n   ```\n\n6. 验证 nginx 配置文件是否正确\n\n   ```bash\n   nginx -t\n   ```\n","source":"_posts/技能小册/备忘录/brew.md","raw":"---\ntitle: 备忘录-brew\nabbrlink: 31f527d7\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 备忘录\n---\n\n# 命令备忘录\n\n对于`brew`安装的插件等需要特定的命令启动该服务，针对于`mac`而记录;\n\n## 🪫 mongodb\n\n[安装地址: https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/](https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/)\n\n1. 启动服务\n   ```bash\n   brew services start mongodb/brew/mongodb-community\n   ```\n2. 停止服务\n   ```bash\n   brew services stop mongodb/brew/mongodb-community\n   ```\n\n## 🪫 nginx\n\n1. 安装\n   ```bash\n   brew install nginx\n   ```\n2. 启动\n\n   ```bash\n   brew services start nginx\n   ```\n\n3. 停止\n\n   ```bash\n   brew services stop nginx\n   ```\n\n4. 重启\n\n   ```bash\n   brew services restart nginx\n   ```\n\n5. 重新加载配置文件\n\n   ```bash\n   nginx -s reload\n   ```\n\n6. 验证 nginx 配置文件是否正确\n\n   ```bash\n   nginx -t\n   ```\n","slug":"技能小册/备忘录/brew","published":1,"updated":"2025-03-12T09:59:56.062Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j1004cfg9m5jjbed8c","content":"<h1 id=\"命令备忘录\"><a href=\"#命令备忘录\" class=\"headerlink\" title=\"命令备忘录\"></a>命令备忘录</h1><p>对于<code>brew</code>安装的插件等需要特定的命令启动该服务，针对于<code>mac</code>而记录;</p>\n<h2 id=\"🪫-mongodb\"><a href=\"#🪫-mongodb\" class=\"headerlink\" title=\"🪫 mongodb\"></a>🪫 mongodb</h2><p><a href=\"https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/\">安装地址: https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/</a></p>\n<ol>\n<li>启动服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure></li>\n<li>停止服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services stop mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"🪫-nginx\"><a href=\"#🪫-nginx\" class=\"headerlink\" title=\"🪫 nginx\"></a>🪫 nginx</h2><ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services stop nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新加载配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证 nginx 配置文件是否正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"命令备忘录\"><a href=\"#命令备忘录\" class=\"headerlink\" title=\"命令备忘录\"></a>命令备忘录</h1><p>对于<code>brew</code>安装的插件等需要特定的命令启动该服务，针对于<code>mac</code>而记录;</p>\n<h2 id=\"🪫-mongodb\"><a href=\"#🪫-mongodb\" class=\"headerlink\" title=\"🪫 mongodb\"></a>🪫 mongodb</h2><p><a href=\"https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/\">安装地址: https://www.mongodb.com/zh-cn/docs/v6.0/tutorial/install-mongodb-on-os-x/</a></p>\n<ol>\n<li>启动服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure></li>\n<li>停止服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services stop mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"🪫-nginx\"><a href=\"#🪫-nginx\" class=\"headerlink\" title=\"🪫 nginx\"></a>🪫 nginx</h2><ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure></li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services stop nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services restart nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新加载配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证 nginx 配置文件是否正确</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"备忘录-Docker","abbrlink":"f5f9fa9b","date":"2024-07-08T01:05:01.000Z","_content":"\n# 背景\n\n\n最近在`mac`上重置了一下开发环境，像一些`数据库，nginx`之前是通过`brew install`下载安装的，如果你使用命令`brew services start nginx`启动它会一直在后台运行，如果用`docker`的话就可以不用`brew services`了，而且`docker`的`nginx`配置文件比`brew`的`nginx`配置文件要简单很多，而且`docker`的`nginx`配置文件可以很方便的映射到`host`的某个端口，这样`host`就可以直接访问`nginx`了。\n\n总之，也算是另外的一种尝试了吧，就是吧所有的服务分小容器运行起来，然后通过`docker-compose`来管理这些容器。这样后期管理卸载安装更加方便。\n\n\n安装`docker`的话就很简单了，可以直接安装桌面端版本，或者通过命令行安装。[点击下载](https://www.docker.com/)\n\n安装成功之后，可以通过\n\n```bash\ndocker -v // 查看是否安装成功\n```\n\n## 拉取镜像\n\n镜像的拉取比较简单，只需要通过命令`docker pull`即可拉取镜像，比如拉取`nginx`镜像，命令如下：\n\n```bash\ndocker pull nginx\ndocker pull nginx:1.21.6\n```\n\n## 查看镜像\n\n拉取镜像之后，就可以通过命令`docker images`来查看已经拉取的镜像了，比如\n\n```bash\ndocker images\n\n\nREPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nmongo        latest    4b372541400c   13 days ago   761MB\nnginx        latest    443d199e8bfc   3 weeks ago   193MB\nredis        latest    db35fcf47f4b   7 weeks ago   139MB\n```\n\n## 运行容器\n\n镜像拉取之后，就可以通过命令`docker run`来运行容器了，比如运行`nginx`容器，命令如下：\n\n```bash\ndocker run -d -p 80:80 nginx\n```\n\n`-d`表示后台运行，`-p`表示映射端口，`80:80`表示将`host`的`80`端口映射到`nginx`的`80`端口，这样`host`就可以直接访问`nginx`了。\n\n## 查看容器\n\n运行容器之后，就可以通过命令`docker ps`来查看已经运行的容器了，比如\n\n```bash\ndocker ps # 或者 docker container ls -a\n\nCONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS                   PORTS                    NAMES\n71428fe3e26b   redis     \"docker-entrypoint.s…\"   50 minutes ago   Up 50 minutes            0.0.0.0:6379->6379/tcp   keen_williams\n184730973f68   mongo     \"docker-entrypoint.s…\"   4 hours ago      Exited (0) 2 hours ago                            cool_shtern\n8060b393b482   nginx     \"/docker-entrypoint.…\"   6 hours ago      Exited (0) 2 hours ago                            suspicious_ishizaka\n```\n\n## 停止容器\n\n停止容器可以通过命令`docker stop`来停止容器，比如\n\n```bash\n# 8060b393b482 就是容器的id 输入前四位即可\ndocker stop 8060b393b482 # 或者 docker container stop 8060b393b482\n```\n\n停止容器之后，可以通过命令`docker ps`来查看已经停止的容器了；\n\n## 删除容器\n\n删除容器可以通过命令`docker rm`来删除容器，比如\n\n```bash\ndocker rm 8060b393b482 # 或者 docker container rm 8060b393b482\n```\n\n## 启动容器\n\n启动容器可以通过命令`docker start`来启动容器，比如\n\n```bash\ndocker start 8060b393b482 # 或者 docker container start 8060b393b482\n```\n\n## 删除镜像\n\n删除镜像可以通过命令`docker rmi`来删除镜像，比如\n\n```bash\ndocker rmi nginx:latest # 或者 docker image rm nginx:latest\n```\n\n## 删除所有容器\n\n删除所有容器可以通过命令`docker rm -f $(docker ps -aq)`来删除所有容器，比如\n\n```bash\ndocker rm -f $(docker ps -aq) # 或者 docker container rm -f $(docker container ls -aq)\n```\n\n## 删除所有镜像\n\n删除所有镜像可以通过命令`docker rmi -f $(docker images -q)`来删除所有镜像，比如\n\n```bash\ndocker rmi -f $(docker images -q) # 或者 docker image rm -f $(docker image ls -q)\n```\n\n## 删除所有未使用的镜像\n\n删除所有未使用的镜像可以通过命令`docker rmi -f $(docker images -f \"dangling=true\" -q)`来删除所有未使用的镜像，比如\n\n```bash\ndocker rmi -f $(docker images -f \"dangling=true\" -q) # 或者 docker image rm -f $(docker image ls -f \"dangling=true\" -q)\n```\n\n上面就是对`docker`的一些常用命令，希望对大家有所帮助。\n","source":"_posts/技能小册/备忘录/docker.md","raw":"---\ntitle: 备忘录-Docker\nabbrlink: f5f9fa9b\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 备忘录\n---\n\n# 背景\n\n\n最近在`mac`上重置了一下开发环境，像一些`数据库，nginx`之前是通过`brew install`下载安装的，如果你使用命令`brew services start nginx`启动它会一直在后台运行，如果用`docker`的话就可以不用`brew services`了，而且`docker`的`nginx`配置文件比`brew`的`nginx`配置文件要简单很多，而且`docker`的`nginx`配置文件可以很方便的映射到`host`的某个端口，这样`host`就可以直接访问`nginx`了。\n\n总之，也算是另外的一种尝试了吧，就是吧所有的服务分小容器运行起来，然后通过`docker-compose`来管理这些容器。这样后期管理卸载安装更加方便。\n\n\n安装`docker`的话就很简单了，可以直接安装桌面端版本，或者通过命令行安装。[点击下载](https://www.docker.com/)\n\n安装成功之后，可以通过\n\n```bash\ndocker -v // 查看是否安装成功\n```\n\n## 拉取镜像\n\n镜像的拉取比较简单，只需要通过命令`docker pull`即可拉取镜像，比如拉取`nginx`镜像，命令如下：\n\n```bash\ndocker pull nginx\ndocker pull nginx:1.21.6\n```\n\n## 查看镜像\n\n拉取镜像之后，就可以通过命令`docker images`来查看已经拉取的镜像了，比如\n\n```bash\ndocker images\n\n\nREPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nmongo        latest    4b372541400c   13 days ago   761MB\nnginx        latest    443d199e8bfc   3 weeks ago   193MB\nredis        latest    db35fcf47f4b   7 weeks ago   139MB\n```\n\n## 运行容器\n\n镜像拉取之后，就可以通过命令`docker run`来运行容器了，比如运行`nginx`容器，命令如下：\n\n```bash\ndocker run -d -p 80:80 nginx\n```\n\n`-d`表示后台运行，`-p`表示映射端口，`80:80`表示将`host`的`80`端口映射到`nginx`的`80`端口，这样`host`就可以直接访问`nginx`了。\n\n## 查看容器\n\n运行容器之后，就可以通过命令`docker ps`来查看已经运行的容器了，比如\n\n```bash\ndocker ps # 或者 docker container ls -a\n\nCONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS                   PORTS                    NAMES\n71428fe3e26b   redis     \"docker-entrypoint.s…\"   50 minutes ago   Up 50 minutes            0.0.0.0:6379->6379/tcp   keen_williams\n184730973f68   mongo     \"docker-entrypoint.s…\"   4 hours ago      Exited (0) 2 hours ago                            cool_shtern\n8060b393b482   nginx     \"/docker-entrypoint.…\"   6 hours ago      Exited (0) 2 hours ago                            suspicious_ishizaka\n```\n\n## 停止容器\n\n停止容器可以通过命令`docker stop`来停止容器，比如\n\n```bash\n# 8060b393b482 就是容器的id 输入前四位即可\ndocker stop 8060b393b482 # 或者 docker container stop 8060b393b482\n```\n\n停止容器之后，可以通过命令`docker ps`来查看已经停止的容器了；\n\n## 删除容器\n\n删除容器可以通过命令`docker rm`来删除容器，比如\n\n```bash\ndocker rm 8060b393b482 # 或者 docker container rm 8060b393b482\n```\n\n## 启动容器\n\n启动容器可以通过命令`docker start`来启动容器，比如\n\n```bash\ndocker start 8060b393b482 # 或者 docker container start 8060b393b482\n```\n\n## 删除镜像\n\n删除镜像可以通过命令`docker rmi`来删除镜像，比如\n\n```bash\ndocker rmi nginx:latest # 或者 docker image rm nginx:latest\n```\n\n## 删除所有容器\n\n删除所有容器可以通过命令`docker rm -f $(docker ps -aq)`来删除所有容器，比如\n\n```bash\ndocker rm -f $(docker ps -aq) # 或者 docker container rm -f $(docker container ls -aq)\n```\n\n## 删除所有镜像\n\n删除所有镜像可以通过命令`docker rmi -f $(docker images -q)`来删除所有镜像，比如\n\n```bash\ndocker rmi -f $(docker images -q) # 或者 docker image rm -f $(docker image ls -q)\n```\n\n## 删除所有未使用的镜像\n\n删除所有未使用的镜像可以通过命令`docker rmi -f $(docker images -f \"dangling=true\" -q)`来删除所有未使用的镜像，比如\n\n```bash\ndocker rmi -f $(docker images -f \"dangling=true\" -q) # 或者 docker image rm -f $(docker image ls -f \"dangling=true\" -q)\n```\n\n上面就是对`docker`的一些常用命令，希望对大家有所帮助。\n","slug":"技能小册/备忘录/docker","published":1,"updated":"2025-03-12T10:00:11.175Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j1004ffg9m0bbygyxf","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在<code>mac</code>上重置了一下开发环境，像一些<code>数据库，nginx</code>之前是通过<code>brew install</code>下载安装的，如果你使用命令<code>brew services start nginx</code>启动它会一直在后台运行，如果用<code>docker</code>的话就可以不用<code>brew services</code>了，而且<code>docker</code>的<code>nginx</code>配置文件比<code>brew</code>的<code>nginx</code>配置文件要简单很多，而且<code>docker</code>的<code>nginx</code>配置文件可以很方便的映射到<code>host</code>的某个端口，这样<code>host</code>就可以直接访问<code>nginx</code>了。</p>\n<p>总之，也算是另外的一种尝试了吧，就是吧所有的服务分小容器运行起来，然后通过<code>docker-compose</code>来管理这些容器。这样后期管理卸载安装更加方便。</p>\n<p>安装<code>docker</code>的话就很简单了，可以直接安装桌面端版本，或者通过命令行安装。<a href=\"https://www.docker.com/\">点击下载</a></p>\n<p>安装成功之后，可以通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v // 查看是否安装成功</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><p>镜像的拉取比较简单，只需要通过命令<code>docker pull</code>即可拉取镜像，比如拉取<code>nginx</code>镜像，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\">docker pull nginx:1.21.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p>拉取镜像之后，就可以通过命令<code>docker images</code>来查看已经拉取的镜像了，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class=\"line\">mongo        latest    4b372541400c   13 days ago   761MB</span><br><span class=\"line\">nginx        latest    443d199e8bfc   3 weeks ago   193MB</span><br><span class=\"line\">redis        latest    db35fcf47f4b   7 weeks ago   139MB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p>镜像拉取之后，就可以通过命令<code>docker run</code>来运行容器了，比如运行<code>nginx</code>容器，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n\n<p><code>-d</code>表示后台运行，<code>-p</code>表示映射端口，<code>80:80</code>表示将<code>host</code>的<code>80</code>端口映射到<code>nginx</code>的<code>80</code>端口，这样<code>host</code>就可以直接访问<code>nginx</code>了。</p>\n<h2 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h2><p>运行容器之后，就可以通过命令<code>docker ps</code>来查看已经运行的容器了，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps <span class=\"comment\"># 或者 docker container ls -a</span></span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS                   PORTS                    NAMES</span><br><span class=\"line\">71428fe3e26b   redis     <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   50 minutes ago   Up 50 minutes            0.0.0.0:6379-&gt;6379/tcp   keen_williams</span><br><span class=\"line\">184730973f68   mongo     <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   4 hours ago      Exited (0) 2 hours ago                            cool_shtern</span><br><span class=\"line\">8060b393b482   nginx     <span class=\"string\">&quot;/docker-entrypoint.…&quot;</span>   6 hours ago      Exited (0) 2 hours ago                            suspicious_ishizaka</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p>停止容器可以通过命令<code>docker stop</code>来停止容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 8060b393b482 就是容器的id 输入前四位即可</span></span><br><span class=\"line\">docker stop 8060b393b482 <span class=\"comment\"># 或者 docker container stop 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<p>停止容器之后，可以通过命令<code>docker ps</code>来查看已经停止的容器了；</p>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><p>删除容器可以通过命令<code>docker rm</code>来删除容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> 8060b393b482 <span class=\"comment\"># 或者 docker container rm 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p>启动容器可以通过命令<code>docker start</code>来启动容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 8060b393b482 <span class=\"comment\"># 或者 docker container start 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p>删除镜像可以通过命令<code>docker rmi</code>来删除镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi nginx:latest <span class=\"comment\"># 或者 docker image rm nginx:latest</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有容器\"><a href=\"#删除所有容器\" class=\"headerlink\" title=\"删除所有容器\"></a>删除所有容器</h2><p>删除所有容器可以通过命令<code>docker rm -f $(docker ps -aq)</code>来删除所有容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> -f $(docker ps -aq) <span class=\"comment\"># 或者 docker container rm -f $(docker container ls -aq)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h2><p>删除所有镜像可以通过命令<code>docker rmi -f $(docker images -q)</code>来删除所有镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q) <span class=\"comment\"># 或者 docker image rm -f $(docker image ls -q)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有未使用的镜像\"><a href=\"#删除所有未使用的镜像\" class=\"headerlink\" title=\"删除所有未使用的镜像\"></a>删除所有未使用的镜像</h2><p>删除所有未使用的镜像可以通过命令<code>docker rmi -f $(docker images -f &quot;dangling=true&quot; -q)</code>来删除所有未使用的镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -f <span class=\"string\">&quot;dangling=true&quot;</span> -q) <span class=\"comment\"># 或者 docker image rm -f $(docker image ls -f &quot;dangling=true&quot; -q)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面就是对<code>docker</code>的一些常用命令，希望对大家有所帮助。</p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近在<code>mac</code>上重置了一下开发环境，像一些<code>数据库，nginx</code>之前是通过<code>brew install</code>下载安装的，如果你使用命令<code>brew services start nginx</code>启动它会一直在后台运行，如果用<code>docker</code>的话就可以不用<code>brew services</code>了，而且<code>docker</code>的<code>nginx</code>配置文件比<code>brew</code>的<code>nginx</code>配置文件要简单很多，而且<code>docker</code>的<code>nginx</code>配置文件可以很方便的映射到<code>host</code>的某个端口，这样<code>host</code>就可以直接访问<code>nginx</code>了。</p>\n<p>总之，也算是另外的一种尝试了吧，就是吧所有的服务分小容器运行起来，然后通过<code>docker-compose</code>来管理这些容器。这样后期管理卸载安装更加方便。</p>\n<p>安装<code>docker</code>的话就很简单了，可以直接安装桌面端版本，或者通过命令行安装。<a href=\"https://www.docker.com/\">点击下载</a></p>\n<p>安装成功之后，可以通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v // 查看是否安装成功</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h2><p>镜像的拉取比较简单，只需要通过命令<code>docker pull</code>即可拉取镜像，比如拉取<code>nginx</code>镜像，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br><span class=\"line\">docker pull nginx:1.21.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p>拉取镜像之后，就可以通过命令<code>docker images</code>来查看已经拉取的镜像了，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED       SIZE</span><br><span class=\"line\">mongo        latest    4b372541400c   13 days ago   761MB</span><br><span class=\"line\">nginx        latest    443d199e8bfc   3 weeks ago   193MB</span><br><span class=\"line\">redis        latest    db35fcf47f4b   7 weeks ago   139MB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p>镜像拉取之后，就可以通过命令<code>docker run</code>来运行容器了，比如运行<code>nginx</code>容器，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>\n\n<p><code>-d</code>表示后台运行，<code>-p</code>表示映射端口，<code>80:80</code>表示将<code>host</code>的<code>80</code>端口映射到<code>nginx</code>的<code>80</code>端口，这样<code>host</code>就可以直接访问<code>nginx</code>了。</p>\n<h2 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h2><p>运行容器之后，就可以通过命令<code>docker ps</code>来查看已经运行的容器了，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps <span class=\"comment\"># 或者 docker container ls -a</span></span><br><span class=\"line\"></span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                   CREATED          STATUS                   PORTS                    NAMES</span><br><span class=\"line\">71428fe3e26b   redis     <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   50 minutes ago   Up 50 minutes            0.0.0.0:6379-&gt;6379/tcp   keen_williams</span><br><span class=\"line\">184730973f68   mongo     <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   4 hours ago      Exited (0) 2 hours ago                            cool_shtern</span><br><span class=\"line\">8060b393b482   nginx     <span class=\"string\">&quot;/docker-entrypoint.…&quot;</span>   6 hours ago      Exited (0) 2 hours ago                            suspicious_ishizaka</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h2><p>停止容器可以通过命令<code>docker stop</code>来停止容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 8060b393b482 就是容器的id 输入前四位即可</span></span><br><span class=\"line\">docker stop 8060b393b482 <span class=\"comment\"># 或者 docker container stop 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<p>停止容器之后，可以通过命令<code>docker ps</code>来查看已经停止的容器了；</p>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><p>删除容器可以通过命令<code>docker rm</code>来删除容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> 8060b393b482 <span class=\"comment\"># 或者 docker container rm 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p>启动容器可以通过命令<code>docker start</code>来启动容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 8060b393b482 <span class=\"comment\"># 或者 docker container start 8060b393b482</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h2><p>删除镜像可以通过命令<code>docker rmi</code>来删除镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi nginx:latest <span class=\"comment\"># 或者 docker image rm nginx:latest</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有容器\"><a href=\"#删除所有容器\" class=\"headerlink\" title=\"删除所有容器\"></a>删除所有容器</h2><p>删除所有容器可以通过命令<code>docker rm -f $(docker ps -aq)</code>来删除所有容器，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> -f $(docker ps -aq) <span class=\"comment\"># 或者 docker container rm -f $(docker container ls -aq)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有镜像\"><a href=\"#删除所有镜像\" class=\"headerlink\" title=\"删除所有镜像\"></a>删除所有镜像</h2><p>删除所有镜像可以通过命令<code>docker rmi -f $(docker images -q)</code>来删除所有镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q) <span class=\"comment\"># 或者 docker image rm -f $(docker image ls -q)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除所有未使用的镜像\"><a href=\"#删除所有未使用的镜像\" class=\"headerlink\" title=\"删除所有未使用的镜像\"></a>删除所有未使用的镜像</h2><p>删除所有未使用的镜像可以通过命令<code>docker rmi -f $(docker images -f &quot;dangling=true&quot; -q)</code>来删除所有未使用的镜像，比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -f <span class=\"string\">&quot;dangling=true&quot;</span> -q) <span class=\"comment\"># 或者 docker image rm -f $(docker image ls -f &quot;dangling=true&quot; -q)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面就是对<code>docker</code>的一些常用命令，希望对大家有所帮助。</p>\n"},{"title":"备忘录-git","abbrlink":"518e617c","date":"2024-07-08T01:05:01.000Z","_content":"\n# 温馨提示\n\n\n基础`git`暂时这样整理完成，后期可继续整理;\n\n\n## 配置 user 信息\n\n### 全局配置 user\n\n```sh\ngit config --global user.name \"username\"\ngit config --global user.email \"username@example.com\"\n```\n\n### config 的三个作用域\n\n缺省等同于 local；\n\n```sh\n# local只对某个仓库有效\ngit config --local\n\n# global对当前用户所有仓库有效\ngit config --global\n\n# system 对系统所有登录的用户有效\ngit config --system\n```\n\n显示 config 的配置，加`--list`\n\n```sh\ngit config --list --local\ngit config --list --global\ngit config --list --system\n```\n\n## 创建一个仓库并配置 local 用户信息\n\n### 俩种场景\n\n1. 把已有的项目代码纳入 git 管理\n\n```sh\ncd 项目代码所有的文件夹\ngit init\n```\n\n2. 新建的项目直接使用 git 管理\n\n```sh\ncd 某个文件夹\n# 会在当前路径创建和项目名称相同的文件夹\ngit init your_project\ncd your_project\n```\n\n当 git 初始化完成之后，创建一个`local`的用户；\n\n```sh\ncd your_project\ngit config --local user.name \"你的用户名\"\ngit config --local user.email \"你的密码\"\n```\n\n添加完成之后，我们可以通过命令`git config --local --list`可以快速查看配置的用户信息；\n\n```sh\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.ignorecase=true\ncore.precomposeunicode=true\nuser.name=这里显示的是你配置的用户名\nuser.email=这显示的是你配置的电子邮箱\n```\n\n配置成功之后，通过命令提交文件；\n\n```sh\n# 在这之前，可以先创建一个文件 README.md\ngit add README.md\ngit commit -m \"Add README.md\"\n```\n\n提交成功之后会默认创建一个`master`的分支，可以通过命令`git log` 查看\n\n```sh\ngit log\n\n# 日志信息如下\ncommit 3ffd6982361494c34c5ade40cd69777f1993812c (HEAD -> master)\nAuthor: 显示的是你用户名 <显示的是你的电子邮箱>\nDate:   Thu Jan 5 21:20:49 2023 +0800\n\n    Add Readme\n```\n\n## 给文件名重命名\n\n```sh\n# 步骤一：\nmv index.html index.copy.html\n\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        deleted:    index.html\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        index.copy.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n这里虽然我们已经更新了文件名字，但是对于 git 仓库里还是会存在原来的文件名，这是我们删除原来的，添加最新的；\n\n```sh\n# 步骤二： 删除原来的\ngit rm index.html\n# 步骤三： 添加最新的\ngit add index.copy.html\n# 查看状态\ngit status\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        renamed:    index.html -> index.copy.html\n```\n\n这里可以使用 git 命令撤销会退， 但是这是一个危险操作，会把暂存区的文件会退；`git reset --hard`\n\n```sh\n# 简化上面的操作，变更的文件 以及变更后的文件, 这里的效果简化成上面的三步骤\ngit mv index.html index.copy.index\n```\n\n这里变更或者移动文件可以参考文献： [git mv 命令](https://www.yiibai.com/git/git_mv.html)\n\n## git 的版本历史\n\n```sh\n# 无参数\ngit log\n\n# 所有分支log, 但是这种情况对于多分支 多提交是比较累的(没有眼睛或者*号) 可以使用 --graph（有眼睛或者*号）\ngit log --all\n# 图形化的用用法 || gitk\ngit log --all --graph\n\n\n# 简介模式、\ngit log --oneline\n64b9a4b (HEAD -> master) Move index.html to index.copy.html\nebe990b Add index\n3ffd698 Add Readme\n\n# 最近的几个commit\ngit log -n2 --oneline\n64b9a4b (HEAD -> master) Move index.html to index.copy.html\nebe990b Add index\n\n\n# 查看分支\ngit branch -v\n* master 64b9a4b Move index.html to index.copy.html\n```\n\n**`git log --all --graph`** 的效果如下：\n\n![git log --all --graph](https://wangxiaoze-view.github.io/picx-images-hosting/images/git_graph.jpeg)\n\n## 怎么删除不需要的分支？\n\n```sh\n# 部分情况下可能会删除不掉\ngit branch -d 分支名\n\ngit branch -D 分支名\n\n# 例如：\ngit branch -d temp\n```\n\n## 怎么修改最新的 commit 的 message?\n\n> 使用场景很简单， 就是最新提交的 commit message 不是很明确的情况下，需要使用该命令区修改最新提交 commit message 的；\n\n```sh\ngit commit --amend\n# 直接 输入i进行编辑， wq保存退出\n\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n由于第三次提交的提交消息我输错了。我想修改最新的即第三次提交的 commit message;\n\n这时可以使用`git commit --amend`, 进去之后直接操作 vim。修稿你的 commit message 就可以了；\n\n```sh\n# 解释： 这里就是你 git commit --amend命令之后的界面“， 直接将下面的消息文案修改为你想要的commit message就可以\nadd: 添加服务\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jan 6 21:36:05 2023 +0800\n#\n# On branch master\n# Changes to be committed:\n#       new file:   server.js\n#\n```\n\n## 怎么修改老旧的 commit 的 message?\n\n```sh\n# 变基\ngit rebase -i 变更的上一个分支id\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n但是我想修改第二次提交的 commit message; 可以使用`git rebase -i 1`;\n这里的`1` 是你想要修改第几次提交的父级 id;\n\n```sh\n# 效果如下\npick 3 add: 第三次提交\n# 这是第二条的， 吧pick 修改为 reword 或者 r 就可以了； 记得保存\npick 2 add: 第二次提交\n\n# Rebase 3ffd698..70639fd onto 3ffd698 (1 command)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n\n```\n\n## 把多个(连续的)commit 合并成 1 个\n\n```sh\ngit rebase -i 合并commit的父级id\n```\n\n我想要将 第三次 和 第二次提交的消息合并成 1 个，可以使用`git rebase -i 1`, 这里的`1`是你为谁合并的父级 id；\n\n```sh\n# 效果如下\n# 这里保留最新的一次的pick, 将其他的pick修改为 squash || s\npick 3 add: 第三次提交\npick 2 add: 第二次提交\n\n# 修改如下： 3 是最新的 2 是最早提交的  吧 最新的合并到最早提交的\npick 3 add: 第三次提交\nsquash 2 add: 第二次提交\n\n\n# Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n```\n\n## 怎样吧间隔的几个 commit 整理成 1 个？\n\n```sh\ngit rebase -i 间隔的父级id\n```\n\n例子：\n比如我在 git 提交了 4 条 commit, 如下：\n\n```sh\ncommit 4\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第四次提交\n\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n合并 4 和 2， 可以这么使用`git rebase -i 1`,\n\n```sh\n# 效果如下\npick 4 add: 第四次提交\npick 3 add: 第三次提交\npick 2 add: 第二次提交\n\n# 修改如下： 将4合并到2 ， 2 是最早提交的，4是最新提交的。 将 2那一行添加在4下面，删除原来的2的那一行，\n# 并且将 4下面的2的那一行 的 pick 修改为 squash即可\npick 4 add: 第四次提交\nsquash 2 add: 第三次提交\npick 3 add: 第三次提交\n\n# Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n```\n\n## 暂存区和 HEAD 之间的差异？\n\n```sh\ngit diff --cached\n```\n\n```js\n// HEAD 上的文件\nconsole.log(\"api\");\n```\n\n本地修改文件, 并添加到暂存区；\n\n```js\n// HEAD 上的文件\nconsole.log(\"api\");\n\nlet a = 100;\n```\n\n然后通过命令`git diff --cached`比较俩个文件的区别”\n\n```sh\ndiff --git a/api.js b/api.js\nindex 8558a46..26731b7 100644\n--- a/api.js\n+++ b/api.js\n\n@@ -1 +1,3 @@\n-console.log('api')\n\\ No newline at end of file\n\n+console.log('api')\n+\n+let a = 100;\n\\ No newline at end of file\n\n```\n\n## 怎样通过比较工作区和暂存区所含文件的差异？\n\n```sh\n# 所有文件\ngit diff\n\n# api.js\ngit diff -- api.js\n```\n\n预览的效果类似 上面的效果；\n\n## 暂存区恢复成和 HEAD 一样？\n\n```sh\n# 恢复所有\ngit reset HEAD\n\n# 恢复某一个文件\ngit reset HEAD api.js\n```\n\n## 让工作区文件恢复成暂存区一样？\n\n```sh\ngit checkout -- 文件名\n```\n\n## 取消暂存区部分文件的修改？\n\n```sh\ngit checkout -- api.js  main.js\n```\n\n## 消除最近的几次提交？（版本回退）\n\n```sh\ngit reset --hard 回退版本id\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n但是我不想要第三次提交，想要消除（回退 2 的提交），可以使用 `git reset --hard 2`,\n\n## 不同提交文件的差异？\n\n```sh\n# 所有的文文件\ngit diff 分支1 分支2\n\n# 指定文件\ngit diff 分支1 分支2 -- index.js\n\n# 指定的分支id 2 是temp分支的commit id,  1是master分支的commit id\ngit diff 2 1 -- index.js\n```\n\n```sh\n# git diff 分支1 分支2\ndiff --git a/api.js b/api.js\nindex 26731b7..0afa981 100644\n--- a/api.js\n+++ b/api.js\n@@ -1,3 +1,5 @@\n console.log('api')\n\n-let a = 100;\n\\ No newline at end of file\n+let a = 100;\n+\n+const b = 1000;\n```\n\n## 正确删除文件的方法？\n\n```sh\ngit rm 文件名\n\n# 暂存区 放弃更改\ngit reset --hard HEAD\n```\n\n## 开发中紧急任务怎么处理？\n\n```sh\n# 添加存放区，暂存区是一个干净的状态；\ngit stash\n\ngit stash list\n# stash@{0}: WIP on master: 886f134 edit: 修改diff\n\n# 1: 拿出来，放在工作区 2: git stash list 对用的信息还存在，可以重复使用\n# 即这条信息还存在： {stash@{0}: WIP on master: 886f134 edit: 修改diff}\ngit stash apply\n\n# 丢掉 Dropped refs/stash@{0} (6fc8e582adf57857a5a2af6eafbe375d6eae287f)\ngit stash pop\n\n```\n\n## 指定不需要的 git 管理文件？ `.gitignore 文件`\n\n```sh\nnode_modules/\nsrc/.vuepress/.cache/\nsrc/.vuepress/.temp/\nsrc/.vuepress/dist/\n```\n\n## 其他整理\n\n### 选项解释\n\n```sh\n-d --delete：删除\n\n-D --delete --force的快捷键\n\n-f --force：强制\n\n-m --move：移动或重命名\n\n-M --move --force的快捷键\n\n-r --remote：远程\n\n-a --all：所有\n```\n\n### 分支管理\n\n- 新建分支: `git branch` 分支名\n  - `git branch -r` 查看远程分支\n  - `git branch -a` 查看远程和本地分支\n  - `git branch -f` 新建分支但不切换\n  - `git branch -b` 新建分支并切换\n  - `git branch -d|-D` 删除本地分支\n  - `git branch -m|-M` 强制重命名\n- 切换分支: `git checkout 分支名`\n- 列出分支: `git branch`\n- 删除分支: `git branch -d 分支名`\n- 合并分支: `git merge 需要合并的分支`\n- 合并分支: `git rebase 合并到的分支`\n\n### 相对引用\n\n- `^`向上移动一个记录 `git checkout 分支 HEAD^`\n- 使用 `~` 向上移动多个提交记录，如 `~3`\n\n### 撤销变更\n\n- `git reset` 本地回滚上一步，原来指向的提交记录就跟从来没有提交过一样\n- `git revert` 远程回滚，但会生成一条提交记录\n\n### 查看历史\n\n- `git log`\n  - `git log --oneline` 查看历史记录的简洁的版本。\n  - `git log --graph` 查看历史中什么时候出现了分支、合并。\n  - `git log --reverse` 逆向显示所有日志。\n","source":"_posts/技能小册/备忘录/git.md","raw":"---\ntitle: 备忘录-git\nabbrlink: 518e617c\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 备忘录\n---\n\n# 温馨提示\n\n\n基础`git`暂时这样整理完成，后期可继续整理;\n\n\n## 配置 user 信息\n\n### 全局配置 user\n\n```sh\ngit config --global user.name \"username\"\ngit config --global user.email \"username@example.com\"\n```\n\n### config 的三个作用域\n\n缺省等同于 local；\n\n```sh\n# local只对某个仓库有效\ngit config --local\n\n# global对当前用户所有仓库有效\ngit config --global\n\n# system 对系统所有登录的用户有效\ngit config --system\n```\n\n显示 config 的配置，加`--list`\n\n```sh\ngit config --list --local\ngit config --list --global\ngit config --list --system\n```\n\n## 创建一个仓库并配置 local 用户信息\n\n### 俩种场景\n\n1. 把已有的项目代码纳入 git 管理\n\n```sh\ncd 项目代码所有的文件夹\ngit init\n```\n\n2. 新建的项目直接使用 git 管理\n\n```sh\ncd 某个文件夹\n# 会在当前路径创建和项目名称相同的文件夹\ngit init your_project\ncd your_project\n```\n\n当 git 初始化完成之后，创建一个`local`的用户；\n\n```sh\ncd your_project\ngit config --local user.name \"你的用户名\"\ngit config --local user.email \"你的密码\"\n```\n\n添加完成之后，我们可以通过命令`git config --local --list`可以快速查看配置的用户信息；\n\n```sh\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\ncore.ignorecase=true\ncore.precomposeunicode=true\nuser.name=这里显示的是你配置的用户名\nuser.email=这显示的是你配置的电子邮箱\n```\n\n配置成功之后，通过命令提交文件；\n\n```sh\n# 在这之前，可以先创建一个文件 README.md\ngit add README.md\ngit commit -m \"Add README.md\"\n```\n\n提交成功之后会默认创建一个`master`的分支，可以通过命令`git log` 查看\n\n```sh\ngit log\n\n# 日志信息如下\ncommit 3ffd6982361494c34c5ade40cd69777f1993812c (HEAD -> master)\nAuthor: 显示的是你用户名 <显示的是你的电子邮箱>\nDate:   Thu Jan 5 21:20:49 2023 +0800\n\n    Add Readme\n```\n\n## 给文件名重命名\n\n```sh\n# 步骤一：\nmv index.html index.copy.html\n\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        deleted:    index.html\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        index.copy.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n这里虽然我们已经更新了文件名字，但是对于 git 仓库里还是会存在原来的文件名，这是我们删除原来的，添加最新的；\n\n```sh\n# 步骤二： 删除原来的\ngit rm index.html\n# 步骤三： 添加最新的\ngit add index.copy.html\n# 查看状态\ngit status\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        renamed:    index.html -> index.copy.html\n```\n\n这里可以使用 git 命令撤销会退， 但是这是一个危险操作，会把暂存区的文件会退；`git reset --hard`\n\n```sh\n# 简化上面的操作，变更的文件 以及变更后的文件, 这里的效果简化成上面的三步骤\ngit mv index.html index.copy.index\n```\n\n这里变更或者移动文件可以参考文献： [git mv 命令](https://www.yiibai.com/git/git_mv.html)\n\n## git 的版本历史\n\n```sh\n# 无参数\ngit log\n\n# 所有分支log, 但是这种情况对于多分支 多提交是比较累的(没有眼睛或者*号) 可以使用 --graph（有眼睛或者*号）\ngit log --all\n# 图形化的用用法 || gitk\ngit log --all --graph\n\n\n# 简介模式、\ngit log --oneline\n64b9a4b (HEAD -> master) Move index.html to index.copy.html\nebe990b Add index\n3ffd698 Add Readme\n\n# 最近的几个commit\ngit log -n2 --oneline\n64b9a4b (HEAD -> master) Move index.html to index.copy.html\nebe990b Add index\n\n\n# 查看分支\ngit branch -v\n* master 64b9a4b Move index.html to index.copy.html\n```\n\n**`git log --all --graph`** 的效果如下：\n\n![git log --all --graph](https://wangxiaoze-view.github.io/picx-images-hosting/images/git_graph.jpeg)\n\n## 怎么删除不需要的分支？\n\n```sh\n# 部分情况下可能会删除不掉\ngit branch -d 分支名\n\ngit branch -D 分支名\n\n# 例如：\ngit branch -d temp\n```\n\n## 怎么修改最新的 commit 的 message?\n\n> 使用场景很简单， 就是最新提交的 commit message 不是很明确的情况下，需要使用该命令区修改最新提交 commit message 的；\n\n```sh\ngit commit --amend\n# 直接 输入i进行编辑， wq保存退出\n\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n由于第三次提交的提交消息我输错了。我想修改最新的即第三次提交的 commit message;\n\n这时可以使用`git commit --amend`, 进去之后直接操作 vim。修稿你的 commit message 就可以了；\n\n```sh\n# 解释： 这里就是你 git commit --amend命令之后的界面“， 直接将下面的消息文案修改为你想要的commit message就可以\nadd: 添加服务\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jan 6 21:36:05 2023 +0800\n#\n# On branch master\n# Changes to be committed:\n#       new file:   server.js\n#\n```\n\n## 怎么修改老旧的 commit 的 message?\n\n```sh\n# 变基\ngit rebase -i 变更的上一个分支id\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n但是我想修改第二次提交的 commit message; 可以使用`git rebase -i 1`;\n这里的`1` 是你想要修改第几次提交的父级 id;\n\n```sh\n# 效果如下\npick 3 add: 第三次提交\n# 这是第二条的， 吧pick 修改为 reword 或者 r 就可以了； 记得保存\npick 2 add: 第二次提交\n\n# Rebase 3ffd698..70639fd onto 3ffd698 (1 command)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n\n```\n\n## 把多个(连续的)commit 合并成 1 个\n\n```sh\ngit rebase -i 合并commit的父级id\n```\n\n我想要将 第三次 和 第二次提交的消息合并成 1 个，可以使用`git rebase -i 1`, 这里的`1`是你为谁合并的父级 id；\n\n```sh\n# 效果如下\n# 这里保留最新的一次的pick, 将其他的pick修改为 squash || s\npick 3 add: 第三次提交\npick 2 add: 第二次提交\n\n# 修改如下： 3 是最新的 2 是最早提交的  吧 最新的合并到最早提交的\npick 3 add: 第三次提交\nsquash 2 add: 第二次提交\n\n\n# Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n```\n\n## 怎样吧间隔的几个 commit 整理成 1 个？\n\n```sh\ngit rebase -i 间隔的父级id\n```\n\n例子：\n比如我在 git 提交了 4 条 commit, 如下：\n\n```sh\ncommit 4\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第四次提交\n\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n合并 4 和 2， 可以这么使用`git rebase -i 1`,\n\n```sh\n# 效果如下\npick 4 add: 第四次提交\npick 3 add: 第三次提交\npick 2 add: 第二次提交\n\n# 修改如下： 将4合并到2 ， 2 是最早提交的，4是最新提交的。 将 2那一行添加在4下面，删除原来的2的那一行，\n# 并且将 4下面的2的那一行 的 pick 修改为 squash即可\npick 4 add: 第四次提交\nsquash 2 add: 第三次提交\npick 3 add: 第三次提交\n\n# Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n```\n\n## 暂存区和 HEAD 之间的差异？\n\n```sh\ngit diff --cached\n```\n\n```js\n// HEAD 上的文件\nconsole.log(\"api\");\n```\n\n本地修改文件, 并添加到暂存区；\n\n```js\n// HEAD 上的文件\nconsole.log(\"api\");\n\nlet a = 100;\n```\n\n然后通过命令`git diff --cached`比较俩个文件的区别”\n\n```sh\ndiff --git a/api.js b/api.js\nindex 8558a46..26731b7 100644\n--- a/api.js\n+++ b/api.js\n\n@@ -1 +1,3 @@\n-console.log('api')\n\\ No newline at end of file\n\n+console.log('api')\n+\n+let a = 100;\n\\ No newline at end of file\n\n```\n\n## 怎样通过比较工作区和暂存区所含文件的差异？\n\n```sh\n# 所有文件\ngit diff\n\n# api.js\ngit diff -- api.js\n```\n\n预览的效果类似 上面的效果；\n\n## 暂存区恢复成和 HEAD 一样？\n\n```sh\n# 恢复所有\ngit reset HEAD\n\n# 恢复某一个文件\ngit reset HEAD api.js\n```\n\n## 让工作区文件恢复成暂存区一样？\n\n```sh\ngit checkout -- 文件名\n```\n\n## 取消暂存区部分文件的修改？\n\n```sh\ngit checkout -- api.js  main.js\n```\n\n## 消除最近的几次提交？（版本回退）\n\n```sh\ngit reset --hard 回退版本id\n```\n\n例子：\n比如我在 git 提交了 3 条 commit, 如下：\n\n```sh\ncommit 3\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第三次提交\n\ncommit 2\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第二次提交\n\ncommit 1\nAuthor: cs <123@qq.com>\nDate: 2023\n  add: 第一次提交\n```\n\n但是我不想要第三次提交，想要消除（回退 2 的提交），可以使用 `git reset --hard 2`,\n\n## 不同提交文件的差异？\n\n```sh\n# 所有的文文件\ngit diff 分支1 分支2\n\n# 指定文件\ngit diff 分支1 分支2 -- index.js\n\n# 指定的分支id 2 是temp分支的commit id,  1是master分支的commit id\ngit diff 2 1 -- index.js\n```\n\n```sh\n# git diff 分支1 分支2\ndiff --git a/api.js b/api.js\nindex 26731b7..0afa981 100644\n--- a/api.js\n+++ b/api.js\n@@ -1,3 +1,5 @@\n console.log('api')\n\n-let a = 100;\n\\ No newline at end of file\n+let a = 100;\n+\n+const b = 1000;\n```\n\n## 正确删除文件的方法？\n\n```sh\ngit rm 文件名\n\n# 暂存区 放弃更改\ngit reset --hard HEAD\n```\n\n## 开发中紧急任务怎么处理？\n\n```sh\n# 添加存放区，暂存区是一个干净的状态；\ngit stash\n\ngit stash list\n# stash@{0}: WIP on master: 886f134 edit: 修改diff\n\n# 1: 拿出来，放在工作区 2: git stash list 对用的信息还存在，可以重复使用\n# 即这条信息还存在： {stash@{0}: WIP on master: 886f134 edit: 修改diff}\ngit stash apply\n\n# 丢掉 Dropped refs/stash@{0} (6fc8e582adf57857a5a2af6eafbe375d6eae287f)\ngit stash pop\n\n```\n\n## 指定不需要的 git 管理文件？ `.gitignore 文件`\n\n```sh\nnode_modules/\nsrc/.vuepress/.cache/\nsrc/.vuepress/.temp/\nsrc/.vuepress/dist/\n```\n\n## 其他整理\n\n### 选项解释\n\n```sh\n-d --delete：删除\n\n-D --delete --force的快捷键\n\n-f --force：强制\n\n-m --move：移动或重命名\n\n-M --move --force的快捷键\n\n-r --remote：远程\n\n-a --all：所有\n```\n\n### 分支管理\n\n- 新建分支: `git branch` 分支名\n  - `git branch -r` 查看远程分支\n  - `git branch -a` 查看远程和本地分支\n  - `git branch -f` 新建分支但不切换\n  - `git branch -b` 新建分支并切换\n  - `git branch -d|-D` 删除本地分支\n  - `git branch -m|-M` 强制重命名\n- 切换分支: `git checkout 分支名`\n- 列出分支: `git branch`\n- 删除分支: `git branch -d 分支名`\n- 合并分支: `git merge 需要合并的分支`\n- 合并分支: `git rebase 合并到的分支`\n\n### 相对引用\n\n- `^`向上移动一个记录 `git checkout 分支 HEAD^`\n- 使用 `~` 向上移动多个提交记录，如 `~3`\n\n### 撤销变更\n\n- `git reset` 本地回滚上一步，原来指向的提交记录就跟从来没有提交过一样\n- `git revert` 远程回滚，但会生成一条提交记录\n\n### 查看历史\n\n- `git log`\n  - `git log --oneline` 查看历史记录的简洁的版本。\n  - `git log --graph` 查看历史中什么时候出现了分支、合并。\n  - `git log --reverse` 逆向显示所有日志。\n","slug":"技能小册/备忘录/git","published":1,"updated":"2025-03-13T10:16:18.072Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j1004ifg9md19ye2zo","content":"<h1 id=\"温馨提示\"><a href=\"#温馨提示\" class=\"headerlink\" title=\"温馨提示\"></a>温馨提示</h1><p>基础<code>git</code>暂时这样整理完成，后期可继续整理;</p>\n<h2 id=\"配置-user-信息\"><a href=\"#配置-user-信息\" class=\"headerlink\" title=\"配置 user 信息\"></a>配置 user 信息</h2><h3 id=\"全局配置-user\"><a href=\"#全局配置-user\" class=\"headerlink\" title=\"全局配置 user\"></a>全局配置 user</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;username@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-的三个作用域\"><a href=\"#config-的三个作用域\" class=\"headerlink\" title=\"config 的三个作用域\"></a>config 的三个作用域</h3><p>缺省等同于 local；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># local只对某个仓库有效</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># global对当前用户所有仓库有效</span></span><br><span class=\"line\">git config --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system 对系统所有登录的用户有效</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<p>显示 config 的配置，加<code>--list</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --<span class=\"built_in\">local</span></span><br><span class=\"line\">git config --list --global</span><br><span class=\"line\">git config --list --system</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建一个仓库并配置-local-用户信息\"><a href=\"#创建一个仓库并配置-local-用户信息\" class=\"headerlink\" title=\"创建一个仓库并配置 local 用户信息\"></a>创建一个仓库并配置 local 用户信息</h2><h3 id=\"俩种场景\"><a href=\"#俩种场景\" class=\"headerlink\" title=\"俩种场景\"></a>俩种场景</h3><ol>\n<li>把已有的项目代码纳入 git 管理</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 项目代码所有的文件夹</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建的项目直接使用 git 管理</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 某个文件夹</span><br><span class=\"line\"><span class=\"comment\"># 会在当前路径创建和项目名称相同的文件夹</span></span><br><span class=\"line\">git init your_project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br></pre></td></tr></table></figure>\n\n<p>当 git 初始化完成之后，创建一个<code>local</code>的用户；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">&quot;你的用户名&quot;</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> user.email <span class=\"string\">&quot;你的密码&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>添加完成之后，我们可以通过命令<code>git config --local --list</code>可以快速查看配置的用户信息；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=<span class=\"literal\">true</span></span><br><span class=\"line\">core.bare=<span class=\"literal\">false</span></span><br><span class=\"line\">core.logallrefupdates=<span class=\"literal\">true</span></span><br><span class=\"line\">core.ignorecase=<span class=\"literal\">true</span></span><br><span class=\"line\">core.precomposeunicode=<span class=\"literal\">true</span></span><br><span class=\"line\">user.name=这里显示的是你配置的用户名</span><br><span class=\"line\">user.email=这显示的是你配置的电子邮箱</span><br></pre></td></tr></table></figure>\n\n<p>配置成功之后，通过命令提交文件；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在这之前，可以先创建一个文件 README.md</span></span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Add README.md&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交成功之后会默认创建一个<code>master</code>的分支，可以通过命令<code>git log</code> 查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志信息如下</span></span><br><span class=\"line\">commit 3ffd6982361494c34c5ade40cd69777f1993812c (HEAD -&gt; master)</span><br><span class=\"line\">Author: 显示的是你用户名 &lt;显示的是你的电子邮箱&gt;</span><br><span class=\"line\">Date:   Thu Jan 5 21:20:49 2023 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add Readme</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给文件名重命名\"><a href=\"#给文件名重命名\" class=\"headerlink\" title=\"给文件名重命名\"></a>给文件名重命名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤一：</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> index.html index.copy.html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\">        deleted:    index.html</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\">        index.copy.html</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">&quot;git add&quot;</span> and/or <span class=\"string\">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里虽然我们已经更新了文件名字，但是对于 git 仓库里还是会存在原来的文件名，这是我们删除原来的，添加最新的；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤二： 删除原来的</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> index.html</span><br><span class=\"line\"><span class=\"comment\"># 步骤三： 添加最新的</span></span><br><span class=\"line\">git add index.copy.html</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class=\"line\">        renamed:    index.html -&gt; index.copy.html</span><br></pre></td></tr></table></figure>\n\n<p>这里可以使用 git 命令撤销会退， 但是这是一个危险操作，会把暂存区的文件会退；<code>git reset --hard</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简化上面的操作，变更的文件 以及变更后的文件, 这里的效果简化成上面的三步骤</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> index.html index.copy.index</span><br></pre></td></tr></table></figure>\n\n<p>这里变更或者移动文件可以参考文献： <a href=\"https://www.yiibai.com/git/git_mv.html\">git mv 命令</a></p>\n<h2 id=\"git-的版本历史\"><a href=\"#git-的版本历史\" class=\"headerlink\" title=\"git 的版本历史\"></a>git 的版本历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 无参数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有分支log, 但是这种情况对于多分支 多提交是比较累的(没有眼睛或者*号) 可以使用 --graph（有眼睛或者*号）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --all</span><br><span class=\"line\"><span class=\"comment\"># 图形化的用用法 || gitk</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --all --graph</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简介模式、</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline</span><br><span class=\"line\">64b9a4b (HEAD -&gt; master) Move index.html to index.copy.html</span><br><span class=\"line\">ebe990b Add index</span><br><span class=\"line\">3ffd698 Add Readme</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最近的几个commit</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -n2 --oneline</span><br><span class=\"line\">64b9a4b (HEAD -&gt; master) Move index.html to index.copy.html</span><br><span class=\"line\">ebe990b Add index</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\">* master 64b9a4b Move index.html to index.copy.html</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>git log --all --graph</code></strong> 的效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/git_graph.jpeg\" alt=\"git log --all --graph\"></p>\n<h2 id=\"怎么删除不需要的分支？\"><a href=\"#怎么删除不需要的分支？\" class=\"headerlink\" title=\"怎么删除不需要的分支？\"></a>怎么删除不需要的分支？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部分情况下可能会删除不掉</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -D 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如：</span></span><br><span class=\"line\">git branch -d temp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么修改最新的-commit-的-message\"><a href=\"#怎么修改最新的-commit-的-message\" class=\"headerlink\" title=\"怎么修改最新的 commit 的 message?\"></a>怎么修改最新的 commit 的 message?</h2><blockquote>\n<p>使用场景很简单， 就是最新提交的 commit message 不是很明确的情况下，需要使用该命令区修改最新提交 commit message 的；</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br><span class=\"line\"><span class=\"comment\"># 直接 输入i进行编辑， wq保存退出</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>由于第三次提交的提交消息我输错了。我想修改最新的即第三次提交的 commit message;</p>\n<p>这时可以使用<code>git commit --amend</code>, 进去之后直接操作 vim。修稿你的 commit message 就可以了；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释： 这里就是你 git commit --amend命令之后的界面“， 直接将下面的消息文案修改为你想要的commit message就可以</span></span><br><span class=\"line\">add: 添加服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Fri Jan 6 21:36:05 2023 +0800</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"comment\">#       new file:   server.js</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么修改老旧的-commit-的-message\"><a href=\"#怎么修改老旧的-commit-的-message\" class=\"headerlink\" title=\"怎么修改老旧的 commit 的 message?\"></a>怎么修改老旧的 commit 的 message?</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变基</span></span><br><span class=\"line\">git rebase -i 变更的上一个分支<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>但是我想修改第二次提交的 commit message; 可以使用<code>git rebase -i 1</code>;<br>这里的<code>1</code> 是你想要修改第几次提交的父级 id;</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\"><span class=\"comment\"># 这是第二条的， 吧pick 修改为 reword 或者 r 就可以了； 记得保存</span></span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 3ffd698..70639fd onto 3ffd698 (1 command)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class=\"line\"><span class=\"comment\"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class=\"line\"><span class=\"comment\"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把多个-连续的-commit-合并成-1-个\"><a href=\"#把多个-连续的-commit-合并成-1-个\" class=\"headerlink\" title=\"把多个(连续的)commit 合并成 1 个\"></a>把多个(连续的)commit 合并成 1 个</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 合并commit的父级<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>我想要将 第三次 和 第二次提交的消息合并成 1 个，可以使用<code>git rebase -i 1</code>, 这里的<code>1</code>是你为谁合并的父级 id；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\"><span class=\"comment\"># 这里保留最新的一次的pick, 将其他的pick修改为 squash || s</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改如下： 3 是最新的 2 是最早提交的  吧 最新的合并到最早提交的</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">squash 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎样吧间隔的几个-commit-整理成-1-个？\"><a href=\"#怎样吧间隔的几个-commit-整理成-1-个？\" class=\"headerlink\" title=\"怎样吧间隔的几个 commit 整理成 1 个？\"></a>怎样吧间隔的几个 commit 整理成 1 个？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 间隔的父级<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 4 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 4</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第四次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>合并 4 和 2， 可以这么使用<code>git rebase -i 1</code>,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\">pick 4 add: 第四次提交</span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改如下： 将4合并到2 ， 2 是最早提交的，4是最新提交的。 将 2那一行添加在4下面，删除原来的2的那一行，</span></span><br><span class=\"line\"><span class=\"comment\"># 并且将 4下面的2的那一行 的 pick 修改为 squash即可</span></span><br><span class=\"line\">pick 4 add: 第四次提交</span><br><span class=\"line\">squash 2 add: 第三次提交</span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"暂存区和-HEAD-之间的差异？\"><a href=\"#暂存区和-HEAD-之间的差异？\" class=\"headerlink\" title=\"暂存区和 HEAD 之间的差异？\"></a>暂存区和 HEAD 之间的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HEAD 上的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;api&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>本地修改文件, 并添加到暂存区；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HEAD 上的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;api&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过命令<code>git diff --cached</code>比较俩个文件的区别”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff --git a/api.js b/api.js</span><br><span class=\"line\">index 8558a46..26731b7 100644</span><br><span class=\"line\">--- a/api.js</span><br><span class=\"line\">+++ b/api.js</span><br><span class=\"line\"></span><br><span class=\"line\">@@ -1 +1,3 @@</span><br><span class=\"line\">-console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\"></span><br><span class=\"line\">+console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎样通过比较工作区和暂存区所含文件的差异？\"><a href=\"#怎样通过比较工作区和暂存区所含文件的差异？\" class=\"headerlink\" title=\"怎样通过比较工作区和暂存区所含文件的差异？\"></a>怎样通过比较工作区和暂存区所含文件的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有文件</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># api.js</span></span><br><span class=\"line\">git diff -- api.js</span><br></pre></td></tr></table></figure>\n\n<p>预览的效果类似 上面的效果；</p>\n<h2 id=\"暂存区恢复成和-HEAD-一样？\"><a href=\"#暂存区恢复成和-HEAD-一样？\" class=\"headerlink\" title=\"暂存区恢复成和 HEAD 一样？\"></a>暂存区恢复成和 HEAD 一样？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复所有</span></span><br><span class=\"line\">git reset HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某一个文件</span></span><br><span class=\"line\">git reset HEAD api.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"让工作区文件恢复成暂存区一样？\"><a href=\"#让工作区文件恢复成暂存区一样？\" class=\"headerlink\" title=\"让工作区文件恢复成暂存区一样？\"></a>让工作区文件恢复成暂存区一样？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- 文件名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消暂存区部分文件的修改？\"><a href=\"#取消暂存区部分文件的修改？\" class=\"headerlink\" title=\"取消暂存区部分文件的修改？\"></a>取消暂存区部分文件的修改？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- api.js  main.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除最近的几次提交？（版本回退）\"><a href=\"#消除最近的几次提交？（版本回退）\" class=\"headerlink\" title=\"消除最近的几次提交？（版本回退）\"></a>消除最近的几次提交？（版本回退）</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 回退版本<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>但是我不想要第三次提交，想要消除（回退 2 的提交），可以使用 <code>git reset --hard 2</code>,</p>\n<h2 id=\"不同提交文件的差异？\"><a href=\"#不同提交文件的差异？\" class=\"headerlink\" title=\"不同提交文件的差异？\"></a>不同提交文件的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有的文文件</span></span><br><span class=\"line\">git diff 分支1 分支2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定文件</span></span><br><span class=\"line\">git diff 分支1 分支2 -- index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定的分支id 2 是temp分支的commit id,  1是master分支的commit id</span></span><br><span class=\"line\">git diff 2 1 -- index.js</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git diff 分支1 分支2</span></span><br><span class=\"line\">diff --git a/api.js b/api.js</span><br><span class=\"line\">index 26731b7..0afa981 100644</span><br><span class=\"line\">--- a/api.js</span><br><span class=\"line\">+++ b/api.js</span><br><span class=\"line\">@@ -1,3 +1,5 @@</span><br><span class=\"line\"> console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\">+<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">+</span><br><span class=\"line\">+const b = 1000;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正确删除文件的方法？\"><a href=\"#正确删除文件的方法？\" class=\"headerlink\" title=\"正确删除文件的方法？\"></a>正确删除文件的方法？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂存区 放弃更改</span></span><br><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开发中紧急任务怎么处理？\"><a href=\"#开发中紧急任务怎么处理？\" class=\"headerlink\" title=\"开发中紧急任务怎么处理？\"></a>开发中紧急任务怎么处理？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加存放区，暂存区是一个干净的状态；</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># stash@&#123;0&#125;: WIP on master: 886f134 edit: 修改diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1: 拿出来，放在工作区 2: git stash list 对用的信息还存在，可以重复使用</span></span><br><span class=\"line\"><span class=\"comment\"># 即这条信息还存在： &#123;stash@&#123;0&#125;: WIP on master: 886f134 edit: 修改diff&#125;</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 丢掉 Dropped refs/stash@&#123;0&#125; (6fc8e582adf57857a5a2af6eafbe375d6eae287f)</span></span><br><span class=\"line\">git stash pop</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定不需要的-git-管理文件？-gitignore-文件\"><a href=\"#指定不需要的-git-管理文件？-gitignore-文件\" class=\"headerlink\" title=\"指定不需要的 git 管理文件？ .gitignore 文件\"></a>指定不需要的 git 管理文件？ <code>.gitignore 文件</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/</span><br><span class=\"line\">src/.vuepress/.cache/</span><br><span class=\"line\">src/.vuepress/.temp/</span><br><span class=\"line\">src/.vuepress/dist/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他整理\"><a href=\"#其他整理\" class=\"headerlink\" title=\"其他整理\"></a>其他整理</h2><h3 id=\"选项解释\"><a href=\"#选项解释\" class=\"headerlink\" title=\"选项解释\"></a>选项解释</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d --delete：删除</span><br><span class=\"line\"></span><br><span class=\"line\">-D --delete --force的快捷键</span><br><span class=\"line\"></span><br><span class=\"line\">-f --force：强制</span><br><span class=\"line\"></span><br><span class=\"line\">-m --move：移动或重命名</span><br><span class=\"line\"></span><br><span class=\"line\">-M --move --force的快捷键</span><br><span class=\"line\"></span><br><span class=\"line\">-r --remote：远程</span><br><span class=\"line\"></span><br><span class=\"line\">-a --all：所有</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><ul>\n<li>新建分支: <code>git branch</code> 分支名<ul>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看远程和本地分支</li>\n<li><code>git branch -f</code> 新建分支但不切换</li>\n<li><code>git branch -b</code> 新建分支并切换</li>\n<li><code>git branch -d|-D</code> 删除本地分支</li>\n<li><code>git branch -m|-M</code> 强制重命名</li>\n</ul>\n</li>\n<li>切换分支: <code>git checkout 分支名</code></li>\n<li>列出分支: <code>git branch</code></li>\n<li>删除分支: <code>git branch -d 分支名</code></li>\n<li>合并分支: <code>git merge 需要合并的分支</code></li>\n<li>合并分支: <code>git rebase 合并到的分支</code></li>\n</ul>\n<h3 id=\"相对引用\"><a href=\"#相对引用\" class=\"headerlink\" title=\"相对引用\"></a>相对引用</h3><ul>\n<li><code>^</code>向上移动一个记录 <code>git checkout 分支 HEAD^</code></li>\n<li>使用 <code>~</code> 向上移动多个提交记录，如 <code>~3</code></li>\n</ul>\n<h3 id=\"撤销变更\"><a href=\"#撤销变更\" class=\"headerlink\" title=\"撤销变更\"></a>撤销变更</h3><ul>\n<li><code>git reset</code> 本地回滚上一步，原来指向的提交记录就跟从来没有提交过一样</li>\n<li><code>git revert</code> 远程回滚，但会生成一条提交记录</li>\n</ul>\n<h3 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h3><ul>\n<li><code>git log</code><ul>\n<li><code>git log --oneline</code> 查看历史记录的简洁的版本。</li>\n<li><code>git log --graph</code> 查看历史中什么时候出现了分支、合并。</li>\n<li><code>git log --reverse</code> 逆向显示所有日志。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"温馨提示\"><a href=\"#温馨提示\" class=\"headerlink\" title=\"温馨提示\"></a>温馨提示</h1><p>基础<code>git</code>暂时这样整理完成，后期可继续整理;</p>\n<h2 id=\"配置-user-信息\"><a href=\"#配置-user-信息\" class=\"headerlink\" title=\"配置 user 信息\"></a>配置 user 信息</h2><h3 id=\"全局配置-user\"><a href=\"#全局配置-user\" class=\"headerlink\" title=\"全局配置 user\"></a>全局配置 user</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;username@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-的三个作用域\"><a href=\"#config-的三个作用域\" class=\"headerlink\" title=\"config 的三个作用域\"></a>config 的三个作用域</h3><p>缺省等同于 local；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># local只对某个仓库有效</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># global对当前用户所有仓库有效</span></span><br><span class=\"line\">git config --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># system 对系统所有登录的用户有效</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<p>显示 config 的配置，加<code>--list</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --<span class=\"built_in\">local</span></span><br><span class=\"line\">git config --list --global</span><br><span class=\"line\">git config --list --system</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建一个仓库并配置-local-用户信息\"><a href=\"#创建一个仓库并配置-local-用户信息\" class=\"headerlink\" title=\"创建一个仓库并配置 local 用户信息\"></a>创建一个仓库并配置 local 用户信息</h2><h3 id=\"俩种场景\"><a href=\"#俩种场景\" class=\"headerlink\" title=\"俩种场景\"></a>俩种场景</h3><ol>\n<li>把已有的项目代码纳入 git 管理</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 项目代码所有的文件夹</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>新建的项目直接使用 git 管理</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 某个文件夹</span><br><span class=\"line\"><span class=\"comment\"># 会在当前路径创建和项目名称相同的文件夹</span></span><br><span class=\"line\">git init your_project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br></pre></td></tr></table></figure>\n\n<p>当 git 初始化完成之后，创建一个<code>local</code>的用户；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> user.name <span class=\"string\">&quot;你的用户名&quot;</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> user.email <span class=\"string\">&quot;你的密码&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>添加完成之后，我们可以通过命令<code>git config --local --list</code>可以快速查看配置的用户信息；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">core.repositoryformatversion=0</span><br><span class=\"line\">core.filemode=<span class=\"literal\">true</span></span><br><span class=\"line\">core.bare=<span class=\"literal\">false</span></span><br><span class=\"line\">core.logallrefupdates=<span class=\"literal\">true</span></span><br><span class=\"line\">core.ignorecase=<span class=\"literal\">true</span></span><br><span class=\"line\">core.precomposeunicode=<span class=\"literal\">true</span></span><br><span class=\"line\">user.name=这里显示的是你配置的用户名</span><br><span class=\"line\">user.email=这显示的是你配置的电子邮箱</span><br></pre></td></tr></table></figure>\n\n<p>配置成功之后，通过命令提交文件；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在这之前，可以先创建一个文件 README.md</span></span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Add README.md&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交成功之后会默认创建一个<code>master</code>的分支，可以通过命令<code>git log</code> 查看</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志信息如下</span></span><br><span class=\"line\">commit 3ffd6982361494c34c5ade40cd69777f1993812c (HEAD -&gt; master)</span><br><span class=\"line\">Author: 显示的是你用户名 &lt;显示的是你的电子邮箱&gt;</span><br><span class=\"line\">Date:   Thu Jan 5 21:20:49 2023 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Add Readme</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给文件名重命名\"><a href=\"#给文件名重命名\" class=\"headerlink\" title=\"给文件名重命名\"></a>给文件名重命名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤一：</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> index.html index.copy.html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\">        deleted:    index.html</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git add &lt;file&gt;...&quot;</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\">        index.copy.html</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">&quot;git add&quot;</span> and/or <span class=\"string\">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里虽然我们已经更新了文件名字，但是对于 git 仓库里还是会存在原来的文件名，这是我们删除原来的，添加最新的；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤二： 删除原来的</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> index.html</span><br><span class=\"line\"><span class=\"comment\"># 步骤三： 添加最新的</span></span><br><span class=\"line\">git add index.copy.html</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class=\"line\">        renamed:    index.html -&gt; index.copy.html</span><br></pre></td></tr></table></figure>\n\n<p>这里可以使用 git 命令撤销会退， 但是这是一个危险操作，会把暂存区的文件会退；<code>git reset --hard</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 简化上面的操作，变更的文件 以及变更后的文件, 这里的效果简化成上面的三步骤</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> index.html index.copy.index</span><br></pre></td></tr></table></figure>\n\n<p>这里变更或者移动文件可以参考文献： <a href=\"https://www.yiibai.com/git/git_mv.html\">git mv 命令</a></p>\n<h2 id=\"git-的版本历史\"><a href=\"#git-的版本历史\" class=\"headerlink\" title=\"git 的版本历史\"></a>git 的版本历史</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 无参数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有分支log, 但是这种情况对于多分支 多提交是比较累的(没有眼睛或者*号) 可以使用 --graph（有眼睛或者*号）</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --all</span><br><span class=\"line\"><span class=\"comment\"># 图形化的用用法 || gitk</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --all --graph</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简介模式、</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline</span><br><span class=\"line\">64b9a4b (HEAD -&gt; master) Move index.html to index.copy.html</span><br><span class=\"line\">ebe990b Add index</span><br><span class=\"line\">3ffd698 Add Readme</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最近的几个commit</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -n2 --oneline</span><br><span class=\"line\">64b9a4b (HEAD -&gt; master) Move index.html to index.copy.html</span><br><span class=\"line\">ebe990b Add index</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch -v</span><br><span class=\"line\">* master 64b9a4b Move index.html to index.copy.html</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>git log --all --graph</code></strong> 的效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/git_graph.jpeg\" alt=\"git log --all --graph\"></p>\n<h2 id=\"怎么删除不需要的分支？\"><a href=\"#怎么删除不需要的分支？\" class=\"headerlink\" title=\"怎么删除不需要的分支？\"></a>怎么删除不需要的分支？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部分情况下可能会删除不掉</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -D 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如：</span></span><br><span class=\"line\">git branch -d temp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么修改最新的-commit-的-message\"><a href=\"#怎么修改最新的-commit-的-message\" class=\"headerlink\" title=\"怎么修改最新的 commit 的 message?\"></a>怎么修改最新的 commit 的 message?</h2><blockquote>\n<p>使用场景很简单， 就是最新提交的 commit message 不是很明确的情况下，需要使用该命令区修改最新提交 commit message 的；</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br><span class=\"line\"><span class=\"comment\"># 直接 输入i进行编辑， wq保存退出</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>由于第三次提交的提交消息我输错了。我想修改最新的即第三次提交的 commit message;</p>\n<p>这时可以使用<code>git commit --amend</code>, 进去之后直接操作 vim。修稿你的 commit message 就可以了；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释： 这里就是你 git commit --amend命令之后的界面“， 直接将下面的消息文案修改为你想要的commit message就可以</span></span><br><span class=\"line\">add: 添加服务</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></span><br><span class=\"line\"><span class=\"comment\"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Date:      Fri Jan 6 21:36:05 2023 +0800</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># On branch master</span></span><br><span class=\"line\"><span class=\"comment\"># Changes to be committed:</span></span><br><span class=\"line\"><span class=\"comment\">#       new file:   server.js</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎么修改老旧的-commit-的-message\"><a href=\"#怎么修改老旧的-commit-的-message\" class=\"headerlink\" title=\"怎么修改老旧的 commit 的 message?\"></a>怎么修改老旧的 commit 的 message?</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变基</span></span><br><span class=\"line\">git rebase -i 变更的上一个分支<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>但是我想修改第二次提交的 commit message; 可以使用<code>git rebase -i 1</code>;<br>这里的<code>1</code> 是你想要修改第几次提交的父级 id;</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\"><span class=\"comment\"># 这是第二条的， 吧pick 修改为 reword 或者 r 就可以了； 记得保存</span></span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 3ffd698..70639fd onto 3ffd698 (1 command)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class=\"line\"><span class=\"comment\"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class=\"line\"><span class=\"comment\"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把多个-连续的-commit-合并成-1-个\"><a href=\"#把多个-连续的-commit-合并成-1-个\" class=\"headerlink\" title=\"把多个(连续的)commit 合并成 1 个\"></a>把多个(连续的)commit 合并成 1 个</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 合并commit的父级<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>我想要将 第三次 和 第二次提交的消息合并成 1 个，可以使用<code>git rebase -i 1</code>, 这里的<code>1</code>是你为谁合并的父级 id；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\"><span class=\"comment\"># 这里保留最新的一次的pick, 将其他的pick修改为 squash || s</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改如下： 3 是最新的 2 是最早提交的  吧 最新的合并到最早提交的</span></span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">squash 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎样吧间隔的几个-commit-整理成-1-个？\"><a href=\"#怎样吧间隔的几个-commit-整理成-1-个？\" class=\"headerlink\" title=\"怎样吧间隔的几个 commit 整理成 1 个？\"></a>怎样吧间隔的几个 commit 整理成 1 个？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i 间隔的父级<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 4 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 4</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第四次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>合并 4 和 2， 可以这么使用<code>git rebase -i 1</code>,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 效果如下</span></span><br><span class=\"line\">pick 4 add: 第四次提交</span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\">pick 2 add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改如下： 将4合并到2 ， 2 是最早提交的，4是最新提交的。 将 2那一行添加在4下面，删除原来的2的那一行，</span></span><br><span class=\"line\"><span class=\"comment\"># 并且将 4下面的2的那一行 的 pick 修改为 squash即可</span></span><br><span class=\"line\">pick 4 add: 第四次提交</span><br><span class=\"line\">squash 2 add: 第三次提交</span><br><span class=\"line\">pick 3 add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 52f2b39..2f79131 onto 52f2b39 (3 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick &lt;commit&gt; = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span><br><span class=\"line\"><span class=\"comment\">#                    commit&#x27;s log message, unless -C is used, in which case</span></span><br><span class=\"line\"><span class=\"comment\">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class=\"line\"><span class=\"comment\">#                    opens the editor</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class=\"line\"><span class=\"comment\"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"暂存区和-HEAD-之间的差异？\"><a href=\"#暂存区和-HEAD-之间的差异？\" class=\"headerlink\" title=\"暂存区和 HEAD 之间的差异？\"></a>暂存区和 HEAD 之间的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HEAD 上的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;api&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>本地修改文件, 并添加到暂存区；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HEAD 上的文件</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;api&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过命令<code>git diff --cached</code>比较俩个文件的区别”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff --git a/api.js b/api.js</span><br><span class=\"line\">index 8558a46..26731b7 100644</span><br><span class=\"line\">--- a/api.js</span><br><span class=\"line\">+++ b/api.js</span><br><span class=\"line\"></span><br><span class=\"line\">@@ -1 +1,3 @@</span><br><span class=\"line\">-console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\"></span><br><span class=\"line\">+console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\">+</span><br><span class=\"line\">+<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"怎样通过比较工作区和暂存区所含文件的差异？\"><a href=\"#怎样通过比较工作区和暂存区所含文件的差异？\" class=\"headerlink\" title=\"怎样通过比较工作区和暂存区所含文件的差异？\"></a>怎样通过比较工作区和暂存区所含文件的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有文件</span></span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># api.js</span></span><br><span class=\"line\">git diff -- api.js</span><br></pre></td></tr></table></figure>\n\n<p>预览的效果类似 上面的效果；</p>\n<h2 id=\"暂存区恢复成和-HEAD-一样？\"><a href=\"#暂存区恢复成和-HEAD-一样？\" class=\"headerlink\" title=\"暂存区恢复成和 HEAD 一样？\"></a>暂存区恢复成和 HEAD 一样？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复所有</span></span><br><span class=\"line\">git reset HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某一个文件</span></span><br><span class=\"line\">git reset HEAD api.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"让工作区文件恢复成暂存区一样？\"><a href=\"#让工作区文件恢复成暂存区一样？\" class=\"headerlink\" title=\"让工作区文件恢复成暂存区一样？\"></a>让工作区文件恢复成暂存区一样？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- 文件名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取消暂存区部分文件的修改？\"><a href=\"#取消暂存区部分文件的修改？\" class=\"headerlink\" title=\"取消暂存区部分文件的修改？\"></a>取消暂存区部分文件的修改？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- api.js  main.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消除最近的几次提交？（版本回退）\"><a href=\"#消除最近的几次提交？（版本回退）\" class=\"headerlink\" title=\"消除最近的几次提交？（版本回退）\"></a>消除最近的几次提交？（版本回退）</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 回退版本<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>比如我在 git 提交了 3 条 commit, 如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第三次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第二次提交</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1</span><br><span class=\"line\">Author: cs &lt;123@qq.com&gt;</span><br><span class=\"line\">Date: 2023</span><br><span class=\"line\">  add: 第一次提交</span><br></pre></td></tr></table></figure>\n\n<p>但是我不想要第三次提交，想要消除（回退 2 的提交），可以使用 <code>git reset --hard 2</code>,</p>\n<h2 id=\"不同提交文件的差异？\"><a href=\"#不同提交文件的差异？\" class=\"headerlink\" title=\"不同提交文件的差异？\"></a>不同提交文件的差异？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 所有的文文件</span></span><br><span class=\"line\">git diff 分支1 分支2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定文件</span></span><br><span class=\"line\">git diff 分支1 分支2 -- index.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定的分支id 2 是temp分支的commit id,  1是master分支的commit id</span></span><br><span class=\"line\">git diff 2 1 -- index.js</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git diff 分支1 分支2</span></span><br><span class=\"line\">diff --git a/api.js b/api.js</span><br><span class=\"line\">index 26731b7..0afa981 100644</span><br><span class=\"line\">--- a/api.js</span><br><span class=\"line\">+++ b/api.js</span><br><span class=\"line\">@@ -1,3 +1,5 @@</span><br><span class=\"line\"> console.log(<span class=\"string\">&#x27;api&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">\\ No newline at end of file</span><br><span class=\"line\">+<span class=\"built_in\">let</span> a = 100;</span><br><span class=\"line\">+</span><br><span class=\"line\">+const b = 1000;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正确删除文件的方法？\"><a href=\"#正确删除文件的方法？\" class=\"headerlink\" title=\"正确删除文件的方法？\"></a>正确删除文件的方法？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> 文件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂存区 放弃更改</span></span><br><span class=\"line\">git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开发中紧急任务怎么处理？\"><a href=\"#开发中紧急任务怎么处理？\" class=\"headerlink\" title=\"开发中紧急任务怎么处理？\"></a>开发中紧急任务怎么处理？</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加存放区，暂存区是一个干净的状态；</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"><span class=\"comment\"># stash@&#123;0&#125;: WIP on master: 886f134 edit: 修改diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1: 拿出来，放在工作区 2: git stash list 对用的信息还存在，可以重复使用</span></span><br><span class=\"line\"><span class=\"comment\"># 即这条信息还存在： &#123;stash@&#123;0&#125;: WIP on master: 886f134 edit: 修改diff&#125;</span></span><br><span class=\"line\">git stash apply</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 丢掉 Dropped refs/stash@&#123;0&#125; (6fc8e582adf57857a5a2af6eafbe375d6eae287f)</span></span><br><span class=\"line\">git stash pop</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定不需要的-git-管理文件？-gitignore-文件\"><a href=\"#指定不需要的-git-管理文件？-gitignore-文件\" class=\"headerlink\" title=\"指定不需要的 git 管理文件？ .gitignore 文件\"></a>指定不需要的 git 管理文件？ <code>.gitignore 文件</code></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/</span><br><span class=\"line\">src/.vuepress/.cache/</span><br><span class=\"line\">src/.vuepress/.temp/</span><br><span class=\"line\">src/.vuepress/dist/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他整理\"><a href=\"#其他整理\" class=\"headerlink\" title=\"其他整理\"></a>其他整理</h2><h3 id=\"选项解释\"><a href=\"#选项解释\" class=\"headerlink\" title=\"选项解释\"></a>选项解释</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d --delete：删除</span><br><span class=\"line\"></span><br><span class=\"line\">-D --delete --force的快捷键</span><br><span class=\"line\"></span><br><span class=\"line\">-f --force：强制</span><br><span class=\"line\"></span><br><span class=\"line\">-m --move：移动或重命名</span><br><span class=\"line\"></span><br><span class=\"line\">-M --move --force的快捷键</span><br><span class=\"line\"></span><br><span class=\"line\">-r --remote：远程</span><br><span class=\"line\"></span><br><span class=\"line\">-a --all：所有</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><ul>\n<li>新建分支: <code>git branch</code> 分支名<ul>\n<li><code>git branch -r</code> 查看远程分支</li>\n<li><code>git branch -a</code> 查看远程和本地分支</li>\n<li><code>git branch -f</code> 新建分支但不切换</li>\n<li><code>git branch -b</code> 新建分支并切换</li>\n<li><code>git branch -d|-D</code> 删除本地分支</li>\n<li><code>git branch -m|-M</code> 强制重命名</li>\n</ul>\n</li>\n<li>切换分支: <code>git checkout 分支名</code></li>\n<li>列出分支: <code>git branch</code></li>\n<li>删除分支: <code>git branch -d 分支名</code></li>\n<li>合并分支: <code>git merge 需要合并的分支</code></li>\n<li>合并分支: <code>git rebase 合并到的分支</code></li>\n</ul>\n<h3 id=\"相对引用\"><a href=\"#相对引用\" class=\"headerlink\" title=\"相对引用\"></a>相对引用</h3><ul>\n<li><code>^</code>向上移动一个记录 <code>git checkout 分支 HEAD^</code></li>\n<li>使用 <code>~</code> 向上移动多个提交记录，如 <code>~3</code></li>\n</ul>\n<h3 id=\"撤销变更\"><a href=\"#撤销变更\" class=\"headerlink\" title=\"撤销变更\"></a>撤销变更</h3><ul>\n<li><code>git reset</code> 本地回滚上一步，原来指向的提交记录就跟从来没有提交过一样</li>\n<li><code>git revert</code> 远程回滚，但会生成一条提交记录</li>\n</ul>\n<h3 id=\"查看历史\"><a href=\"#查看历史\" class=\"headerlink\" title=\"查看历史\"></a>查看历史</h3><ul>\n<li><code>git log</code><ul>\n<li><code>git log --oneline</code> 查看历史记录的简洁的版本。</li>\n<li><code>git log --graph</code> 查看历史中什么时候出现了分支、合并。</li>\n<li><code>git log --reverse</code> 逆向显示所有日志。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"服务器/运营-1panel","abbrlink":"39a6487c","date":"2024-07-08T01:05:01.000Z","_content":"\n上篇文章说了一下如何使用`宝塔`在服务器部署前端的项目，但是这种做法虽然也是可以的，但是比较麻烦，每次迭代更新打包都需要手动上传`dist`文件到服务器下，那么接下来说一下使用`jenkins`在服务器上发布项目；\n\n`1panel`需要使用`docker`环境安装，具体[看官网](https://1panel.cn/)\n\n接下来具体说一下如何使用`jenkins`部署前端项目\n\n## 安装 Jenkins\n\n首先在`应用商店`搜索`jenkins`，然后进行安装，接着傻瓜式安装，当然要勾选外部端口，这样才能访问`http:xxxx:8080`,等待其安装完成，安装成功之后，如下图:\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.pfcitpy1g.webp)\n\n找到图中的`服务端口`按钮，打开网页如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45hoax4ywn.webp)\n这里需要输入密码，密码的存放地址在网页中已经标明，只需要在服务器上找到即可，但是这里我们在`1panel`中找到图一中的`日志`按钮，如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.m2ytak8q.webp)\n接着在`jenkins`傻瓜式安装即可，如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74la2a1r.webp)\n\n然后等待`jenkins`安装完成\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5c0zjj3435.webp)\n自行配置用户名\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.99td07jjq5.webp)\n安装对应的插件, `Nodejs, Git Parameter, Publish Over SSH`当然您也就可以安装需要的插件\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7lk030znhw.webp)\n\n## 添加流水线\n\n在左侧菜单`新建Item`构建，大致流程就是\n\n1. 添加`git`地址，配置你的账号密码\n2. 配置对应的操作，如：选择分支，选择发布环境\n3. 配置构建命令等，将打包后的文件上传到服务对应的域名\n4. 配置发布之后发送的邮件信息，这样就能收到成功或者失败的邮件\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn7yhfzn8.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap0565tsc.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5j47ezwx9u.webp)\n\n## 创建网站\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e5d1o0o.webp)\n\n最后在`jenkins`配置`shell`\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9rjeoul3sr.webp)\n解释上图：\n\n1. 系统运用的是`docker`, 那么就用`docker cp`当前的目录或者的 dist 的目录\n2. 复制到对应容器的网站\n3. `1Panel-openresty-qVw7`是`docker`容器，也是`1panel`容器\n4. `/www/sites/154.37.212.237`是刚刚创建的网站, `index`是这个网站的根目录；\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9nzsr4zaeb.webp)\n\n那么设置完成之后，就可以重新打开网页就可以了；\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6vjlekc.webp)\n\n关于`jenkins`的简单使用就到这里了，如果喜欢`1Panel`那就自己花时间研究一下吧！\n","source":"_posts/技能小册/服务器-运营/1panel面板.md","raw":"---\ntitle: 服务器/运营-1panel\nabbrlink: 39a6487c\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 服务器/运营\n---\n\n上篇文章说了一下如何使用`宝塔`在服务器部署前端的项目，但是这种做法虽然也是可以的，但是比较麻烦，每次迭代更新打包都需要手动上传`dist`文件到服务器下，那么接下来说一下使用`jenkins`在服务器上发布项目；\n\n`1panel`需要使用`docker`环境安装，具体[看官网](https://1panel.cn/)\n\n接下来具体说一下如何使用`jenkins`部署前端项目\n\n## 安装 Jenkins\n\n首先在`应用商店`搜索`jenkins`，然后进行安装，接着傻瓜式安装，当然要勾选外部端口，这样才能访问`http:xxxx:8080`,等待其安装完成，安装成功之后，如下图:\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.pfcitpy1g.webp)\n\n找到图中的`服务端口`按钮，打开网页如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45hoax4ywn.webp)\n这里需要输入密码，密码的存放地址在网页中已经标明，只需要在服务器上找到即可，但是这里我们在`1panel`中找到图一中的`日志`按钮，如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.m2ytak8q.webp)\n接着在`jenkins`傻瓜式安装即可，如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74la2a1r.webp)\n\n然后等待`jenkins`安装完成\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5c0zjj3435.webp)\n自行配置用户名\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.99td07jjq5.webp)\n安装对应的插件, `Nodejs, Git Parameter, Publish Over SSH`当然您也就可以安装需要的插件\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7lk030znhw.webp)\n\n## 添加流水线\n\n在左侧菜单`新建Item`构建，大致流程就是\n\n1. 添加`git`地址，配置你的账号密码\n2. 配置对应的操作，如：选择分支，选择发布环境\n3. 配置构建命令等，将打包后的文件上传到服务对应的域名\n4. 配置发布之后发送的邮件信息，这样就能收到成功或者失败的邮件\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn7yhfzn8.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap0565tsc.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5j47ezwx9u.webp)\n\n## 创建网站\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e5d1o0o.webp)\n\n最后在`jenkins`配置`shell`\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9rjeoul3sr.webp)\n解释上图：\n\n1. 系统运用的是`docker`, 那么就用`docker cp`当前的目录或者的 dist 的目录\n2. 复制到对应容器的网站\n3. `1Panel-openresty-qVw7`是`docker`容器，也是`1panel`容器\n4. `/www/sites/154.37.212.237`是刚刚创建的网站, `index`是这个网站的根目录；\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9nzsr4zaeb.webp)\n\n那么设置完成之后，就可以重新打开网页就可以了；\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6vjlekc.webp)\n\n关于`jenkins`的简单使用就到这里了，如果喜欢`1Panel`那就自己花时间研究一下吧！\n","slug":"技能小册/服务器-运营/1panel面板","published":1,"updated":"2025-03-13T10:16:18.140Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j2004lfg9m7kmb7x8a","content":"<p>上篇文章说了一下如何使用<code>宝塔</code>在服务器部署前端的项目，但是这种做法虽然也是可以的，但是比较麻烦，每次迭代更新打包都需要手动上传<code>dist</code>文件到服务器下，那么接下来说一下使用<code>jenkins</code>在服务器上发布项目；</p>\n<p><code>1panel</code>需要使用<code>docker</code>环境安装，具体<a href=\"https://1panel.cn/\">看官网</a></p>\n<p>接下来具体说一下如何使用<code>jenkins</code>部署前端项目</p>\n<h2 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h2><p>首先在<code>应用商店</code>搜索<code>jenkins</code>，然后进行安装，接着傻瓜式安装，当然要勾选外部端口，这样才能访问<code>http:xxxx:8080</code>,等待其安装完成，安装成功之后，如下图:</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.pfcitpy1g.webp\" alt=\"x\"></p>\n<p>找到图中的<code>服务端口</code>按钮，打开网页如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45hoax4ywn.webp\" alt=\"X\"><br>这里需要输入密码，密码的存放地址在网页中已经标明，只需要在服务器上找到即可，但是这里我们在<code>1panel</code>中找到图一中的<code>日志</code>按钮，如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.m2ytak8q.webp\" alt=\"X\"><br>接着在<code>jenkins</code>傻瓜式安装即可，如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74la2a1r.webp\" alt=\"X\"></p>\n<p>然后等待<code>jenkins</code>安装完成<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5c0zjj3435.webp\" alt=\"X\"><br>自行配置用户名<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.99td07jjq5.webp\" alt=\"X\"><br>安装对应的插件, <code>Nodejs, Git Parameter, Publish Over SSH</code>当然您也就可以安装需要的插件<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7lk030znhw.webp\" alt=\"X\"></p>\n<h2 id=\"添加流水线\"><a href=\"#添加流水线\" class=\"headerlink\" title=\"添加流水线\"></a>添加流水线</h2><p>在左侧菜单<code>新建Item</code>构建，大致流程就是</p>\n<ol>\n<li>添加<code>git</code>地址，配置你的账号密码</li>\n<li>配置对应的操作，如：选择分支，选择发布环境</li>\n<li>配置构建命令等，将打包后的文件上传到服务对应的域名</li>\n<li>配置发布之后发送的邮件信息，这样就能收到成功或者失败的邮件</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn7yhfzn8.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap0565tsc.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5j47ezwx9u.webp\" alt=\"X\"></p>\n<h2 id=\"创建网站\"><a href=\"#创建网站\" class=\"headerlink\" title=\"创建网站\"></a>创建网站</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e5d1o0o.webp\" alt=\"X\"></p>\n<p>最后在<code>jenkins</code>配置<code>shell</code><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9rjeoul3sr.webp\" alt=\"X\"><br>解释上图：</p>\n<ol>\n<li>系统运用的是<code>docker</code>, 那么就用<code>docker cp</code>当前的目录或者的 dist 的目录</li>\n<li>复制到对应容器的网站</li>\n<li><code>1Panel-openresty-qVw7</code>是<code>docker</code>容器，也是<code>1panel</code>容器</li>\n<li><code>/www/sites/154.37.212.237</code>是刚刚创建的网站, <code>index</code>是这个网站的根目录；</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9nzsr4zaeb.webp\" alt=\"X\"></p>\n<p>那么设置完成之后，就可以重新打开网页就可以了；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6vjlekc.webp\" alt=\"X\"></p>\n<p>关于<code>jenkins</code>的简单使用就到这里了，如果喜欢<code>1Panel</code>那就自己花时间研究一下吧！</p>\n","excerpt":"","more":"<p>上篇文章说了一下如何使用<code>宝塔</code>在服务器部署前端的项目，但是这种做法虽然也是可以的，但是比较麻烦，每次迭代更新打包都需要手动上传<code>dist</code>文件到服务器下，那么接下来说一下使用<code>jenkins</code>在服务器上发布项目；</p>\n<p><code>1panel</code>需要使用<code>docker</code>环境安装，具体<a href=\"https://1panel.cn/\">看官网</a></p>\n<p>接下来具体说一下如何使用<code>jenkins</code>部署前端项目</p>\n<h2 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h2><p>首先在<code>应用商店</code>搜索<code>jenkins</code>，然后进行安装，接着傻瓜式安装，当然要勾选外部端口，这样才能访问<code>http:xxxx:8080</code>,等待其安装完成，安装成功之后，如下图:</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.pfcitpy1g.webp\" alt=\"x\"></p>\n<p>找到图中的<code>服务端口</code>按钮，打开网页如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45hoax4ywn.webp\" alt=\"X\"><br>这里需要输入密码，密码的存放地址在网页中已经标明，只需要在服务器上找到即可，但是这里我们在<code>1panel</code>中找到图一中的<code>日志</code>按钮，如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.m2ytak8q.webp\" alt=\"X\"><br>接着在<code>jenkins</code>傻瓜式安装即可，如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74la2a1r.webp\" alt=\"X\"></p>\n<p>然后等待<code>jenkins</code>安装完成<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5c0zjj3435.webp\" alt=\"X\"><br>自行配置用户名<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.99td07jjq5.webp\" alt=\"X\"><br>安装对应的插件, <code>Nodejs, Git Parameter, Publish Over SSH</code>当然您也就可以安装需要的插件<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7lk030znhw.webp\" alt=\"X\"></p>\n<h2 id=\"添加流水线\"><a href=\"#添加流水线\" class=\"headerlink\" title=\"添加流水线\"></a>添加流水线</h2><p>在左侧菜单<code>新建Item</code>构建，大致流程就是</p>\n<ol>\n<li>添加<code>git</code>地址，配置你的账号密码</li>\n<li>配置对应的操作，如：选择分支，选择发布环境</li>\n<li>配置构建命令等，将打包后的文件上传到服务对应的域名</li>\n<li>配置发布之后发送的邮件信息，这样就能收到成功或者失败的邮件</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7sn7yhfzn8.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap0565tsc.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5j47ezwx9u.webp\" alt=\"X\"></p>\n<h2 id=\"创建网站\"><a href=\"#创建网站\" class=\"headerlink\" title=\"创建网站\"></a>创建网站</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e5d1o0o.webp\" alt=\"X\"></p>\n<p>最后在<code>jenkins</code>配置<code>shell</code><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9rjeoul3sr.webp\" alt=\"X\"><br>解释上图：</p>\n<ol>\n<li>系统运用的是<code>docker</code>, 那么就用<code>docker cp</code>当前的目录或者的 dist 的目录</li>\n<li>复制到对应容器的网站</li>\n<li><code>1Panel-openresty-qVw7</code>是<code>docker</code>容器，也是<code>1panel</code>容器</li>\n<li><code>/www/sites/154.37.212.237</code>是刚刚创建的网站, <code>index</code>是这个网站的根目录；</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.9nzsr4zaeb.webp\" alt=\"X\"></p>\n<p>那么设置完成之后，就可以重新打开网页就可以了；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6vjlekc.webp\" alt=\"X\"></p>\n<p>关于<code>jenkins</code>的简单使用就到这里了，如果喜欢<code>1Panel</code>那就自己花时间研究一下吧！</p>\n"},{"title":"服务器/运营-pm2","abbrlink":"b334f528","date":"2024-07-08T01:05:01.000Z","_content":"\n# 使用场景\n\n项目使用 node 开发, 开发过程中会遇到 node 一旦报错就会停止服务的问题，每次还要重新启动，比较麻烦，也是非常不方便的， 为了解决这样的问题，建议使用 pm2 去管理项目。\n\n## PM2 是什么？\n\nPM2（Process Manager 2 ）是具有内置负载均衡器的 Node.js 应用程序的生产运行时和进程管理器。 它允许您永久保持应用程序活跃，无需停机即可重新加载它们，并促进常见的 Devops 任务。\n\n### PM2 特性\n\n- 日志管理：应用程序日志保存在服务器的硬盘中~/.pm2/logs/\n- 负载均衡：PM2 可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许您以零秒停机时间重新启动应用程序。\n- 终端监控：可以在终端中监控您的应用程序并检查应用程序运行状况（CPU 使用率，使用的内存，请求/分钟等）。\n- SSH 部署：自动部署，避免逐个在所有服务器中进行 ssh。\n- 静态服务：支持静态服务器功能\n- 多平台支持：适用于 Linux（稳定）和 macOS（稳定）和 Windows（稳定）\n\n### 安装使用\n\n```sh\n// npm方式\nnpm install pm2 -g\n\n// yarn方式\nyarn global add pm2\n```\n\n### 启动服务\n\n```sh\n// 启动\npm2 start app.js\n\n// 更改名字启动\npm2 start app.js --name xxx\n```\n\n### 停止服务\n\n```sh\n// 停止对应的id服务\npm2 stop [id]\n\n// 停止所有\npm2 stop all\n\n// 停止当前服务\npm2 stop [AppName]\n```\n\n### 删除服务\n\n```sh\n// 删除对应的id服务\npm2 delete [id]\n\n// 删除所有\npm2 delete all\n\n// 删除当前服务\npm2 delete [AppName]\n```\n\n### 开机自启\n\n```sh\n// 开机自启\npm2 startup\n```\n\n### 更新 pm2\n\n```sh\npm2 updatePM2\npm2 update\n```\n\n### 监听项目\n\n```sh\n// 当项目文件发生变化后, 自动重启\npm2 start app.js --watch\n```\n\n### 静态服务器\n\n```sh\n// 将目录dist作为静态服务器根目录，端口为9090\npm2 serve ./dist 9090\n```\n\n### 重启服务\n\n```sh\n// 重启对应的id服务\npm2 reload  [id]\n\n// 重启所有\npm2 reload  all\n\n// 重启当前服务\npm2 reload  [AppName]\n```\n\n### 查看 pm2 启动的项目\n\n```sh\npm2 list\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161839.4qralqpkna.webp)\n\n### 显示每个应用程序占用情况\n\n```sh\npm2 monit\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162030.5mns170i11.webp)\n\n### 显示应用程序所有信息\n\n```sh\n// 对应的id服务\npm2 show  [id]\n\n// 当前服务\npm2 show  [AppName]\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162232.64dtps30al.webp)\n\n### 日志查看\n\n```sh\n// 对应的id服务\npm2 logs  [id]\n\n// 所有\npm2 logs\n\n// 当前服务\npm2 logs  [AppName]\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161915.2h8a298d3g.webp)\n\n## 参考资料\n\n- [pm2](https://pm2.keymetrics.io/)\n- [pm2 中文文档](https://www.npmjs.com/package/pm2)\n- [PM2 介绍及简易使用手册](https://auan.cn/internet/2059.html)\n","source":"_posts/技能小册/服务器-运营/pm2.md","raw":"---\ntitle: 服务器/运营-pm2\nabbrlink: b334f528\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 服务器/运营\n---\n\n# 使用场景\n\n项目使用 node 开发, 开发过程中会遇到 node 一旦报错就会停止服务的问题，每次还要重新启动，比较麻烦，也是非常不方便的， 为了解决这样的问题，建议使用 pm2 去管理项目。\n\n## PM2 是什么？\n\nPM2（Process Manager 2 ）是具有内置负载均衡器的 Node.js 应用程序的生产运行时和进程管理器。 它允许您永久保持应用程序活跃，无需停机即可重新加载它们，并促进常见的 Devops 任务。\n\n### PM2 特性\n\n- 日志管理：应用程序日志保存在服务器的硬盘中~/.pm2/logs/\n- 负载均衡：PM2 可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许您以零秒停机时间重新启动应用程序。\n- 终端监控：可以在终端中监控您的应用程序并检查应用程序运行状况（CPU 使用率，使用的内存，请求/分钟等）。\n- SSH 部署：自动部署，避免逐个在所有服务器中进行 ssh。\n- 静态服务：支持静态服务器功能\n- 多平台支持：适用于 Linux（稳定）和 macOS（稳定）和 Windows（稳定）\n\n### 安装使用\n\n```sh\n// npm方式\nnpm install pm2 -g\n\n// yarn方式\nyarn global add pm2\n```\n\n### 启动服务\n\n```sh\n// 启动\npm2 start app.js\n\n// 更改名字启动\npm2 start app.js --name xxx\n```\n\n### 停止服务\n\n```sh\n// 停止对应的id服务\npm2 stop [id]\n\n// 停止所有\npm2 stop all\n\n// 停止当前服务\npm2 stop [AppName]\n```\n\n### 删除服务\n\n```sh\n// 删除对应的id服务\npm2 delete [id]\n\n// 删除所有\npm2 delete all\n\n// 删除当前服务\npm2 delete [AppName]\n```\n\n### 开机自启\n\n```sh\n// 开机自启\npm2 startup\n```\n\n### 更新 pm2\n\n```sh\npm2 updatePM2\npm2 update\n```\n\n### 监听项目\n\n```sh\n// 当项目文件发生变化后, 自动重启\npm2 start app.js --watch\n```\n\n### 静态服务器\n\n```sh\n// 将目录dist作为静态服务器根目录，端口为9090\npm2 serve ./dist 9090\n```\n\n### 重启服务\n\n```sh\n// 重启对应的id服务\npm2 reload  [id]\n\n// 重启所有\npm2 reload  all\n\n// 重启当前服务\npm2 reload  [AppName]\n```\n\n### 查看 pm2 启动的项目\n\n```sh\npm2 list\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161839.4qralqpkna.webp)\n\n### 显示每个应用程序占用情况\n\n```sh\npm2 monit\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162030.5mns170i11.webp)\n\n### 显示应用程序所有信息\n\n```sh\n// 对应的id服务\npm2 show  [id]\n\n// 当前服务\npm2 show  [AppName]\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162232.64dtps30al.webp)\n\n### 日志查看\n\n```sh\n// 对应的id服务\npm2 logs  [id]\n\n// 所有\npm2 logs\n\n// 当前服务\npm2 logs  [AppName]\n```\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161915.2h8a298d3g.webp)\n\n## 参考资料\n\n- [pm2](https://pm2.keymetrics.io/)\n- [pm2 中文文档](https://www.npmjs.com/package/pm2)\n- [PM2 介绍及简易使用手册](https://auan.cn/internet/2059.html)\n","slug":"技能小册/服务器-运营/pm2","published":1,"updated":"2025-03-13T10:16:17.978Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j2004ofg9mdpe02cnp","content":"<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>项目使用 node 开发, 开发过程中会遇到 node 一旦报错就会停止服务的问题，每次还要重新启动，比较麻烦，也是非常不方便的， 为了解决这样的问题，建议使用 pm2 去管理项目。</p>\n<h2 id=\"PM2-是什么？\"><a href=\"#PM2-是什么？\" class=\"headerlink\" title=\"PM2 是什么？\"></a>PM2 是什么？</h2><p>PM2（Process Manager 2 ）是具有内置负载均衡器的 Node.js 应用程序的生产运行时和进程管理器。 它允许您永久保持应用程序活跃，无需停机即可重新加载它们，并促进常见的 Devops 任务。</p>\n<h3 id=\"PM2-特性\"><a href=\"#PM2-特性\" class=\"headerlink\" title=\"PM2 特性\"></a>PM2 特性</h3><ul>\n<li>日志管理：应用程序日志保存在服务器的硬盘中~&#x2F;.pm2&#x2F;logs&#x2F;</li>\n<li>负载均衡：PM2 可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许您以零秒停机时间重新启动应用程序。</li>\n<li>终端监控：可以在终端中监控您的应用程序并检查应用程序运行状况（CPU 使用率，使用的内存，请求&#x2F;分钟等）。</li>\n<li>SSH 部署：自动部署，避免逐个在所有服务器中进行 ssh。</li>\n<li>静态服务：支持静态服务器功能</li>\n<li>多平台支持：适用于 Linux（稳定）和 macOS（稳定）和 Windows（稳定）</li>\n</ul>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm方式</span><br><span class=\"line\">npm install pm2 -g</span><br><span class=\"line\"></span><br><span class=\"line\">// yarn方式</span><br><span class=\"line\">yarn global add pm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 启动</span><br><span class=\"line\">pm2 start app.js</span><br><span class=\"line\"></span><br><span class=\"line\">// 更改名字启动</span><br><span class=\"line\">pm2 start app.js --name xxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 停止对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 stop [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止所有</span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止当前服务</span><br><span class=\"line\">pm2 stop [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 delete [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除所有</span><br><span class=\"line\">pm2 delete all</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除当前服务</span><br><span class=\"line\">pm2 delete [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 开机自启</span><br><span class=\"line\">pm2 startup</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新-pm2\"><a href=\"#更新-pm2\" class=\"headerlink\" title=\"更新 pm2\"></a>更新 pm2</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 updatePM2</span><br><span class=\"line\">pm2 update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监听项目\"><a href=\"#监听项目\" class=\"headerlink\" title=\"监听项目\"></a>监听项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当项目文件发生变化后, 自动重启</span><br><span class=\"line\">pm2 start app.js --watch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态服务器\"><a href=\"#静态服务器\" class=\"headerlink\" title=\"静态服务器\"></a>静态服务器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将目录dist作为静态服务器根目录，端口为9090</span><br><span class=\"line\">pm2 serve ./dist 9090</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重启对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 reload  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启所有</span><br><span class=\"line\">pm2 reload  all</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启当前服务</span><br><span class=\"line\">pm2 reload  [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看-pm2-启动的项目\"><a href=\"#查看-pm2-启动的项目\" class=\"headerlink\" title=\"查看 pm2 启动的项目\"></a>查看 pm2 启动的项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161839.4qralqpkna.webp\" alt=\"x\"></p>\n<h3 id=\"显示每个应用程序占用情况\"><a href=\"#显示每个应用程序占用情况\" class=\"headerlink\" title=\"显示每个应用程序占用情况\"></a>显示每个应用程序占用情况</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 monit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162030.5mns170i11.webp\" alt=\"x\"></p>\n<h3 id=\"显示应用程序所有信息\"><a href=\"#显示应用程序所有信息\" class=\"headerlink\" title=\"显示应用程序所有信息\"></a>显示应用程序所有信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 show  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前服务</span><br><span class=\"line\">pm2 show  [AppName]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162232.64dtps30al.webp\" alt=\"x\"></p>\n<h3 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 logs  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有</span><br><span class=\"line\">pm2 logs</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前服务</span><br><span class=\"line\">pm2 logs  [AppName]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161915.2h8a298d3g.webp\" alt=\"x\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://pm2.keymetrics.io/\">pm2</a></li>\n<li><a href=\"https://www.npmjs.com/package/pm2\">pm2 中文文档</a></li>\n<li><a href=\"https://auan.cn/internet/2059.html\">PM2 介绍及简易使用手册</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>项目使用 node 开发, 开发过程中会遇到 node 一旦报错就会停止服务的问题，每次还要重新启动，比较麻烦，也是非常不方便的， 为了解决这样的问题，建议使用 pm2 去管理项目。</p>\n<h2 id=\"PM2-是什么？\"><a href=\"#PM2-是什么？\" class=\"headerlink\" title=\"PM2 是什么？\"></a>PM2 是什么？</h2><p>PM2（Process Manager 2 ）是具有内置负载均衡器的 Node.js 应用程序的生产运行时和进程管理器。 它允许您永久保持应用程序活跃，无需停机即可重新加载它们，并促进常见的 Devops 任务。</p>\n<h3 id=\"PM2-特性\"><a href=\"#PM2-特性\" class=\"headerlink\" title=\"PM2 特性\"></a>PM2 特性</h3><ul>\n<li>日志管理：应用程序日志保存在服务器的硬盘中~&#x2F;.pm2&#x2F;logs&#x2F;</li>\n<li>负载均衡：PM2 可以通过创建共享同一服务器端口的多个子进程来扩展您的应用程序。这样做还允许您以零秒停机时间重新启动应用程序。</li>\n<li>终端监控：可以在终端中监控您的应用程序并检查应用程序运行状况（CPU 使用率，使用的内存，请求&#x2F;分钟等）。</li>\n<li>SSH 部署：自动部署，避免逐个在所有服务器中进行 ssh。</li>\n<li>静态服务：支持静态服务器功能</li>\n<li>多平台支持：适用于 Linux（稳定）和 macOS（稳定）和 Windows（稳定）</li>\n</ul>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm方式</span><br><span class=\"line\">npm install pm2 -g</span><br><span class=\"line\"></span><br><span class=\"line\">// yarn方式</span><br><span class=\"line\">yarn global add pm2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 启动</span><br><span class=\"line\">pm2 start app.js</span><br><span class=\"line\"></span><br><span class=\"line\">// 更改名字启动</span><br><span class=\"line\">pm2 start app.js --name xxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 停止对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 stop [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止所有</span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止当前服务</span><br><span class=\"line\">pm2 stop [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 delete [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除所有</span><br><span class=\"line\">pm2 delete all</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除当前服务</span><br><span class=\"line\">pm2 delete [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 开机自启</span><br><span class=\"line\">pm2 startup</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新-pm2\"><a href=\"#更新-pm2\" class=\"headerlink\" title=\"更新 pm2\"></a>更新 pm2</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 updatePM2</span><br><span class=\"line\">pm2 update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监听项目\"><a href=\"#监听项目\" class=\"headerlink\" title=\"监听项目\"></a>监听项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当项目文件发生变化后, 自动重启</span><br><span class=\"line\">pm2 start app.js --watch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态服务器\"><a href=\"#静态服务器\" class=\"headerlink\" title=\"静态服务器\"></a>静态服务器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将目录dist作为静态服务器根目录，端口为9090</span><br><span class=\"line\">pm2 serve ./dist 9090</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重启对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 reload  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启所有</span><br><span class=\"line\">pm2 reload  all</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启当前服务</span><br><span class=\"line\">pm2 reload  [AppName]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看-pm2-启动的项目\"><a href=\"#查看-pm2-启动的项目\" class=\"headerlink\" title=\"查看 pm2 启动的项目\"></a>查看 pm2 启动的项目</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161839.4qralqpkna.webp\" alt=\"x\"></p>\n<h3 id=\"显示每个应用程序占用情况\"><a href=\"#显示每个应用程序占用情况\" class=\"headerlink\" title=\"显示每个应用程序占用情况\"></a>显示每个应用程序占用情况</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 monit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162030.5mns170i11.webp\" alt=\"x\"></p>\n<h3 id=\"显示应用程序所有信息\"><a href=\"#显示应用程序所有信息\" class=\"headerlink\" title=\"显示应用程序所有信息\"></a>显示应用程序所有信息</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 show  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前服务</span><br><span class=\"line\">pm2 show  [AppName]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112162232.64dtps30al.webp\" alt=\"x\"></p>\n<h3 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对应的<span class=\"built_in\">id</span>服务</span><br><span class=\"line\">pm2 logs  [<span class=\"built_in\">id</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有</span><br><span class=\"line\">pm2 logs</span><br><span class=\"line\"></span><br><span class=\"line\">// 当前服务</span><br><span class=\"line\">pm2 logs  [AppName]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112161915.2h8a298d3g.webp\" alt=\"x\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://pm2.keymetrics.io/\">pm2</a></li>\n<li><a href=\"https://www.npmjs.com/package/pm2\">pm2 中文文档</a></li>\n<li><a href=\"https://auan.cn/internet/2059.html\">PM2 介绍及简易使用手册</a></li>\n</ul>\n"},{"title":"服务器/运营-宝塔面板","abbrlink":"28e84b51","date":"2024-07-08T01:05:01.000Z","_content":"\n# 介绍\n\n搭建属于自己的网站, 前几天自己动手购买了一台腾讯云轻量级服务器，自己写代码，node 作为服务端去写接口, 简单部署一下网站的搭建到服务器的部署再到数据库的操作。 整体下来感觉还是有点坑，今天正好有时间，记录一下搭建环境时需要注意的， 自己也总结一下搭建的步骤。\n\n## 首先拥有属于自己的域名\n\n这里不做过多的介绍, ,\n\n- [腾讯云](https://dnspod.cloud.tencent.com/)注册域名及使用, 介绍了域名的使用及备案。\n- `DNS` 解析域名\n- 其他的可以再官网或者百度上进行查阅\n\n## 接下来购买属于自己的服务器\n\n- 其实还是很简单的,首先我们先在腾讯云购买属于自己的 `轻量级服务器(较便宜,适合新手)`, 直接登录自己的微信号, 如果找不到, 直接搜索 `轻量级服务器` 就在左上角的云产品里。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112203053.7p3kp8d4ry.webp)\n- 接着, 我们选择镜像， 选择 宝塔镜像就可以了。\n- 安装宝塔，避免了去操作大量操作 Linux， 宝塔自带可视化面板。\n- 其他的根据自己需要去购买配置即可。\n- 服务器创建之后，在应用管理找到登录，根据要求就可以有自己的宝塔面板的登录链接和账号密码了。\n- 登录过后，关联自己的云服务器，根据要求就可以， 这里我略过 (官方有说明文档)\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205120.6f0niwxflg.webp)\n- 点击左侧的网站，部署自己的域名网站，添加站点 是你的购买域名, 下面直接做 DNS 解析就可以了。直接在浏览器输入自己的域名 就可以访问，\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205257.92q3t9rehv.webp)\n- 发现自己的网站是可以打开的， 觉得页面空空如也， 只有默认的页面， 那就只有自己手动去敲代码, 写页面了。\n\n## 需要注意的地方\n\n- 服务器安全组和宝塔面板的端口要暴露出去\n- 就像 `mongodb 27017` 端口暴露, 这样自己本地就可以访问服务器的数据库了， 服务器的数据库 数据只是存在自己的网站上面， 要定时备份数据\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3uut6a0hhv.webp)\n  在这里添加自己的定时任务.\n\n## 部署 node 服务\n\n- 在软件商城下载 `pm2`管理器, 根据自己的需要 去安装 `yarn`, 默认的是`nm`, 我个人喜欢`yarn`， 速度快一些。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/server_bs_5.6m3veco42b.webp)\n- 根据自己的需要去配置一下自己的 node 服务的项目， 这时这个端口号 是你 `node bin/www` 文件里面的 `port`， 同时安全组也要放开端口, 我们在 `web` 项目中可以访问 服务器中的 `api` 接口地址了\n- 接下来就可以启动 `node` 服务了， 可以在你的浏览器访问你的 `node` 接口了\n\n## 部署前端项目\n\n- 在宝塔面板左侧网站中找到自己的网站，可以再网站里面手动添加文件，文件夹等等，通过 url 的方式去访问，同时也可以设置权限。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210036.13lqy7hdeo.webp)\n- 这里就是我上传的前端页面了， 当然你可以手动打包前端项目， 通过手动上传，也可以使用工具 `xftp7`去上传, 都是可以的， 根据个人喜好去上传。\n\n## 部署 MongoDB 数据库\n\n- 左侧软件商城下载 `mongodb`软件， 下载之后打开设置,\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210336.175cvxc7oj.png)\n- 接着设置数据库用户密码，保证其安全性\n- 进入目录\n\n```sh\n// 进入目录\ncd /www/server/mongodb/bin\n\n// 切换 mongo环境\nmongo\n\n// 切换到admin数据库\nuse admin\n\n// 给admin数据库设置用户密码\ndb.createUser({user: '你的用户名', pwd: '你的密码', roles: ['root']})\n\n// 验证是否添加成功\ndb.auth('你的用户名', '你的密码')\n\n// 如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败。\n```\n\n- [宝塔面板使用 MongoDB](https://blog.csdn.net/qq_39314291/article/details/112561177)\n\n## 远程连接服务器的数据库\n\n- 其实就一行代码就可以了\n\n```sh\n// mongodb://你的用户名:你的密码@服务器公网ip:27017/数据库名?authSource=admin\nmongodb://myName:123456@xx.xxx.xxx.xx:27017/myMall?authSource=admin\n```\n\n- 具体使用可以参考文章： [Node 如何通过账号密码连接远程服务器的 MongoDB 数据库？](http://www.qianduan8.com/1794.html)\n\n## 所有的步骤操作完成之后，上传自己写的网站，效果如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211239.7ax4ydiekt.webp)\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211302.4qralqikfz.webp)\n","source":"_posts/技能小册/服务器-运营/宝塔面板.md","raw":"---\ntitle: 服务器/运营-宝塔面板\nabbrlink: 28e84b51\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 服务器/运营\n---\n\n# 介绍\n\n搭建属于自己的网站, 前几天自己动手购买了一台腾讯云轻量级服务器，自己写代码，node 作为服务端去写接口, 简单部署一下网站的搭建到服务器的部署再到数据库的操作。 整体下来感觉还是有点坑，今天正好有时间，记录一下搭建环境时需要注意的， 自己也总结一下搭建的步骤。\n\n## 首先拥有属于自己的域名\n\n这里不做过多的介绍, ,\n\n- [腾讯云](https://dnspod.cloud.tencent.com/)注册域名及使用, 介绍了域名的使用及备案。\n- `DNS` 解析域名\n- 其他的可以再官网或者百度上进行查阅\n\n## 接下来购买属于自己的服务器\n\n- 其实还是很简单的,首先我们先在腾讯云购买属于自己的 `轻量级服务器(较便宜,适合新手)`, 直接登录自己的微信号, 如果找不到, 直接搜索 `轻量级服务器` 就在左上角的云产品里。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112203053.7p3kp8d4ry.webp)\n- 接着, 我们选择镜像， 选择 宝塔镜像就可以了。\n- 安装宝塔，避免了去操作大量操作 Linux， 宝塔自带可视化面板。\n- 其他的根据自己需要去购买配置即可。\n- 服务器创建之后，在应用管理找到登录，根据要求就可以有自己的宝塔面板的登录链接和账号密码了。\n- 登录过后，关联自己的云服务器，根据要求就可以， 这里我略过 (官方有说明文档)\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205120.6f0niwxflg.webp)\n- 点击左侧的网站，部署自己的域名网站，添加站点 是你的购买域名, 下面直接做 DNS 解析就可以了。直接在浏览器输入自己的域名 就可以访问，\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205257.92q3t9rehv.webp)\n- 发现自己的网站是可以打开的， 觉得页面空空如也， 只有默认的页面， 那就只有自己手动去敲代码, 写页面了。\n\n## 需要注意的地方\n\n- 服务器安全组和宝塔面板的端口要暴露出去\n- 就像 `mongodb 27017` 端口暴露, 这样自己本地就可以访问服务器的数据库了， 服务器的数据库 数据只是存在自己的网站上面， 要定时备份数据\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3uut6a0hhv.webp)\n  在这里添加自己的定时任务.\n\n## 部署 node 服务\n\n- 在软件商城下载 `pm2`管理器, 根据自己的需要 去安装 `yarn`, 默认的是`nm`, 我个人喜欢`yarn`， 速度快一些。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/server_bs_5.6m3veco42b.webp)\n- 根据自己的需要去配置一下自己的 node 服务的项目， 这时这个端口号 是你 `node bin/www` 文件里面的 `port`， 同时安全组也要放开端口, 我们在 `web` 项目中可以访问 服务器中的 `api` 接口地址了\n- 接下来就可以启动 `node` 服务了， 可以在你的浏览器访问你的 `node` 接口了\n\n## 部署前端项目\n\n- 在宝塔面板左侧网站中找到自己的网站，可以再网站里面手动添加文件，文件夹等等，通过 url 的方式去访问，同时也可以设置权限。\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210036.13lqy7hdeo.webp)\n- 这里就是我上传的前端页面了， 当然你可以手动打包前端项目， 通过手动上传，也可以使用工具 `xftp7`去上传, 都是可以的， 根据个人喜好去上传。\n\n## 部署 MongoDB 数据库\n\n- 左侧软件商城下载 `mongodb`软件， 下载之后打开设置,\n  ![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210336.175cvxc7oj.png)\n- 接着设置数据库用户密码，保证其安全性\n- 进入目录\n\n```sh\n// 进入目录\ncd /www/server/mongodb/bin\n\n// 切换 mongo环境\nmongo\n\n// 切换到admin数据库\nuse admin\n\n// 给admin数据库设置用户密码\ndb.createUser({user: '你的用户名', pwd: '你的密码', roles: ['root']})\n\n// 验证是否添加成功\ndb.auth('你的用户名', '你的密码')\n\n// 如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败。\n```\n\n- [宝塔面板使用 MongoDB](https://blog.csdn.net/qq_39314291/article/details/112561177)\n\n## 远程连接服务器的数据库\n\n- 其实就一行代码就可以了\n\n```sh\n// mongodb://你的用户名:你的密码@服务器公网ip:27017/数据库名?authSource=admin\nmongodb://myName:123456@xx.xxx.xxx.xx:27017/myMall?authSource=admin\n```\n\n- 具体使用可以参考文章： [Node 如何通过账号密码连接远程服务器的 MongoDB 数据库？](http://www.qianduan8.com/1794.html)\n\n## 所有的步骤操作完成之后，上传自己写的网站，效果如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211239.7ax4ydiekt.webp)\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211302.4qralqikfz.webp)\n","slug":"技能小册/服务器-运营/宝塔面板","published":1,"updated":"2025-03-13T10:16:17.906Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j2004rfg9m8ire5nk3","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>搭建属于自己的网站, 前几天自己动手购买了一台腾讯云轻量级服务器，自己写代码，node 作为服务端去写接口, 简单部署一下网站的搭建到服务器的部署再到数据库的操作。 整体下来感觉还是有点坑，今天正好有时间，记录一下搭建环境时需要注意的， 自己也总结一下搭建的步骤。</p>\n<h2 id=\"首先拥有属于自己的域名\"><a href=\"#首先拥有属于自己的域名\" class=\"headerlink\" title=\"首先拥有属于自己的域名\"></a>首先拥有属于自己的域名</h2><p>这里不做过多的介绍, ,</p>\n<ul>\n<li><a href=\"https://dnspod.cloud.tencent.com/\">腾讯云</a>注册域名及使用, 介绍了域名的使用及备案。</li>\n<li><code>DNS</code> 解析域名</li>\n<li>其他的可以再官网或者百度上进行查阅</li>\n</ul>\n<h2 id=\"接下来购买属于自己的服务器\"><a href=\"#接下来购买属于自己的服务器\" class=\"headerlink\" title=\"接下来购买属于自己的服务器\"></a>接下来购买属于自己的服务器</h2><ul>\n<li>其实还是很简单的,首先我们先在腾讯云购买属于自己的 <code>轻量级服务器(较便宜,适合新手)</code>, 直接登录自己的微信号, 如果找不到, 直接搜索 <code>轻量级服务器</code> 就在左上角的云产品里。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112203053.7p3kp8d4ry.webp\" alt=\"x\"></li>\n<li>接着, 我们选择镜像， 选择 宝塔镜像就可以了。</li>\n<li>安装宝塔，避免了去操作大量操作 Linux， 宝塔自带可视化面板。</li>\n<li>其他的根据自己需要去购买配置即可。</li>\n<li>服务器创建之后，在应用管理找到登录，根据要求就可以有自己的宝塔面板的登录链接和账号密码了。</li>\n<li>登录过后，关联自己的云服务器，根据要求就可以， 这里我略过 (官方有说明文档)<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205120.6f0niwxflg.webp\" alt=\"x\"></li>\n<li>点击左侧的网站，部署自己的域名网站，添加站点 是你的购买域名, 下面直接做 DNS 解析就可以了。直接在浏览器输入自己的域名 就可以访问，<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205257.92q3t9rehv.webp\" alt=\"x\"></li>\n<li>发现自己的网站是可以打开的， 觉得页面空空如也， 只有默认的页面， 那就只有自己手动去敲代码, 写页面了。</li>\n</ul>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><ul>\n<li>服务器安全组和宝塔面板的端口要暴露出去</li>\n<li>就像 <code>mongodb 27017</code> 端口暴露, 这样自己本地就可以访问服务器的数据库了， 服务器的数据库 数据只是存在自己的网站上面， 要定时备份数据<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3uut6a0hhv.webp\" alt=\"x\"><br>在这里添加自己的定时任务.</li>\n</ul>\n<h2 id=\"部署-node-服务\"><a href=\"#部署-node-服务\" class=\"headerlink\" title=\"部署 node 服务\"></a>部署 node 服务</h2><ul>\n<li>在软件商城下载 <code>pm2</code>管理器, 根据自己的需要 去安装 <code>yarn</code>, 默认的是<code>nm</code>, 我个人喜欢<code>yarn</code>， 速度快一些。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/server_bs_5.6m3veco42b.webp\" alt=\"x\"></li>\n<li>根据自己的需要去配置一下自己的 node 服务的项目， 这时这个端口号 是你 <code>node bin/www</code> 文件里面的 <code>port</code>， 同时安全组也要放开端口, 我们在 <code>web</code> 项目中可以访问 服务器中的 <code>api</code> 接口地址了</li>\n<li>接下来就可以启动 <code>node</code> 服务了， 可以在你的浏览器访问你的 <code>node</code> 接口了</li>\n</ul>\n<h2 id=\"部署前端项目\"><a href=\"#部署前端项目\" class=\"headerlink\" title=\"部署前端项目\"></a>部署前端项目</h2><ul>\n<li>在宝塔面板左侧网站中找到自己的网站，可以再网站里面手动添加文件，文件夹等等，通过 url 的方式去访问，同时也可以设置权限。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210036.13lqy7hdeo.webp\" alt=\"x\"></li>\n<li>这里就是我上传的前端页面了， 当然你可以手动打包前端项目， 通过手动上传，也可以使用工具 <code>xftp7</code>去上传, 都是可以的， 根据个人喜好去上传。</li>\n</ul>\n<h2 id=\"部署-MongoDB-数据库\"><a href=\"#部署-MongoDB-数据库\" class=\"headerlink\" title=\"部署 MongoDB 数据库\"></a>部署 MongoDB 数据库</h2><ul>\n<li>左侧软件商城下载 <code>mongodb</code>软件， 下载之后打开设置,<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210336.175cvxc7oj.png\" alt=\"x\"></li>\n<li>接着设置数据库用户密码，保证其安全性</li>\n<li>进入目录</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进入目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /www/server/mongodb/bin</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换 mongo环境</span><br><span class=\"line\">mongo</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换到admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\">// 给admin数据库设置用户密码</span><br><span class=\"line\">db.createUser(&#123;user: <span class=\"string\">&#x27;你的用户名&#x27;</span>, <span class=\"built_in\">pwd</span>: <span class=\"string\">&#x27;你的密码&#x27;</span>, roles: [<span class=\"string\">&#x27;root&#x27;</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证是否添加成功</span><br><span class=\"line\">db.auth(<span class=\"string\">&#x27;你的用户名&#x27;</span>, <span class=\"string\">&#x27;你的密码&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_39314291/article/details/112561177\">宝塔面板使用 MongoDB</a></li>\n</ul>\n<h2 id=\"远程连接服务器的数据库\"><a href=\"#远程连接服务器的数据库\" class=\"headerlink\" title=\"远程连接服务器的数据库\"></a>远程连接服务器的数据库</h2><ul>\n<li>其实就一行代码就可以了</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mongodb://你的用户名:你的密码@服务器公网ip:27017/数据库名?authSource=admin</span><br><span class=\"line\">mongodb://myName:123456@xx.xxx.xxx.xx:27017/myMall?authSource=admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体使用可以参考文章： <a href=\"http://www.qianduan8.com/1794.html\">Node 如何通过账号密码连接远程服务器的 MongoDB 数据库？</a></li>\n</ul>\n<h2 id=\"所有的步骤操作完成之后，上传自己写的网站，效果如下：\"><a href=\"#所有的步骤操作完成之后，上传自己写的网站，效果如下：\" class=\"headerlink\" title=\"所有的步骤操作完成之后，上传自己写的网站，效果如下：\"></a>所有的步骤操作完成之后，上传自己写的网站，效果如下：</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211239.7ax4ydiekt.webp\" alt=\"x\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211302.4qralqikfz.webp\" alt=\"x\"></p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>搭建属于自己的网站, 前几天自己动手购买了一台腾讯云轻量级服务器，自己写代码，node 作为服务端去写接口, 简单部署一下网站的搭建到服务器的部署再到数据库的操作。 整体下来感觉还是有点坑，今天正好有时间，记录一下搭建环境时需要注意的， 自己也总结一下搭建的步骤。</p>\n<h2 id=\"首先拥有属于自己的域名\"><a href=\"#首先拥有属于自己的域名\" class=\"headerlink\" title=\"首先拥有属于自己的域名\"></a>首先拥有属于自己的域名</h2><p>这里不做过多的介绍, ,</p>\n<ul>\n<li><a href=\"https://dnspod.cloud.tencent.com/\">腾讯云</a>注册域名及使用, 介绍了域名的使用及备案。</li>\n<li><code>DNS</code> 解析域名</li>\n<li>其他的可以再官网或者百度上进行查阅</li>\n</ul>\n<h2 id=\"接下来购买属于自己的服务器\"><a href=\"#接下来购买属于自己的服务器\" class=\"headerlink\" title=\"接下来购买属于自己的服务器\"></a>接下来购买属于自己的服务器</h2><ul>\n<li>其实还是很简单的,首先我们先在腾讯云购买属于自己的 <code>轻量级服务器(较便宜,适合新手)</code>, 直接登录自己的微信号, 如果找不到, 直接搜索 <code>轻量级服务器</code> 就在左上角的云产品里。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112203053.7p3kp8d4ry.webp\" alt=\"x\"></li>\n<li>接着, 我们选择镜像， 选择 宝塔镜像就可以了。</li>\n<li>安装宝塔，避免了去操作大量操作 Linux， 宝塔自带可视化面板。</li>\n<li>其他的根据自己需要去购买配置即可。</li>\n<li>服务器创建之后，在应用管理找到登录，根据要求就可以有自己的宝塔面板的登录链接和账号密码了。</li>\n<li>登录过后，关联自己的云服务器，根据要求就可以， 这里我略过 (官方有说明文档)<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205120.6f0niwxflg.webp\" alt=\"x\"></li>\n<li>点击左侧的网站，部署自己的域名网站，添加站点 是你的购买域名, 下面直接做 DNS 解析就可以了。直接在浏览器输入自己的域名 就可以访问，<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112205257.92q3t9rehv.webp\" alt=\"x\"></li>\n<li>发现自己的网站是可以打开的， 觉得页面空空如也， 只有默认的页面， 那就只有自己手动去敲代码, 写页面了。</li>\n</ul>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><ul>\n<li>服务器安全组和宝塔面板的端口要暴露出去</li>\n<li>就像 <code>mongodb 27017</code> 端口暴露, 这样自己本地就可以访问服务器的数据库了， 服务器的数据库 数据只是存在自己的网站上面， 要定时备份数据<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3uut6a0hhv.webp\" alt=\"x\"><br>在这里添加自己的定时任务.</li>\n</ul>\n<h2 id=\"部署-node-服务\"><a href=\"#部署-node-服务\" class=\"headerlink\" title=\"部署 node 服务\"></a>部署 node 服务</h2><ul>\n<li>在软件商城下载 <code>pm2</code>管理器, 根据自己的需要 去安装 <code>yarn</code>, 默认的是<code>nm</code>, 我个人喜欢<code>yarn</code>， 速度快一些。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/server_bs_5.6m3veco42b.webp\" alt=\"x\"></li>\n<li>根据自己的需要去配置一下自己的 node 服务的项目， 这时这个端口号 是你 <code>node bin/www</code> 文件里面的 <code>port</code>， 同时安全组也要放开端口, 我们在 <code>web</code> 项目中可以访问 服务器中的 <code>api</code> 接口地址了</li>\n<li>接下来就可以启动 <code>node</code> 服务了， 可以在你的浏览器访问你的 <code>node</code> 接口了</li>\n</ul>\n<h2 id=\"部署前端项目\"><a href=\"#部署前端项目\" class=\"headerlink\" title=\"部署前端项目\"></a>部署前端项目</h2><ul>\n<li>在宝塔面板左侧网站中找到自己的网站，可以再网站里面手动添加文件，文件夹等等，通过 url 的方式去访问，同时也可以设置权限。<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210036.13lqy7hdeo.webp\" alt=\"x\"></li>\n<li>这里就是我上传的前端页面了， 当然你可以手动打包前端项目， 通过手动上传，也可以使用工具 <code>xftp7</code>去上传, 都是可以的， 根据个人喜好去上传。</li>\n</ul>\n<h2 id=\"部署-MongoDB-数据库\"><a href=\"#部署-MongoDB-数据库\" class=\"headerlink\" title=\"部署 MongoDB 数据库\"></a>部署 MongoDB 数据库</h2><ul>\n<li>左侧软件商城下载 <code>mongodb</code>软件， 下载之后打开设置,<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112210336.175cvxc7oj.png\" alt=\"x\"></li>\n<li>接着设置数据库用户密码，保证其安全性</li>\n<li>进入目录</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进入目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /www/server/mongodb/bin</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换 mongo环境</span><br><span class=\"line\">mongo</span><br><span class=\"line\"></span><br><span class=\"line\">// 切换到admin数据库</span><br><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\">// 给admin数据库设置用户密码</span><br><span class=\"line\">db.createUser(&#123;user: <span class=\"string\">&#x27;你的用户名&#x27;</span>, <span class=\"built_in\">pwd</span>: <span class=\"string\">&#x27;你的密码&#x27;</span>, roles: [<span class=\"string\">&#x27;root&#x27;</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证是否添加成功</span><br><span class=\"line\">db.auth(<span class=\"string\">&#x27;你的用户名&#x27;</span>, <span class=\"string\">&#x27;你的密码&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果返回 ‘1’表示验证成功， 如果是 ‘0’ 表示验证失败。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_39314291/article/details/112561177\">宝塔面板使用 MongoDB</a></li>\n</ul>\n<h2 id=\"远程连接服务器的数据库\"><a href=\"#远程连接服务器的数据库\" class=\"headerlink\" title=\"远程连接服务器的数据库\"></a>远程连接服务器的数据库</h2><ul>\n<li>其实就一行代码就可以了</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mongodb://你的用户名:你的密码@服务器公网ip:27017/数据库名?authSource=admin</span><br><span class=\"line\">mongodb://myName:123456@xx.xxx.xxx.xx:27017/myMall?authSource=admin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体使用可以参考文章： <a href=\"http://www.qianduan8.com/1794.html\">Node 如何通过账号密码连接远程服务器的 MongoDB 数据库？</a></li>\n</ul>\n<h2 id=\"所有的步骤操作完成之后，上传自己写的网站，效果如下：\"><a href=\"#所有的步骤操作完成之后，上传自己写的网站，效果如下：\" class=\"headerlink\" title=\"所有的步骤操作完成之后，上传自己写的网站，效果如下：\"></a>所有的步骤操作完成之后，上传自己写的网站，效果如下：</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211239.7ax4ydiekt.webp\" alt=\"x\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112211302.4qralqikfz.webp\" alt=\"x\"></p>\n"},{"title":"服务器/运营-私库","abbrlink":"f5648ec6","date":"2024-07-08T01:05:01.000Z","_content":"\n# 介绍\n\n近期在`review`代码的时候发现了一些关于项目的问题，项目中冗余的代码比较多，有很多都是辅助粘贴的，\n一些`utils`工具以及一些方法都是多余的，这样不是一个俩个项目是这样的，基本大部分项目都是这样的；\n\n对于企业级的项目，没有任何关于企业的一些工具，这样我想到一种可能：就是将一些工具统一封装成公司内部\n专用的组件或者工具，因为公司内部都是内网开发的，不适用于将`npm`包上传到`npm`上，那么我了解到一个`nexus3`\n刚好可以部署私有化的工具；\n\n## 使用\n\n首先还是用到之前`1Panel`部署的服务，同样在`应用商店`下载`nexus`;\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2obja6y7m7.webp)\n\n然后等待安装，安装完成过之后就可以打开了，打开之后点击右上角的登录，第一次登录密码有存放的目录，找到输入然后需要\n重置密码；\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3d4su7rvhz.webp)\n\n### 创建 blob 存储\n\n这里需要说明一下：\n\n- `hosted`: 本地存储，像官方一样提供本地私库功能\n- `proxy`：提供代理其他仓库的类型，如 docker 中央仓\n- `group`：组类型，实质作用是组合多个仓库为一个地址\n\n接着，为其创建一个单独的存储空间：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6wi4ad2.webp)\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a53jc3z6u.webp)\n\n### 创建 hosted 类型的 npm\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5xan6v0od1.webp)\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8m721a.webp)\n\n- `Name`: 定义一个名称\n- `Storage`：我们下拉选择前面创建好的专用 。\n- `Hosted`：开发环境，我们运行重复发布，因此 Delpoyment policy 我们选择 Allow redeploy。这个很重要！\n\n### 创建一个 proxy 类型的 npm 仓库\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ojpextl98.webp)\n\n### 创建一个 group 类型的 npm 仓库。\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.70achr5tdh.webp)\n\n这些配置完成之后，就可以使用了。\n\n那就在自己电脑上测试一下：\n\n## 测试使用\n\n创建一个目录`demo-npm`的空白项目，然后在终端输出`npm config get registry`看一下自己电脑的源地址:\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2krxchyss8.webp)\n\n接着我们需要在这个项目配置私有源\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3nrmndxyn3.webp)\n\n```bash\nnpm config set registry http://154.37.212.237:8081/repository/npm-store-group/\n```\n\n设置成功之后，如图\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74mbt6ir.webp)\n是没有任何的依赖的，我们需要在`demo-npm`执行一下`pnpm init  pnpm add express`, 执行完成之后就可以看见\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8mszat.webp)\n\n这样的话我们就会把一些依赖上传到`nexus`,后面就直接使用私库进行`install`,这样在内网上线进行`install`就会快很多；\n\n当然对于不同项目的版本都是不一致的，那么它有一个好处就是不会覆盖之前的版本，而是在原来的基础上在新增一个版本；这里拿`vue`举例，如图：\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.13lsarggrr.webp)\n\n## 私库开发插件\n\n就好如你开发属于公司的插件那么就需要上传到私库，首先你需要设置对应的源地址，不过这里只能设置`hosted`如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6f0ovh6a1n.webp)\n\n在项目中设置源地址\n\n```bash\nnpm config set registry http://154.37.212.237:8081/repository/npm-store-local/\n```\n\n设置完成之后，需要设置一个角色：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e6dccyb.webp)\n\n设置完成之后，需要创建一个插件的用户：\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8vmxaepudl.webp)\n\n<p style=\"color: #ff0000\">注意：可能会出现没有权限的情况：BASIC realm=\"Sonatype Nexus Repository Manager\", 如果出现以下情况，需要设置如图</p>\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.60u97nud0p.webp)\n\n完成之后在需要上传插件的项目执行\n\n```bash\nnpm login\n```\n\n输入刚刚创建的用户以及密码：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4jo42vasbt.webp)\n\n登录成功之后，再次执行\n\n```bash\nnpm publish\n```\n\n回车之后发现一个错误，\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7q0l6hnj.webp)\n\n这个错误的意思是：`package.json`中不能设置`\"private\": true`;然后删除之后重新执行`npm publish`\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap067wp4u.webp)\n\n看，发布成功了，接着看下私库里有没有\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4xujtqt583.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ad9o4asbw.webp)\n\n嘿嘿，这样就成功了，接着在`demo-npm`项目中安装这个插件\n\n运行`npm config get registry` 如果返回的是`local`， 那么就需要设置`groUp`\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8s3bcpkjog.webp)\n","source":"_posts/技能小册/服务器-运营/私库.md","raw":"---\ntitle: 服务器/运营-私库\nabbrlink: f5648ec6\ndate: 2024-07-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 服务器/运营\n---\n\n# 介绍\n\n近期在`review`代码的时候发现了一些关于项目的问题，项目中冗余的代码比较多，有很多都是辅助粘贴的，\n一些`utils`工具以及一些方法都是多余的，这样不是一个俩个项目是这样的，基本大部分项目都是这样的；\n\n对于企业级的项目，没有任何关于企业的一些工具，这样我想到一种可能：就是将一些工具统一封装成公司内部\n专用的组件或者工具，因为公司内部都是内网开发的，不适用于将`npm`包上传到`npm`上，那么我了解到一个`nexus3`\n刚好可以部署私有化的工具；\n\n## 使用\n\n首先还是用到之前`1Panel`部署的服务，同样在`应用商店`下载`nexus`;\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2obja6y7m7.webp)\n\n然后等待安装，安装完成过之后就可以打开了，打开之后点击右上角的登录，第一次登录密码有存放的目录，找到输入然后需要\n重置密码；\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3d4su7rvhz.webp)\n\n### 创建 blob 存储\n\n这里需要说明一下：\n\n- `hosted`: 本地存储，像官方一样提供本地私库功能\n- `proxy`：提供代理其他仓库的类型，如 docker 中央仓\n- `group`：组类型，实质作用是组合多个仓库为一个地址\n\n接着，为其创建一个单独的存储空间：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6wi4ad2.webp)\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a53jc3z6u.webp)\n\n### 创建 hosted 类型的 npm\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5xan6v0od1.webp)\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8m721a.webp)\n\n- `Name`: 定义一个名称\n- `Storage`：我们下拉选择前面创建好的专用 。\n- `Hosted`：开发环境，我们运行重复发布，因此 Delpoyment policy 我们选择 Allow redeploy。这个很重要！\n\n### 创建一个 proxy 类型的 npm 仓库\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ojpextl98.webp)\n\n### 创建一个 group 类型的 npm 仓库。\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.70achr5tdh.webp)\n\n这些配置完成之后，就可以使用了。\n\n那就在自己电脑上测试一下：\n\n## 测试使用\n\n创建一个目录`demo-npm`的空白项目，然后在终端输出`npm config get registry`看一下自己电脑的源地址:\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2krxchyss8.webp)\n\n接着我们需要在这个项目配置私有源\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3nrmndxyn3.webp)\n\n```bash\nnpm config set registry http://154.37.212.237:8081/repository/npm-store-group/\n```\n\n设置成功之后，如图\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74mbt6ir.webp)\n是没有任何的依赖的，我们需要在`demo-npm`执行一下`pnpm init  pnpm add express`, 执行完成之后就可以看见\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8mszat.webp)\n\n这样的话我们就会把一些依赖上传到`nexus`,后面就直接使用私库进行`install`,这样在内网上线进行`install`就会快很多；\n\n当然对于不同项目的版本都是不一致的，那么它有一个好处就是不会覆盖之前的版本，而是在原来的基础上在新增一个版本；这里拿`vue`举例，如图：\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.13lsarggrr.webp)\n\n## 私库开发插件\n\n就好如你开发属于公司的插件那么就需要上传到私库，首先你需要设置对应的源地址，不过这里只能设置`hosted`如图：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6f0ovh6a1n.webp)\n\n在项目中设置源地址\n\n```bash\nnpm config set registry http://154.37.212.237:8081/repository/npm-store-local/\n```\n\n设置完成之后，需要设置一个角色：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e6dccyb.webp)\n\n设置完成之后，需要创建一个插件的用户：\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8vmxaepudl.webp)\n\n<p style=\"color: #ff0000\">注意：可能会出现没有权限的情况：BASIC realm=\"Sonatype Nexus Repository Manager\", 如果出现以下情况，需要设置如图</p>\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.60u97nud0p.webp)\n\n完成之后在需要上传插件的项目执行\n\n```bash\nnpm login\n```\n\n输入刚刚创建的用户以及密码：\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4jo42vasbt.webp)\n\n登录成功之后，再次执行\n\n```bash\nnpm publish\n```\n\n回车之后发现一个错误，\n\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7q0l6hnj.webp)\n\n这个错误的意思是：`package.json`中不能设置`\"private\": true`;然后删除之后重新执行`npm publish`\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap067wp4u.webp)\n\n看，发布成功了，接着看下私库里有没有\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4xujtqt583.webp)\n![X](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ad9o4asbw.webp)\n\n嘿嘿，这样就成功了，接着在`demo-npm`项目中安装这个插件\n\n运行`npm config get registry` 如果返回的是`local`， 那么就需要设置`groUp`\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8s3bcpkjog.webp)\n","slug":"技能小册/服务器-运营/私库","published":1,"updated":"2025-03-13T10:16:18.300Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j2004ufg9mho0u47si","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>近期在<code>review</code>代码的时候发现了一些关于项目的问题，项目中冗余的代码比较多，有很多都是辅助粘贴的，<br>一些<code>utils</code>工具以及一些方法都是多余的，这样不是一个俩个项目是这样的，基本大部分项目都是这样的；</p>\n<p>对于企业级的项目，没有任何关于企业的一些工具，这样我想到一种可能：就是将一些工具统一封装成公司内部<br>专用的组件或者工具，因为公司内部都是内网开发的，不适用于将<code>npm</code>包上传到<code>npm</code>上，那么我了解到一个<code>nexus3</code><br>刚好可以部署私有化的工具；</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先还是用到之前<code>1Panel</code>部署的服务，同样在<code>应用商店</code>下载<code>nexus</code>;</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2obja6y7m7.webp\" alt=\"X\"></p>\n<p>然后等待安装，安装完成过之后就可以打开了，打开之后点击右上角的登录，第一次登录密码有存放的目录，找到输入然后需要<br>重置密码；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3d4su7rvhz.webp\" alt=\"X\"></p>\n<h3 id=\"创建-blob-存储\"><a href=\"#创建-blob-存储\" class=\"headerlink\" title=\"创建 blob 存储\"></a>创建 blob 存储</h3><p>这里需要说明一下：</p>\n<ul>\n<li><code>hosted</code>: 本地存储，像官方一样提供本地私库功能</li>\n<li><code>proxy</code>：提供代理其他仓库的类型，如 docker 中央仓</li>\n<li><code>group</code>：组类型，实质作用是组合多个仓库为一个地址</li>\n</ul>\n<p>接着，为其创建一个单独的存储空间：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6wi4ad2.webp\" alt=\"x\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a53jc3z6u.webp\" alt=\"x\"></p>\n<h3 id=\"创建-hosted-类型的-npm\"><a href=\"#创建-hosted-类型的-npm\" class=\"headerlink\" title=\"创建 hosted 类型的 npm\"></a>创建 hosted 类型的 npm</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5xan6v0od1.webp\" alt=\"x\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8m721a.webp\" alt=\"x\"></p>\n<ul>\n<li><code>Name</code>: 定义一个名称</li>\n<li><code>Storage</code>：我们下拉选择前面创建好的专用 。</li>\n<li><code>Hosted</code>：开发环境，我们运行重复发布，因此 Delpoyment policy 我们选择 Allow redeploy。这个很重要！</li>\n</ul>\n<h3 id=\"创建一个-proxy-类型的-npm-仓库\"><a href=\"#创建一个-proxy-类型的-npm-仓库\" class=\"headerlink\" title=\"创建一个 proxy 类型的 npm 仓库\"></a>创建一个 proxy 类型的 npm 仓库</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ojpextl98.webp\" alt=\"X\"></p>\n<h3 id=\"创建一个-group-类型的-npm-仓库。\"><a href=\"#创建一个-group-类型的-npm-仓库。\" class=\"headerlink\" title=\"创建一个 group 类型的 npm 仓库。\"></a>创建一个 group 类型的 npm 仓库。</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.70achr5tdh.webp\" alt=\"X\"></p>\n<p>这些配置完成之后，就可以使用了。</p>\n<p>那就在自己电脑上测试一下：</p>\n<h2 id=\"测试使用\"><a href=\"#测试使用\" class=\"headerlink\" title=\"测试使用\"></a>测试使用</h2><p>创建一个目录<code>demo-npm</code>的空白项目，然后在终端输出<code>npm config get registry</code>看一下自己电脑的源地址:<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2krxchyss8.webp\" alt=\"x\"></p>\n<p>接着我们需要在这个项目配置私有源<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3nrmndxyn3.webp\" alt=\"x\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://154.37.212.237:8081/repository/npm-store-group/</span><br></pre></td></tr></table></figure>\n\n<p>设置成功之后，如图<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74mbt6ir.webp\" alt=\"X\"><br>是没有任何的依赖的，我们需要在<code>demo-npm</code>执行一下<code>pnpm init  pnpm add express</code>, 执行完成之后就可以看见</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8mszat.webp\" alt=\"X\"></p>\n<p>这样的话我们就会把一些依赖上传到<code>nexus</code>,后面就直接使用私库进行<code>install</code>,这样在内网上线进行<code>install</code>就会快很多；</p>\n<p>当然对于不同项目的版本都是不一致的，那么它有一个好处就是不会覆盖之前的版本，而是在原来的基础上在新增一个版本；这里拿<code>vue</code>举例，如图：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.13lsarggrr.webp\" alt=\"X\"></p>\n<h2 id=\"私库开发插件\"><a href=\"#私库开发插件\" class=\"headerlink\" title=\"私库开发插件\"></a>私库开发插件</h2><p>就好如你开发属于公司的插件那么就需要上传到私库，首先你需要设置对应的源地址，不过这里只能设置<code>hosted</code>如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6f0ovh6a1n.webp\" alt=\"X\"></p>\n<p>在项目中设置源地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://154.37.212.237:8081/repository/npm-store-local/</span><br></pre></td></tr></table></figure>\n\n<p>设置完成之后，需要设置一个角色：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e6dccyb.webp\" alt=\"X\"></p>\n<p>设置完成之后，需要创建一个插件的用户：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8vmxaepudl.webp\" alt=\"X\"></p>\n<p style=\"color: #ff0000\">注意：可能会出现没有权限的情况：BASIC realm=\"Sonatype Nexus Repository Manager\", 如果出现以下情况，需要设置如图</p>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.60u97nud0p.webp\" alt=\"x\"></p>\n<p>完成之后在需要上传插件的项目执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<p>输入刚刚创建的用户以及密码：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4jo42vasbt.webp\" alt=\"X\"></p>\n<p>登录成功之后，再次执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>回车之后发现一个错误，</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7q0l6hnj.webp\" alt=\"X\"></p>\n<p>这个错误的意思是：<code>package.json</code>中不能设置<code>&quot;private&quot;: true</code>;然后删除之后重新执行<code>npm publish</code></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap067wp4u.webp\" alt=\"x\"></p>\n<p>看，发布成功了，接着看下私库里有没有<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4xujtqt583.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ad9o4asbw.webp\" alt=\"X\"></p>\n<p>嘿嘿，这样就成功了，接着在<code>demo-npm</code>项目中安装这个插件</p>\n<p>运行<code>npm config get registry</code> 如果返回的是<code>local</code>， 那么就需要设置<code>groUp</code></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8s3bcpkjog.webp\" alt=\"x\"></p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>近期在<code>review</code>代码的时候发现了一些关于项目的问题，项目中冗余的代码比较多，有很多都是辅助粘贴的，<br>一些<code>utils</code>工具以及一些方法都是多余的，这样不是一个俩个项目是这样的，基本大部分项目都是这样的；</p>\n<p>对于企业级的项目，没有任何关于企业的一些工具，这样我想到一种可能：就是将一些工具统一封装成公司内部<br>专用的组件或者工具，因为公司内部都是内网开发的，不适用于将<code>npm</code>包上传到<code>npm</code>上，那么我了解到一个<code>nexus3</code><br>刚好可以部署私有化的工具；</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>首先还是用到之前<code>1Panel</code>部署的服务，同样在<code>应用商店</code>下载<code>nexus</code>;</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2obja6y7m7.webp\" alt=\"X\"></p>\n<p>然后等待安装，安装完成过之后就可以打开了，打开之后点击右上角的登录，第一次登录密码有存放的目录，找到输入然后需要<br>重置密码；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3d4su7rvhz.webp\" alt=\"X\"></p>\n<h3 id=\"创建-blob-存储\"><a href=\"#创建-blob-存储\" class=\"headerlink\" title=\"创建 blob 存储\"></a>创建 blob 存储</h3><p>这里需要说明一下：</p>\n<ul>\n<li><code>hosted</code>: 本地存储，像官方一样提供本地私库功能</li>\n<li><code>proxy</code>：提供代理其他仓库的类型，如 docker 中央仓</li>\n<li><code>group</code>：组类型，实质作用是组合多个仓库为一个地址</li>\n</ul>\n<p>接着，为其创建一个单独的存储空间：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.39l6wi4ad2.webp\" alt=\"x\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2a53jc3z6u.webp\" alt=\"x\"></p>\n<h3 id=\"创建-hosted-类型的-npm\"><a href=\"#创建-hosted-类型的-npm\" class=\"headerlink\" title=\"创建 hosted 类型的 npm\"></a>创建 hosted 类型的 npm</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.5xan6v0od1.webp\" alt=\"x\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8m721a.webp\" alt=\"x\"></p>\n<ul>\n<li><code>Name</code>: 定义一个名称</li>\n<li><code>Storage</code>：我们下拉选择前面创建好的专用 。</li>\n<li><code>Hosted</code>：开发环境，我们运行重复发布，因此 Delpoyment policy 我们选择 Allow redeploy。这个很重要！</li>\n</ul>\n<h3 id=\"创建一个-proxy-类型的-npm-仓库\"><a href=\"#创建一个-proxy-类型的-npm-仓库\" class=\"headerlink\" title=\"创建一个 proxy 类型的 npm 仓库\"></a>创建一个 proxy 类型的 npm 仓库</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ojpextl98.webp\" alt=\"X\"></p>\n<h3 id=\"创建一个-group-类型的-npm-仓库。\"><a href=\"#创建一个-group-类型的-npm-仓库。\" class=\"headerlink\" title=\"创建一个 group 类型的 npm 仓库。\"></a>创建一个 group 类型的 npm 仓库。</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.70achr5tdh.webp\" alt=\"X\"></p>\n<p>这些配置完成之后，就可以使用了。</p>\n<p>那就在自己电脑上测试一下：</p>\n<h2 id=\"测试使用\"><a href=\"#测试使用\" class=\"headerlink\" title=\"测试使用\"></a>测试使用</h2><p>创建一个目录<code>demo-npm</code>的空白项目，然后在终端输出<code>npm config get registry</code>看一下自己电脑的源地址:<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.2krxchyss8.webp\" alt=\"x\"></p>\n<p>接着我们需要在这个项目配置私有源<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.3nrmndxyn3.webp\" alt=\"x\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://154.37.212.237:8081/repository/npm-store-group/</span><br></pre></td></tr></table></figure>\n\n<p>设置成功之后，如图<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6t74mbt6ir.webp\" alt=\"X\"><br>是没有任何的依赖的，我们需要在<code>demo-npm</code>执行一下<code>pnpm init  pnpm add express</code>, 执行完成之后就可以看见</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egs8mszat.webp\" alt=\"X\"></p>\n<p>这样的话我们就会把一些依赖上传到<code>nexus</code>,后面就直接使用私库进行<code>install</code>,这样在内网上线进行<code>install</code>就会快很多；</p>\n<p>当然对于不同项目的版本都是不一致的，那么它有一个好处就是不会覆盖之前的版本，而是在原来的基础上在新增一个版本；这里拿<code>vue</code>举例，如图：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.13lsarggrr.webp\" alt=\"X\"></p>\n<h2 id=\"私库开发插件\"><a href=\"#私库开发插件\" class=\"headerlink\" title=\"私库开发插件\"></a>私库开发插件</h2><p>就好如你开发属于公司的插件那么就需要上传到私库，首先你需要设置对应的源地址，不过这里只能设置<code>hosted</code>如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.6f0ovh6a1n.webp\" alt=\"X\"></p>\n<p>在项目中设置源地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://154.37.212.237:8081/repository/npm-store-local/</span><br></pre></td></tr></table></figure>\n\n<p>设置完成之后，需要设置一个角色：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7i0e6dccyb.webp\" alt=\"X\"></p>\n<p>设置完成之后，需要创建一个插件的用户：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8vmxaepudl.webp\" alt=\"X\"></p>\n<p style=\"color: #ff0000\">注意：可能会出现没有权限的情况：BASIC realm=\"Sonatype Nexus Repository Manager\", 如果出现以下情况，需要设置如图</p>\n\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.60u97nud0p.webp\" alt=\"x\"></p>\n<p>完成之后在需要上传插件的项目执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n<p>输入刚刚创建的用户以及密码：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4jo42vasbt.webp\" alt=\"X\"></p>\n<p>登录成功之后，再次执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>回车之后发现一个错误，</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4n7q0l6hnj.webp\" alt=\"X\"></p>\n<p>这个错误的意思是：<code>package.json</code>中不能设置<code>&quot;private&quot;: true</code>;然后删除之后重新执行<code>npm publish</code></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.1ap067wp4u.webp\" alt=\"x\"></p>\n<p>看，发布成功了，接着看下私库里有没有<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.4xujtqt583.webp\" alt=\"X\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8ad9o4asbw.webp\" alt=\"X\"></p>\n<p>嘿嘿，这样就成功了，接着在<code>demo-npm</code>项目中安装这个插件</p>\n<p>运行<code>npm config get registry</code> 如果返回的是<code>local</code>， 那么就需要设置<code>groUp</code></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8s3bcpkjog.webp\" alt=\"x\"></p>\n"},{"title":"生活-“舍，得，放” 下之 “放”","abbrlink":"f7f421d9","date":"2023-10-08T01:05:01.000Z","_content":"\n# 序\n\n**人生在世，我们更应该懂得，适当的放弃，才能得到，一味的强求，反而会适得其反。 佛说：舍，就是得；不舍，哪有得。 放下，便得自在。 人生在世，更应该懂得适当的放下，才会轻松，放下心中的枷锁，让自己的心灵自由。**\n\n## 前言\n\n前段时间老 w 就和我说了一件隐藏在他内心的一件事，**舍，得，放下**该怎么做才能放下心中枷锁，才能轻松自在；我迟疑了一会儿没有回复他，因为我也不知道该怎么回复他；因为每个人心中也许都有那么一件放不下，舍不得的事情吧；\n\n老 w 和我说，他常常就在想，**“舍得”** 该如何做才能算是真正的有舍有得，舍与得对他来讲貌似就是平衡称，只要另一方发生篇量差，那么平衡称就不再平衡；而 **“放下”** 就是一个积压多年的石头，按理说经过风吹日晒石头会慢慢风化，直至消化掉最后的一块菱角成为漂浮在风中的一粒尘埃，这么多年了这块石头分量经过多年的磨练不减反增；\n\n今年 5 月份的劳动节，和他去了一趟灵隐寺，灵隐寺也是我多年以来想去的地方之一，不为别的心中有因，也许这一次苏杭之游可解心中之因，化解心中所想；当然我心中也有放不下的事情，但多数原因是因为灵隐寺在我心中的神秘感；\n\n也不知道为什么，灵隐寺在我心中也许有一种比较神秘的色彩，也许是当初的电视为了增添了对灵隐寺的好奇；心中总认为心中有因在灵隐寺也许有想，有悟；就好比入口的禅牌：**舍得，放在**；我感觉这次是来对了地方，也许这次真的可以帮助老 w；我知道心中有因最后还的靠自己；\n\n## 因\n\n老 w 的因，也就是他心中，**“放下”**的事情，话说还的追溯到中学年代，那段在校学习时期他也算一个调皮捣蛋之人，对于学习书本知识那是挑剔的很，只要是书本知识就好像雷达似的自动躲避，对他好奇的东西学的那是一个滋味；\n\n说到什么对他好奇，那就是计算机，那段时代互联网兴起，计算机也是进入挨家挨户，但是对他家境一般的情况，他家里不会买计算机同时这样也会影响学业，因此便话费零花钱去了网吧，不过我也很佩服他，别人玩计算机就是打游戏，他可真是一个奇葩，研究一些稀奇古怪的东西，那段时间手机软件兴起一款病毒，只要是安装手机授权之后，手机便自动上锁，需要输入设定的密码才能解锁卸载病毒；\n\n因为偶然在社区看到这么一个网友问，说是下载了一个软件中了病毒，需要输入密码，但是密码是需要花钱向被人索要的，到现在为止这应该属于诈骗了吧；老 w 当时看了这个帖子，就来了好奇心，究竟是什么能让手机上锁，貌似对他来说是很好玩的；\n\n他研究了一段时间，大概算是明白了，是一款制作软件的开发语言，而授权需要输入的密码为`pin`码，就相当于手机授权之后，设定一个密码用于对手机操作的密码；而对于这密码大概也分为几类：其一：设定固定密码，只有反编译看源码之后才能看到，其二：固定算法设定密码，比其一的安全性高一点，单需要花费一点时间研究算法，例如：当前的时间作为密码，一般人不会想到这样的密码，但是这样的密码是不固定的，是根据时间的变化二变化的；\n\n之后，他就在之前的那篇帖子下面评论了该网友，大致说了大致密码的方向，之后他录制了相关的安全如何解密视频同时评论了该网友；后来我再去看该评论的视频的时候，发现已经找不到了；\n\n这也就是后面**放不下**事情的起因；也就是这样的起因让他经历多年还在其中；\n\n因为他貌似已经对计算机上瘾，他并不是每次都会研究稀奇古怪的东西，不久`穿越火线`时代到来，他迷上了枪战游戏；在校期间他可为是走在了同年龄的网络第一人；\n\n不久计算机的出现，有利有弊，双刃剑的弊端就被扩大，网上诈骗，钓鱼网站等肆意兴起；那个时候还不知道这些`代名词`，只是知道那些都是假的；后来对于`手机软件idea`具体是什么软件名称，我也忘了。大致就是一款在手机上写软件的工具；之后又录制了一个视频，大致就是输入手机密码之后，就能从后台获取到了输入的手机密码，这和诈骗，钓鱼网站的异端类似；发布在了网上避免别人上当；更加谨慎一点；\n\n## 果\n\n不久，他接到了家里的电话，说是家里长辈亲人出了意外；当时他还在睡觉，首次打电话他就挂了，直到第三次的时候他接到了，说是赶紧回家；简单几句，没想到之后多年这件事情还在心中放不下；\n\n他父亲的离世，并未给当时中学年代的他造成太大影响，因为年纪还小，稚嫩的很；对于这些事情他并不知道，也不知道到底是怎么了；我当时听到之后心里也是难受了很久；40 多岁的年纪，10 几岁左右的年纪天人相隔；\n晚上守灵他睡在了他父亲身边，单他迷迷糊糊的见到了天花板彩色的灯，知道第二天问家里人说，这些灯老早就坏掉了，不会亮的，他也不清楚当时是做梦还是怎么地；亲戚问他怎么了，他把这件事情隐藏起来了，说是梦见他父亲了，问说什么了，“让我好好学习”；因为他并不好学，也不是属于学习的类型，这样的回答必定不会相信；\n\n知道年龄的增长，慢慢的他也懂得了很多，他因为多种原因抑郁了一段时间，到现在这件事情始终对他来说是一块大石头，永远放不下；随着年纪的增长，石头的重量也就慢慢累积了起来；\n\n直到现在，他只要想到，刷到相关事情，视频之后，心中也越发难受，他表面上也许不会变现，白天表现的开开心心的，晚上似乎就变了一个人似的，也许是网上说的`阳光型抑郁症`;\n\n我之后和他说，“放下”并没有那么简单，也并不是嘴上说说，实则你内心过不去那道坎，就好比电视修仙世界的那道瓶颈，过去了一切也就过去了，能不能跨过去还的靠你自身；你每天都会悔恨，心中有悔，时间一长会影响你的生活，工作等；但是你现在的不是天天想事情，你需要的是适当放松，放下，就好比把闲暇时间交给生活，交给乐趣，也许时间长了，你心中的因慢慢也会淡掉；你现在在上海工作，工作压力大，白天上班，晚上回去你又想东想西，脑袋一天得不到真正的放松，时间一长，身体机能会罢工的；你现在的状态，保证心里的因不会影响你的生活，工作，其他的交给时间，学会放弃，懂得放下，何尝不是另一种获得；\n\n---\n\n“舍，得”会在后期进行更新发布，“生活”归类，仅仅是记录生活，日常等等，并不会作为其他作为。\n\n”舍，得，放下“ 之 ”舍，得“会在下篇文章更新；\n\n续.......\n","source":"_posts/生活日志/生活/“舍，得，放” 下之 “放”.md","raw":"---\ntitle: 生活-“舍，得，放” 下之 “放”\nabbrlink: f7f421d9\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 生活\n---\n\n# 序\n\n**人生在世，我们更应该懂得，适当的放弃，才能得到，一味的强求，反而会适得其反。 佛说：舍，就是得；不舍，哪有得。 放下，便得自在。 人生在世，更应该懂得适当的放下，才会轻松，放下心中的枷锁，让自己的心灵自由。**\n\n## 前言\n\n前段时间老 w 就和我说了一件隐藏在他内心的一件事，**舍，得，放下**该怎么做才能放下心中枷锁，才能轻松自在；我迟疑了一会儿没有回复他，因为我也不知道该怎么回复他；因为每个人心中也许都有那么一件放不下，舍不得的事情吧；\n\n老 w 和我说，他常常就在想，**“舍得”** 该如何做才能算是真正的有舍有得，舍与得对他来讲貌似就是平衡称，只要另一方发生篇量差，那么平衡称就不再平衡；而 **“放下”** 就是一个积压多年的石头，按理说经过风吹日晒石头会慢慢风化，直至消化掉最后的一块菱角成为漂浮在风中的一粒尘埃，这么多年了这块石头分量经过多年的磨练不减反增；\n\n今年 5 月份的劳动节，和他去了一趟灵隐寺，灵隐寺也是我多年以来想去的地方之一，不为别的心中有因，也许这一次苏杭之游可解心中之因，化解心中所想；当然我心中也有放不下的事情，但多数原因是因为灵隐寺在我心中的神秘感；\n\n也不知道为什么，灵隐寺在我心中也许有一种比较神秘的色彩，也许是当初的电视为了增添了对灵隐寺的好奇；心中总认为心中有因在灵隐寺也许有想，有悟；就好比入口的禅牌：**舍得，放在**；我感觉这次是来对了地方，也许这次真的可以帮助老 w；我知道心中有因最后还的靠自己；\n\n## 因\n\n老 w 的因，也就是他心中，**“放下”**的事情，话说还的追溯到中学年代，那段在校学习时期他也算一个调皮捣蛋之人，对于学习书本知识那是挑剔的很，只要是书本知识就好像雷达似的自动躲避，对他好奇的东西学的那是一个滋味；\n\n说到什么对他好奇，那就是计算机，那段时代互联网兴起，计算机也是进入挨家挨户，但是对他家境一般的情况，他家里不会买计算机同时这样也会影响学业，因此便话费零花钱去了网吧，不过我也很佩服他，别人玩计算机就是打游戏，他可真是一个奇葩，研究一些稀奇古怪的东西，那段时间手机软件兴起一款病毒，只要是安装手机授权之后，手机便自动上锁，需要输入设定的密码才能解锁卸载病毒；\n\n因为偶然在社区看到这么一个网友问，说是下载了一个软件中了病毒，需要输入密码，但是密码是需要花钱向被人索要的，到现在为止这应该属于诈骗了吧；老 w 当时看了这个帖子，就来了好奇心，究竟是什么能让手机上锁，貌似对他来说是很好玩的；\n\n他研究了一段时间，大概算是明白了，是一款制作软件的开发语言，而授权需要输入的密码为`pin`码，就相当于手机授权之后，设定一个密码用于对手机操作的密码；而对于这密码大概也分为几类：其一：设定固定密码，只有反编译看源码之后才能看到，其二：固定算法设定密码，比其一的安全性高一点，单需要花费一点时间研究算法，例如：当前的时间作为密码，一般人不会想到这样的密码，但是这样的密码是不固定的，是根据时间的变化二变化的；\n\n之后，他就在之前的那篇帖子下面评论了该网友，大致说了大致密码的方向，之后他录制了相关的安全如何解密视频同时评论了该网友；后来我再去看该评论的视频的时候，发现已经找不到了；\n\n这也就是后面**放不下**事情的起因；也就是这样的起因让他经历多年还在其中；\n\n因为他貌似已经对计算机上瘾，他并不是每次都会研究稀奇古怪的东西，不久`穿越火线`时代到来，他迷上了枪战游戏；在校期间他可为是走在了同年龄的网络第一人；\n\n不久计算机的出现，有利有弊，双刃剑的弊端就被扩大，网上诈骗，钓鱼网站等肆意兴起；那个时候还不知道这些`代名词`，只是知道那些都是假的；后来对于`手机软件idea`具体是什么软件名称，我也忘了。大致就是一款在手机上写软件的工具；之后又录制了一个视频，大致就是输入手机密码之后，就能从后台获取到了输入的手机密码，这和诈骗，钓鱼网站的异端类似；发布在了网上避免别人上当；更加谨慎一点；\n\n## 果\n\n不久，他接到了家里的电话，说是家里长辈亲人出了意外；当时他还在睡觉，首次打电话他就挂了，直到第三次的时候他接到了，说是赶紧回家；简单几句，没想到之后多年这件事情还在心中放不下；\n\n他父亲的离世，并未给当时中学年代的他造成太大影响，因为年纪还小，稚嫩的很；对于这些事情他并不知道，也不知道到底是怎么了；我当时听到之后心里也是难受了很久；40 多岁的年纪，10 几岁左右的年纪天人相隔；\n晚上守灵他睡在了他父亲身边，单他迷迷糊糊的见到了天花板彩色的灯，知道第二天问家里人说，这些灯老早就坏掉了，不会亮的，他也不清楚当时是做梦还是怎么地；亲戚问他怎么了，他把这件事情隐藏起来了，说是梦见他父亲了，问说什么了，“让我好好学习”；因为他并不好学，也不是属于学习的类型，这样的回答必定不会相信；\n\n知道年龄的增长，慢慢的他也懂得了很多，他因为多种原因抑郁了一段时间，到现在这件事情始终对他来说是一块大石头，永远放不下；随着年纪的增长，石头的重量也就慢慢累积了起来；\n\n直到现在，他只要想到，刷到相关事情，视频之后，心中也越发难受，他表面上也许不会变现，白天表现的开开心心的，晚上似乎就变了一个人似的，也许是网上说的`阳光型抑郁症`;\n\n我之后和他说，“放下”并没有那么简单，也并不是嘴上说说，实则你内心过不去那道坎，就好比电视修仙世界的那道瓶颈，过去了一切也就过去了，能不能跨过去还的靠你自身；你每天都会悔恨，心中有悔，时间一长会影响你的生活，工作等；但是你现在的不是天天想事情，你需要的是适当放松，放下，就好比把闲暇时间交给生活，交给乐趣，也许时间长了，你心中的因慢慢也会淡掉；你现在在上海工作，工作压力大，白天上班，晚上回去你又想东想西，脑袋一天得不到真正的放松，时间一长，身体机能会罢工的；你现在的状态，保证心里的因不会影响你的生活，工作，其他的交给时间，学会放弃，懂得放下，何尝不是另一种获得；\n\n---\n\n“舍，得”会在后期进行更新发布，“生活”归类，仅仅是记录生活，日常等等，并不会作为其他作为。\n\n”舍，得，放下“ 之 ”舍，得“会在下篇文章更新；\n\n续.......\n","slug":"生活日志/生活/“舍，得，放” 下之 “放”","published":1,"updated":"2025-03-12T10:05:46.799Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j2004xfg9m1yjf5w6h","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><strong>人生在世，我们更应该懂得，适当的放弃，才能得到，一味的强求，反而会适得其反。 佛说：舍，就是得；不舍，哪有得。 放下，便得自在。 人生在世，更应该懂得适当的放下，才会轻松，放下心中的枷锁，让自己的心灵自由。</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间老 w 就和我说了一件隐藏在他内心的一件事，<strong>舍，得，放下</strong>该怎么做才能放下心中枷锁，才能轻松自在；我迟疑了一会儿没有回复他，因为我也不知道该怎么回复他；因为每个人心中也许都有那么一件放不下，舍不得的事情吧；</p>\n<p>老 w 和我说，他常常就在想，<strong>“舍得”</strong> 该如何做才能算是真正的有舍有得，舍与得对他来讲貌似就是平衡称，只要另一方发生篇量差，那么平衡称就不再平衡；而 <strong>“放下”</strong> 就是一个积压多年的石头，按理说经过风吹日晒石头会慢慢风化，直至消化掉最后的一块菱角成为漂浮在风中的一粒尘埃，这么多年了这块石头分量经过多年的磨练不减反增；</p>\n<p>今年 5 月份的劳动节，和他去了一趟灵隐寺，灵隐寺也是我多年以来想去的地方之一，不为别的心中有因，也许这一次苏杭之游可解心中之因，化解心中所想；当然我心中也有放不下的事情，但多数原因是因为灵隐寺在我心中的神秘感；</p>\n<p>也不知道为什么，灵隐寺在我心中也许有一种比较神秘的色彩，也许是当初的电视为了增添了对灵隐寺的好奇；心中总认为心中有因在灵隐寺也许有想，有悟；就好比入口的禅牌：<strong>舍得，放在</strong>；我感觉这次是来对了地方，也许这次真的可以帮助老 w；我知道心中有因最后还的靠自己；</p>\n<h2 id=\"因\"><a href=\"#因\" class=\"headerlink\" title=\"因\"></a>因</h2><p>老 w 的因，也就是他心中，**“放下”**的事情，话说还的追溯到中学年代，那段在校学习时期他也算一个调皮捣蛋之人，对于学习书本知识那是挑剔的很，只要是书本知识就好像雷达似的自动躲避，对他好奇的东西学的那是一个滋味；</p>\n<p>说到什么对他好奇，那就是计算机，那段时代互联网兴起，计算机也是进入挨家挨户，但是对他家境一般的情况，他家里不会买计算机同时这样也会影响学业，因此便话费零花钱去了网吧，不过我也很佩服他，别人玩计算机就是打游戏，他可真是一个奇葩，研究一些稀奇古怪的东西，那段时间手机软件兴起一款病毒，只要是安装手机授权之后，手机便自动上锁，需要输入设定的密码才能解锁卸载病毒；</p>\n<p>因为偶然在社区看到这么一个网友问，说是下载了一个软件中了病毒，需要输入密码，但是密码是需要花钱向被人索要的，到现在为止这应该属于诈骗了吧；老 w 当时看了这个帖子，就来了好奇心，究竟是什么能让手机上锁，貌似对他来说是很好玩的；</p>\n<p>他研究了一段时间，大概算是明白了，是一款制作软件的开发语言，而授权需要输入的密码为<code>pin</code>码，就相当于手机授权之后，设定一个密码用于对手机操作的密码；而对于这密码大概也分为几类：其一：设定固定密码，只有反编译看源码之后才能看到，其二：固定算法设定密码，比其一的安全性高一点，单需要花费一点时间研究算法，例如：当前的时间作为密码，一般人不会想到这样的密码，但是这样的密码是不固定的，是根据时间的变化二变化的；</p>\n<p>之后，他就在之前的那篇帖子下面评论了该网友，大致说了大致密码的方向，之后他录制了相关的安全如何解密视频同时评论了该网友；后来我再去看该评论的视频的时候，发现已经找不到了；</p>\n<p>这也就是后面<strong>放不下</strong>事情的起因；也就是这样的起因让他经历多年还在其中；</p>\n<p>因为他貌似已经对计算机上瘾，他并不是每次都会研究稀奇古怪的东西，不久<code>穿越火线</code>时代到来，他迷上了枪战游戏；在校期间他可为是走在了同年龄的网络第一人；</p>\n<p>不久计算机的出现，有利有弊，双刃剑的弊端就被扩大，网上诈骗，钓鱼网站等肆意兴起；那个时候还不知道这些<code>代名词</code>，只是知道那些都是假的；后来对于<code>手机软件idea</code>具体是什么软件名称，我也忘了。大致就是一款在手机上写软件的工具；之后又录制了一个视频，大致就是输入手机密码之后，就能从后台获取到了输入的手机密码，这和诈骗，钓鱼网站的异端类似；发布在了网上避免别人上当；更加谨慎一点；</p>\n<h2 id=\"果\"><a href=\"#果\" class=\"headerlink\" title=\"果\"></a>果</h2><p>不久，他接到了家里的电话，说是家里长辈亲人出了意外；当时他还在睡觉，首次打电话他就挂了，直到第三次的时候他接到了，说是赶紧回家；简单几句，没想到之后多年这件事情还在心中放不下；</p>\n<p>他父亲的离世，并未给当时中学年代的他造成太大影响，因为年纪还小，稚嫩的很；对于这些事情他并不知道，也不知道到底是怎么了；我当时听到之后心里也是难受了很久；40 多岁的年纪，10 几岁左右的年纪天人相隔；<br>晚上守灵他睡在了他父亲身边，单他迷迷糊糊的见到了天花板彩色的灯，知道第二天问家里人说，这些灯老早就坏掉了，不会亮的，他也不清楚当时是做梦还是怎么地；亲戚问他怎么了，他把这件事情隐藏起来了，说是梦见他父亲了，问说什么了，“让我好好学习”；因为他并不好学，也不是属于学习的类型，这样的回答必定不会相信；</p>\n<p>知道年龄的增长，慢慢的他也懂得了很多，他因为多种原因抑郁了一段时间，到现在这件事情始终对他来说是一块大石头，永远放不下；随着年纪的增长，石头的重量也就慢慢累积了起来；</p>\n<p>直到现在，他只要想到，刷到相关事情，视频之后，心中也越发难受，他表面上也许不会变现，白天表现的开开心心的，晚上似乎就变了一个人似的，也许是网上说的<code>阳光型抑郁症</code>;</p>\n<p>我之后和他说，“放下”并没有那么简单，也并不是嘴上说说，实则你内心过不去那道坎，就好比电视修仙世界的那道瓶颈，过去了一切也就过去了，能不能跨过去还的靠你自身；你每天都会悔恨，心中有悔，时间一长会影响你的生活，工作等；但是你现在的不是天天想事情，你需要的是适当放松，放下，就好比把闲暇时间交给生活，交给乐趣，也许时间长了，你心中的因慢慢也会淡掉；你现在在上海工作，工作压力大，白天上班，晚上回去你又想东想西，脑袋一天得不到真正的放松，时间一长，身体机能会罢工的；你现在的状态，保证心里的因不会影响你的生活，工作，其他的交给时间，学会放弃，懂得放下，何尝不是另一种获得；</p>\n<hr>\n<p>“舍，得”会在后期进行更新发布，“生活”归类，仅仅是记录生活，日常等等，并不会作为其他作为。</p>\n<p>”舍，得，放下“ 之 ”舍，得“会在下篇文章更新；</p>\n<p>续…….</p>\n","excerpt":"","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><strong>人生在世，我们更应该懂得，适当的放弃，才能得到，一味的强求，反而会适得其反。 佛说：舍，就是得；不舍，哪有得。 放下，便得自在。 人生在世，更应该懂得适当的放下，才会轻松，放下心中的枷锁，让自己的心灵自由。</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间老 w 就和我说了一件隐藏在他内心的一件事，<strong>舍，得，放下</strong>该怎么做才能放下心中枷锁，才能轻松自在；我迟疑了一会儿没有回复他，因为我也不知道该怎么回复他；因为每个人心中也许都有那么一件放不下，舍不得的事情吧；</p>\n<p>老 w 和我说，他常常就在想，<strong>“舍得”</strong> 该如何做才能算是真正的有舍有得，舍与得对他来讲貌似就是平衡称，只要另一方发生篇量差，那么平衡称就不再平衡；而 <strong>“放下”</strong> 就是一个积压多年的石头，按理说经过风吹日晒石头会慢慢风化，直至消化掉最后的一块菱角成为漂浮在风中的一粒尘埃，这么多年了这块石头分量经过多年的磨练不减反增；</p>\n<p>今年 5 月份的劳动节，和他去了一趟灵隐寺，灵隐寺也是我多年以来想去的地方之一，不为别的心中有因，也许这一次苏杭之游可解心中之因，化解心中所想；当然我心中也有放不下的事情，但多数原因是因为灵隐寺在我心中的神秘感；</p>\n<p>也不知道为什么，灵隐寺在我心中也许有一种比较神秘的色彩，也许是当初的电视为了增添了对灵隐寺的好奇；心中总认为心中有因在灵隐寺也许有想，有悟；就好比入口的禅牌：<strong>舍得，放在</strong>；我感觉这次是来对了地方，也许这次真的可以帮助老 w；我知道心中有因最后还的靠自己；</p>\n<h2 id=\"因\"><a href=\"#因\" class=\"headerlink\" title=\"因\"></a>因</h2><p>老 w 的因，也就是他心中，**“放下”**的事情，话说还的追溯到中学年代，那段在校学习时期他也算一个调皮捣蛋之人，对于学习书本知识那是挑剔的很，只要是书本知识就好像雷达似的自动躲避，对他好奇的东西学的那是一个滋味；</p>\n<p>说到什么对他好奇，那就是计算机，那段时代互联网兴起，计算机也是进入挨家挨户，但是对他家境一般的情况，他家里不会买计算机同时这样也会影响学业，因此便话费零花钱去了网吧，不过我也很佩服他，别人玩计算机就是打游戏，他可真是一个奇葩，研究一些稀奇古怪的东西，那段时间手机软件兴起一款病毒，只要是安装手机授权之后，手机便自动上锁，需要输入设定的密码才能解锁卸载病毒；</p>\n<p>因为偶然在社区看到这么一个网友问，说是下载了一个软件中了病毒，需要输入密码，但是密码是需要花钱向被人索要的，到现在为止这应该属于诈骗了吧；老 w 当时看了这个帖子，就来了好奇心，究竟是什么能让手机上锁，貌似对他来说是很好玩的；</p>\n<p>他研究了一段时间，大概算是明白了，是一款制作软件的开发语言，而授权需要输入的密码为<code>pin</code>码，就相当于手机授权之后，设定一个密码用于对手机操作的密码；而对于这密码大概也分为几类：其一：设定固定密码，只有反编译看源码之后才能看到，其二：固定算法设定密码，比其一的安全性高一点，单需要花费一点时间研究算法，例如：当前的时间作为密码，一般人不会想到这样的密码，但是这样的密码是不固定的，是根据时间的变化二变化的；</p>\n<p>之后，他就在之前的那篇帖子下面评论了该网友，大致说了大致密码的方向，之后他录制了相关的安全如何解密视频同时评论了该网友；后来我再去看该评论的视频的时候，发现已经找不到了；</p>\n<p>这也就是后面<strong>放不下</strong>事情的起因；也就是这样的起因让他经历多年还在其中；</p>\n<p>因为他貌似已经对计算机上瘾，他并不是每次都会研究稀奇古怪的东西，不久<code>穿越火线</code>时代到来，他迷上了枪战游戏；在校期间他可为是走在了同年龄的网络第一人；</p>\n<p>不久计算机的出现，有利有弊，双刃剑的弊端就被扩大，网上诈骗，钓鱼网站等肆意兴起；那个时候还不知道这些<code>代名词</code>，只是知道那些都是假的；后来对于<code>手机软件idea</code>具体是什么软件名称，我也忘了。大致就是一款在手机上写软件的工具；之后又录制了一个视频，大致就是输入手机密码之后，就能从后台获取到了输入的手机密码，这和诈骗，钓鱼网站的异端类似；发布在了网上避免别人上当；更加谨慎一点；</p>\n<h2 id=\"果\"><a href=\"#果\" class=\"headerlink\" title=\"果\"></a>果</h2><p>不久，他接到了家里的电话，说是家里长辈亲人出了意外；当时他还在睡觉，首次打电话他就挂了，直到第三次的时候他接到了，说是赶紧回家；简单几句，没想到之后多年这件事情还在心中放不下；</p>\n<p>他父亲的离世，并未给当时中学年代的他造成太大影响，因为年纪还小，稚嫩的很；对于这些事情他并不知道，也不知道到底是怎么了；我当时听到之后心里也是难受了很久；40 多岁的年纪，10 几岁左右的年纪天人相隔；<br>晚上守灵他睡在了他父亲身边，单他迷迷糊糊的见到了天花板彩色的灯，知道第二天问家里人说，这些灯老早就坏掉了，不会亮的，他也不清楚当时是做梦还是怎么地；亲戚问他怎么了，他把这件事情隐藏起来了，说是梦见他父亲了，问说什么了，“让我好好学习”；因为他并不好学，也不是属于学习的类型，这样的回答必定不会相信；</p>\n<p>知道年龄的增长，慢慢的他也懂得了很多，他因为多种原因抑郁了一段时间，到现在这件事情始终对他来说是一块大石头，永远放不下；随着年纪的增长，石头的重量也就慢慢累积了起来；</p>\n<p>直到现在，他只要想到，刷到相关事情，视频之后，心中也越发难受，他表面上也许不会变现，白天表现的开开心心的，晚上似乎就变了一个人似的，也许是网上说的<code>阳光型抑郁症</code>;</p>\n<p>我之后和他说，“放下”并没有那么简单，也并不是嘴上说说，实则你内心过不去那道坎，就好比电视修仙世界的那道瓶颈，过去了一切也就过去了，能不能跨过去还的靠你自身；你每天都会悔恨，心中有悔，时间一长会影响你的生活，工作等；但是你现在的不是天天想事情，你需要的是适当放松，放下，就好比把闲暇时间交给生活，交给乐趣，也许时间长了，你心中的因慢慢也会淡掉；你现在在上海工作，工作压力大，白天上班，晚上回去你又想东想西，脑袋一天得不到真正的放松，时间一长，身体机能会罢工的；你现在的状态，保证心里的因不会影响你的生活，工作，其他的交给时间，学会放弃，懂得放下，何尝不是另一种获得；</p>\n<hr>\n<p>“舍，得”会在后期进行更新发布，“生活”归类，仅仅是记录生活，日常等等，并不会作为其他作为。</p>\n<p>”舍，得，放下“ 之 ”舍，得“会在下篇文章更新；</p>\n<p>续…….</p>\n"},{"title":"生活-“舍，得，放” 下之 “舍，得”","abbrlink":"3bf21246","date":"2023-10-08T01:05:01.000Z","_content":"\n# 序\n\n**我现在不和人争吵，因为我意识到，每个人只能站在自己的认知角度去思考。所以，如果有人跟你说柠檬时甜的，你只需要对他说似的，那你多吃点。你没必要和别人争辩什么，因为认知不同，所处的角度也不同，做好自己即可；毕竟在乌鸦的世界里，天鹅也是有罪的，认知相同，无需争辩，认知不同何须争辩？思想不在一个高度没必要互相征服，三观在一个层次，微笑就好**\n\n## 前言\n\n续接上回说到，老 w 也是经过了很久的思想斗争，将放下的事情，人，物都已经放下；不过他跟我说：“我也不清楚是不是已经放下了，也不知道会不会在梦中梦到曾经的事，但至少这一刻我不会再去因为曾经的事情苦恼与后悔；虽然曾经我后悔过，懊恼过，但这些确实给我的生活带来了很多影响。虽说完全放下在短时间内是不节能的，但是我会保持每天积极向上的心态，不会因为这些事情再去影响我的生活！”\n\n老 w 与我是多年好友，我也知道他很多的事情，一定程度上来讲我们算是生死之交了；他之前抑郁过，自负过，曾经也差点做过极端的事情；那段时间仿佛他的人生没有了一点光亮，家里出了意外，身边朋友的冷漠等等，让他一度有了想不开的想法；他不善言语，表面上也看不出关于他内心的事情，后来再一次聚会上他喝多了，跟我讲了很多关于他内心的事情；我竟然不知道他的这些事情，虽然我们经常聚在一起，但给我的感觉就是他很乐观，听完他的故事我感到有点心酸，也有点可惜；因为那段时间正是属于男孩子的年纪，听完他故事之后我感觉他脸上似乎时苍老了很多，也不知道是内心的折磨还是对内心放不下事情的压抑；\n\n## “他”不见了\n\n最近一段时间再次见到他，他变了，变得我都差点不认识他了；他不在去想曾经发生的事情，也不会再去因为曾经的种种放不下导致自己的生活水平下降，做到的只有保持自身，微笑度过；那个曾经不善言语的他不见了，再次见到他的是一个微笑话多的男孩儿；我认为他应该是完全放下了。毕竟我在他身上看到了我刚认识的他的身影，刚认识他的时候给我印象最深的是它有着被人都想拥有的卷发，那个时候的他相貌虽然平平，没有太多的才华，但是他却有着一颗童真好奇向上的心，至少我认为他那个年纪是最开心的；\n\n我们聊了聊家常，工作生活，他跟我说我最近真的有在好好生活，每天有在花费半个小时时间去锻炼身体，为了学做饭，认真的刷了好几个小时的抖音；当心情有点小糟糕静不下心的时候，他都会去练字，尽管字不是很美观，但是对于内心的修养还是有一定作用的；因为他的职业是程序员，每天都是面对着电脑，时间长了身体也会吃不消；说是近期锻炼健身是为了保证自己的身体健康，健康才是本钱；\n\n说到做饭，他说我最近做了一个拿手的好菜，说等晚上我下厨给你尝尝 w 大厨的手艺；不知过了多久，很快到了傍晚他说让我在家里等他，他去买点菜；我也坐不住就和他一起去了；菜市场里她住的地方不远，也就将近 1 公里的距离，菜市场不大但是人很多；他买了点排骨，炖汤，日常的材料之外，我又在附近商城买了一点牛奶，早餐，水果之类的食品；当时来看他的时候没有带什么东西就索性在附近买点；他早上比较急来不及吃早饭，就索性买点水果牛奶给他；我可不想再看到他一点点颓废下去；材料买好之后他说我来，你就坐在沙发上玩玩游戏刷刷视频，今天非让你看看我最近学的手艺；\n\n很快他下厨了，瓶瓶罐罐的很多，这样真的就像大厨似的；他先吧蔬菜清洗干净备用，将买来的排骨焯水备用；有看见他拿出了类似砂锅的东西，砂锅清洗干净，将少量排骨放进砂锅，又将块状玉米，葫芦卜， 几颗很大的红枣等放进砂锅，注入开水之后就开始上火炖汤了；一顿操作下来，我都怀疑这还是他吗，变化是真的太大了；要不是我知道他之前不会做饭，他一步步的操作有条不紊的，还真以为他在饭店干了好几年；\n\n时间将近过了一小时后，他跟我说马上就好了再等几分钟，我也赶紧把桌子擦干净，茶碗在干净备用；后来又见他在玉米汤上放了点枸杞，近有点羡慕他的生活了；几分钟之后他没动筷，想让我尝了尝，我说专业，你这行为也不想是刚做饭吧，是不是之前就会的； 他不好意思的挠了挠头说到：“不是啊，之前不会的，为了改变自己也是反复看了好几次视屏教程才会一点的；”；我说到：“这汤不错，不腥不腻”；他说道：“要不要学，免费的，我教你”；之后我们吃完收拾完之后，就在他家住了一晚上；\n\n## 他迷茫了\n\n他的职业是程序员，又因为最近的大环境不是太好，对于他本身掌握的职业技能来看，貌似大大小小的东西也做了不少，好像是到了瓶颈期；他跟我说了近期家里人催他结婚的情况，应该不会在上海再待很长一段时间了，可能几年就要回到老家了；但是回老家迷茫了，上海的薪资可以生活的津津有味，但是回去就要接受现实每个月一分不剩，再加上车贷房贷之类的到时候可能还需要借钱弥补；\n\n我听到这，心里想也是这样的情况，毕竟老家不是大城市，没有大城市先进的技术，相对于小城市的技术保守已经够用了，不会在花费大代价去研究新技术等；这样的情况的话薪资就很低很低了；\n\n我对他说：“这是一个很多人都在迷茫的问题，如果继续在大城市生活，短时间内生活的津津有味，但是时间一久你买不起房，买不起上海的车牌，就连等你结婚了夫妻二人在上海生活都会觉得压力很大很大，有了孩子之后总不能让孩子输在起跑线吧，什么培训班，兴趣爱好班等等对大城市的费用还是很大的；如果你回老家了，可能工资就是固定的，没有升职加薪的机会，所把握的机会很渺茫；但相对于大城市的花销，小城市的花销很小很小，但是这样每个月还是勒紧裤腰带；”\n\n走什么路，怎么走是你自己的想法，与别人无关；要走什么路，怎么选择，选择权在你；我曾经也有这个想法，但是我认为先珍惜生活当下为准，其他的在看自己的选择吧；当然比人不会左右的你选择，这个只有靠自己了；\n\n你要想回老家，照顾父母陪伴父母，亲人，那你要么舍弃大城市，那么这样你就会陪伴父母身边了，你想得到很多价值，那么你就只能生活在大城市，相对于小城市大城市的机会会更大一些；\n\n“怎么舍，怎么得，舍哪些，得哪些”，怎么选择还是看自己的方向了；不过我相信你怎么选择都会有属于自己的一份幸福；\n\n---\n\n续.......\n","source":"_posts/生活日志/生活/“舍，得，放” 下之 “舍，得”.md","raw":"---\ntitle: 生活-“舍，得，放” 下之 “舍，得”\nabbrlink: 3bf21246\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 生活\n---\n\n# 序\n\n**我现在不和人争吵，因为我意识到，每个人只能站在自己的认知角度去思考。所以，如果有人跟你说柠檬时甜的，你只需要对他说似的，那你多吃点。你没必要和别人争辩什么，因为认知不同，所处的角度也不同，做好自己即可；毕竟在乌鸦的世界里，天鹅也是有罪的，认知相同，无需争辩，认知不同何须争辩？思想不在一个高度没必要互相征服，三观在一个层次，微笑就好**\n\n## 前言\n\n续接上回说到，老 w 也是经过了很久的思想斗争，将放下的事情，人，物都已经放下；不过他跟我说：“我也不清楚是不是已经放下了，也不知道会不会在梦中梦到曾经的事，但至少这一刻我不会再去因为曾经的事情苦恼与后悔；虽然曾经我后悔过，懊恼过，但这些确实给我的生活带来了很多影响。虽说完全放下在短时间内是不节能的，但是我会保持每天积极向上的心态，不会因为这些事情再去影响我的生活！”\n\n老 w 与我是多年好友，我也知道他很多的事情，一定程度上来讲我们算是生死之交了；他之前抑郁过，自负过，曾经也差点做过极端的事情；那段时间仿佛他的人生没有了一点光亮，家里出了意外，身边朋友的冷漠等等，让他一度有了想不开的想法；他不善言语，表面上也看不出关于他内心的事情，后来再一次聚会上他喝多了，跟我讲了很多关于他内心的事情；我竟然不知道他的这些事情，虽然我们经常聚在一起，但给我的感觉就是他很乐观，听完他的故事我感到有点心酸，也有点可惜；因为那段时间正是属于男孩子的年纪，听完他故事之后我感觉他脸上似乎时苍老了很多，也不知道是内心的折磨还是对内心放不下事情的压抑；\n\n## “他”不见了\n\n最近一段时间再次见到他，他变了，变得我都差点不认识他了；他不在去想曾经发生的事情，也不会再去因为曾经的种种放不下导致自己的生活水平下降，做到的只有保持自身，微笑度过；那个曾经不善言语的他不见了，再次见到他的是一个微笑话多的男孩儿；我认为他应该是完全放下了。毕竟我在他身上看到了我刚认识的他的身影，刚认识他的时候给我印象最深的是它有着被人都想拥有的卷发，那个时候的他相貌虽然平平，没有太多的才华，但是他却有着一颗童真好奇向上的心，至少我认为他那个年纪是最开心的；\n\n我们聊了聊家常，工作生活，他跟我说我最近真的有在好好生活，每天有在花费半个小时时间去锻炼身体，为了学做饭，认真的刷了好几个小时的抖音；当心情有点小糟糕静不下心的时候，他都会去练字，尽管字不是很美观，但是对于内心的修养还是有一定作用的；因为他的职业是程序员，每天都是面对着电脑，时间长了身体也会吃不消；说是近期锻炼健身是为了保证自己的身体健康，健康才是本钱；\n\n说到做饭，他说我最近做了一个拿手的好菜，说等晚上我下厨给你尝尝 w 大厨的手艺；不知过了多久，很快到了傍晚他说让我在家里等他，他去买点菜；我也坐不住就和他一起去了；菜市场里她住的地方不远，也就将近 1 公里的距离，菜市场不大但是人很多；他买了点排骨，炖汤，日常的材料之外，我又在附近商城买了一点牛奶，早餐，水果之类的食品；当时来看他的时候没有带什么东西就索性在附近买点；他早上比较急来不及吃早饭，就索性买点水果牛奶给他；我可不想再看到他一点点颓废下去；材料买好之后他说我来，你就坐在沙发上玩玩游戏刷刷视频，今天非让你看看我最近学的手艺；\n\n很快他下厨了，瓶瓶罐罐的很多，这样真的就像大厨似的；他先吧蔬菜清洗干净备用，将买来的排骨焯水备用；有看见他拿出了类似砂锅的东西，砂锅清洗干净，将少量排骨放进砂锅，又将块状玉米，葫芦卜， 几颗很大的红枣等放进砂锅，注入开水之后就开始上火炖汤了；一顿操作下来，我都怀疑这还是他吗，变化是真的太大了；要不是我知道他之前不会做饭，他一步步的操作有条不紊的，还真以为他在饭店干了好几年；\n\n时间将近过了一小时后，他跟我说马上就好了再等几分钟，我也赶紧把桌子擦干净，茶碗在干净备用；后来又见他在玉米汤上放了点枸杞，近有点羡慕他的生活了；几分钟之后他没动筷，想让我尝了尝，我说专业，你这行为也不想是刚做饭吧，是不是之前就会的； 他不好意思的挠了挠头说到：“不是啊，之前不会的，为了改变自己也是反复看了好几次视屏教程才会一点的；”；我说到：“这汤不错，不腥不腻”；他说道：“要不要学，免费的，我教你”；之后我们吃完收拾完之后，就在他家住了一晚上；\n\n## 他迷茫了\n\n他的职业是程序员，又因为最近的大环境不是太好，对于他本身掌握的职业技能来看，貌似大大小小的东西也做了不少，好像是到了瓶颈期；他跟我说了近期家里人催他结婚的情况，应该不会在上海再待很长一段时间了，可能几年就要回到老家了；但是回老家迷茫了，上海的薪资可以生活的津津有味，但是回去就要接受现实每个月一分不剩，再加上车贷房贷之类的到时候可能还需要借钱弥补；\n\n我听到这，心里想也是这样的情况，毕竟老家不是大城市，没有大城市先进的技术，相对于小城市的技术保守已经够用了，不会在花费大代价去研究新技术等；这样的情况的话薪资就很低很低了；\n\n我对他说：“这是一个很多人都在迷茫的问题，如果继续在大城市生活，短时间内生活的津津有味，但是时间一久你买不起房，买不起上海的车牌，就连等你结婚了夫妻二人在上海生活都会觉得压力很大很大，有了孩子之后总不能让孩子输在起跑线吧，什么培训班，兴趣爱好班等等对大城市的费用还是很大的；如果你回老家了，可能工资就是固定的，没有升职加薪的机会，所把握的机会很渺茫；但相对于大城市的花销，小城市的花销很小很小，但是这样每个月还是勒紧裤腰带；”\n\n走什么路，怎么走是你自己的想法，与别人无关；要走什么路，怎么选择，选择权在你；我曾经也有这个想法，但是我认为先珍惜生活当下为准，其他的在看自己的选择吧；当然比人不会左右的你选择，这个只有靠自己了；\n\n你要想回老家，照顾父母陪伴父母，亲人，那你要么舍弃大城市，那么这样你就会陪伴父母身边了，你想得到很多价值，那么你就只能生活在大城市，相对于小城市大城市的机会会更大一些；\n\n“怎么舍，怎么得，舍哪些，得哪些”，怎么选择还是看自己的方向了；不过我相信你怎么选择都会有属于自己的一份幸福；\n\n---\n\n续.......\n","slug":"生活日志/生活/“舍，得，放” 下之 “舍，得”","published":1,"updated":"2025-03-12T10:05:51.567Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j20050fg9m02yq4rj3","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><strong>我现在不和人争吵，因为我意识到，每个人只能站在自己的认知角度去思考。所以，如果有人跟你说柠檬时甜的，你只需要对他说似的，那你多吃点。你没必要和别人争辩什么，因为认知不同，所处的角度也不同，做好自己即可；毕竟在乌鸦的世界里，天鹅也是有罪的，认知相同，无需争辩，认知不同何须争辩？思想不在一个高度没必要互相征服，三观在一个层次，微笑就好</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>续接上回说到，老 w 也是经过了很久的思想斗争，将放下的事情，人，物都已经放下；不过他跟我说：“我也不清楚是不是已经放下了，也不知道会不会在梦中梦到曾经的事，但至少这一刻我不会再去因为曾经的事情苦恼与后悔；虽然曾经我后悔过，懊恼过，但这些确实给我的生活带来了很多影响。虽说完全放下在短时间内是不节能的，但是我会保持每天积极向上的心态，不会因为这些事情再去影响我的生活！”</p>\n<p>老 w 与我是多年好友，我也知道他很多的事情，一定程度上来讲我们算是生死之交了；他之前抑郁过，自负过，曾经也差点做过极端的事情；那段时间仿佛他的人生没有了一点光亮，家里出了意外，身边朋友的冷漠等等，让他一度有了想不开的想法；他不善言语，表面上也看不出关于他内心的事情，后来再一次聚会上他喝多了，跟我讲了很多关于他内心的事情；我竟然不知道他的这些事情，虽然我们经常聚在一起，但给我的感觉就是他很乐观，听完他的故事我感到有点心酸，也有点可惜；因为那段时间正是属于男孩子的年纪，听完他故事之后我感觉他脸上似乎时苍老了很多，也不知道是内心的折磨还是对内心放不下事情的压抑；</p>\n<h2 id=\"“他”不见了\"><a href=\"#“他”不见了\" class=\"headerlink\" title=\"“他”不见了\"></a>“他”不见了</h2><p>最近一段时间再次见到他，他变了，变得我都差点不认识他了；他不在去想曾经发生的事情，也不会再去因为曾经的种种放不下导致自己的生活水平下降，做到的只有保持自身，微笑度过；那个曾经不善言语的他不见了，再次见到他的是一个微笑话多的男孩儿；我认为他应该是完全放下了。毕竟我在他身上看到了我刚认识的他的身影，刚认识他的时候给我印象最深的是它有着被人都想拥有的卷发，那个时候的他相貌虽然平平，没有太多的才华，但是他却有着一颗童真好奇向上的心，至少我认为他那个年纪是最开心的；</p>\n<p>我们聊了聊家常，工作生活，他跟我说我最近真的有在好好生活，每天有在花费半个小时时间去锻炼身体，为了学做饭，认真的刷了好几个小时的抖音；当心情有点小糟糕静不下心的时候，他都会去练字，尽管字不是很美观，但是对于内心的修养还是有一定作用的；因为他的职业是程序员，每天都是面对着电脑，时间长了身体也会吃不消；说是近期锻炼健身是为了保证自己的身体健康，健康才是本钱；</p>\n<p>说到做饭，他说我最近做了一个拿手的好菜，说等晚上我下厨给你尝尝 w 大厨的手艺；不知过了多久，很快到了傍晚他说让我在家里等他，他去买点菜；我也坐不住就和他一起去了；菜市场里她住的地方不远，也就将近 1 公里的距离，菜市场不大但是人很多；他买了点排骨，炖汤，日常的材料之外，我又在附近商城买了一点牛奶，早餐，水果之类的食品；当时来看他的时候没有带什么东西就索性在附近买点；他早上比较急来不及吃早饭，就索性买点水果牛奶给他；我可不想再看到他一点点颓废下去；材料买好之后他说我来，你就坐在沙发上玩玩游戏刷刷视频，今天非让你看看我最近学的手艺；</p>\n<p>很快他下厨了，瓶瓶罐罐的很多，这样真的就像大厨似的；他先吧蔬菜清洗干净备用，将买来的排骨焯水备用；有看见他拿出了类似砂锅的东西，砂锅清洗干净，将少量排骨放进砂锅，又将块状玉米，葫芦卜， 几颗很大的红枣等放进砂锅，注入开水之后就开始上火炖汤了；一顿操作下来，我都怀疑这还是他吗，变化是真的太大了；要不是我知道他之前不会做饭，他一步步的操作有条不紊的，还真以为他在饭店干了好几年；</p>\n<p>时间将近过了一小时后，他跟我说马上就好了再等几分钟，我也赶紧把桌子擦干净，茶碗在干净备用；后来又见他在玉米汤上放了点枸杞，近有点羡慕他的生活了；几分钟之后他没动筷，想让我尝了尝，我说专业，你这行为也不想是刚做饭吧，是不是之前就会的； 他不好意思的挠了挠头说到：“不是啊，之前不会的，为了改变自己也是反复看了好几次视屏教程才会一点的；”；我说到：“这汤不错，不腥不腻”；他说道：“要不要学，免费的，我教你”；之后我们吃完收拾完之后，就在他家住了一晚上；</p>\n<h2 id=\"他迷茫了\"><a href=\"#他迷茫了\" class=\"headerlink\" title=\"他迷茫了\"></a>他迷茫了</h2><p>他的职业是程序员，又因为最近的大环境不是太好，对于他本身掌握的职业技能来看，貌似大大小小的东西也做了不少，好像是到了瓶颈期；他跟我说了近期家里人催他结婚的情况，应该不会在上海再待很长一段时间了，可能几年就要回到老家了；但是回老家迷茫了，上海的薪资可以生活的津津有味，但是回去就要接受现实每个月一分不剩，再加上车贷房贷之类的到时候可能还需要借钱弥补；</p>\n<p>我听到这，心里想也是这样的情况，毕竟老家不是大城市，没有大城市先进的技术，相对于小城市的技术保守已经够用了，不会在花费大代价去研究新技术等；这样的情况的话薪资就很低很低了；</p>\n<p>我对他说：“这是一个很多人都在迷茫的问题，如果继续在大城市生活，短时间内生活的津津有味，但是时间一久你买不起房，买不起上海的车牌，就连等你结婚了夫妻二人在上海生活都会觉得压力很大很大，有了孩子之后总不能让孩子输在起跑线吧，什么培训班，兴趣爱好班等等对大城市的费用还是很大的；如果你回老家了，可能工资就是固定的，没有升职加薪的机会，所把握的机会很渺茫；但相对于大城市的花销，小城市的花销很小很小，但是这样每个月还是勒紧裤腰带；”</p>\n<p>走什么路，怎么走是你自己的想法，与别人无关；要走什么路，怎么选择，选择权在你；我曾经也有这个想法，但是我认为先珍惜生活当下为准，其他的在看自己的选择吧；当然比人不会左右的你选择，这个只有靠自己了；</p>\n<p>你要想回老家，照顾父母陪伴父母，亲人，那你要么舍弃大城市，那么这样你就会陪伴父母身边了，你想得到很多价值，那么你就只能生活在大城市，相对于小城市大城市的机会会更大一些；</p>\n<p>“怎么舍，怎么得，舍哪些，得哪些”，怎么选择还是看自己的方向了；不过我相信你怎么选择都会有属于自己的一份幸福；</p>\n<hr>\n<p>续…….</p>\n","excerpt":"","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p><strong>我现在不和人争吵，因为我意识到，每个人只能站在自己的认知角度去思考。所以，如果有人跟你说柠檬时甜的，你只需要对他说似的，那你多吃点。你没必要和别人争辩什么，因为认知不同，所处的角度也不同，做好自己即可；毕竟在乌鸦的世界里，天鹅也是有罪的，认知相同，无需争辩，认知不同何须争辩？思想不在一个高度没必要互相征服，三观在一个层次，微笑就好</strong></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>续接上回说到，老 w 也是经过了很久的思想斗争，将放下的事情，人，物都已经放下；不过他跟我说：“我也不清楚是不是已经放下了，也不知道会不会在梦中梦到曾经的事，但至少这一刻我不会再去因为曾经的事情苦恼与后悔；虽然曾经我后悔过，懊恼过，但这些确实给我的生活带来了很多影响。虽说完全放下在短时间内是不节能的，但是我会保持每天积极向上的心态，不会因为这些事情再去影响我的生活！”</p>\n<p>老 w 与我是多年好友，我也知道他很多的事情，一定程度上来讲我们算是生死之交了；他之前抑郁过，自负过，曾经也差点做过极端的事情；那段时间仿佛他的人生没有了一点光亮，家里出了意外，身边朋友的冷漠等等，让他一度有了想不开的想法；他不善言语，表面上也看不出关于他内心的事情，后来再一次聚会上他喝多了，跟我讲了很多关于他内心的事情；我竟然不知道他的这些事情，虽然我们经常聚在一起，但给我的感觉就是他很乐观，听完他的故事我感到有点心酸，也有点可惜；因为那段时间正是属于男孩子的年纪，听完他故事之后我感觉他脸上似乎时苍老了很多，也不知道是内心的折磨还是对内心放不下事情的压抑；</p>\n<h2 id=\"“他”不见了\"><a href=\"#“他”不见了\" class=\"headerlink\" title=\"“他”不见了\"></a>“他”不见了</h2><p>最近一段时间再次见到他，他变了，变得我都差点不认识他了；他不在去想曾经发生的事情，也不会再去因为曾经的种种放不下导致自己的生活水平下降，做到的只有保持自身，微笑度过；那个曾经不善言语的他不见了，再次见到他的是一个微笑话多的男孩儿；我认为他应该是完全放下了。毕竟我在他身上看到了我刚认识的他的身影，刚认识他的时候给我印象最深的是它有着被人都想拥有的卷发，那个时候的他相貌虽然平平，没有太多的才华，但是他却有着一颗童真好奇向上的心，至少我认为他那个年纪是最开心的；</p>\n<p>我们聊了聊家常，工作生活，他跟我说我最近真的有在好好生活，每天有在花费半个小时时间去锻炼身体，为了学做饭，认真的刷了好几个小时的抖音；当心情有点小糟糕静不下心的时候，他都会去练字，尽管字不是很美观，但是对于内心的修养还是有一定作用的；因为他的职业是程序员，每天都是面对着电脑，时间长了身体也会吃不消；说是近期锻炼健身是为了保证自己的身体健康，健康才是本钱；</p>\n<p>说到做饭，他说我最近做了一个拿手的好菜，说等晚上我下厨给你尝尝 w 大厨的手艺；不知过了多久，很快到了傍晚他说让我在家里等他，他去买点菜；我也坐不住就和他一起去了；菜市场里她住的地方不远，也就将近 1 公里的距离，菜市场不大但是人很多；他买了点排骨，炖汤，日常的材料之外，我又在附近商城买了一点牛奶，早餐，水果之类的食品；当时来看他的时候没有带什么东西就索性在附近买点；他早上比较急来不及吃早饭，就索性买点水果牛奶给他；我可不想再看到他一点点颓废下去；材料买好之后他说我来，你就坐在沙发上玩玩游戏刷刷视频，今天非让你看看我最近学的手艺；</p>\n<p>很快他下厨了，瓶瓶罐罐的很多，这样真的就像大厨似的；他先吧蔬菜清洗干净备用，将买来的排骨焯水备用；有看见他拿出了类似砂锅的东西，砂锅清洗干净，将少量排骨放进砂锅，又将块状玉米，葫芦卜， 几颗很大的红枣等放进砂锅，注入开水之后就开始上火炖汤了；一顿操作下来，我都怀疑这还是他吗，变化是真的太大了；要不是我知道他之前不会做饭，他一步步的操作有条不紊的，还真以为他在饭店干了好几年；</p>\n<p>时间将近过了一小时后，他跟我说马上就好了再等几分钟，我也赶紧把桌子擦干净，茶碗在干净备用；后来又见他在玉米汤上放了点枸杞，近有点羡慕他的生活了；几分钟之后他没动筷，想让我尝了尝，我说专业，你这行为也不想是刚做饭吧，是不是之前就会的； 他不好意思的挠了挠头说到：“不是啊，之前不会的，为了改变自己也是反复看了好几次视屏教程才会一点的；”；我说到：“这汤不错，不腥不腻”；他说道：“要不要学，免费的，我教你”；之后我们吃完收拾完之后，就在他家住了一晚上；</p>\n<h2 id=\"他迷茫了\"><a href=\"#他迷茫了\" class=\"headerlink\" title=\"他迷茫了\"></a>他迷茫了</h2><p>他的职业是程序员，又因为最近的大环境不是太好，对于他本身掌握的职业技能来看，貌似大大小小的东西也做了不少，好像是到了瓶颈期；他跟我说了近期家里人催他结婚的情况，应该不会在上海再待很长一段时间了，可能几年就要回到老家了；但是回老家迷茫了，上海的薪资可以生活的津津有味，但是回去就要接受现实每个月一分不剩，再加上车贷房贷之类的到时候可能还需要借钱弥补；</p>\n<p>我听到这，心里想也是这样的情况，毕竟老家不是大城市，没有大城市先进的技术，相对于小城市的技术保守已经够用了，不会在花费大代价去研究新技术等；这样的情况的话薪资就很低很低了；</p>\n<p>我对他说：“这是一个很多人都在迷茫的问题，如果继续在大城市生活，短时间内生活的津津有味，但是时间一久你买不起房，买不起上海的车牌，就连等你结婚了夫妻二人在上海生活都会觉得压力很大很大，有了孩子之后总不能让孩子输在起跑线吧，什么培训班，兴趣爱好班等等对大城市的费用还是很大的；如果你回老家了，可能工资就是固定的，没有升职加薪的机会，所把握的机会很渺茫；但相对于大城市的花销，小城市的花销很小很小，但是这样每个月还是勒紧裤腰带；”</p>\n<p>走什么路，怎么走是你自己的想法，与别人无关；要走什么路，怎么选择，选择权在你；我曾经也有这个想法，但是我认为先珍惜生活当下为准，其他的在看自己的选择吧；当然比人不会左右的你选择，这个只有靠自己了；</p>\n<p>你要想回老家，照顾父母陪伴父母，亲人，那你要么舍弃大城市，那么这样你就会陪伴父母身边了，你想得到很多价值，那么你就只能生活在大城市，相对于小城市大城市的机会会更大一些；</p>\n<p>“怎么舍，怎么得，舍哪些，得哪些”，怎么选择还是看自己的方向了；不过我相信你怎么选择都会有属于自己的一份幸福；</p>\n<hr>\n<p>续…….</p>\n"},{"title":"生活-五年时间的蜕变, 他回来了!","abbrlink":"56f60a88","date":"2023-10-08T01:05:01.000Z","_content":"\n# 前言\n\n**我之前就在想 有没有那样的一种人就是：年少轻狂，以自我为中心，当真正回头的那一刻才会放下过去的种种；以另一种身份珍惜剩下的时间，珍惜生活；过下过去，不会再去纠结过去的种种!**\n\n心理学有一种就这样的结论：**如果一个人的内心很强大，那么他就会很淡然，不会因为一些事情而影响自己，也不会因为一些事情而影响自己。如果一个人内心很脆弱，那么他就会很敏感，会因为一些事情而影响自己，影响自己。如果一个人不愿回忆过去躲避过去，那么他就会很痛苦，痛苦到无法忍受。**\n\n近期工作不是太忙，去和老 W 吃了一顿饭，当时我就把我的疑问说了出来：年少轻狂以自我为中心，后面因为一件事放下了过去的种种不会再去折磨自己；\n\n他说这样的人是存在：往往这样人都是很厉害的，折磨纠结自己这么长时间的人，事，物等等；能在较长的时间去忘记，放下，重新开始;不难为一种大智慧；\n\n他后来又和我分享了一件他的事情：老 w 确实也是这样一种人，他年轻的时候，很轻狂，很自大，很自我，以自我为中心，并不会去照顾其他的人一些感受，一些事情他都是放在内心世界，想要从他嘴里套出点什么基本不可能；\n\n他年轻的时候，那时候的他简直是小魔王，叛逆的很；老家盛行赶集，没到一定的时间就会在村里进行赶集，当时他和家里人去了远在 10km 的姑姑家，因为那个时间他迷恋电脑，正好他姑姑家有电脑，他想去玩被家里人阻止了；好说歹说就是不让玩，结果他“离家出走了”，竟然在农村的田地了走了将近 12km 的路程回家了；那个时间亲戚长辈都在找他，结果村里人打电话说他已经回来了；\n\n等到家里人骑着摩托回去之后，肯定免不了一顿“皮鞭炒肉丝”；\n\n那时候他还是个少年，他以为自己很牛逼，以为自己很厉害，以为自己很自我；结果换来的是一顿毒打；\n\n那我问他：如果换成现在，他会这样吗？他说：不会；因为谁都希望别人能体谅自己，如果别人不体谅，那自己也不体谅；谁还愿意再吃一顿毒打呢~！ 我从他的眼神里面看出了一种凄凉，感伤!\n\n不过，现在我能感觉出来他似乎以已经告别了过去了；不在是那个天天惦记的小孩子了\n\n老 w 说曾经花了很久的时间尝试的这放下过去的种种，但是由于自己的性格，还是很难放下，很难忘记；他是怀旧的人，让一个怀旧的人去忘却过去，放过自己再去重新生活，那对他来说绝对是做不到的；\n\n他年轻的时候也不像现在一样成熟稳重，脾气不好，也很冲动，但是现在他变得成熟了，也变得温柔了，也变得有耐心了，也变得有耐心了，他知道怎么去体谅别人，怎么去照顾别人的感受，怎么去理解别人，怎么去尊重别人；\n\n我没有问他究竟是遇到了什么事情，让他放下过去，重新开始，还是说他一直都在努力;\n\n因为每个人都会有不想诉说的事情，不想回忆的事情，不想去说，但是又不得不去说;五年磨一人，不论是性格还是脾气还是其他；\n\n不过现在的他 却让我很尊敬，他让我觉得他是一个很优秀的人；这样的精神，智慧确实值得我学习的；人都是朝着前面走的，谁也不愿意回忆自己的那段不想回忆的故事；\n\n不过，他能从之前的小魔王转头转换成另一人，我就已经觉得很厉害了； 因为这样的人拥有大智慧， 不会因为一些事情而影响自己；他确实很在努力的生活；\n\n虽然别人觉得简单，就是时间一长什么事情就忘了，但是实际行动起来并没有嘴上说的那么简单；想要一个人完全改变，不是说时间长了就行，他的改变真的就像是修仙小说里面，被人杀死，然后重生，然后修成正果一样；或者说被夺舍，虽然有着之前的记忆，但是活下来的确实另外的一个人;\n","source":"_posts/生活日志/生活/五年时间的蜕变, 他回来了!.md","raw":"---\ntitle: 生活-五年时间的蜕变, 他回来了!\nabbrlink: 56f60a88\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 生活\n---\n\n# 前言\n\n**我之前就在想 有没有那样的一种人就是：年少轻狂，以自我为中心，当真正回头的那一刻才会放下过去的种种；以另一种身份珍惜剩下的时间，珍惜生活；过下过去，不会再去纠结过去的种种!**\n\n心理学有一种就这样的结论：**如果一个人的内心很强大，那么他就会很淡然，不会因为一些事情而影响自己，也不会因为一些事情而影响自己。如果一个人内心很脆弱，那么他就会很敏感，会因为一些事情而影响自己，影响自己。如果一个人不愿回忆过去躲避过去，那么他就会很痛苦，痛苦到无法忍受。**\n\n近期工作不是太忙，去和老 W 吃了一顿饭，当时我就把我的疑问说了出来：年少轻狂以自我为中心，后面因为一件事放下了过去的种种不会再去折磨自己；\n\n他说这样的人是存在：往往这样人都是很厉害的，折磨纠结自己这么长时间的人，事，物等等；能在较长的时间去忘记，放下，重新开始;不难为一种大智慧；\n\n他后来又和我分享了一件他的事情：老 w 确实也是这样一种人，他年轻的时候，很轻狂，很自大，很自我，以自我为中心，并不会去照顾其他的人一些感受，一些事情他都是放在内心世界，想要从他嘴里套出点什么基本不可能；\n\n他年轻的时候，那时候的他简直是小魔王，叛逆的很；老家盛行赶集，没到一定的时间就会在村里进行赶集，当时他和家里人去了远在 10km 的姑姑家，因为那个时间他迷恋电脑，正好他姑姑家有电脑，他想去玩被家里人阻止了；好说歹说就是不让玩，结果他“离家出走了”，竟然在农村的田地了走了将近 12km 的路程回家了；那个时间亲戚长辈都在找他，结果村里人打电话说他已经回来了；\n\n等到家里人骑着摩托回去之后，肯定免不了一顿“皮鞭炒肉丝”；\n\n那时候他还是个少年，他以为自己很牛逼，以为自己很厉害，以为自己很自我；结果换来的是一顿毒打；\n\n那我问他：如果换成现在，他会这样吗？他说：不会；因为谁都希望别人能体谅自己，如果别人不体谅，那自己也不体谅；谁还愿意再吃一顿毒打呢~！ 我从他的眼神里面看出了一种凄凉，感伤!\n\n不过，现在我能感觉出来他似乎以已经告别了过去了；不在是那个天天惦记的小孩子了\n\n老 w 说曾经花了很久的时间尝试的这放下过去的种种，但是由于自己的性格，还是很难放下，很难忘记；他是怀旧的人，让一个怀旧的人去忘却过去，放过自己再去重新生活，那对他来说绝对是做不到的；\n\n他年轻的时候也不像现在一样成熟稳重，脾气不好，也很冲动，但是现在他变得成熟了，也变得温柔了，也变得有耐心了，也变得有耐心了，他知道怎么去体谅别人，怎么去照顾别人的感受，怎么去理解别人，怎么去尊重别人；\n\n我没有问他究竟是遇到了什么事情，让他放下过去，重新开始，还是说他一直都在努力;\n\n因为每个人都会有不想诉说的事情，不想回忆的事情，不想去说，但是又不得不去说;五年磨一人，不论是性格还是脾气还是其他；\n\n不过现在的他 却让我很尊敬，他让我觉得他是一个很优秀的人；这样的精神，智慧确实值得我学习的；人都是朝着前面走的，谁也不愿意回忆自己的那段不想回忆的故事；\n\n不过，他能从之前的小魔王转头转换成另一人，我就已经觉得很厉害了； 因为这样的人拥有大智慧， 不会因为一些事情而影响自己；他确实很在努力的生活；\n\n虽然别人觉得简单，就是时间一长什么事情就忘了，但是实际行动起来并没有嘴上说的那么简单；想要一个人完全改变，不是说时间长了就行，他的改变真的就像是修仙小说里面，被人杀死，然后重生，然后修成正果一样；或者说被夺舍，虽然有着之前的记忆，但是活下来的确实另外的一个人;\n","slug":"生活日志/生活/五年时间的蜕变, 他回来了!","published":1,"updated":"2025-03-12T10:06:46.480Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j30054fg9m9ue66cz9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>我之前就在想 有没有那样的一种人就是：年少轻狂，以自我为中心，当真正回头的那一刻才会放下过去的种种；以另一种身份珍惜剩下的时间，珍惜生活；过下过去，不会再去纠结过去的种种!</strong></p>\n<p>心理学有一种就这样的结论：<strong>如果一个人的内心很强大，那么他就会很淡然，不会因为一些事情而影响自己，也不会因为一些事情而影响自己。如果一个人内心很脆弱，那么他就会很敏感，会因为一些事情而影响自己，影响自己。如果一个人不愿回忆过去躲避过去，那么他就会很痛苦，痛苦到无法忍受。</strong></p>\n<p>近期工作不是太忙，去和老 W 吃了一顿饭，当时我就把我的疑问说了出来：年少轻狂以自我为中心，后面因为一件事放下了过去的种种不会再去折磨自己；</p>\n<p>他说这样的人是存在：往往这样人都是很厉害的，折磨纠结自己这么长时间的人，事，物等等；能在较长的时间去忘记，放下，重新开始;不难为一种大智慧；</p>\n<p>他后来又和我分享了一件他的事情：老 w 确实也是这样一种人，他年轻的时候，很轻狂，很自大，很自我，以自我为中心，并不会去照顾其他的人一些感受，一些事情他都是放在内心世界，想要从他嘴里套出点什么基本不可能；</p>\n<p>他年轻的时候，那时候的他简直是小魔王，叛逆的很；老家盛行赶集，没到一定的时间就会在村里进行赶集，当时他和家里人去了远在 10km 的姑姑家，因为那个时间他迷恋电脑，正好他姑姑家有电脑，他想去玩被家里人阻止了；好说歹说就是不让玩，结果他“离家出走了”，竟然在农村的田地了走了将近 12km 的路程回家了；那个时间亲戚长辈都在找他，结果村里人打电话说他已经回来了；</p>\n<p>等到家里人骑着摩托回去之后，肯定免不了一顿“皮鞭炒肉丝”；</p>\n<p>那时候他还是个少年，他以为自己很牛逼，以为自己很厉害，以为自己很自我；结果换来的是一顿毒打；</p>\n<p>那我问他：如果换成现在，他会这样吗？他说：不会；因为谁都希望别人能体谅自己，如果别人不体谅，那自己也不体谅；谁还愿意再吃一顿毒打呢~！ 我从他的眼神里面看出了一种凄凉，感伤!</p>\n<p>不过，现在我能感觉出来他似乎以已经告别了过去了；不在是那个天天惦记的小孩子了</p>\n<p>老 w 说曾经花了很久的时间尝试的这放下过去的种种，但是由于自己的性格，还是很难放下，很难忘记；他是怀旧的人，让一个怀旧的人去忘却过去，放过自己再去重新生活，那对他来说绝对是做不到的；</p>\n<p>他年轻的时候也不像现在一样成熟稳重，脾气不好，也很冲动，但是现在他变得成熟了，也变得温柔了，也变得有耐心了，也变得有耐心了，他知道怎么去体谅别人，怎么去照顾别人的感受，怎么去理解别人，怎么去尊重别人；</p>\n<p>我没有问他究竟是遇到了什么事情，让他放下过去，重新开始，还是说他一直都在努力;</p>\n<p>因为每个人都会有不想诉说的事情，不想回忆的事情，不想去说，但是又不得不去说;五年磨一人，不论是性格还是脾气还是其他；</p>\n<p>不过现在的他 却让我很尊敬，他让我觉得他是一个很优秀的人；这样的精神，智慧确实值得我学习的；人都是朝着前面走的，谁也不愿意回忆自己的那段不想回忆的故事；</p>\n<p>不过，他能从之前的小魔王转头转换成另一人，我就已经觉得很厉害了； 因为这样的人拥有大智慧， 不会因为一些事情而影响自己；他确实很在努力的生活；</p>\n<p>虽然别人觉得简单，就是时间一长什么事情就忘了，但是实际行动起来并没有嘴上说的那么简单；想要一个人完全改变，不是说时间长了就行，他的改变真的就像是修仙小说里面，被人杀死，然后重生，然后修成正果一样；或者说被夺舍，虽然有着之前的记忆，但是活下来的确实另外的一个人;</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>我之前就在想 有没有那样的一种人就是：年少轻狂，以自我为中心，当真正回头的那一刻才会放下过去的种种；以另一种身份珍惜剩下的时间，珍惜生活；过下过去，不会再去纠结过去的种种!</strong></p>\n<p>心理学有一种就这样的结论：<strong>如果一个人的内心很强大，那么他就会很淡然，不会因为一些事情而影响自己，也不会因为一些事情而影响自己。如果一个人内心很脆弱，那么他就会很敏感，会因为一些事情而影响自己，影响自己。如果一个人不愿回忆过去躲避过去，那么他就会很痛苦，痛苦到无法忍受。</strong></p>\n<p>近期工作不是太忙，去和老 W 吃了一顿饭，当时我就把我的疑问说了出来：年少轻狂以自我为中心，后面因为一件事放下了过去的种种不会再去折磨自己；</p>\n<p>他说这样的人是存在：往往这样人都是很厉害的，折磨纠结自己这么长时间的人，事，物等等；能在较长的时间去忘记，放下，重新开始;不难为一种大智慧；</p>\n<p>他后来又和我分享了一件他的事情：老 w 确实也是这样一种人，他年轻的时候，很轻狂，很自大，很自我，以自我为中心，并不会去照顾其他的人一些感受，一些事情他都是放在内心世界，想要从他嘴里套出点什么基本不可能；</p>\n<p>他年轻的时候，那时候的他简直是小魔王，叛逆的很；老家盛行赶集，没到一定的时间就会在村里进行赶集，当时他和家里人去了远在 10km 的姑姑家，因为那个时间他迷恋电脑，正好他姑姑家有电脑，他想去玩被家里人阻止了；好说歹说就是不让玩，结果他“离家出走了”，竟然在农村的田地了走了将近 12km 的路程回家了；那个时间亲戚长辈都在找他，结果村里人打电话说他已经回来了；</p>\n<p>等到家里人骑着摩托回去之后，肯定免不了一顿“皮鞭炒肉丝”；</p>\n<p>那时候他还是个少年，他以为自己很牛逼，以为自己很厉害，以为自己很自我；结果换来的是一顿毒打；</p>\n<p>那我问他：如果换成现在，他会这样吗？他说：不会；因为谁都希望别人能体谅自己，如果别人不体谅，那自己也不体谅；谁还愿意再吃一顿毒打呢~！ 我从他的眼神里面看出了一种凄凉，感伤!</p>\n<p>不过，现在我能感觉出来他似乎以已经告别了过去了；不在是那个天天惦记的小孩子了</p>\n<p>老 w 说曾经花了很久的时间尝试的这放下过去的种种，但是由于自己的性格，还是很难放下，很难忘记；他是怀旧的人，让一个怀旧的人去忘却过去，放过自己再去重新生活，那对他来说绝对是做不到的；</p>\n<p>他年轻的时候也不像现在一样成熟稳重，脾气不好，也很冲动，但是现在他变得成熟了，也变得温柔了，也变得有耐心了，也变得有耐心了，他知道怎么去体谅别人，怎么去照顾别人的感受，怎么去理解别人，怎么去尊重别人；</p>\n<p>我没有问他究竟是遇到了什么事情，让他放下过去，重新开始，还是说他一直都在努力;</p>\n<p>因为每个人都会有不想诉说的事情，不想回忆的事情，不想去说，但是又不得不去说;五年磨一人，不论是性格还是脾气还是其他；</p>\n<p>不过现在的他 却让我很尊敬，他让我觉得他是一个很优秀的人；这样的精神，智慧确实值得我学习的；人都是朝着前面走的，谁也不愿意回忆自己的那段不想回忆的故事；</p>\n<p>不过，他能从之前的小魔王转头转换成另一人，我就已经觉得很厉害了； 因为这样的人拥有大智慧， 不会因为一些事情而影响自己；他确实很在努力的生活；</p>\n<p>虽然别人觉得简单，就是时间一长什么事情就忘了，但是实际行动起来并没有嘴上说的那么简单；想要一个人完全改变，不是说时间长了就行，他的改变真的就像是修仙小说里面，被人杀死，然后重生，然后修成正果一样；或者说被夺舍，虽然有着之前的记忆，但是活下来的确实另外的一个人;</p>\n"},{"title":"生活-我自己拿手好菜-红烧牛肉面","abbrlink":"f19ae29b","date":"2023-10-08T01:05:01.000Z","_content":"\n# 前言\n\n**灵感来源于生活，只有珍惜生活才能体验到人生的意义；**\n\n## 准备起来\n\n1. 新鲜的牛肉块或者牛肉粒 🥩, 俩碗面条大概 10 粒牛肉粒左右；看自己情况而定；\n2. 焯水牛肉用的葱姜蒜料酒 🍷，3 片姜片，斜刀切成 3 块大葱；\n3. 新鲜面条 🍜 一盒，当然挂面也是可以的；可以根据自己的口味而定；\n4. 又红又大的番茄 🍅，或者可以准备点青菜 🥬，或者可以放点其他的蔬菜\n5. 准备开水一壶，后面会用于炖肉 💦\n\n## 来吧，上手\n\n首先先把材料准备好，取出牛肉粒 10 粒左右备用，将焯水的材料葱姜料酒备好，牛肉冷水下锅，加入葱姜料酒，大概 10 分钟左右，将焯出的血沫捞出，这雪沫是有腥味的，把这些腥味捞出就会大大减少自带腥味；牛肉捞出之前先用汤水将牛肉冲洗干净；之后放在盘子里备好；\n\n来吧，起锅烧油，先炒一下牛肉增添几分香味；油热之后，将大蒜，大葱放入锅中，葱味炒出之后将备好的牛肉粒放入锅中，等 8s 左右翻炒一下，之后放点料酒再翻炒加下，放点干辣椒，桂皮，香叶，八角，生抽，少量老抽进行翻炒，每块牛肉均匀上色之后，放点红油豆瓣酱，这一步是为了汤汁颜色上色；\n\n牛肉上色之后汤汁呈红色，这时可以放点番茄进去，可以切成大块形状的；放入锅中进行翻炒，之后放入压力锅中，切近：**注水切记是开水或者温水，如果是冷水的话牛肉肉质口感会很差；**；我的压力锅限时是`45分钟`，我喜欢软烂的牛肉，所以炖的时间会长一些；\n\n距炖好的牛头还剩`10分钟左右`，起锅烧水，准备下面条，这里就没有什么特别的步骤了，就是水开之后放入适量的面条，需要注意的是面条软硬程度看个人口味；不用太软即可；\n\n面条煮好之后，牛肉就就好了；将压力锅中的压力释放出去（如何释放可看产品说明书）；之后就会问到香喷喷的牛肉；\n\n将煮好的面条捞出放至碗中，将压力锅中的牛肉和汤汁浇在面条之上，这样一碗简单的牛肉面就做好了；等品尝的时候会有辣椒的口感，也有番茄的香味；\n\n## 来吧，展示\n\n![牛肉面](https://wangxiaoze-view.github.io/picx-images-hosting/images/life_food_1.jpeg)\n","source":"_posts/生活日志/生活/我的拿手好菜-红烧牛肉面.md","raw":"---\ntitle: 生活-我自己拿手好菜-红烧牛肉面\nabbrlink: f19ae29b\ndate: 2023-10-08 09:05:01\ncategories: \n  - 生活日志\ntags:\n  - 生活\n---\n\n# 前言\n\n**灵感来源于生活，只有珍惜生活才能体验到人生的意义；**\n\n## 准备起来\n\n1. 新鲜的牛肉块或者牛肉粒 🥩, 俩碗面条大概 10 粒牛肉粒左右；看自己情况而定；\n2. 焯水牛肉用的葱姜蒜料酒 🍷，3 片姜片，斜刀切成 3 块大葱；\n3. 新鲜面条 🍜 一盒，当然挂面也是可以的；可以根据自己的口味而定；\n4. 又红又大的番茄 🍅，或者可以准备点青菜 🥬，或者可以放点其他的蔬菜\n5. 准备开水一壶，后面会用于炖肉 💦\n\n## 来吧，上手\n\n首先先把材料准备好，取出牛肉粒 10 粒左右备用，将焯水的材料葱姜料酒备好，牛肉冷水下锅，加入葱姜料酒，大概 10 分钟左右，将焯出的血沫捞出，这雪沫是有腥味的，把这些腥味捞出就会大大减少自带腥味；牛肉捞出之前先用汤水将牛肉冲洗干净；之后放在盘子里备好；\n\n来吧，起锅烧油，先炒一下牛肉增添几分香味；油热之后，将大蒜，大葱放入锅中，葱味炒出之后将备好的牛肉粒放入锅中，等 8s 左右翻炒一下，之后放点料酒再翻炒加下，放点干辣椒，桂皮，香叶，八角，生抽，少量老抽进行翻炒，每块牛肉均匀上色之后，放点红油豆瓣酱，这一步是为了汤汁颜色上色；\n\n牛肉上色之后汤汁呈红色，这时可以放点番茄进去，可以切成大块形状的；放入锅中进行翻炒，之后放入压力锅中，切近：**注水切记是开水或者温水，如果是冷水的话牛肉肉质口感会很差；**；我的压力锅限时是`45分钟`，我喜欢软烂的牛肉，所以炖的时间会长一些；\n\n距炖好的牛头还剩`10分钟左右`，起锅烧水，准备下面条，这里就没有什么特别的步骤了，就是水开之后放入适量的面条，需要注意的是面条软硬程度看个人口味；不用太软即可；\n\n面条煮好之后，牛肉就就好了；将压力锅中的压力释放出去（如何释放可看产品说明书）；之后就会问到香喷喷的牛肉；\n\n将煮好的面条捞出放至碗中，将压力锅中的牛肉和汤汁浇在面条之上，这样一碗简单的牛肉面就做好了；等品尝的时候会有辣椒的口感，也有番茄的香味；\n\n## 来吧，展示\n\n![牛肉面](https://wangxiaoze-view.github.io/picx-images-hosting/images/life_food_1.jpeg)\n","slug":"生活日志/生活/我的拿手好菜-红烧牛肉面","published":1,"updated":"2025-03-13T10:16:16.551Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j30057fg9m7bsscwkx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>灵感来源于生活，只有珍惜生活才能体验到人生的意义；</strong></p>\n<h2 id=\"准备起来\"><a href=\"#准备起来\" class=\"headerlink\" title=\"准备起来\"></a>准备起来</h2><ol>\n<li>新鲜的牛肉块或者牛肉粒 🥩, 俩碗面条大概 10 粒牛肉粒左右；看自己情况而定；</li>\n<li>焯水牛肉用的葱姜蒜料酒 🍷，3 片姜片，斜刀切成 3 块大葱；</li>\n<li>新鲜面条 🍜 一盒，当然挂面也是可以的；可以根据自己的口味而定；</li>\n<li>又红又大的番茄 🍅，或者可以准备点青菜 🥬，或者可以放点其他的蔬菜</li>\n<li>准备开水一壶，后面会用于炖肉 💦</li>\n</ol>\n<h2 id=\"来吧，上手\"><a href=\"#来吧，上手\" class=\"headerlink\" title=\"来吧，上手\"></a>来吧，上手</h2><p>首先先把材料准备好，取出牛肉粒 10 粒左右备用，将焯水的材料葱姜料酒备好，牛肉冷水下锅，加入葱姜料酒，大概 10 分钟左右，将焯出的血沫捞出，这雪沫是有腥味的，把这些腥味捞出就会大大减少自带腥味；牛肉捞出之前先用汤水将牛肉冲洗干净；之后放在盘子里备好；</p>\n<p>来吧，起锅烧油，先炒一下牛肉增添几分香味；油热之后，将大蒜，大葱放入锅中，葱味炒出之后将备好的牛肉粒放入锅中，等 8s 左右翻炒一下，之后放点料酒再翻炒加下，放点干辣椒，桂皮，香叶，八角，生抽，少量老抽进行翻炒，每块牛肉均匀上色之后，放点红油豆瓣酱，这一步是为了汤汁颜色上色；</p>\n<p>牛肉上色之后汤汁呈红色，这时可以放点番茄进去，可以切成大块形状的；放入锅中进行翻炒，之后放入压力锅中，切近：<strong>注水切记是开水或者温水，如果是冷水的话牛肉肉质口感会很差；</strong>；我的压力锅限时是<code>45分钟</code>，我喜欢软烂的牛肉，所以炖的时间会长一些；</p>\n<p>距炖好的牛头还剩<code>10分钟左右</code>，起锅烧水，准备下面条，这里就没有什么特别的步骤了，就是水开之后放入适量的面条，需要注意的是面条软硬程度看个人口味；不用太软即可；</p>\n<p>面条煮好之后，牛肉就就好了；将压力锅中的压力释放出去（如何释放可看产品说明书）；之后就会问到香喷喷的牛肉；</p>\n<p>将煮好的面条捞出放至碗中，将压力锅中的牛肉和汤汁浇在面条之上，这样一碗简单的牛肉面就做好了；等品尝的时候会有辣椒的口感，也有番茄的香味；</p>\n<h2 id=\"来吧，展示\"><a href=\"#来吧，展示\" class=\"headerlink\" title=\"来吧，展示\"></a>来吧，展示</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/life_food_1.jpeg\" alt=\"牛肉面\"></p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>灵感来源于生活，只有珍惜生活才能体验到人生的意义；</strong></p>\n<h2 id=\"准备起来\"><a href=\"#准备起来\" class=\"headerlink\" title=\"准备起来\"></a>准备起来</h2><ol>\n<li>新鲜的牛肉块或者牛肉粒 🥩, 俩碗面条大概 10 粒牛肉粒左右；看自己情况而定；</li>\n<li>焯水牛肉用的葱姜蒜料酒 🍷，3 片姜片，斜刀切成 3 块大葱；</li>\n<li>新鲜面条 🍜 一盒，当然挂面也是可以的；可以根据自己的口味而定；</li>\n<li>又红又大的番茄 🍅，或者可以准备点青菜 🥬，或者可以放点其他的蔬菜</li>\n<li>准备开水一壶，后面会用于炖肉 💦</li>\n</ol>\n<h2 id=\"来吧，上手\"><a href=\"#来吧，上手\" class=\"headerlink\" title=\"来吧，上手\"></a>来吧，上手</h2><p>首先先把材料准备好，取出牛肉粒 10 粒左右备用，将焯水的材料葱姜料酒备好，牛肉冷水下锅，加入葱姜料酒，大概 10 分钟左右，将焯出的血沫捞出，这雪沫是有腥味的，把这些腥味捞出就会大大减少自带腥味；牛肉捞出之前先用汤水将牛肉冲洗干净；之后放在盘子里备好；</p>\n<p>来吧，起锅烧油，先炒一下牛肉增添几分香味；油热之后，将大蒜，大葱放入锅中，葱味炒出之后将备好的牛肉粒放入锅中，等 8s 左右翻炒一下，之后放点料酒再翻炒加下，放点干辣椒，桂皮，香叶，八角，生抽，少量老抽进行翻炒，每块牛肉均匀上色之后，放点红油豆瓣酱，这一步是为了汤汁颜色上色；</p>\n<p>牛肉上色之后汤汁呈红色，这时可以放点番茄进去，可以切成大块形状的；放入锅中进行翻炒，之后放入压力锅中，切近：<strong>注水切记是开水或者温水，如果是冷水的话牛肉肉质口感会很差；</strong>；我的压力锅限时是<code>45分钟</code>，我喜欢软烂的牛肉，所以炖的时间会长一些；</p>\n<p>距炖好的牛头还剩<code>10分钟左右</code>，起锅烧水，准备下面条，这里就没有什么特别的步骤了，就是水开之后放入适量的面条，需要注意的是面条软硬程度看个人口味；不用太软即可；</p>\n<p>面条煮好之后，牛肉就就好了；将压力锅中的压力释放出去（如何释放可看产品说明书）；之后就会问到香喷喷的牛肉；</p>\n<p>将煮好的面条捞出放至碗中，将压力锅中的牛肉和汤汁浇在面条之上，这样一碗简单的牛肉面就做好了；等品尝的时候会有辣椒的口感，也有番茄的香味；</p>\n<h2 id=\"来吧，展示\"><a href=\"#来吧，展示\" class=\"headerlink\" title=\"来吧，展示\"></a>来吧，展示</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/life_food_1.jpeg\" alt=\"牛肉面\"></p>\n"},{"title":"生活-拍摄三要素","abbrlink":"57424cee","date":"2023-10-08T01:05:01.000Z","_content":"\n# 背景\n\n为什么会总结拍摄呢？\n\n**你可以不会拍照，但是你的学会拍照** 拍摄不是为了炫耀，而是为了**记录生活**。\n\n当然最近我也是在学习拍摄，但是还是有很多东西需要总结，比如：\n\n1. 拍摄三要素： 感光度、光圈、快门\n2. 拍摄技巧： 曝光技巧、光圈技巧、快门技巧\n3. 构图技巧： 三分线构图、对角线构图、框架式构图等等\n4. ...\n\n接下来，总结一下三元素\n\n## 快门\n\n### 什么是快门？\n\n快门是拍摄的三要素之一，快门是控制曝光时间的关键; 快门是相机中 **<font color=\"#ff0000\">用来控制光线照射感光元件时间的装置</font>**, 由薄金属片或一组不透光的叶片组成；\n\n当然可以把快门理解成一道门：\n\n- 门开启，光线进入，门关闭，光线停止进入\n- 门开启与关闭的时间(快门速度)影响相机的进光量，而从控制照片的曝光；\n\n开门的速度单位为：<font color=\"#ff0000\">秒</font>： 比如 1/125 就是一百二十五分支一秒；\n数值越大， 比如 1/125s < 1/50s < 1/15s < 1s: <font color=\"#ff0000\">快门开启的时间越长，相机进光量越多，画面越亮，反之越小，进光量越少，画面越暗。</font>\n\n### 快门速度\n\n光圈, iso 不变的情况下：\n\n1. 快门开启的时间越长，快门速度越慢，画面越亮\n2. 快门开启的时间越短，快门速度越快，画面越暗\n\n![快门速度](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621200359.7ax0zp1o70.webp)\n\n![快门速度](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621200415.73tt49firh.webp)\n\n### 快门的应用\n\n1. 高速快门-定格抓拍：快门速度较快，可以定格刹那间的形状，比如：抓拍动物，运动员等等\n2. 慢速快门-尾灯拉丝：拍摄尾灯拉丝效果需要慢门拍摄也称“长曝光”是相机记录车流运动轨迹之后行程的照片效果；\n\n**慢速快门也会造成画面模糊，要注意快门速度不能低于安全快门速度**\n\n## 光圈\n\n### 什么是光圈？\n\n光圈就是镜头上的一个洞，一个控制光线进入相机内部的孔径装置，通过控制叶片的开合程度控制光孔的大小，进而影响进光量；\n\n在相机上通常<font color=\"#ff0000\">F</font>表示的是光圈的大小\n\n- F 值越小，光圈越大，进光量越多\n- F 值越大，光圈越小，进光量越小\n\n![光圈](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201653.1zi4eztwgs.webp)\n\n### 常用参数\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201823.2a4y85bktd.webp)\n\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201836.7ljusuxnhf.webp)\n\n## 感光度 ISO\n\n### 什么是感光度？\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202116.45hj0rr8sa.webp)\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202218.8ad4cvppfy.webp)\n\n### 影响曝光\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202319.4n7kpcvd5n.webp)\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202329.5j424t51lo.webp)\n\n### 影响画质\n\n在能保证相机的稳定，能保证被拍摄主体清晰时，使用尽可能低的感光度，从而保证画质；\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202504.2h863l5tg0.webp)\n\n### 常用参数\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202645.99t7q1y9ot.webp)\n","source":"_posts/生活日志/生活/拍摄三要素.md","raw":"---\ntitle: 生活-拍摄三要素\nabbrlink: 57424cee\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 摄影\n---\n\n# 背景\n\n为什么会总结拍摄呢？\n\n**你可以不会拍照，但是你的学会拍照** 拍摄不是为了炫耀，而是为了**记录生活**。\n\n当然最近我也是在学习拍摄，但是还是有很多东西需要总结，比如：\n\n1. 拍摄三要素： 感光度、光圈、快门\n2. 拍摄技巧： 曝光技巧、光圈技巧、快门技巧\n3. 构图技巧： 三分线构图、对角线构图、框架式构图等等\n4. ...\n\n接下来，总结一下三元素\n\n## 快门\n\n### 什么是快门？\n\n快门是拍摄的三要素之一，快门是控制曝光时间的关键; 快门是相机中 **<font color=\"#ff0000\">用来控制光线照射感光元件时间的装置</font>**, 由薄金属片或一组不透光的叶片组成；\n\n当然可以把快门理解成一道门：\n\n- 门开启，光线进入，门关闭，光线停止进入\n- 门开启与关闭的时间(快门速度)影响相机的进光量，而从控制照片的曝光；\n\n开门的速度单位为：<font color=\"#ff0000\">秒</font>： 比如 1/125 就是一百二十五分支一秒；\n数值越大， 比如 1/125s < 1/50s < 1/15s < 1s: <font color=\"#ff0000\">快门开启的时间越长，相机进光量越多，画面越亮，反之越小，进光量越少，画面越暗。</font>\n\n### 快门速度\n\n光圈, iso 不变的情况下：\n\n1. 快门开启的时间越长，快门速度越慢，画面越亮\n2. 快门开启的时间越短，快门速度越快，画面越暗\n\n![快门速度](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621200359.7ax0zp1o70.webp)\n\n![快门速度](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621200415.73tt49firh.webp)\n\n### 快门的应用\n\n1. 高速快门-定格抓拍：快门速度较快，可以定格刹那间的形状，比如：抓拍动物，运动员等等\n2. 慢速快门-尾灯拉丝：拍摄尾灯拉丝效果需要慢门拍摄也称“长曝光”是相机记录车流运动轨迹之后行程的照片效果；\n\n**慢速快门也会造成画面模糊，要注意快门速度不能低于安全快门速度**\n\n## 光圈\n\n### 什么是光圈？\n\n光圈就是镜头上的一个洞，一个控制光线进入相机内部的孔径装置，通过控制叶片的开合程度控制光孔的大小，进而影响进光量；\n\n在相机上通常<font color=\"#ff0000\">F</font>表示的是光圈的大小\n\n- F 值越小，光圈越大，进光量越多\n- F 值越大，光圈越小，进光量越小\n\n![光圈](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201653.1zi4eztwgs.webp)\n\n### 常用参数\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201823.2a4y85bktd.webp)\n\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621201836.7ljusuxnhf.webp)\n\n## 感光度 ISO\n\n### 什么是感光度？\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202116.45hj0rr8sa.webp)\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202218.8ad4cvppfy.webp)\n\n### 影响曝光\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202319.4n7kpcvd5n.webp)\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202329.5j424t51lo.webp)\n\n### 影响画质\n\n在能保证相机的稳定，能保证被拍摄主体清晰时，使用尽可能低的感光度，从而保证画质；\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202504.2h863l5tg0.webp)\n\n### 常用参数\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/微信截图_20240621202645.99t7q1y9ot.webp)\n","slug":"生活日志/生活/拍摄三要素","published":1,"updated":"2025-03-13T10:16:15.421Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j3005afg9m12666xqn","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>为什么会总结拍摄呢？</p>\n<p><strong>你可以不会拍照，但是你的学会拍照</strong> 拍摄不是为了炫耀，而是为了<strong>记录生活</strong>。</p>\n<p>当然最近我也是在学习拍摄，但是还是有很多东西需要总结，比如：</p>\n<ol>\n<li>拍摄三要素： 感光度、光圈、快门</li>\n<li>拍摄技巧： 曝光技巧、光圈技巧、快门技巧</li>\n<li>构图技巧： 三分线构图、对角线构图、框架式构图等等</li>\n<li>…</li>\n</ol>\n<p>接下来，总结一下三元素</p>\n<h2 id=\"快门\"><a href=\"#快门\" class=\"headerlink\" title=\"快门\"></a>快门</h2><h3 id=\"什么是快门？\"><a href=\"#什么是快门？\" class=\"headerlink\" title=\"什么是快门？\"></a>什么是快门？</h3><p>快门是拍摄的三要素之一，快门是控制曝光时间的关键; 快门是相机中 <strong><font color=\"#ff0000\">用来控制光线照射感光元件时间的装置</font></strong>, 由薄金属片或一组不透光的叶片组成；</p>\n<p>当然可以把快门理解成一道门：</p>\n<ul>\n<li>门开启，光线进入，门关闭，光线停止进入</li>\n<li>门开启与关闭的时间(快门速度)影响相机的进光量，而从控制照片的曝光；</li>\n</ul>\n<p>开门的速度单位为：<font color=\"#ff0000\">秒</font>： 比如 1&#x2F;125 就是一百二十五分支一秒；<br>数值越大， 比如 1&#x2F;125s &lt; 1&#x2F;50s &lt; 1&#x2F;15s &lt; 1s: <font color=\"#ff0000\">快门开启的时间越长，相机进光量越多，画面越亮，反之越小，进光量越少，画面越暗。</font></p>\n<h3 id=\"快门速度\"><a href=\"#快门速度\" class=\"headerlink\" title=\"快门速度\"></a>快门速度</h3><p>光圈, iso 不变的情况下：</p>\n<ol>\n<li>快门开启的时间越长，快门速度越慢，画面越亮</li>\n<li>快门开启的时间越短，快门速度越快，画面越暗</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621200359.7ax0zp1o70.webp\" alt=\"快门速度\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621200415.73tt49firh.webp\" alt=\"快门速度\"></p>\n<h3 id=\"快门的应用\"><a href=\"#快门的应用\" class=\"headerlink\" title=\"快门的应用\"></a>快门的应用</h3><ol>\n<li>高速快门-定格抓拍：快门速度较快，可以定格刹那间的形状，比如：抓拍动物，运动员等等</li>\n<li>慢速快门-尾灯拉丝：拍摄尾灯拉丝效果需要慢门拍摄也称“长曝光”是相机记录车流运动轨迹之后行程的照片效果；</li>\n</ol>\n<p><strong>慢速快门也会造成画面模糊，要注意快门速度不能低于安全快门速度</strong></p>\n<h2 id=\"光圈\"><a href=\"#光圈\" class=\"headerlink\" title=\"光圈\"></a>光圈</h2><h3 id=\"什么是光圈？\"><a href=\"#什么是光圈？\" class=\"headerlink\" title=\"什么是光圈？\"></a>什么是光圈？</h3><p>光圈就是镜头上的一个洞，一个控制光线进入相机内部的孔径装置，通过控制叶片的开合程度控制光孔的大小，进而影响进光量；</p>\n<p>在相机上通常<font color=\"#ff0000\">F</font>表示的是光圈的大小</p>\n<ul>\n<li>F 值越小，光圈越大，进光量越多</li>\n<li>F 值越大，光圈越小，进光量越小</li>\n</ul>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201653.1zi4eztwgs.webp\" alt=\"光圈\"></p>\n<h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201823.2a4y85bktd.webp\" alt=\"1\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201836.7ljusuxnhf.webp\" alt=\"2\"></p>\n<h2 id=\"感光度-ISO\"><a href=\"#感光度-ISO\" class=\"headerlink\" title=\"感光度 ISO\"></a>感光度 ISO</h2><h3 id=\"什么是感光度？\"><a href=\"#什么是感光度？\" class=\"headerlink\" title=\"什么是感光度？\"></a>什么是感光度？</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202116.45hj0rr8sa.webp\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202218.8ad4cvppfy.webp\" alt=\"2\"></p>\n<h3 id=\"影响曝光\"><a href=\"#影响曝光\" class=\"headerlink\" title=\"影响曝光\"></a>影响曝光</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202319.4n7kpcvd5n.webp\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202329.5j424t51lo.webp\" alt=\"2\"></p>\n<h3 id=\"影响画质\"><a href=\"#影响画质\" class=\"headerlink\" title=\"影响画质\"></a>影响画质</h3><p>在能保证相机的稳定，能保证被拍摄主体清晰时，使用尽可能低的感光度，从而保证画质；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202504.2h863l5tg0.webp\" alt=\"1\"></p>\n<h3 id=\"常用参数-1\"><a href=\"#常用参数-1\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202645.99t7q1y9ot.webp\" alt=\"1\"></p>\n","excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>为什么会总结拍摄呢？</p>\n<p><strong>你可以不会拍照，但是你的学会拍照</strong> 拍摄不是为了炫耀，而是为了<strong>记录生活</strong>。</p>\n<p>当然最近我也是在学习拍摄，但是还是有很多东西需要总结，比如：</p>\n<ol>\n<li>拍摄三要素： 感光度、光圈、快门</li>\n<li>拍摄技巧： 曝光技巧、光圈技巧、快门技巧</li>\n<li>构图技巧： 三分线构图、对角线构图、框架式构图等等</li>\n<li>…</li>\n</ol>\n<p>接下来，总结一下三元素</p>\n<h2 id=\"快门\"><a href=\"#快门\" class=\"headerlink\" title=\"快门\"></a>快门</h2><h3 id=\"什么是快门？\"><a href=\"#什么是快门？\" class=\"headerlink\" title=\"什么是快门？\"></a>什么是快门？</h3><p>快门是拍摄的三要素之一，快门是控制曝光时间的关键; 快门是相机中 <strong><font color=\"#ff0000\">用来控制光线照射感光元件时间的装置</font></strong>, 由薄金属片或一组不透光的叶片组成；</p>\n<p>当然可以把快门理解成一道门：</p>\n<ul>\n<li>门开启，光线进入，门关闭，光线停止进入</li>\n<li>门开启与关闭的时间(快门速度)影响相机的进光量，而从控制照片的曝光；</li>\n</ul>\n<p>开门的速度单位为：<font color=\"#ff0000\">秒</font>： 比如 1&#x2F;125 就是一百二十五分支一秒；<br>数值越大， 比如 1&#x2F;125s &lt; 1&#x2F;50s &lt; 1&#x2F;15s &lt; 1s: <font color=\"#ff0000\">快门开启的时间越长，相机进光量越多，画面越亮，反之越小，进光量越少，画面越暗。</font></p>\n<h3 id=\"快门速度\"><a href=\"#快门速度\" class=\"headerlink\" title=\"快门速度\"></a>快门速度</h3><p>光圈, iso 不变的情况下：</p>\n<ol>\n<li>快门开启的时间越长，快门速度越慢，画面越亮</li>\n<li>快门开启的时间越短，快门速度越快，画面越暗</li>\n</ol>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621200359.7ax0zp1o70.webp\" alt=\"快门速度\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621200415.73tt49firh.webp\" alt=\"快门速度\"></p>\n<h3 id=\"快门的应用\"><a href=\"#快门的应用\" class=\"headerlink\" title=\"快门的应用\"></a>快门的应用</h3><ol>\n<li>高速快门-定格抓拍：快门速度较快，可以定格刹那间的形状，比如：抓拍动物，运动员等等</li>\n<li>慢速快门-尾灯拉丝：拍摄尾灯拉丝效果需要慢门拍摄也称“长曝光”是相机记录车流运动轨迹之后行程的照片效果；</li>\n</ol>\n<p><strong>慢速快门也会造成画面模糊，要注意快门速度不能低于安全快门速度</strong></p>\n<h2 id=\"光圈\"><a href=\"#光圈\" class=\"headerlink\" title=\"光圈\"></a>光圈</h2><h3 id=\"什么是光圈？\"><a href=\"#什么是光圈？\" class=\"headerlink\" title=\"什么是光圈？\"></a>什么是光圈？</h3><p>光圈就是镜头上的一个洞，一个控制光线进入相机内部的孔径装置，通过控制叶片的开合程度控制光孔的大小，进而影响进光量；</p>\n<p>在相机上通常<font color=\"#ff0000\">F</font>表示的是光圈的大小</p>\n<ul>\n<li>F 值越小，光圈越大，进光量越多</li>\n<li>F 值越大，光圈越小，进光量越小</li>\n</ul>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201653.1zi4eztwgs.webp\" alt=\"光圈\"></p>\n<h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201823.2a4y85bktd.webp\" alt=\"1\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621201836.7ljusuxnhf.webp\" alt=\"2\"></p>\n<h2 id=\"感光度-ISO\"><a href=\"#感光度-ISO\" class=\"headerlink\" title=\"感光度 ISO\"></a>感光度 ISO</h2><h3 id=\"什么是感光度？\"><a href=\"#什么是感光度？\" class=\"headerlink\" title=\"什么是感光度？\"></a>什么是感光度？</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202116.45hj0rr8sa.webp\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202218.8ad4cvppfy.webp\" alt=\"2\"></p>\n<h3 id=\"影响曝光\"><a href=\"#影响曝光\" class=\"headerlink\" title=\"影响曝光\"></a>影响曝光</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202319.4n7kpcvd5n.webp\" alt=\"1\"><br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202329.5j424t51lo.webp\" alt=\"2\"></p>\n<h3 id=\"影响画质\"><a href=\"#影响画质\" class=\"headerlink\" title=\"影响画质\"></a>影响画质</h3><p>在能保证相机的稳定，能保证被拍摄主体清晰时，使用尽可能低的感光度，从而保证画质；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202504.2h863l5tg0.webp\" alt=\"1\"></p>\n<h3 id=\"常用参数-1\"><a href=\"#常用参数-1\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240621202645.99t7q1y9ot.webp\" alt=\"1\"></p>\n"},{"title":"生活-沉浸之后的总结（一）","abbrlink":"7aee36a8","date":"2023-10-08T01:05:01.000Z","_content":"\n# 前言\n\n\"沉浸\"了一段时间，今天再次发博文，心情很是不一样；为什么会“沉浸”一段时间呢？\n\n说来话长了, 本想着每个月发大约 4 篇博文总结，但是近期事情比较多，针对公司业务加班，赶进度，开发对应需求；每天晚上回来几乎都在 9.30 左右，在点个外卖，收拾 卫生，在洗个澡就差不多就 0.00 了，也就没什么时间发文章了；\n\n在几年之前，也就是大约是在刚来上海的那 2 年左右吧，自己的大部分时间都是在学习工作技能，我本身就是前端开发人员，毕竟接触的范围和层次不同，才会花费大部分时间去学习。自己的很大精力都在自己的技术层面，知道最近慢慢回归生活了，最后才发现自己失去的时间太多。现在技术经过项目的沉淀，现在慢慢回归生活，才发现好好生活，自己的状态慢慢回到了正轨’\n\n## 放松-旅游\n\n在今年国庆前后去了躺乌镇，也当时放松，同时满足自己的旅游梦；\n\n这次旅游提出者呢，不出意外的话就是我提出的，起初是在抖音上看见徐州小吃街的小吃，嘴瘾就上来了，然后就在微信上跟朋友说：“一周一座城”。然后简单霸气的回了我一个字：”走“；说走咱就走，就喜欢这么直接的，然后过了俩天就直接拉个小群，一共三人，就开始这部署周六日的旅游计划；\n\n因为时间很紧张，所以直接来了一个说走就走的旅行，就把时间定了下来，周六中午就出发；朋友开车，前一天说车轮被钉子扎了，可能去不了，我们赶紧就买了周六下午的票，虹桥火车站出发，到了第二天朋友吧车票退了说是车胎好了，然后我就问了一下具体出发时间，趁着这段时间把家里卫生收拾一下；\n\n下午朋友开车到了我小区，然后直接开启了俩天一夜的乌镇一游；\n\n下午的时候就到了**北栅**, 到了之后，短暂休息了片刻，晚上就直接去了北栅，北栅就是一个风俗文化的地方，顺带在附近吃了个饭；\n\n第二天朋友就直接开车去了**南栅**，南栅是一个历史建筑，里面有很多历史故事，还有许多景点，当然也吃了个饭；\n不过那个饭真的不错，羊肉面肥而不腻，入口即化，就是景区价格有点贵；\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/070A2001.JPG)\n\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/7684aa5598222e4fb6c5da1242264e4.jpg)\n\n![3](https://wangxiaoze-view.github.io/picx-images-hosting/images/b37a9bfe7b4035aa9d1ab5db5ce15b1.jpg)\n\n![4](https://wangxiaoze-view.github.io/picx-images-hosting/images/d1d7945f6766e3f554b884bc5848342.jpg)\n\n![5](https://wangxiaoze-view.github.io/picx-images-hosting/images/7cd6c95e5777a0389c48f44694c9d7d.jpg)\n\n![6](https://wangxiaoze-view.github.io/picx-images-hosting/images/9e8609733f4a8658f2519b47df068f9.jpg)\n\n玩耍时间很短，心情很爽，路上的时候也是随手拍了几张照片，要说照片肯定比不上专业设备 metz，不过拍出来的照片也挺好看的；朋友分享的照片我保存在网盘上了，文件太大了，普通设备还不行这一下估计 7 个 G 左右的内容，里面有图片，有文艺的作品等等；\n\n**链接: https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA 提取码: nryb 复制这段内容后打开百度网盘手机 App，操作更方便哦**\n","source":"_posts/生活日志/生活/沉浸之后的总结（一）.md","raw":"---\ntitle: 生活-沉浸之后的总结（一）\nabbrlink: 7aee36a8\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 生活\n---\n\n# 前言\n\n\"沉浸\"了一段时间，今天再次发博文，心情很是不一样；为什么会“沉浸”一段时间呢？\n\n说来话长了, 本想着每个月发大约 4 篇博文总结，但是近期事情比较多，针对公司业务加班，赶进度，开发对应需求；每天晚上回来几乎都在 9.30 左右，在点个外卖，收拾 卫生，在洗个澡就差不多就 0.00 了，也就没什么时间发文章了；\n\n在几年之前，也就是大约是在刚来上海的那 2 年左右吧，自己的大部分时间都是在学习工作技能，我本身就是前端开发人员，毕竟接触的范围和层次不同，才会花费大部分时间去学习。自己的很大精力都在自己的技术层面，知道最近慢慢回归生活了，最后才发现自己失去的时间太多。现在技术经过项目的沉淀，现在慢慢回归生活，才发现好好生活，自己的状态慢慢回到了正轨’\n\n## 放松-旅游\n\n在今年国庆前后去了躺乌镇，也当时放松，同时满足自己的旅游梦；\n\n这次旅游提出者呢，不出意外的话就是我提出的，起初是在抖音上看见徐州小吃街的小吃，嘴瘾就上来了，然后就在微信上跟朋友说：“一周一座城”。然后简单霸气的回了我一个字：”走“；说走咱就走，就喜欢这么直接的，然后过了俩天就直接拉个小群，一共三人，就开始这部署周六日的旅游计划；\n\n因为时间很紧张，所以直接来了一个说走就走的旅行，就把时间定了下来，周六中午就出发；朋友开车，前一天说车轮被钉子扎了，可能去不了，我们赶紧就买了周六下午的票，虹桥火车站出发，到了第二天朋友吧车票退了说是车胎好了，然后我就问了一下具体出发时间，趁着这段时间把家里卫生收拾一下；\n\n下午朋友开车到了我小区，然后直接开启了俩天一夜的乌镇一游；\n\n下午的时候就到了**北栅**, 到了之后，短暂休息了片刻，晚上就直接去了北栅，北栅就是一个风俗文化的地方，顺带在附近吃了个饭；\n\n第二天朋友就直接开车去了**南栅**，南栅是一个历史建筑，里面有很多历史故事，还有许多景点，当然也吃了个饭；\n不过那个饭真的不错，羊肉面肥而不腻，入口即化，就是景区价格有点贵；\n\n![1](https://wangxiaoze-view.github.io/picx-images-hosting/images/070A2001.JPG)\n\n![2](https://wangxiaoze-view.github.io/picx-images-hosting/images/7684aa5598222e4fb6c5da1242264e4.jpg)\n\n![3](https://wangxiaoze-view.github.io/picx-images-hosting/images/b37a9bfe7b4035aa9d1ab5db5ce15b1.jpg)\n\n![4](https://wangxiaoze-view.github.io/picx-images-hosting/images/d1d7945f6766e3f554b884bc5848342.jpg)\n\n![5](https://wangxiaoze-view.github.io/picx-images-hosting/images/7cd6c95e5777a0389c48f44694c9d7d.jpg)\n\n![6](https://wangxiaoze-view.github.io/picx-images-hosting/images/9e8609733f4a8658f2519b47df068f9.jpg)\n\n玩耍时间很短，心情很爽，路上的时候也是随手拍了几张照片，要说照片肯定比不上专业设备 metz，不过拍出来的照片也挺好看的；朋友分享的照片我保存在网盘上了，文件太大了，普通设备还不行这一下估计 7 个 G 左右的内容，里面有图片，有文艺的作品等等；\n\n**链接: https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA 提取码: nryb 复制这段内容后打开百度网盘手机 App，操作更方便哦**\n","slug":"生活日志/生活/沉浸之后的总结（一）","published":1,"updated":"2025-03-13T10:16:15.421Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j3005efg9m9vbc16pc","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“沉浸”了一段时间，今天再次发博文，心情很是不一样；为什么会“沉浸”一段时间呢？</p>\n<p>说来话长了, 本想着每个月发大约 4 篇博文总结，但是近期事情比较多，针对公司业务加班，赶进度，开发对应需求；每天晚上回来几乎都在 9.30 左右，在点个外卖，收拾 卫生，在洗个澡就差不多就 0.00 了，也就没什么时间发文章了；</p>\n<p>在几年之前，也就是大约是在刚来上海的那 2 年左右吧，自己的大部分时间都是在学习工作技能，我本身就是前端开发人员，毕竟接触的范围和层次不同，才会花费大部分时间去学习。自己的很大精力都在自己的技术层面，知道最近慢慢回归生活了，最后才发现自己失去的时间太多。现在技术经过项目的沉淀，现在慢慢回归生活，才发现好好生活，自己的状态慢慢回到了正轨’</p>\n<h2 id=\"放松-旅游\"><a href=\"#放松-旅游\" class=\"headerlink\" title=\"放松-旅游\"></a>放松-旅游</h2><p>在今年国庆前后去了躺乌镇，也当时放松，同时满足自己的旅游梦；</p>\n<p>这次旅游提出者呢，不出意外的话就是我提出的，起初是在抖音上看见徐州小吃街的小吃，嘴瘾就上来了，然后就在微信上跟朋友说：“一周一座城”。然后简单霸气的回了我一个字：”走“；说走咱就走，就喜欢这么直接的，然后过了俩天就直接拉个小群，一共三人，就开始这部署周六日的旅游计划；</p>\n<p>因为时间很紧张，所以直接来了一个说走就走的旅行，就把时间定了下来，周六中午就出发；朋友开车，前一天说车轮被钉子扎了，可能去不了，我们赶紧就买了周六下午的票，虹桥火车站出发，到了第二天朋友吧车票退了说是车胎好了，然后我就问了一下具体出发时间，趁着这段时间把家里卫生收拾一下；</p>\n<p>下午朋友开车到了我小区，然后直接开启了俩天一夜的乌镇一游；</p>\n<p>下午的时候就到了<strong>北栅</strong>, 到了之后，短暂休息了片刻，晚上就直接去了北栅，北栅就是一个风俗文化的地方，顺带在附近吃了个饭；</p>\n<p>第二天朋友就直接开车去了<strong>南栅</strong>，南栅是一个历史建筑，里面有很多历史故事，还有许多景点，当然也吃了个饭；<br>不过那个饭真的不错，羊肉面肥而不腻，入口即化，就是景区价格有点贵；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/070A2001.JPG\" alt=\"1\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/7684aa5598222e4fb6c5da1242264e4.jpg\" alt=\"2\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/b37a9bfe7b4035aa9d1ab5db5ce15b1.jpg\" alt=\"3\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/d1d7945f6766e3f554b884bc5848342.jpg\" alt=\"4\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/7cd6c95e5777a0389c48f44694c9d7d.jpg\" alt=\"5\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/9e8609733f4a8658f2519b47df068f9.jpg\" alt=\"6\"></p>\n<p>玩耍时间很短，心情很爽，路上的时候也是随手拍了几张照片，要说照片肯定比不上专业设备 metz，不过拍出来的照片也挺好看的；朋友分享的照片我保存在网盘上了，文件太大了，普通设备还不行这一下估计 7 个 G 左右的内容，里面有图片，有文艺的作品等等；</p>\n<p><strong>链接: <a href=\"https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA\">https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA</a> 提取码: nryb 复制这段内容后打开百度网盘手机 App，操作更方便哦</strong></p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>“沉浸”了一段时间，今天再次发博文，心情很是不一样；为什么会“沉浸”一段时间呢？</p>\n<p>说来话长了, 本想着每个月发大约 4 篇博文总结，但是近期事情比较多，针对公司业务加班，赶进度，开发对应需求；每天晚上回来几乎都在 9.30 左右，在点个外卖，收拾 卫生，在洗个澡就差不多就 0.00 了，也就没什么时间发文章了；</p>\n<p>在几年之前，也就是大约是在刚来上海的那 2 年左右吧，自己的大部分时间都是在学习工作技能，我本身就是前端开发人员，毕竟接触的范围和层次不同，才会花费大部分时间去学习。自己的很大精力都在自己的技术层面，知道最近慢慢回归生活了，最后才发现自己失去的时间太多。现在技术经过项目的沉淀，现在慢慢回归生活，才发现好好生活，自己的状态慢慢回到了正轨’</p>\n<h2 id=\"放松-旅游\"><a href=\"#放松-旅游\" class=\"headerlink\" title=\"放松-旅游\"></a>放松-旅游</h2><p>在今年国庆前后去了躺乌镇，也当时放松，同时满足自己的旅游梦；</p>\n<p>这次旅游提出者呢，不出意外的话就是我提出的，起初是在抖音上看见徐州小吃街的小吃，嘴瘾就上来了，然后就在微信上跟朋友说：“一周一座城”。然后简单霸气的回了我一个字：”走“；说走咱就走，就喜欢这么直接的，然后过了俩天就直接拉个小群，一共三人，就开始这部署周六日的旅游计划；</p>\n<p>因为时间很紧张，所以直接来了一个说走就走的旅行，就把时间定了下来，周六中午就出发；朋友开车，前一天说车轮被钉子扎了，可能去不了，我们赶紧就买了周六下午的票，虹桥火车站出发，到了第二天朋友吧车票退了说是车胎好了，然后我就问了一下具体出发时间，趁着这段时间把家里卫生收拾一下；</p>\n<p>下午朋友开车到了我小区，然后直接开启了俩天一夜的乌镇一游；</p>\n<p>下午的时候就到了<strong>北栅</strong>, 到了之后，短暂休息了片刻，晚上就直接去了北栅，北栅就是一个风俗文化的地方，顺带在附近吃了个饭；</p>\n<p>第二天朋友就直接开车去了<strong>南栅</strong>，南栅是一个历史建筑，里面有很多历史故事，还有许多景点，当然也吃了个饭；<br>不过那个饭真的不错，羊肉面肥而不腻，入口即化，就是景区价格有点贵；</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/070A2001.JPG\" alt=\"1\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/7684aa5598222e4fb6c5da1242264e4.jpg\" alt=\"2\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/b37a9bfe7b4035aa9d1ab5db5ce15b1.jpg\" alt=\"3\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/d1d7945f6766e3f554b884bc5848342.jpg\" alt=\"4\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/7cd6c95e5777a0389c48f44694c9d7d.jpg\" alt=\"5\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/9e8609733f4a8658f2519b47df068f9.jpg\" alt=\"6\"></p>\n<p>玩耍时间很短，心情很爽，路上的时候也是随手拍了几张照片，要说照片肯定比不上专业设备 metz，不过拍出来的照片也挺好看的；朋友分享的照片我保存在网盘上了，文件太大了，普通设备还不行这一下估计 7 个 G 左右的内容，里面有图片，有文艺的作品等等；</p>\n<p><strong>链接: <a href=\"https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA\">https://pan.baidu.com/s/1SDKkbyALTTqeKsdNmFSdOA</a> 提取码: nryb 复制这段内容后打开百度网盘手机 App，操作更方便哦</strong></p>\n"},{"title":"生活-沉浸之后的总结（二）","abbrlink":"7819a34e","date":"2023-10-08T01:05:01.000Z","_content":"\n# 前言\n\n自从上次旅游放松过后，我发现了一系列关于自身的问题；\n\n自身的一系列问题大约分为以下几个方面：\n\n1. 自身成长的问题\n2. 工作沉淀问题\n3. 社交沟通问题\n\n## 自身的问题\n\n还记得刚来上海应该是 19 年 6 月份左右吧，当时也是刚从学校走向社会，没经历过社会的毒打，所以自身成长的问题还是比较严重。\n\n作为一个应届生，想去看看大城市，所以选择了上海，但是由于自身原因，导致自己一直待在舒适区，没有去尝试新的东西，导致自身成长的问题还是比较严重。\n\n刚入第一家公司，因为是小白吗，基本上啥也不会的，所以导致自己一直处于一个比较低效的状态，工作效率也不是很高，一定程度上就当了公司的累赘。还好我的运气本较好，遇到了一个愿意与我交流的前辈，比我大了大概 33 岁左右吧，所以在我工作期间，他给我提了一些建议，让我在技术上有了很大的进步，所以导致我自身成长的问题得到了很大的改善。\n\n那段时间，老 w 说我你这是咋了总是感觉心不在焉的没啥精神，我把我在公司的事情跟他说了之后，他给我的建议就是公司有前辈愿意教你带你，说明你运气还是不错的，你想如果公司前辈带你入门那你可以想象后果是什么样子的；实习期过不了，任务做不了；那你在公司毫无可用的价值，最后你的下场只能走人了；\n\n那是也是有对象的，毕竟是异地恋，再加上自己的性格，脾气问题，导致我总是情绪不稳定，最后的结局显而易见；\n\n那段时间让我明白了自身有很大的缺陷，总是觉得自以为是，性格脾气不稳定，再加上工作任务不扎实，没有高效率的开发一些列的问题；在经过了老 w 的指导之后，我逐渐的改善了这些问题，但是还是存在一些问题；\n\n不过首先要做的就是改善自己的毛病，趁着线下时间学些，那段时间我和老 w 是在宝山合租的，他每次下班之后总是能看到我打开电脑学习学到凌晨 1 点左右，那段时间学习着公司的项目，慢慢熟悉公司的业务，慢慢的提升自己的开发效率，慢慢的提升自己的开发水平；\n\n从细小问题到大范围的技能提升，之后就仅仅在公司呆了一年时间吧，因为当时觉得自己并不能仅仅学习这点东西，然后我就换了现在的公司；\n\n目前现在的公司让我觉得不错，在短暂俩年时间提升很大；\n","source":"_posts/生活日志/生活/沉浸之后的总结（二）.md","raw":"---\ntitle: 生活-沉浸之后的总结（二）\nabbrlink: 7819a34e\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 生活\n---\n\n# 前言\n\n自从上次旅游放松过后，我发现了一系列关于自身的问题；\n\n自身的一系列问题大约分为以下几个方面：\n\n1. 自身成长的问题\n2. 工作沉淀问题\n3. 社交沟通问题\n\n## 自身的问题\n\n还记得刚来上海应该是 19 年 6 月份左右吧，当时也是刚从学校走向社会，没经历过社会的毒打，所以自身成长的问题还是比较严重。\n\n作为一个应届生，想去看看大城市，所以选择了上海，但是由于自身原因，导致自己一直待在舒适区，没有去尝试新的东西，导致自身成长的问题还是比较严重。\n\n刚入第一家公司，因为是小白吗，基本上啥也不会的，所以导致自己一直处于一个比较低效的状态，工作效率也不是很高，一定程度上就当了公司的累赘。还好我的运气本较好，遇到了一个愿意与我交流的前辈，比我大了大概 33 岁左右吧，所以在我工作期间，他给我提了一些建议，让我在技术上有了很大的进步，所以导致我自身成长的问题得到了很大的改善。\n\n那段时间，老 w 说我你这是咋了总是感觉心不在焉的没啥精神，我把我在公司的事情跟他说了之后，他给我的建议就是公司有前辈愿意教你带你，说明你运气还是不错的，你想如果公司前辈带你入门那你可以想象后果是什么样子的；实习期过不了，任务做不了；那你在公司毫无可用的价值，最后你的下场只能走人了；\n\n那是也是有对象的，毕竟是异地恋，再加上自己的性格，脾气问题，导致我总是情绪不稳定，最后的结局显而易见；\n\n那段时间让我明白了自身有很大的缺陷，总是觉得自以为是，性格脾气不稳定，再加上工作任务不扎实，没有高效率的开发一些列的问题；在经过了老 w 的指导之后，我逐渐的改善了这些问题，但是还是存在一些问题；\n\n不过首先要做的就是改善自己的毛病，趁着线下时间学些，那段时间我和老 w 是在宝山合租的，他每次下班之后总是能看到我打开电脑学习学到凌晨 1 点左右，那段时间学习着公司的项目，慢慢熟悉公司的业务，慢慢的提升自己的开发效率，慢慢的提升自己的开发水平；\n\n从细小问题到大范围的技能提升，之后就仅仅在公司呆了一年时间吧，因为当时觉得自己并不能仅仅学习这点东西，然后我就换了现在的公司；\n\n目前现在的公司让我觉得不错，在短暂俩年时间提升很大；\n","slug":"生活日志/生活/沉浸之后的总结（二）","published":1,"updated":"2025-03-12T10:05:38.075Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j3005hfg9mcloc3qaf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>自从上次旅游放松过后，我发现了一系列关于自身的问题；</p>\n<p>自身的一系列问题大约分为以下几个方面：</p>\n<ol>\n<li>自身成长的问题</li>\n<li>工作沉淀问题</li>\n<li>社交沟通问题</li>\n</ol>\n<h2 id=\"自身的问题\"><a href=\"#自身的问题\" class=\"headerlink\" title=\"自身的问题\"></a>自身的问题</h2><p>还记得刚来上海应该是 19 年 6 月份左右吧，当时也是刚从学校走向社会，没经历过社会的毒打，所以自身成长的问题还是比较严重。</p>\n<p>作为一个应届生，想去看看大城市，所以选择了上海，但是由于自身原因，导致自己一直待在舒适区，没有去尝试新的东西，导致自身成长的问题还是比较严重。</p>\n<p>刚入第一家公司，因为是小白吗，基本上啥也不会的，所以导致自己一直处于一个比较低效的状态，工作效率也不是很高，一定程度上就当了公司的累赘。还好我的运气本较好，遇到了一个愿意与我交流的前辈，比我大了大概 33 岁左右吧，所以在我工作期间，他给我提了一些建议，让我在技术上有了很大的进步，所以导致我自身成长的问题得到了很大的改善。</p>\n<p>那段时间，老 w 说我你这是咋了总是感觉心不在焉的没啥精神，我把我在公司的事情跟他说了之后，他给我的建议就是公司有前辈愿意教你带你，说明你运气还是不错的，你想如果公司前辈带你入门那你可以想象后果是什么样子的；实习期过不了，任务做不了；那你在公司毫无可用的价值，最后你的下场只能走人了；</p>\n<p>那是也是有对象的，毕竟是异地恋，再加上自己的性格，脾气问题，导致我总是情绪不稳定，最后的结局显而易见；</p>\n<p>那段时间让我明白了自身有很大的缺陷，总是觉得自以为是，性格脾气不稳定，再加上工作任务不扎实，没有高效率的开发一些列的问题；在经过了老 w 的指导之后，我逐渐的改善了这些问题，但是还是存在一些问题；</p>\n<p>不过首先要做的就是改善自己的毛病，趁着线下时间学些，那段时间我和老 w 是在宝山合租的，他每次下班之后总是能看到我打开电脑学习学到凌晨 1 点左右，那段时间学习着公司的项目，慢慢熟悉公司的业务，慢慢的提升自己的开发效率，慢慢的提升自己的开发水平；</p>\n<p>从细小问题到大范围的技能提升，之后就仅仅在公司呆了一年时间吧，因为当时觉得自己并不能仅仅学习这点东西，然后我就换了现在的公司；</p>\n<p>目前现在的公司让我觉得不错，在短暂俩年时间提升很大；</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>自从上次旅游放松过后，我发现了一系列关于自身的问题；</p>\n<p>自身的一系列问题大约分为以下几个方面：</p>\n<ol>\n<li>自身成长的问题</li>\n<li>工作沉淀问题</li>\n<li>社交沟通问题</li>\n</ol>\n<h2 id=\"自身的问题\"><a href=\"#自身的问题\" class=\"headerlink\" title=\"自身的问题\"></a>自身的问题</h2><p>还记得刚来上海应该是 19 年 6 月份左右吧，当时也是刚从学校走向社会，没经历过社会的毒打，所以自身成长的问题还是比较严重。</p>\n<p>作为一个应届生，想去看看大城市，所以选择了上海，但是由于自身原因，导致自己一直待在舒适区，没有去尝试新的东西，导致自身成长的问题还是比较严重。</p>\n<p>刚入第一家公司，因为是小白吗，基本上啥也不会的，所以导致自己一直处于一个比较低效的状态，工作效率也不是很高，一定程度上就当了公司的累赘。还好我的运气本较好，遇到了一个愿意与我交流的前辈，比我大了大概 33 岁左右吧，所以在我工作期间，他给我提了一些建议，让我在技术上有了很大的进步，所以导致我自身成长的问题得到了很大的改善。</p>\n<p>那段时间，老 w 说我你这是咋了总是感觉心不在焉的没啥精神，我把我在公司的事情跟他说了之后，他给我的建议就是公司有前辈愿意教你带你，说明你运气还是不错的，你想如果公司前辈带你入门那你可以想象后果是什么样子的；实习期过不了，任务做不了；那你在公司毫无可用的价值，最后你的下场只能走人了；</p>\n<p>那是也是有对象的，毕竟是异地恋，再加上自己的性格，脾气问题，导致我总是情绪不稳定，最后的结局显而易见；</p>\n<p>那段时间让我明白了自身有很大的缺陷，总是觉得自以为是，性格脾气不稳定，再加上工作任务不扎实，没有高效率的开发一些列的问题；在经过了老 w 的指导之后，我逐渐的改善了这些问题，但是还是存在一些问题；</p>\n<p>不过首先要做的就是改善自己的毛病，趁着线下时间学些，那段时间我和老 w 是在宝山合租的，他每次下班之后总是能看到我打开电脑学习学到凌晨 1 点左右，那段时间学习着公司的项目，慢慢熟悉公司的业务，慢慢的提升自己的开发效率，慢慢的提升自己的开发水平；</p>\n<p>从细小问题到大范围的技能提升，之后就仅仅在公司呆了一年时间吧，因为当时觉得自己并不能仅仅学习这点东西，然后我就换了现在的公司；</p>\n<p>目前现在的公司让我觉得不错，在短暂俩年时间提升很大；</p>\n"},{"title":"async和defer","abbrlink":"f0ee85e6","date":"2024-05-15T03:20:38.000Z","_content":"\n{% note info simple %}\n`<script>`标签的`defer`和`async`的作用是什么，有什么区别呢？  \n`async`和 `defer` 是两个用于控制脚本加载和执行的属性，用于 `<script>` 标签中。它们的主要区别在于脚本的加载和执行顺序。\n{% endnote %}\n\n\n[<MDN 是如何解释的？>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)\n\n这里一张图可以完美解释：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/avoid-render-blocking-javascript-with-async-defer.51e79lydsy.webp)\n\n## async\n\n`async` 属性指定脚本应该异步加载，这意味着浏览器会在后台加载脚本，而不会阻塞页面的渲染。脚本加载完成后，会立即执行。\n\n对于普通脚本，如果存在 `async` 属性，那么普通脚本会被并行请求，并尽快解析和执行。\n\n对于模块脚本，如果存在 `async` 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。\n\n```js\n<script async src=\"script.js\"></script>\n```\n\n优点：\n\n- 不会阻塞页面渲染\n- 加载完成后立即执行\n\n缺点\n\n- 脚本执行顺序不确定\n- 可能会导致脚本依赖的问题\n\n## defer\n\n`defer` 属性指定脚本应该延迟加载，这意味着浏览器会在页面渲染完成后加载脚本。脚本加载完成后，会在 `DOMContentLoaded` 事件之前执行。但是它能保证执行顺序。\n\n```js\n<script defer src=\"script.js\"></script>\n```\n\n优点：\n\n- 不会阻塞页面渲染\n- 脚本执行顺序确定（在 `DOMContentLoaded` 事件之前）\n- 可以解决脚本依赖的问题\n\n缺点：\n\n- 加载完成后可能需要等待 `DOMContentLoaded` 事件才会执行\n\n一般来说，如果脚本不依赖其他脚本或 `DOM`，可以使用 `async`。 如果脚本依赖其他脚本或`DOM`，应该使用 `defer`。\n","source":"_posts/技能小册/javascript/基础沉淀/async和defer.md","raw":"---\ntitle: async和defer\nabbrlink: f0ee85e6\ndate: 2024-05-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n{% note info simple %}\n`<script>`标签的`defer`和`async`的作用是什么，有什么区别呢？  \n`async`和 `defer` 是两个用于控制脚本加载和执行的属性，用于 `<script>` 标签中。它们的主要区别在于脚本的加载和执行顺序。\n{% endnote %}\n\n\n[<MDN 是如何解释的？>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)\n\n这里一张图可以完美解释：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/avoid-render-blocking-javascript-with-async-defer.51e79lydsy.webp)\n\n## async\n\n`async` 属性指定脚本应该异步加载，这意味着浏览器会在后台加载脚本，而不会阻塞页面的渲染。脚本加载完成后，会立即执行。\n\n对于普通脚本，如果存在 `async` 属性，那么普通脚本会被并行请求，并尽快解析和执行。\n\n对于模块脚本，如果存在 `async` 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。\n\n```js\n<script async src=\"script.js\"></script>\n```\n\n优点：\n\n- 不会阻塞页面渲染\n- 加载完成后立即执行\n\n缺点\n\n- 脚本执行顺序不确定\n- 可能会导致脚本依赖的问题\n\n## defer\n\n`defer` 属性指定脚本应该延迟加载，这意味着浏览器会在页面渲染完成后加载脚本。脚本加载完成后，会在 `DOMContentLoaded` 事件之前执行。但是它能保证执行顺序。\n\n```js\n<script defer src=\"script.js\"></script>\n```\n\n优点：\n\n- 不会阻塞页面渲染\n- 脚本执行顺序确定（在 `DOMContentLoaded` 事件之前）\n- 可以解决脚本依赖的问题\n\n缺点：\n\n- 加载完成后可能需要等待 `DOMContentLoaded` 事件才会执行\n\n一般来说，如果脚本不依赖其他脚本或 `DOM`，可以使用 `async`。 如果脚本依赖其他脚本或`DOM`，应该使用 `defer`。\n","slug":"技能小册/javascript/基础沉淀/async和defer","published":1,"updated":"2025-03-13T10:16:19.058Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j4005lfg9mchq8bxwd","content":"<div class=\"note info simple\"><p><code>&lt;script&gt;</code>标签的<code>defer</code>和<code>async</code>的作用是什么，有什么区别呢？<br><code>async</code>和 <code>defer</code> 是两个用于控制脚本加载和执行的属性，用于 <code>&lt;script&gt;</code> 标签中。它们的主要区别在于脚本的加载和执行顺序。</p>\n</div>\n\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\">&lt;MDN 是如何解释的？&gt;</a></p>\n<p>这里一张图可以完美解释：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/avoid-render-blocking-javascript-with-async-defer.51e79lydsy.webp\" alt=\"x\"></p>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><p><code>async</code> 属性指定脚本应该异步加载，这意味着浏览器会在后台加载脚本，而不会阻塞页面的渲染。脚本加载完成后，会立即执行。</p>\n<p>对于普通脚本，如果存在 <code>async</code> 属性，那么普通脚本会被并行请求，并尽快解析和执行。</p>\n<p>对于模块脚本，如果存在 <code>async</code> 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;script.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>不会阻塞页面渲染</li>\n<li>加载完成后立即执行</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>脚本执行顺序不确定</li>\n<li>可能会导致脚本依赖的问题</li>\n</ul>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p><code>defer</code> 属性指定脚本应该延迟加载，这意味着浏览器会在页面渲染完成后加载脚本。脚本加载完成后，会在 <code>DOMContentLoaded</code> 事件之前执行。但是它能保证执行顺序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src=<span class=\"string\">&quot;script.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>不会阻塞页面渲染</li>\n<li>脚本执行顺序确定（在 <code>DOMContentLoaded</code> 事件之前）</li>\n<li>可以解决脚本依赖的问题</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>加载完成后可能需要等待 <code>DOMContentLoaded</code> 事件才会执行</li>\n</ul>\n<p>一般来说，如果脚本不依赖其他脚本或 <code>DOM</code>，可以使用 <code>async</code>。 如果脚本依赖其他脚本或<code>DOM</code>，应该使用 <code>defer</code>。</p>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>&lt;script&gt;</code>标签的<code>defer</code>和<code>async</code>的作用是什么，有什么区别呢？<br><code>async</code>和 <code>defer</code> 是两个用于控制脚本加载和执行的属性，用于 <code>&lt;script&gt;</code> 标签中。它们的主要区别在于脚本的加载和执行顺序。</p>\n</div>\n\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\">&lt;MDN 是如何解释的？&gt;</a></p>\n<p>这里一张图可以完美解释：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/avoid-render-blocking-javascript-with-async-defer.51e79lydsy.webp\" alt=\"x\"></p>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><p><code>async</code> 属性指定脚本应该异步加载，这意味着浏览器会在后台加载脚本，而不会阻塞页面的渲染。脚本加载完成后，会立即执行。</p>\n<p>对于普通脚本，如果存在 <code>async</code> 属性，那么普通脚本会被并行请求，并尽快解析和执行。</p>\n<p>对于模块脚本，如果存在 <code>async</code> 属性，那么脚本及其所有依赖都会在延缓队列中执行，因此它们会被并行请求，并尽快解析和执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;script.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>不会阻塞页面渲染</li>\n<li>加载完成后立即执行</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>脚本执行顺序不确定</li>\n<li>可能会导致脚本依赖的问题</li>\n</ul>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p><code>defer</code> 属性指定脚本应该延迟加载，这意味着浏览器会在页面渲染完成后加载脚本。脚本加载完成后，会在 <code>DOMContentLoaded</code> 事件之前执行。但是它能保证执行顺序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script defer src=<span class=\"string\">&quot;script.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>不会阻塞页面渲染</li>\n<li>脚本执行顺序确定（在 <code>DOMContentLoaded</code> 事件之前）</li>\n<li>可以解决脚本依赖的问题</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>加载完成后可能需要等待 <code>DOMContentLoaded</code> 事件才会执行</li>\n</ul>\n<p>一般来说，如果脚本不依赖其他脚本或 <code>DOM</code>，可以使用 <code>async</code>。 如果脚本依赖其他脚本或<code>DOM</code>，应该使用 <code>defer</code>。</p>\n"},{"title":"css单位对比","abbrlink":"3a9fa5c8","date":"2023-06-15T03:20:38.000Z","_content":"\n\n{% note info simple %}\n`css`中计量单位那么多，但是它们之间有什么区别呢？\n{% endnote %}\n\n在传统的项目中`px, %, em`这几个单位是经常用到的，并且兼容效果还不错；自从`css3`开始，计量单位就逐渐增加`rem, vw, vh`等；\n\n计量单位那么多，在项目如何使用，并且它们是有什么区别呢？\n\n| css 单位     |                                        |\n| ------------ | -------------------------------------- |\n| 相对长度单位 | em、ex、ch、rem、vw、vh、vmin、vmax、% |\n| 绝对长度单位 | cm、mm、in、px、pt、pc                 |\n\n这里我们主要讲述 px、em、rem、vh、vw, %\n\n## px\n\n`px`，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中\n\n有些人会把 px 认为是相对长度，原因在于在移动端中存在设备像素比，`px` 实际显示的大小是不确定的\n\n这里之所以认为 `px` 为绝对单位，在于 `px` 的大小和元素的其他属性无关\n\n## em\n\n`em`是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸`（1em = 16px）`\n\n为了简化 `font-size` 的换算，我们需要在 `css` 中的 `body` 选择器中声明 `font-size= 62.5%`，这就使 em 值变为 `16px\\*62.5% = 10px`\n\n这样 `12px = 1.2em, 10px = 1em,` 也就是说只需要将你的原来的 `px` 数值除以 `10`，然后换上 `em` 作为单位就行了\n\n特点：\n\n- `em` 的值并不是固定的\n- `em` 会继承父级元素的字体大小\n- `em` 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\n- 任意浏览器的默认字体高都是` 16px`\n\n下面有个例子：\n<demo html=\"html/em.html\" />\n\n## rem\n\nrem，相对单位，相对的只是`HTML`根元素`font-size`的值,常用于移动端开发\n\n例子如下：\n<demo html=\"html/rem.html\" />\n\n根元素`html`的字体大小为`10px`，那么`2rem = 2 * 10px = 20px`\n\n## vw, vw, %\n\n`vw` ，就是根据窗口的宽度，分成`100`等份，`100vw`就表示满宽，`50vw`就表示一半宽。（vw 始终是针对窗口的宽），同理，vh 则为窗口的高度\n\n例子如下：\n<demo html=\"html/vw_vh.html\" />\n","source":"_posts/技能小册/javascript/基础沉淀/css单位对比.md","raw":"---\ntitle: css单位对比\nabbrlink: 3a9fa5c8\ndate: 2023-06-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Css\n---\n\n\n{% note info simple %}\n`css`中计量单位那么多，但是它们之间有什么区别呢？\n{% endnote %}\n\n在传统的项目中`px, %, em`这几个单位是经常用到的，并且兼容效果还不错；自从`css3`开始，计量单位就逐渐增加`rem, vw, vh`等；\n\n计量单位那么多，在项目如何使用，并且它们是有什么区别呢？\n\n| css 单位     |                                        |\n| ------------ | -------------------------------------- |\n| 相对长度单位 | em、ex、ch、rem、vw、vh、vmin、vmax、% |\n| 绝对长度单位 | cm、mm、in、px、pt、pc                 |\n\n这里我们主要讲述 px、em、rem、vh、vw, %\n\n## px\n\n`px`，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中\n\n有些人会把 px 认为是相对长度，原因在于在移动端中存在设备像素比，`px` 实际显示的大小是不确定的\n\n这里之所以认为 `px` 为绝对单位，在于 `px` 的大小和元素的其他属性无关\n\n## em\n\n`em`是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸`（1em = 16px）`\n\n为了简化 `font-size` 的换算，我们需要在 `css` 中的 `body` 选择器中声明 `font-size= 62.5%`，这就使 em 值变为 `16px\\*62.5% = 10px`\n\n这样 `12px = 1.2em, 10px = 1em,` 也就是说只需要将你的原来的 `px` 数值除以 `10`，然后换上 `em` 作为单位就行了\n\n特点：\n\n- `em` 的值并不是固定的\n- `em` 会继承父级元素的字体大小\n- `em` 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\n- 任意浏览器的默认字体高都是` 16px`\n\n下面有个例子：\n<demo html=\"html/em.html\" />\n\n## rem\n\nrem，相对单位，相对的只是`HTML`根元素`font-size`的值,常用于移动端开发\n\n例子如下：\n<demo html=\"html/rem.html\" />\n\n根元素`html`的字体大小为`10px`，那么`2rem = 2 * 10px = 20px`\n\n## vw, vw, %\n\n`vw` ，就是根据窗口的宽度，分成`100`等份，`100vw`就表示满宽，`50vw`就表示一半宽。（vw 始终是针对窗口的宽），同理，vh 则为窗口的高度\n\n例子如下：\n<demo html=\"html/vw_vh.html\" />\n","slug":"技能小册/javascript/基础沉淀/css单位对比","published":1,"updated":"2025-03-12T09:19:55.274Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j4005ofg9magqq1uyj","content":"<div class=\"note info simple\"><p><code>css</code>中计量单位那么多，但是它们之间有什么区别呢？</p>\n</div>\n\n<p>在传统的项目中<code>px, %, em</code>这几个单位是经常用到的，并且兼容效果还不错；自从<code>css3</code>开始，计量单位就逐渐增加<code>rem, vw, vh</code>等；</p>\n<p>计量单位那么多，在项目如何使用，并且它们是有什么区别呢？</p>\n<table>\n<thead>\n<tr>\n<th>css 单位</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>相对长度单位</td>\n<td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td>\n</tr>\n<tr>\n<td>绝对长度单位</td>\n<td>cm、mm、in、px、pt、pc</td>\n</tr>\n</tbody></table>\n<p>这里我们主要讲述 px、em、rem、vh、vw, %</p>\n<h2 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h2><p><code>px</code>，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p>\n<p>有些人会把 px 认为是相对长度，原因在于在移动端中存在设备像素比，<code>px</code> 实际显示的大小是不确定的</p>\n<p>这里之所以认为 <code>px</code> 为绝对单位，在于 <code>px</code> 的大小和元素的其他属性无关</p>\n<h2 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h2><p><code>em</code>是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸<code>（1em = 16px）</code></p>\n<p>为了简化 <code>font-size</code> 的换算，我们需要在 <code>css</code> 中的 <code>body</code> 选择器中声明 <code>font-size= 62.5%</code>，这就使 em 值变为 <code>16px\\*62.5% = 10px</code></p>\n<p>这样 <code>12px = 1.2em, 10px = 1em,</code> 也就是说只需要将你的原来的 <code>px</code> 数值除以 <code>10</code>，然后换上 <code>em</code> 作为单位就行了</p>\n<p>特点：</p>\n<ul>\n<li><code>em</code> 的值并不是固定的</li>\n<li><code>em</code> 会继承父级元素的字体大小</li>\n<li><code>em</code> 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li>\n<li>任意浏览器的默认字体高都是<code> 16px</code></li>\n</ul>\n<p>下面有个例子：<br><demo html=\"html/em.html\" /></p>\n<h2 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h2><p>rem，相对单位，相对的只是<code>HTML</code>根元素<code>font-size</code>的值,常用于移动端开发</p>\n<p>例子如下：<br><demo html=\"html/rem.html\" /></p>\n<p>根元素<code>html</code>的字体大小为<code>10px</code>，那么<code>2rem = 2 * 10px = 20px</code></p>\n<h2 id=\"vw-vw\"><a href=\"#vw-vw\" class=\"headerlink\" title=\"vw, vw, %\"></a>vw, vw, %</h2><p><code>vw</code> ，就是根据窗口的宽度，分成<code>100</code>等份，<code>100vw</code>就表示满宽，<code>50vw</code>就表示一半宽。（vw 始终是针对窗口的宽），同理，vh 则为窗口的高度</p>\n<p>例子如下：<br><demo html=\"html/vw_vh.html\" /></p>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>css</code>中计量单位那么多，但是它们之间有什么区别呢？</p>\n</div>\n\n<p>在传统的项目中<code>px, %, em</code>这几个单位是经常用到的，并且兼容效果还不错；自从<code>css3</code>开始，计量单位就逐渐增加<code>rem, vw, vh</code>等；</p>\n<p>计量单位那么多，在项目如何使用，并且它们是有什么区别呢？</p>\n<table>\n<thead>\n<tr>\n<th>css 单位</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>相对长度单位</td>\n<td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td>\n</tr>\n<tr>\n<td>绝对长度单位</td>\n<td>cm、mm、in、px、pt、pc</td>\n</tr>\n</tbody></table>\n<p>这里我们主要讲述 px、em、rem、vh、vw, %</p>\n<h2 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h2><p><code>px</code>，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p>\n<p>有些人会把 px 认为是相对长度，原因在于在移动端中存在设备像素比，<code>px</code> 实际显示的大小是不确定的</p>\n<p>这里之所以认为 <code>px</code> 为绝对单位，在于 <code>px</code> 的大小和元素的其他属性无关</p>\n<h2 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h2><p><code>em</code>是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸<code>（1em = 16px）</code></p>\n<p>为了简化 <code>font-size</code> 的换算，我们需要在 <code>css</code> 中的 <code>body</code> 选择器中声明 <code>font-size= 62.5%</code>，这就使 em 值变为 <code>16px\\*62.5% = 10px</code></p>\n<p>这样 <code>12px = 1.2em, 10px = 1em,</code> 也就是说只需要将你的原来的 <code>px</code> 数值除以 <code>10</code>，然后换上 <code>em</code> 作为单位就行了</p>\n<p>特点：</p>\n<ul>\n<li><code>em</code> 的值并不是固定的</li>\n<li><code>em</code> 会继承父级元素的字体大小</li>\n<li><code>em</code> 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li>\n<li>任意浏览器的默认字体高都是<code> 16px</code></li>\n</ul>\n<p>下面有个例子：<br><demo html=\"html/em.html\" /></p>\n<h2 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h2><p>rem，相对单位，相对的只是<code>HTML</code>根元素<code>font-size</code>的值,常用于移动端开发</p>\n<p>例子如下：<br><demo html=\"html/rem.html\" /></p>\n<p>根元素<code>html</code>的字体大小为<code>10px</code>，那么<code>2rem = 2 * 10px = 20px</code></p>\n<h2 id=\"vw-vw\"><a href=\"#vw-vw\" class=\"headerlink\" title=\"vw, vw, %\"></a>vw, vw, %</h2><p><code>vw</code> ，就是根据窗口的宽度，分成<code>100</code>等份，<code>100vw</code>就表示满宽，<code>50vw</code>就表示一半宽。（vw 始终是针对窗口的宽），同理，vh 则为窗口的高度</p>\n<p>例子如下：<br><demo html=\"html/vw_vh.html\" /></p>\n"},{"title":"数据类型","abbrlink":"3080460d","date":"2023-03-15T03:20:38.000Z","_content":"\n# 介绍\n\nJavaScript 中的数据类型分为两大类：原始类型（Primitive Types）和引用类型（Reference Types）。当然也能成为基本数据类型和复杂数据类型。\n\n当然，不论是在使用还是在读取堆栈，判断数据类型俩种数据类型还是有很大的区别的。\n\n下面详细介绍这两种类型及其区别，并给出具体的例子。\n\n## 数据类型\n\n### 原始类型\n\n原始类型包括以下几种：\n\n- `Number`: 数字\n- `String`: 字符串\n- Boo`lean: 布尔值\n- `Null`: 空值\n- `Undefined`: 未定义\n- `Symbol`: 符号\n- `BigInt`: 大整数\n\n```ts\n// Number\nlet num = 123;\nconsole.log(num); // 输出: 123\n\n// String\nlet str = \"Hello, world!\";\nconsole.log(str); // 输出: Hello, world!\n\n// Boolean\nlet bool = true;\nconsole.log(bool); // 输出: true\n\n// Undefined\nlet undef;\nconsole.log(undef); // 输出: undefined\n\n// Null\nlet n = null;\nconsole.log(n); // 输出: null\n\n// Symbol\nlet sym = Symbol(\"unique\");\nconsole.log(sym); // 输出: Symbol(unique)\n\n// BigInt\nlet bigInt = 123456789012345678901234567890n;\nconsole.log(bigInt); // 输出: 123456789012345678901234567890n\n```\n\n### 引用类型\n\n引用类型包括以下几种：\n\n- `Object`: 对象\n- `Array`: 数组\n- `Function`: 函数\n- `Date`: 日期\n- `Map`: 映射\n- `Set`: 集合\n- `WeakMap`: 弱映射\n- `WeakSet`: 弱集合\n- `RegExp`: 正则表达式\n\n```ts\n// Object\nlet obj = { name: \"Alice\", age: 30 };\nconsole.log(obj); // 输出: { name: 'Alice', age: 30 }\n\n// Array\nlet arr = [1, 2, 3];\nconsole.log(arr); // 输出: [1, 2, 3]\n\n// Function\nlet func = function () {\n\tconsole.log(\"Hello\");\n};\nfunc(); // 输出: Hello\n\n// Date\nlet date = new Date();\nconsole.log(date); // 输出: 当前日期时间\n\n// Map\nlet map = new Map();\nmap.set(\"key1\", \"value1\");\nconsole.log(map); // 输出: Map(1) { 'key1' => 'value1' }\n\n// Set\nlet set = new Set();\nset.add(1).add(2).add(3);\nconsole.log(set); // 输出: Set(3) { 1, 2, 3 }\n\n// WeakMap\nlet weakMap = new WeakMap();\nweakMap.set(obj, \"value\");\nconsole.log(weakMap); // 输出: WeakMap { <1> entries }\n\n// WeakSet\nlet weakSet = new WeakSet();\nweakSet.add(obj);\nconsole.log(weakSet); // 输出: WeakSet { <1> entries }\n\n// RegExp\nlet regex = /hello/;\nconsole.log(regex); // 输出: /hello/\n```\n\n## 堆栈使用\n\n### 栈（Stack）\n\n栈是一种先进后出（Last In First Out, LIFO）的数据结构。栈主要用于存储函数调用时的局部变量和执行上下文。\n\n特性：\n\n- 操作简单：只有两个操作：压入（push）和弹出（pop）。\n- 内存分配和释放速度快。\n- 通常用于函数调用和局部变量。\n\n```ts\nfunction stackExample() {\n\tlet localVar = \"local\";\n\tconsole.log(localVar); // 输出: local\n}\n\nstackExample();\nconsole.log(localVar); // 报错：ReferenceError: localVar is not defined\n```\n\n### 堆（Heap）\n\n堆是一种动态内存区域，用于存储对象。堆中的内存分配和释放相对复杂，但提供了更大的灵活性。\n特性：\n\n- 动态分配：可以在运行时动态创建和销毁对象。\n- 内存分配和释放较慢。\n- 通常用于存储对象和全局变量。\n\n```ts\nfunction heapExample() {\n\tlet obj = { name: \"Alice\", age: 30 };\n\tconsole.log(obj); // 输出: { name: 'Alice', age: 30 }\n}\n\nheapExample();\n\n// 全局变量\nlet globalObj = { name: \"Bob\", age: 25 };\nconsole.log(globalObj); // 输出: { name: 'Bob', age: 25 }\n```\n\n### 区别\n\n- 原始类型：存储在栈中，直接存储值。\n- 引用类型：存储在堆中，栈中存储的是指向堆中对象的引用。\n- 栈：先进后出的数据结构，主要用于存储函数调用时的局部变量和执行上下文。\n- 堆：动态内存区域，用于存储对象，提供了更大的灵活性。\n\n如何更加清晰的理解呢？\n\n举个例子来讲：\n\n```ts\n// 原始类型直接内存值存储\nlet name = \"Tom\";\n\n// 引用类型会将值存储在堆中，栈中存储指向堆中对象的引用\nlet obj1 = { a: 1 };\nlet obj2 = obj1;\n\n// 如果将 引用值 修改，那么会发现： obj1 和 obj2 的值都变了，这是为什么？\n// 因为 obj1 和 obj2 的值都是引用的堆的值，改的都是堆值\nobj1.a = 3;\n```\n\n可以参考下面图片：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.lvpaw7hne.webp)\n\n## 判断数据类型\n\n在 JavaScript 中，判断数据类型有多种方法，每种方法都有其适用场景和局限性。以下是几种常用的方法及其区别\n\n### typeof\n\n> `typeof` 是最简单的判断数据类型的方法，主要用于判断基本数据类型。它能准确地识别 `string、number、boolean、undefined` 和 `symbol。`\n\n```ts\nconsole.log(typeof \"hello\"); // \"string\"\nconsole.log(typeof 123); // \"number\"\nconsole.log(typeof true); // \"boolean\"\nconsole.log(typeof undefined); // \"undefined\"\nconsole.log(typeof Symbol(\"sym\")); // \"symbol\"\n\n// 对于 null 和 object 类型，typeof 返回 \"object\"\nconsole.log(typeof null); // \"object\"\nconsole.log(typeof {}); // \"object\"\nconsole.log(typeof []); // \"object\"\n```\n\n### instanceof\n\n> `instanceof` 是 JavaScript 中的一个运算符，用于判断一个对象是否是某个类的实例。它主要用于判断引用类型。\n\n```ts\nconsole.log([] instanceof Array); // true\nconsole.log({} instanceof Object); // true\nconsole.log(function () {} instanceof Function); // true\nconsole.log(new Date() instanceof Date); // true\n```\n\n### Object.prototype.toString.call()\n\n> `Object.prototype.toString.call()` 可以准确判断所有类型的数据，包括 `null` 和 `undefined`。\n\n```ts\nconsole.log(Object.prototype.toString.call(\"hello\")); // \"[object String]\"\nconsole.log(Object.prototype.toString.call(123)); // \"[object Number]\"\nconsole.log(Object.prototype.toString.call(true)); // \"[object Boolean]\"\nconsole.log(Object.prototype.toString.call(undefined)); // \"[object Undefined]\"\nconsole.log(Object.prototype.toString.call(null)); // \"[object Null]\"\nconsole.log(Object.prototype.toString.call([])); // \"[object Array]\"\nconsole.log(Object.prototype.toString.call({})); // \"[object Object]\"\nconsole.log(Object.prototype.toString.call(function () {})); // \"[object Function]\"\nconsole.log(Object.prototype.toString.call(new Date())); // \"[object Date]\"\n```\n\n### Array.isArray()\n\n> `Array.isArray()` 专门用于判断一个值是否为数组。\n\n```ts\nconsole.log(Array.isArray([])); // true\nconsole.log(Array.isArray({})); // false\nconsole.log(Array.isArray([1, 2, 3])); // true\n```\n\n### Buffer.isBuffer() (Node.js)\n\n> `Buffer.isBuffer()` 是 Node.js 中的一个方法，用于判断一个值是否为 Buffer 对象。\n\n```ts\nconst buffer = Buffer.from(\"hello\");\nconsole.log(Buffer.isBuffer(buffer)); // true\nconsole.log(Buffer.isBuffer({})); // false\nconsole.log(Buffer.isBuffer([])); // false\n```\n\n### 总结\n\n- `typeof`：简单易用，适用于基本数据类型。\n- `instanceof`：适用于复杂对象类型，但需要考虑原型链的问题。\n- `Object.prototype.toString.call()`：**适用于所有类型的数据，最准确。**\n- `Array.isArray()`：专门用于判断数组。\n- `Buffer.isBuffer()`：仅在 `Node.js` 中使用，用于判断 `Buffer` 对象。\n","source":"_posts/技能小册/javascript/基础沉淀/数据类型.md","raw":"---\ntitle: 数据类型\nabbrlink: 3080460d\ndate: 2023-03-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n# 介绍\n\nJavaScript 中的数据类型分为两大类：原始类型（Primitive Types）和引用类型（Reference Types）。当然也能成为基本数据类型和复杂数据类型。\n\n当然，不论是在使用还是在读取堆栈，判断数据类型俩种数据类型还是有很大的区别的。\n\n下面详细介绍这两种类型及其区别，并给出具体的例子。\n\n## 数据类型\n\n### 原始类型\n\n原始类型包括以下几种：\n\n- `Number`: 数字\n- `String`: 字符串\n- Boo`lean: 布尔值\n- `Null`: 空值\n- `Undefined`: 未定义\n- `Symbol`: 符号\n- `BigInt`: 大整数\n\n```ts\n// Number\nlet num = 123;\nconsole.log(num); // 输出: 123\n\n// String\nlet str = \"Hello, world!\";\nconsole.log(str); // 输出: Hello, world!\n\n// Boolean\nlet bool = true;\nconsole.log(bool); // 输出: true\n\n// Undefined\nlet undef;\nconsole.log(undef); // 输出: undefined\n\n// Null\nlet n = null;\nconsole.log(n); // 输出: null\n\n// Symbol\nlet sym = Symbol(\"unique\");\nconsole.log(sym); // 输出: Symbol(unique)\n\n// BigInt\nlet bigInt = 123456789012345678901234567890n;\nconsole.log(bigInt); // 输出: 123456789012345678901234567890n\n```\n\n### 引用类型\n\n引用类型包括以下几种：\n\n- `Object`: 对象\n- `Array`: 数组\n- `Function`: 函数\n- `Date`: 日期\n- `Map`: 映射\n- `Set`: 集合\n- `WeakMap`: 弱映射\n- `WeakSet`: 弱集合\n- `RegExp`: 正则表达式\n\n```ts\n// Object\nlet obj = { name: \"Alice\", age: 30 };\nconsole.log(obj); // 输出: { name: 'Alice', age: 30 }\n\n// Array\nlet arr = [1, 2, 3];\nconsole.log(arr); // 输出: [1, 2, 3]\n\n// Function\nlet func = function () {\n\tconsole.log(\"Hello\");\n};\nfunc(); // 输出: Hello\n\n// Date\nlet date = new Date();\nconsole.log(date); // 输出: 当前日期时间\n\n// Map\nlet map = new Map();\nmap.set(\"key1\", \"value1\");\nconsole.log(map); // 输出: Map(1) { 'key1' => 'value1' }\n\n// Set\nlet set = new Set();\nset.add(1).add(2).add(3);\nconsole.log(set); // 输出: Set(3) { 1, 2, 3 }\n\n// WeakMap\nlet weakMap = new WeakMap();\nweakMap.set(obj, \"value\");\nconsole.log(weakMap); // 输出: WeakMap { <1> entries }\n\n// WeakSet\nlet weakSet = new WeakSet();\nweakSet.add(obj);\nconsole.log(weakSet); // 输出: WeakSet { <1> entries }\n\n// RegExp\nlet regex = /hello/;\nconsole.log(regex); // 输出: /hello/\n```\n\n## 堆栈使用\n\n### 栈（Stack）\n\n栈是一种先进后出（Last In First Out, LIFO）的数据结构。栈主要用于存储函数调用时的局部变量和执行上下文。\n\n特性：\n\n- 操作简单：只有两个操作：压入（push）和弹出（pop）。\n- 内存分配和释放速度快。\n- 通常用于函数调用和局部变量。\n\n```ts\nfunction stackExample() {\n\tlet localVar = \"local\";\n\tconsole.log(localVar); // 输出: local\n}\n\nstackExample();\nconsole.log(localVar); // 报错：ReferenceError: localVar is not defined\n```\n\n### 堆（Heap）\n\n堆是一种动态内存区域，用于存储对象。堆中的内存分配和释放相对复杂，但提供了更大的灵活性。\n特性：\n\n- 动态分配：可以在运行时动态创建和销毁对象。\n- 内存分配和释放较慢。\n- 通常用于存储对象和全局变量。\n\n```ts\nfunction heapExample() {\n\tlet obj = { name: \"Alice\", age: 30 };\n\tconsole.log(obj); // 输出: { name: 'Alice', age: 30 }\n}\n\nheapExample();\n\n// 全局变量\nlet globalObj = { name: \"Bob\", age: 25 };\nconsole.log(globalObj); // 输出: { name: 'Bob', age: 25 }\n```\n\n### 区别\n\n- 原始类型：存储在栈中，直接存储值。\n- 引用类型：存储在堆中，栈中存储的是指向堆中对象的引用。\n- 栈：先进后出的数据结构，主要用于存储函数调用时的局部变量和执行上下文。\n- 堆：动态内存区域，用于存储对象，提供了更大的灵活性。\n\n如何更加清晰的理解呢？\n\n举个例子来讲：\n\n```ts\n// 原始类型直接内存值存储\nlet name = \"Tom\";\n\n// 引用类型会将值存储在堆中，栈中存储指向堆中对象的引用\nlet obj1 = { a: 1 };\nlet obj2 = obj1;\n\n// 如果将 引用值 修改，那么会发现： obj1 和 obj2 的值都变了，这是为什么？\n// 因为 obj1 和 obj2 的值都是引用的堆的值，改的都是堆值\nobj1.a = 3;\n```\n\n可以参考下面图片：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.lvpaw7hne.webp)\n\n## 判断数据类型\n\n在 JavaScript 中，判断数据类型有多种方法，每种方法都有其适用场景和局限性。以下是几种常用的方法及其区别\n\n### typeof\n\n> `typeof` 是最简单的判断数据类型的方法，主要用于判断基本数据类型。它能准确地识别 `string、number、boolean、undefined` 和 `symbol。`\n\n```ts\nconsole.log(typeof \"hello\"); // \"string\"\nconsole.log(typeof 123); // \"number\"\nconsole.log(typeof true); // \"boolean\"\nconsole.log(typeof undefined); // \"undefined\"\nconsole.log(typeof Symbol(\"sym\")); // \"symbol\"\n\n// 对于 null 和 object 类型，typeof 返回 \"object\"\nconsole.log(typeof null); // \"object\"\nconsole.log(typeof {}); // \"object\"\nconsole.log(typeof []); // \"object\"\n```\n\n### instanceof\n\n> `instanceof` 是 JavaScript 中的一个运算符，用于判断一个对象是否是某个类的实例。它主要用于判断引用类型。\n\n```ts\nconsole.log([] instanceof Array); // true\nconsole.log({} instanceof Object); // true\nconsole.log(function () {} instanceof Function); // true\nconsole.log(new Date() instanceof Date); // true\n```\n\n### Object.prototype.toString.call()\n\n> `Object.prototype.toString.call()` 可以准确判断所有类型的数据，包括 `null` 和 `undefined`。\n\n```ts\nconsole.log(Object.prototype.toString.call(\"hello\")); // \"[object String]\"\nconsole.log(Object.prototype.toString.call(123)); // \"[object Number]\"\nconsole.log(Object.prototype.toString.call(true)); // \"[object Boolean]\"\nconsole.log(Object.prototype.toString.call(undefined)); // \"[object Undefined]\"\nconsole.log(Object.prototype.toString.call(null)); // \"[object Null]\"\nconsole.log(Object.prototype.toString.call([])); // \"[object Array]\"\nconsole.log(Object.prototype.toString.call({})); // \"[object Object]\"\nconsole.log(Object.prototype.toString.call(function () {})); // \"[object Function]\"\nconsole.log(Object.prototype.toString.call(new Date())); // \"[object Date]\"\n```\n\n### Array.isArray()\n\n> `Array.isArray()` 专门用于判断一个值是否为数组。\n\n```ts\nconsole.log(Array.isArray([])); // true\nconsole.log(Array.isArray({})); // false\nconsole.log(Array.isArray([1, 2, 3])); // true\n```\n\n### Buffer.isBuffer() (Node.js)\n\n> `Buffer.isBuffer()` 是 Node.js 中的一个方法，用于判断一个值是否为 Buffer 对象。\n\n```ts\nconst buffer = Buffer.from(\"hello\");\nconsole.log(Buffer.isBuffer(buffer)); // true\nconsole.log(Buffer.isBuffer({})); // false\nconsole.log(Buffer.isBuffer([])); // false\n```\n\n### 总结\n\n- `typeof`：简单易用，适用于基本数据类型。\n- `instanceof`：适用于复杂对象类型，但需要考虑原型链的问题。\n- `Object.prototype.toString.call()`：**适用于所有类型的数据，最准确。**\n- `Array.isArray()`：专门用于判断数组。\n- `Buffer.isBuffer()`：仅在 `Node.js` 中使用，用于判断 `Buffer` 对象。\n","slug":"技能小册/javascript/基础沉淀/数据类型","published":1,"updated":"2025-03-13T10:16:18.527Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j4005rfg9m9i41dj61","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>JavaScript 中的数据类型分为两大类：原始类型（Primitive Types）和引用类型（Reference Types）。当然也能成为基本数据类型和复杂数据类型。</p>\n<p>当然，不论是在使用还是在读取堆栈，判断数据类型俩种数据类型还是有很大的区别的。</p>\n<p>下面详细介绍这两种类型及其区别，并给出具体的例子。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h3><p>原始类型包括以下几种：</p>\n<ul>\n<li><code>Number</code>: 数字</li>\n<li><code>String</code>: 字符串</li>\n<li>Boo&#96;lean: 布尔值</li>\n<li><code>Null</code>: 空值</li>\n<li><code>Undefined</code>: 未定义</li>\n<li><code>Symbol</code>: 符号</li>\n<li><code>BigInt</code>: 大整数</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 输出: 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str); <span class=\"comment\">// 输出: Hello, world!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool); <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> undef;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(undef); <span class=\"comment\">// 输出: undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n); <span class=\"comment\">// 输出: null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;unique&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sym); <span class=\"comment\">// 输出: Symbol(unique)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BigInt</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bigInt = <span class=\"number\">123456789012345678901234567890n</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bigInt); <span class=\"comment\">// 输出: 123456789012345678901234567890n</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>引用类型包括以下几种：</p>\n<ul>\n<li><code>Object</code>: 对象</li>\n<li><code>Array</code>: 数组</li>\n<li><code>Function</code>: 函数</li>\n<li><code>Date</code>: 日期</li>\n<li><code>Map</code>: 映射</li>\n<li><code>Set</code>: 集合</li>\n<li><code>WeakMap</code>: 弱映射</li>\n<li><code>WeakSet</code>: 弱集合</li>\n<li><code>RegExp</code>: 正则表达式</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj); <span class=\"comment\">// 输出: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// 输出: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// 输出: Hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date); <span class=\"comment\">// 输出: 当前日期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map); <span class=\"comment\">// 输出: Map(1) &#123; &#x27;key1&#x27; =&gt; &#x27;value1&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>).<span class=\"title function_\">add</span>(<span class=\"number\">2</span>).<span class=\"title function_\">add</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set); <span class=\"comment\">// 输出: Set(3) &#123; 1, 2, 3 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WeakMap</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weakMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>();</span><br><span class=\"line\">weakMap.<span class=\"title function_\">set</span>(obj, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(weakMap); <span class=\"comment\">// 输出: WeakMap &#123; &lt;1&gt; entries &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WeakSet</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weakSet = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakSet</span>();</span><br><span class=\"line\">weakSet.<span class=\"title function_\">add</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(weakSet); <span class=\"comment\">// 输出: WeakSet &#123; &lt;1&gt; entries &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RegExp</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/hello/</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(regex); <span class=\"comment\">// 输出: /hello/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆栈使用\"><a href=\"#堆栈使用\" class=\"headerlink\" title=\"堆栈使用\"></a>堆栈使用</h2><h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈是一种先进后出（Last In First Out, LIFO）的数据结构。栈主要用于存储函数调用时的局部变量和执行上下文。</p>\n<p>特性：</p>\n<ul>\n<li>操作简单：只有两个操作：压入（push）和弹出（pop）。</li>\n<li>内存分配和释放速度快。</li>\n<li>通常用于函数调用和局部变量。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">stackExample</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> localVar = <span class=\"string\">&quot;local&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(localVar); <span class=\"comment\">// 输出: local</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">stackExample</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(localVar); <span class=\"comment\">// 报错：ReferenceError: localVar is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h3><p>堆是一种动态内存区域，用于存储对象。堆中的内存分配和释放相对复杂，但提供了更大的灵活性。<br>特性：</p>\n<ul>\n<li>动态分配：可以在运行时动态创建和销毁对象。</li>\n<li>内存分配和释放较慢。</li>\n<li>通常用于存储对象和全局变量。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">heapExample</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj); <span class=\"comment\">// 输出: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">heapExample</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Bob&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(globalObj); <span class=\"comment\">// 输出: &#123; name: &#x27;Bob&#x27;, age: 25 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>原始类型：存储在栈中，直接存储值。</li>\n<li>引用类型：存储在堆中，栈中存储的是指向堆中对象的引用。</li>\n<li>栈：先进后出的数据结构，主要用于存储函数调用时的局部变量和执行上下文。</li>\n<li>堆：动态内存区域，用于存储对象，提供了更大的灵活性。</li>\n</ul>\n<p>如何更加清晰的理解呢？</p>\n<p>举个例子来讲：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始类型直接内存值存储</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型会将值存储在堆中，栈中存储指向堆中对象的引用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = obj1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果将 引用值 修改，那么会发现： obj1 和 obj2 的值都变了，这是为什么？</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 obj1 和 obj2 的值都是引用的堆的值，改的都是堆值</span></span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以参考下面图片：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.lvpaw7hne.webp\" alt=\"x\"></p>\n<h2 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h2><p>在 JavaScript 中，判断数据类型有多种方法，每种方法都有其适用场景和局限性。以下是几种常用的方法及其区别</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><blockquote>\n<p><code>typeof</code> 是最简单的判断数据类型的方法，主要用于判断基本数据类型。它能准确地识别 <code>string、number、boolean、undefined</code> 和 <code>symbol。</code></p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">123</span>); <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>); <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;sym&quot;</span>)); <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于 null 和 object 类型，typeof 返回 &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []); <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><blockquote>\n<p><code>instanceof</code> 是 JavaScript 中的一个运算符，用于判断一个对象是否是某个类的实例。它主要用于判断引用类型。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><blockquote>\n<p><code>Object.prototype.toString.call()</code> 可以准确判断所有类型的数据，包括 <code>null</code> 和 <code>undefined</code>。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;hello&quot;</span>)); <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">123</span>)); <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>)); <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// &quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>)); <span class=\"comment\">// &quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([])); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;)); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)); <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())); <span class=\"comment\">// &quot;[object Date]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h3><blockquote>\n<p><code>Array.isArray()</code> 专门用于判断一个值是否为数组。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123;&#125;)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Buffer-isBuffer-Node-js\"><a href=\"#Buffer-isBuffer-Node-js\" class=\"headerlink\" title=\"Buffer.isBuffer() (Node.js)\"></a>Buffer.isBuffer() (Node.js)</h3><blockquote>\n<p><code>Buffer.isBuffer()</code> 是 Node.js 中的一个方法，用于判断一个值是否为 Buffer 对象。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>(buffer)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>(&#123;&#125;)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>([])); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><code>typeof</code>：简单易用，适用于基本数据类型。</li>\n<li><code>instanceof</code>：适用于复杂对象类型，但需要考虑原型链的问题。</li>\n<li><code>Object.prototype.toString.call()</code>：<strong>适用于所有类型的数据，最准确。</strong></li>\n<li><code>Array.isArray()</code>：专门用于判断数组。</li>\n<li><code>Buffer.isBuffer()</code>：仅在 <code>Node.js</code> 中使用，用于判断 <code>Buffer</code> 对象。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>JavaScript 中的数据类型分为两大类：原始类型（Primitive Types）和引用类型（Reference Types）。当然也能成为基本数据类型和复杂数据类型。</p>\n<p>当然，不论是在使用还是在读取堆栈，判断数据类型俩种数据类型还是有很大的区别的。</p>\n<p>下面详细介绍这两种类型及其区别，并给出具体的例子。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"原始类型\"><a href=\"#原始类型\" class=\"headerlink\" title=\"原始类型\"></a>原始类型</h3><p>原始类型包括以下几种：</p>\n<ul>\n<li><code>Number</code>: 数字</li>\n<li><code>String</code>: 字符串</li>\n<li>Boo&#96;lean: 布尔值</li>\n<li><code>Null</code>: 空值</li>\n<li><code>Undefined</code>: 未定义</li>\n<li><code>Symbol</code>: 符号</li>\n<li><code>BigInt</code>: 大整数</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num); <span class=\"comment\">// 输出: 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str); <span class=\"comment\">// 输出: Hello, world!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool); <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> undef;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(undef); <span class=\"comment\">// 输出: undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n); <span class=\"comment\">// 输出: null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sym = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;unique&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sym); <span class=\"comment\">// 输出: Symbol(unique)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BigInt</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bigInt = <span class=\"number\">123456789012345678901234567890n</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bigInt); <span class=\"comment\">// 输出: 123456789012345678901234567890n</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>引用类型包括以下几种：</p>\n<ul>\n<li><code>Object</code>: 对象</li>\n<li><code>Array</code>: 数组</li>\n<li><code>Function</code>: 函数</li>\n<li><code>Date</code>: 日期</li>\n<li><code>Map</code>: 映射</li>\n<li><code>Set</code>: 集合</li>\n<li><code>WeakMap</code>: 弱映射</li>\n<li><code>WeakSet</code>: 弱集合</li>\n<li><code>RegExp</code>: 正则表达式</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj); <span class=\"comment\">// 输出: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr); <span class=\"comment\">// 输出: [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// 输出: Hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date); <span class=\"comment\">// 输出: 当前日期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map); <span class=\"comment\">// 输出: Map(1) &#123; &#x27;key1&#x27; =&gt; &#x27;value1&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>).<span class=\"title function_\">add</span>(<span class=\"number\">2</span>).<span class=\"title function_\">add</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(set); <span class=\"comment\">// 输出: Set(3) &#123; 1, 2, 3 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WeakMap</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weakMap = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakMap</span>();</span><br><span class=\"line\">weakMap.<span class=\"title function_\">set</span>(obj, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(weakMap); <span class=\"comment\">// 输出: WeakMap &#123; &lt;1&gt; entries &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WeakSet</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> weakSet = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakSet</span>();</span><br><span class=\"line\">weakSet.<span class=\"title function_\">add</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(weakSet); <span class=\"comment\">// 输出: WeakSet &#123; &lt;1&gt; entries &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RegExp</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/hello/</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(regex); <span class=\"comment\">// 输出: /hello/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆栈使用\"><a href=\"#堆栈使用\" class=\"headerlink\" title=\"堆栈使用\"></a>堆栈使用</h2><h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈是一种先进后出（Last In First Out, LIFO）的数据结构。栈主要用于存储函数调用时的局部变量和执行上下文。</p>\n<p>特性：</p>\n<ul>\n<li>操作简单：只有两个操作：压入（push）和弹出（pop）。</li>\n<li>内存分配和释放速度快。</li>\n<li>通常用于函数调用和局部变量。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">stackExample</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> localVar = <span class=\"string\">&quot;local&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(localVar); <span class=\"comment\">// 输出: local</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">stackExample</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(localVar); <span class=\"comment\">// 报错：ReferenceError: localVar is not defined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h3><p>堆是一种动态内存区域，用于存储对象。堆中的内存分配和释放相对复杂，但提供了更大的灵活性。<br>特性：</p>\n<ul>\n<li>动态分配：可以在运行时动态创建和销毁对象。</li>\n<li>内存分配和释放较慢。</li>\n<li>通常用于存储对象和全局变量。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">heapExample</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj); <span class=\"comment\">// 输出: &#123; name: &#x27;Alice&#x27;, age: 30 &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">heapExample</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> globalObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Bob&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(globalObj); <span class=\"comment\">// 输出: &#123; name: &#x27;Bob&#x27;, age: 25 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>原始类型：存储在栈中，直接存储值。</li>\n<li>引用类型：存储在堆中，栈中存储的是指向堆中对象的引用。</li>\n<li>栈：先进后出的数据结构，主要用于存储函数调用时的局部变量和执行上下文。</li>\n<li>堆：动态内存区域，用于存储对象，提供了更大的灵活性。</li>\n</ul>\n<p>如何更加清晰的理解呢？</p>\n<p>举个例子来讲：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始类型直接内存值存储</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型会将值存储在堆中，栈中存储指向堆中对象的引用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = obj1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果将 引用值 修改，那么会发现： obj1 和 obj2 的值都变了，这是为什么？</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 obj1 和 obj2 的值都是引用的堆的值，改的都是堆值</span></span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以参考下面图片：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.lvpaw7hne.webp\" alt=\"x\"></p>\n<h2 id=\"判断数据类型\"><a href=\"#判断数据类型\" class=\"headerlink\" title=\"判断数据类型\"></a>判断数据类型</h2><p>在 JavaScript 中，判断数据类型有多种方法，每种方法都有其适用场景和局限性。以下是几种常用的方法及其区别</p>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><blockquote>\n<p><code>typeof</code> 是最简单的判断数据类型的方法，主要用于判断基本数据类型。它能准确地识别 <code>string、number、boolean、undefined</code> 和 <code>symbol。</code></p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">123</span>); <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>); <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;sym&quot;</span>)); <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于 null 和 object 类型，typeof 返回 &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;); <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []); <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><blockquote>\n<p><code>instanceof</code> 是 JavaScript 中的一个运算符，用于判断一个对象是否是某个类的实例。它主要用于判断引用类型。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><blockquote>\n<p><code>Object.prototype.toString.call()</code> 可以准确判断所有类型的数据，包括 <code>null</code> 和 <code>undefined</code>。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;hello&quot;</span>)); <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">123</span>)); <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>)); <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// &quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>)); <span class=\"comment\">// &quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([])); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;)); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)); <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())); <span class=\"comment\">// &quot;[object Date]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h3><blockquote>\n<p><code>Array.isArray()</code> 专门用于判断一个值是否为数组。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123;&#125;)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Buffer-isBuffer-Node-js\"><a href=\"#Buffer-isBuffer-Node-js\" class=\"headerlink\" title=\"Buffer.isBuffer() (Node.js)\"></a>Buffer.isBuffer() (Node.js)</h3><blockquote>\n<p><code>Buffer.isBuffer()</code> 是 Node.js 中的一个方法，用于判断一个值是否为 Buffer 对象。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>(buffer)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>(&#123;&#125;)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">isBuffer</span>([])); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><code>typeof</code>：简单易用，适用于基本数据类型。</li>\n<li><code>instanceof</code>：适用于复杂对象类型，但需要考虑原型链的问题。</li>\n<li><code>Object.prototype.toString.call()</code>：<strong>适用于所有类型的数据，最准确。</strong></li>\n<li><code>Array.isArray()</code>：专门用于判断数组。</li>\n<li><code>Buffer.isBuffer()</code>：仅在 <code>Node.js</code> 中使用，用于判断 <code>Buffer</code> 对象。</li>\n</ul>\n"},{"title":"变量提升","abbrlink":"3080460d","date":"2023-03-14T03:20:38.000Z","_content":"\n# 介绍\n\n在 JavaScript 中，`let`, `const`, 和` var` 用于声明变量，而 f`unction` 用于定义函数。它们之间存在一些重要的区别，尤其是在作用域和变量提升方面。\n\n在说明变量提升之前，先理解一下三者的区别\n\n### 区别\n\n- `var`: 在函数或全局范围内声明变量。所有用 `var` 声明的变量都会被提升到当前作用域的顶部。\n- `let`: 在块级作用域内声明变量。不会被提升。\n- `const`: 与 `let` 类似，但在声明时必须初始化，并且值不能改变。\n\n```ts\nvar price = 100;\nprice = 200; // 200， 可以正常修改\n\nlet a = 1;\na = 2; // 2， 可以正常修改\n\nconst b = \"name\";\nb = \"age\"; // Assignment to constant variable. 常量不能被修改\n```\n\n### 变量提升\n\nJavaScript 中的变量提升是指变量声明会被提升到当前作用域的顶部，但仅限于声明本身，而不包括初始化。\n\n```ts\nconsole.log(x); // 输出: undefined\nvar x = 5;\n\nconsole.log(y); // 输出: ReferenceError: y is not defined\nlet y = 10;\n\nconsole.log(z); // 输出: ReferenceError: z is not defined\nconst z = 15;\n```\n\n在这个例子中：\n\n- `var x` 的声明被提升到了作用域的顶部，因此 `x` 在使用前就已经存在，但它的初始化没有被提升，所以输出 `undefined`。\n- `let y` 和 `const z` 的声明都没有被提升，所以在使用前访问它们会导致 `ReferenceError`。\n\n现在已经把`let, const, var`的区别以及变量如何提升的已经说完了，但是之前说到了`function`，这里为什么要说`function`这与变量提升有什么联系呢？\n\n要想解释`function`变量提升，那么就要接单了解胰一下`function`\n\n- 函数声明 (`function foo() {}`) 会进行完整的提升，即声明和初始化都会被提升。\n- 函数表达式 (`var bar = function() {};`) 只有变量声明被提升，函数初始化部分不提升。\n\n```ts\nconsole.log(foo()); // 输出: \"Hello\"\nfunction foo() {\n\treturn \"Hello\";\n}\n\nconsole.log(bar()); // 输出: TypeError: bar is not a function\nvar bar = function () {\n\treturn \"World\";\n};\n```\n\n如果对其还是模糊不清，可以参考以下图片便于理解：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1141.7ax4zo6imu.webp)\n","source":"_posts/技能小册/javascript/基础沉淀/变量提升.md","raw":"---\ntitle: 变量提升\nabbrlink: 3080460d\ndate: 2023-03-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n# 介绍\n\n在 JavaScript 中，`let`, `const`, 和` var` 用于声明变量，而 f`unction` 用于定义函数。它们之间存在一些重要的区别，尤其是在作用域和变量提升方面。\n\n在说明变量提升之前，先理解一下三者的区别\n\n### 区别\n\n- `var`: 在函数或全局范围内声明变量。所有用 `var` 声明的变量都会被提升到当前作用域的顶部。\n- `let`: 在块级作用域内声明变量。不会被提升。\n- `const`: 与 `let` 类似，但在声明时必须初始化，并且值不能改变。\n\n```ts\nvar price = 100;\nprice = 200; // 200， 可以正常修改\n\nlet a = 1;\na = 2; // 2， 可以正常修改\n\nconst b = \"name\";\nb = \"age\"; // Assignment to constant variable. 常量不能被修改\n```\n\n### 变量提升\n\nJavaScript 中的变量提升是指变量声明会被提升到当前作用域的顶部，但仅限于声明本身，而不包括初始化。\n\n```ts\nconsole.log(x); // 输出: undefined\nvar x = 5;\n\nconsole.log(y); // 输出: ReferenceError: y is not defined\nlet y = 10;\n\nconsole.log(z); // 输出: ReferenceError: z is not defined\nconst z = 15;\n```\n\n在这个例子中：\n\n- `var x` 的声明被提升到了作用域的顶部，因此 `x` 在使用前就已经存在，但它的初始化没有被提升，所以输出 `undefined`。\n- `let y` 和 `const z` 的声明都没有被提升，所以在使用前访问它们会导致 `ReferenceError`。\n\n现在已经把`let, const, var`的区别以及变量如何提升的已经说完了，但是之前说到了`function`，这里为什么要说`function`这与变量提升有什么联系呢？\n\n要想解释`function`变量提升，那么就要接单了解胰一下`function`\n\n- 函数声明 (`function foo() {}`) 会进行完整的提升，即声明和初始化都会被提升。\n- 函数表达式 (`var bar = function() {};`) 只有变量声明被提升，函数初始化部分不提升。\n\n```ts\nconsole.log(foo()); // 输出: \"Hello\"\nfunction foo() {\n\treturn \"Hello\";\n}\n\nconsole.log(bar()); // 输出: TypeError: bar is not a function\nvar bar = function () {\n\treturn \"World\";\n};\n```\n\n如果对其还是模糊不清，可以参考以下图片便于理解：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1141.7ax4zo6imu.webp)\n","slug":"技能小册/javascript/基础沉淀/变量提升","published":1,"updated":"2025-03-13T10:16:18.989Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j4005ufg9m6irxc4r4","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在 JavaScript 中，<code>let</code>, <code>const</code>, 和<code> var</code> 用于声明变量，而 f<code>unction</code> 用于定义函数。它们之间存在一些重要的区别，尤其是在作用域和变量提升方面。</p>\n<p>在说明变量提升之前，先理解一下三者的区别</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li><code>var</code>: 在函数或全局范围内声明变量。所有用 <code>var</code> 声明的变量都会被提升到当前作用域的顶部。</li>\n<li><code>let</code>: 在块级作用域内声明变量。不会被提升。</li>\n<li><code>const</code>: 与 <code>let</code> 类似，但在声明时必须初始化，并且值不能改变。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> price = <span class=\"number\">100</span>;</span><br><span class=\"line\">price = <span class=\"number\">200</span>; <span class=\"comment\">// 200， 可以正常修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">2</span>; <span class=\"comment\">// 2， 可以正常修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\">b = <span class=\"string\">&quot;age&quot;</span>; <span class=\"comment\">// Assignment to constant variable. 常量不能被修改</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>JavaScript 中的变量提升是指变量声明会被提升到当前作用域的顶部，但仅限于声明本身，而不包括初始化。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// 输出: undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y); <span class=\"comment\">// 输出: ReferenceError: y is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z); <span class=\"comment\">// 输出: ReferenceError: z is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> z = <span class=\"number\">15</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li><code>var x</code> 的声明被提升到了作用域的顶部，因此 <code>x</code> 在使用前就已经存在，但它的初始化没有被提升，所以输出 <code>undefined</code>。</li>\n<li><code>let y</code> 和 <code>const z</code> 的声明都没有被提升，所以在使用前访问它们会导致 <code>ReferenceError</code>。</li>\n</ul>\n<p>现在已经把<code>let, const, var</code>的区别以及变量如何提升的已经说完了，但是之前说到了<code>function</code>，这里为什么要说<code>function</code>这与变量提升有什么联系呢？</p>\n<p>要想解释<code>function</code>变量提升，那么就要接单了解胰一下<code>function</code></p>\n<ul>\n<li>函数声明 (<code>function foo() &#123;&#125;</code>) 会进行完整的提升，即声明和初始化都会被提升。</li>\n<li>函数表达式 (<code>var bar = function() &#123;&#125;;</code>) 只有变量声明被提升，函数初始化部分不提升。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()); <span class=\"comment\">// 输出: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">bar</span>()); <span class=\"comment\">// 输出: TypeError: bar is not a function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果对其还是模糊不清，可以参考以下图片便于理解：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1141.7ax4zo6imu.webp\" alt=\"x\"></p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>在 JavaScript 中，<code>let</code>, <code>const</code>, 和<code> var</code> 用于声明变量，而 f<code>unction</code> 用于定义函数。它们之间存在一些重要的区别，尤其是在作用域和变量提升方面。</p>\n<p>在说明变量提升之前，先理解一下三者的区别</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li><code>var</code>: 在函数或全局范围内声明变量。所有用 <code>var</code> 声明的变量都会被提升到当前作用域的顶部。</li>\n<li><code>let</code>: 在块级作用域内声明变量。不会被提升。</li>\n<li><code>const</code>: 与 <code>let</code> 类似，但在声明时必须初始化，并且值不能改变。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> price = <span class=\"number\">100</span>;</span><br><span class=\"line\">price = <span class=\"number\">200</span>; <span class=\"comment\">// 200， 可以正常修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">a = <span class=\"number\">2</span>; <span class=\"comment\">// 2， 可以正常修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\">b = <span class=\"string\">&quot;age&quot;</span>; <span class=\"comment\">// Assignment to constant variable. 常量不能被修改</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>JavaScript 中的变量提升是指变量声明会被提升到当前作用域的顶部，但仅限于声明本身，而不包括初始化。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// 输出: undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y); <span class=\"comment\">// 输出: ReferenceError: y is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z); <span class=\"comment\">// 输出: ReferenceError: z is not defined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> z = <span class=\"number\">15</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中：</p>\n<ul>\n<li><code>var x</code> 的声明被提升到了作用域的顶部，因此 <code>x</code> 在使用前就已经存在，但它的初始化没有被提升，所以输出 <code>undefined</code>。</li>\n<li><code>let y</code> 和 <code>const z</code> 的声明都没有被提升，所以在使用前访问它们会导致 <code>ReferenceError</code>。</li>\n</ul>\n<p>现在已经把<code>let, const, var</code>的区别以及变量如何提升的已经说完了，但是之前说到了<code>function</code>，这里为什么要说<code>function</code>这与变量提升有什么联系呢？</p>\n<p>要想解释<code>function</code>变量提升，那么就要接单了解胰一下<code>function</code></p>\n<ul>\n<li>函数声明 (<code>function foo() &#123;&#125;</code>) 会进行完整的提升，即声明和初始化都会被提升。</li>\n<li>函数表达式 (<code>var bar = function() &#123;&#125;;</code>) 只有变量声明被提升，函数初始化部分不提升。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">foo</span>()); <span class=\"comment\">// 输出: &quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">bar</span>()); <span class=\"comment\">// 输出: TypeError: bar is not a function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;World&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果对其还是模糊不清，可以参考以下图片便于理解：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1141.7ax4zo6imu.webp\" alt=\"x\"></p>\n"},{"title":"冒泡排序","abbrlink":"14e6f1eb","date":"2024-08-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`冒泡排序`（Bubble Sort）是一种简单的排序算法，它重复地遍历要排序的数据，比较相邻的两个元素，如果它们的顺序错误就把它们交换过来，直到没有需要交换的元素为止。\n{% endnote %}\n\n冒泡排序的基本步骤如下：\n\n1. 从第一个元素开始，比较相邻的两个元素。如果第一个元素大于第二个元素，则交换它们。\n2. 移动到下一对相邻的元素，重复步骤 1。\n3. 继续这个过程，直到最后一对相邻的元素\n4. 如果在整个过程中没有发生任何交换，则说明数据已经排好序。\n5. 否则，重复步骤 1-4，直到没有需要交换的元素为止。\n\n## demo\n\n### 代码\n\n```js\n// 从左到右排序，\n// 它的核心逻辑是：在每一轮冒泡中，将当前元素与其后面的元素进行比较，如果当前元素大于后面的元素，则交换它们的位置。\n// 这样，每一轮冒泡都会将最大的元素冒泡到数组的末尾。\nfunction sort(data = []) {\n\tfor (let i = 0; i < data.length; i++) {\n\t\tfor (let j = i + 1; j < data.length; j++) {\n\t\t\tif (data[i] > data[j]) {\n\t\t\t\t[data[i], data[j]] = [data[j], data[i]];\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n\nsort([3, 5, 1, 26, 6]);\n```\n\n```js\n// 从右到左排序，\n// 它的核心逻辑是：在每一轮冒泡中，将当前元素与前面的元素进行比较，如果当前元素小于前面的元素，则交换它们的位置。\n// 这样，每一轮冒泡都会将最小的元素冒泡到数组的开头。\nfunction sort(data = []) {\n\tfor (let i = 0; i < data.length - 1; i++) {\n\t\tfor (let j = 0; j < data.length - 1 - i; j++) {\n\t\t\tif (data[j + 1] < data[i]) {\n\t\t\t\t[data[j], data[j + 1]] = [data[j + 1], data[j]];\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\nsort([3, 5, 1, 26, 6]);\n```\n\n### 可视化\n\n<demo html=\"html/冒泡排序.html\"/>\n\n## 优缺点\n\n冒泡排序的特点是：\n\n- 简单易懂\n- 实现容易\n- 时间复杂度为 O(n^2)，不适合大规模的数据排序\n- 空间复杂度为 O(1)，不需要额外的空间\n\n冒泡排序的缺点是：\n\n- 时间复杂度高\n- 不适合大规模的数据排序\n- 不稳定排序算法（如果两个元素相等，可能会交换它们的位置）\n\n冒泡排序的应用场景：\n\n- 小规模的数据排序\n- 需要简单易懂的排序算法\n- 不需要高效的排序算法\n","source":"_posts/技能小册/javascript/算法/冒泡排序.md","raw":"---\ntitle: 冒泡排序\nabbrlink: 14e6f1eb\ndate: 2024-08-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n{% note info simple %}\n`冒泡排序`（Bubble Sort）是一种简单的排序算法，它重复地遍历要排序的数据，比较相邻的两个元素，如果它们的顺序错误就把它们交换过来，直到没有需要交换的元素为止。\n{% endnote %}\n\n冒泡排序的基本步骤如下：\n\n1. 从第一个元素开始，比较相邻的两个元素。如果第一个元素大于第二个元素，则交换它们。\n2. 移动到下一对相邻的元素，重复步骤 1。\n3. 继续这个过程，直到最后一对相邻的元素\n4. 如果在整个过程中没有发生任何交换，则说明数据已经排好序。\n5. 否则，重复步骤 1-4，直到没有需要交换的元素为止。\n\n## demo\n\n### 代码\n\n```js\n// 从左到右排序，\n// 它的核心逻辑是：在每一轮冒泡中，将当前元素与其后面的元素进行比较，如果当前元素大于后面的元素，则交换它们的位置。\n// 这样，每一轮冒泡都会将最大的元素冒泡到数组的末尾。\nfunction sort(data = []) {\n\tfor (let i = 0; i < data.length; i++) {\n\t\tfor (let j = i + 1; j < data.length; j++) {\n\t\t\tif (data[i] > data[j]) {\n\t\t\t\t[data[i], data[j]] = [data[j], data[i]];\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n\nsort([3, 5, 1, 26, 6]);\n```\n\n```js\n// 从右到左排序，\n// 它的核心逻辑是：在每一轮冒泡中，将当前元素与前面的元素进行比较，如果当前元素小于前面的元素，则交换它们的位置。\n// 这样，每一轮冒泡都会将最小的元素冒泡到数组的开头。\nfunction sort(data = []) {\n\tfor (let i = 0; i < data.length - 1; i++) {\n\t\tfor (let j = 0; j < data.length - 1 - i; j++) {\n\t\t\tif (data[j + 1] < data[i]) {\n\t\t\t\t[data[j], data[j + 1]] = [data[j + 1], data[j]];\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\nsort([3, 5, 1, 26, 6]);\n```\n\n### 可视化\n\n<demo html=\"html/冒泡排序.html\"/>\n\n## 优缺点\n\n冒泡排序的特点是：\n\n- 简单易懂\n- 实现容易\n- 时间复杂度为 O(n^2)，不适合大规模的数据排序\n- 空间复杂度为 O(1)，不需要额外的空间\n\n冒泡排序的缺点是：\n\n- 时间复杂度高\n- 不适合大规模的数据排序\n- 不稳定排序算法（如果两个元素相等，可能会交换它们的位置）\n\n冒泡排序的应用场景：\n\n- 小规模的数据排序\n- 需要简单易懂的排序算法\n- 不需要高效的排序算法\n","slug":"技能小册/javascript/算法/冒泡排序","published":1,"updated":"2025-03-12T09:24:20.284Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j4005xfg9mghpgdqug","content":"<div class=\"note info simple\"><p><code>冒泡排序</code>（Bubble Sort）是一种简单的排序算法，它重复地遍历要排序的数据，比较相邻的两个元素，如果它们的顺序错误就把它们交换过来，直到没有需要交换的元素为止。</p>\n</div>\n\n<p>冒泡排序的基本步骤如下：</p>\n<ol>\n<li>从第一个元素开始，比较相邻的两个元素。如果第一个元素大于第二个元素，则交换它们。</li>\n<li>移动到下一对相邻的元素，重复步骤 1。</li>\n<li>继续这个过程，直到最后一对相邻的元素</li>\n<li>如果在整个过程中没有发生任何交换，则说明数据已经排好序。</li>\n<li>否则，重复步骤 1-4，直到没有需要交换的元素为止。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从左到右排序，</span></span><br><span class=\"line\"><span class=\"comment\">// 它的核心逻辑是：在每一轮冒泡中，将当前元素与其后面的元素进行比较，如果当前元素大于后面的元素，则交换它们的位置。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样，每一轮冒泡都会将最大的元素冒泡到数组的末尾。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; data.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[i] &gt; data[j]) &#123;</span><br><span class=\"line\">\t\t\t\t[data[i], data[j]] = [data[j], data[i]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sort</span>([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从右到左排序，</span></span><br><span class=\"line\"><span class=\"comment\">// 它的核心逻辑是：在每一轮冒泡中，将当前元素与前面的元素进行比较，如果当前元素小于前面的元素，则交换它们的位置。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样，每一轮冒泡都会将最小的元素冒泡到数组的开头。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; data.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[j + <span class=\"number\">1</span>] &lt; data[i]) &#123;</span><br><span class=\"line\">\t\t\t\t[data[j], data[j + <span class=\"number\">1</span>]] = [data[j + <span class=\"number\">1</span>], data[j]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sort</span>([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/冒泡排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>冒泡排序的特点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>实现容易</li>\n<li>时间复杂度为 O(n^2)，不适合大规模的数据排序</li>\n<li>空间复杂度为 O(1)，不需要额外的空间</li>\n</ul>\n<p>冒泡排序的缺点是：</p>\n<ul>\n<li>时间复杂度高</li>\n<li>不适合大规模的数据排序</li>\n<li>不稳定排序算法（如果两个元素相等，可能会交换它们的位置）</li>\n</ul>\n<p>冒泡排序的应用场景：</p>\n<ul>\n<li>小规模的数据排序</li>\n<li>需要简单易懂的排序算法</li>\n<li>不需要高效的排序算法</li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>冒泡排序</code>（Bubble Sort）是一种简单的排序算法，它重复地遍历要排序的数据，比较相邻的两个元素，如果它们的顺序错误就把它们交换过来，直到没有需要交换的元素为止。</p>\n</div>\n\n<p>冒泡排序的基本步骤如下：</p>\n<ol>\n<li>从第一个元素开始，比较相邻的两个元素。如果第一个元素大于第二个元素，则交换它们。</li>\n<li>移动到下一对相邻的元素，重复步骤 1。</li>\n<li>继续这个过程，直到最后一对相邻的元素</li>\n<li>如果在整个过程中没有发生任何交换，则说明数据已经排好序。</li>\n<li>否则，重复步骤 1-4，直到没有需要交换的元素为止。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从左到右排序，</span></span><br><span class=\"line\"><span class=\"comment\">// 它的核心逻辑是：在每一轮冒泡中，将当前元素与其后面的元素进行比较，如果当前元素大于后面的元素，则交换它们的位置。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样，每一轮冒泡都会将最大的元素冒泡到数组的末尾。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; data.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[i] &gt; data[j]) &#123;</span><br><span class=\"line\">\t\t\t\t[data[i], data[j]] = [data[j], data[i]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sort</span>([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从右到左排序，</span></span><br><span class=\"line\"><span class=\"comment\">// 它的核心逻辑是：在每一轮冒泡中，将当前元素与前面的元素进行比较，如果当前元素小于前面的元素，则交换它们的位置。</span></span><br><span class=\"line\"><span class=\"comment\">// 这样，每一轮冒泡都会将最小的元素冒泡到数组的开头。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; data.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[j + <span class=\"number\">1</span>] &lt; data[i]) &#123;</span><br><span class=\"line\">\t\t\t\t[data[j], data[j + <span class=\"number\">1</span>]] = [data[j + <span class=\"number\">1</span>], data[j]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sort</span>([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">26</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/冒泡排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>冒泡排序的特点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>实现容易</li>\n<li>时间复杂度为 O(n^2)，不适合大规模的数据排序</li>\n<li>空间复杂度为 O(1)，不需要额外的空间</li>\n</ul>\n<p>冒泡排序的缺点是：</p>\n<ul>\n<li>时间复杂度高</li>\n<li>不适合大规模的数据排序</li>\n<li>不稳定排序算法（如果两个元素相等，可能会交换它们的位置）</li>\n</ul>\n<p>冒泡排序的应用场景：</p>\n<ul>\n<li>小规模的数据排序</li>\n<li>需要简单易懂的排序算法</li>\n<li>不需要高效的排序算法</li>\n</ul>\n"},{"title":"call,apply和bind","abbrlink":"a4ad09f4","date":"2023-07-15T03:20:38.000Z","_content":"\n\n{% note info simple %}\n在前端开发中，`call, apply, bind`是 js 三个重要的方法, 三者都是改变`this`（函数的执行上下文）的指向，但是还是有区别的；我将会以`demo`的形式展示三者的使用场景以及区别；\n在一半工作任务中这三者是不常用到的，如果您的项目是纯原生 js 项目，那么使用到的几率就会大很多；这三者一般用于代码底层，例如：封装，框架等等；\n{% endnote %}\n\n\n## 区别\n\n### call\n\n> `call`:方法调用函数, 执行`this`的值和参数；参数可以为多个\n\n\n`func.call(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **arg1, arg2, ...**: 函数的值\n\n### apply\n\n> `apply`: 与`call`类似，但是参数是以数组的形式展示\n\n\n`func.apply(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **argsArray**: 函数的值\n\n### bind\n\n> `bind`: 创建一个新的函数，指定`this`的值和参数\n\n\n`func.apply(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **arg1, arg2, ...**: 函数的值\n\n## 手写这三个函数\n\n","source":"_posts/技能小册/javascript/基础沉淀/call_apply_bind.md","raw":"---\ntitle: call,apply和bind\nabbrlink: a4ad09f4\ndate: 2023-07-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n\n{% note info simple %}\n在前端开发中，`call, apply, bind`是 js 三个重要的方法, 三者都是改变`this`（函数的执行上下文）的指向，但是还是有区别的；我将会以`demo`的形式展示三者的使用场景以及区别；\n在一半工作任务中这三者是不常用到的，如果您的项目是纯原生 js 项目，那么使用到的几率就会大很多；这三者一般用于代码底层，例如：封装，框架等等；\n{% endnote %}\n\n\n## 区别\n\n### call\n\n> `call`:方法调用函数, 执行`this`的值和参数；参数可以为多个\n\n\n`func.call(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **arg1, arg2, ...**: 函数的值\n\n### apply\n\n> `apply`: 与`call`类似，但是参数是以数组的形式展示\n\n\n`func.apply(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **argsArray**: 函数的值\n\n### bind\n\n> `bind`: 创建一个新的函数，指定`this`的值和参数\n\n\n`func.apply(thisArg, arg1, arg2, ...)`\n\n- **thisArg**: `this`的值\n- **arg1, arg2, ...**: 函数的值\n\n## 手写这三个函数\n\n","slug":"技能小册/javascript/基础沉淀/call_apply_bind","published":1,"updated":"2025-03-12T09:18:45.173Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j50060fg9m4edsgnvc","content":"<div class=\"note info simple\"><p>在前端开发中，<code>call, apply, bind</code>是 js 三个重要的方法, 三者都是改变<code>this</code>（函数的执行上下文）的指向，但是还是有区别的；我将会以<code>demo</code>的形式展示三者的使用场景以及区别；<br>在一半工作任务中这三者是不常用到的，如果您的项目是纯原生 js 项目，那么使用到的几率就会大很多；这三者一般用于代码底层，例如：封装，框架等等；</p>\n</div>\n\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><blockquote>\n<p><code>call</code>:方法调用函数, 执行<code>this</code>的值和参数；参数可以为多个</p>\n</blockquote>\n<p><code>func.call(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>arg1, arg2, …</strong>: 函数的值</li>\n</ul>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><blockquote>\n<p><code>apply</code>: 与<code>call</code>类似，但是参数是以数组的形式展示</p>\n</blockquote>\n<p><code>func.apply(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>argsArray</strong>: 函数的值</li>\n</ul>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><blockquote>\n<p><code>bind</code>: 创建一个新的函数，指定<code>this</code>的值和参数</p>\n</blockquote>\n<p><code>func.apply(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>arg1, arg2, …</strong>: 函数的值</li>\n</ul>\n<h2 id=\"手写这三个函数\"><a href=\"#手写这三个函数\" class=\"headerlink\" title=\"手写这三个函数\"></a>手写这三个函数</h2>","excerpt":"","more":"<div class=\"note info simple\"><p>在前端开发中，<code>call, apply, bind</code>是 js 三个重要的方法, 三者都是改变<code>this</code>（函数的执行上下文）的指向，但是还是有区别的；我将会以<code>demo</code>的形式展示三者的使用场景以及区别；<br>在一半工作任务中这三者是不常用到的，如果您的项目是纯原生 js 项目，那么使用到的几率就会大很多；这三者一般用于代码底层，例如：封装，框架等等；</p>\n</div>\n\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><blockquote>\n<p><code>call</code>:方法调用函数, 执行<code>this</code>的值和参数；参数可以为多个</p>\n</blockquote>\n<p><code>func.call(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>arg1, arg2, …</strong>: 函数的值</li>\n</ul>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><blockquote>\n<p><code>apply</code>: 与<code>call</code>类似，但是参数是以数组的形式展示</p>\n</blockquote>\n<p><code>func.apply(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>argsArray</strong>: 函数的值</li>\n</ul>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><blockquote>\n<p><code>bind</code>: 创建一个新的函数，指定<code>this</code>的值和参数</p>\n</blockquote>\n<p><code>func.apply(thisArg, arg1, arg2, ...)</code></p>\n<ul>\n<li><strong>thisArg</strong>: <code>this</code>的值</li>\n<li><strong>arg1, arg2, …</strong>: 函数的值</li>\n</ul>\n<h2 id=\"手写这三个函数\"><a href=\"#手写这三个函数\" class=\"headerlink\" title=\"手写这三个函数\"></a>手写这三个函数</h2>"},{"title":"插入排序","abbrlink":"96555fb2","date":"2024-08-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`插入排序`（Insertion Sort）是一种简单的排序算法，它的工作原理是通过逐一将未排序的元素插入到已排序的序列中，直到整个序列都有序。\n{% endnote %}\n\n插入排序的步骤如下：\n\n1. 从第二个元素开始（索引为 1），将当前元素作为 `key`\n2. 与 `key` 之前的元素进行比较，如果之前的元素大于 `key`，则将其向后移动一位。\n3. 重复步骤 2，直到找到一个小于或等于 `key` 的元素。\n4. 将 `key` 插入到该位置。\n5. 重复步骤 1-4，直到整个序列都有序。\n\n## demo\n\n### 代码\n\n```js\nfunction insertionSort(arr) {\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tlet key = arr[i];\n\t\tlet j = i - 1;\n\t\twhile (j >= 0 && arr[j] > key) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n\treturn arr;\n}\ninsertionSort([5, 2, 8, 3, 1, 6, 4]);\n```\n\n### 可视化\n\n<demo html=\"html/插入排序.html\"/>\n\n## 优缺点\n\n插入排序的特点是：\n\n- 简单易懂\n- 稳定排序（不会改变相同元素的相对顺序）\n- 对于小规模数据集效率较高\n- 时间复杂度为 O(n^2)，因此对于大型数据集效率较低\n\n插入排序的缺点是：\n\n- 时间复杂度较高（O(n^2)）\n- 不适合大型数据集的排序\n- 不适合需要高效率的场景\n\n插入排序可以用于以下场景：\n\n- 小规模数据集的排序\n- 需要稳定排序的场景\n- 需要简单易懂的排序算法\n","source":"_posts/技能小册/javascript/算法/插入排序.md","raw":"---\ntitle: 插入排序\nabbrlink: 96555fb2\ndate: 2024-08-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n{% note info simple %}\n`插入排序`（Insertion Sort）是一种简单的排序算法，它的工作原理是通过逐一将未排序的元素插入到已排序的序列中，直到整个序列都有序。\n{% endnote %}\n\n插入排序的步骤如下：\n\n1. 从第二个元素开始（索引为 1），将当前元素作为 `key`\n2. 与 `key` 之前的元素进行比较，如果之前的元素大于 `key`，则将其向后移动一位。\n3. 重复步骤 2，直到找到一个小于或等于 `key` 的元素。\n4. 将 `key` 插入到该位置。\n5. 重复步骤 1-4，直到整个序列都有序。\n\n## demo\n\n### 代码\n\n```js\nfunction insertionSort(arr) {\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tlet key = arr[i];\n\t\tlet j = i - 1;\n\t\twhile (j >= 0 && arr[j] > key) {\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n\treturn arr;\n}\ninsertionSort([5, 2, 8, 3, 1, 6, 4]);\n```\n\n### 可视化\n\n<demo html=\"html/插入排序.html\"/>\n\n## 优缺点\n\n插入排序的特点是：\n\n- 简单易懂\n- 稳定排序（不会改变相同元素的相对顺序）\n- 对于小规模数据集效率较高\n- 时间复杂度为 O(n^2)，因此对于大型数据集效率较低\n\n插入排序的缺点是：\n\n- 时间复杂度较高（O(n^2)）\n- 不适合大型数据集的排序\n- 不适合需要高效率的场景\n\n插入排序可以用于以下场景：\n\n- 小规模数据集的排序\n- 需要稳定排序的场景\n- 需要简单易懂的排序算法\n","slug":"技能小册/javascript/算法/插入排序","published":1,"updated":"2025-03-12T09:23:43.181Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j50063fg9mgsc47y36","content":"<div class=\"note info simple\"><p><code>插入排序</code>（Insertion Sort）是一种简单的排序算法，它的工作原理是通过逐一将未排序的元素插入到已排序的序列中，直到整个序列都有序。</p>\n</div>\n\n<p>插入排序的步骤如下：</p>\n<ol>\n<li>从第二个元素开始（索引为 1），将当前元素作为 <code>key</code></li>\n<li>与 <code>key</code> 之前的元素进行比较，如果之前的元素大于 <code>key</code>，则将其向后移动一位。</li>\n<li>重复步骤 2，直到找到一个小于或等于 <code>key</code> 的元素。</li>\n<li>将 <code>key</code> 插入到该位置。</li>\n<li>重复步骤 1-4，直到整个序列都有序。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> key = arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">\t\t\tarr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">insertionSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/插入排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>插入排序的特点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>稳定排序（不会改变相同元素的相对顺序）</li>\n<li>对于小规模数据集效率较高</li>\n<li>时间复杂度为 O(n^2)，因此对于大型数据集效率较低</li>\n</ul>\n<p>插入排序的缺点是：</p>\n<ul>\n<li>时间复杂度较高（O(n^2)）</li>\n<li>不适合大型数据集的排序</li>\n<li>不适合需要高效率的场景</li>\n</ul>\n<p>插入排序可以用于以下场景：</p>\n<ul>\n<li>小规模数据集的排序</li>\n<li>需要稳定排序的场景</li>\n<li>需要简单易懂的排序算法</li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>插入排序</code>（Insertion Sort）是一种简单的排序算法，它的工作原理是通过逐一将未排序的元素插入到已排序的序列中，直到整个序列都有序。</p>\n</div>\n\n<p>插入排序的步骤如下：</p>\n<ol>\n<li>从第二个元素开始（索引为 1），将当前元素作为 <code>key</code></li>\n<li>与 <code>key</code> 之前的元素进行比较，如果之前的元素大于 <code>key</code>，则将其向后移动一位。</li>\n<li>重复步骤 2，直到找到一个小于或等于 <code>key</code> 的元素。</li>\n<li>将 <code>key</code> 插入到该位置。</li>\n<li>重复步骤 1-4，直到整个序列都有序。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> key = arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">\t\t\tarr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">insertionSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/插入排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>插入排序的特点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>稳定排序（不会改变相同元素的相对顺序）</li>\n<li>对于小规模数据集效率较高</li>\n<li>时间复杂度为 O(n^2)，因此对于大型数据集效率较低</li>\n</ul>\n<p>插入排序的缺点是：</p>\n<ul>\n<li>时间复杂度较高（O(n^2)）</li>\n<li>不适合大型数据集的排序</li>\n<li>不适合需要高效率的场景</li>\n</ul>\n<p>插入排序可以用于以下场景：</p>\n<ul>\n<li>小规模数据集的排序</li>\n<li>需要稳定排序的场景</li>\n<li>需要简单易懂的排序算法</li>\n</ul>\n"},{"title":"线程引发的思考","abbrlink":"eb4e9dd2","date":"2024-03-15T03:20:38.000Z","_content":"\n\n\n{% note info simple %}\n在介绍线程之前，会先声明`进程`, `进程线程的关系`，在了解了俩者关系之后，再次思考线程带来的一些问题；\n{% endnote %}\n\n## 进程与线程\n\n进程（Process）是指在操作系统中正在运行的一个程序实例。以下是进程的一些关键特性：\n\n- **独立性**：每个进程都有独立的内存空间，这意味着一个进程的执行不会直接影响到另一个进程。\n- **资源分配**：操作系统为每个进程分配资源，如 CPU 时间、内存和文件句柄等。\n- **并发执行**：多个进程可以同时运行在多核处理器上，实现真正的并行处理；在单核处理器上，通过时间片轮转等方式实现并发执行的假象。\n- **通信机制**：进程间可以通过多种方式通信，如管道（Pipe）、消息队列（Message Queue）、共享内存（Shared Memory）等。\n- **生命周期管理**：进程有其生命周期，包括创建、就绪、运行、阻塞和终止等状态。\n\n在`nodejs`中，我们经常使用`child_process`创建一个子进程去处理复杂的应用场景；\n\n```js\nconst { spawn } = require(\"child_process\");\nconst child = spawn(\"node\", [\n\t\"-e\",\n\t'setInterval(() => console.log(\"hello\"), 1000)',\n]);\nchild.stdout.on(\"data\", data => {\n\tconsole.log(data.toString());\n});\nchild.on(\"close\", () => {\n\tconsole.log(\"child process exit\");\n});\nsetTimeout(() => {\n\tchild.kill();\n}, 5000);\n```\n\n然而在浏览器中的`进程`是什么样的；\n\n在计算机中，会单独开辟一块内存空间给到浏览器，因为计算机每时每刻都在处理其他事情，简单的说浏览器就是计算机中的一个子进程之一，因为在`windows`中打开任务管理器，你就会发现浏览器在其中；\n\n从图中就可以看出每个应用占用的内存空间是不一样的；进程与进程之间是允许通信的，但是是需要被同意的；例如：微信与 qq 通信，qq 想要通信给微信，那么微信需要支持并同意通信；\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-1.png)\n\n而对于浏览器而言，也是有子进程与线程的，当打开浏览器不论首页是`百度`还是`Google`主进程已经开始了，那么引发了一个思考？\n\n**浏览器处理了很多东西，为什么不会卡死呢？**\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-3.png)\n\n是因为： 浏览器的渲染引擎是多线程的， 在处理不同的任务例如`network, gpu, 渲染你写的页面`等等都会交给不同的子进程，每个子进程有自己的 id，并且每个子进程都是多线程的；例如下图：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egrmuu60u.webp)\n\n那么就拿渲染主进程来说，如果渲染引擎是单线程，你可以想象的到，页面打开速度会非常慢，因为浏览器需要等待渲染引擎处理完一个任务再处理下一个任务，例如：`同步任务`, 一口气区加载`js`，而有的`js`异常可能会发生阻塞问题，那么浏览器就得一直等，直到加载完毕才继续往下执行，这样渲染速度就会非常慢，所以浏览器就使用了多线程，每个线程负责处理不同的任务，这样渲染速度就会快很多；\n\n浏览器的渲染主进程中，又有多个子线程区处理不同的任务；例如：`计时器线程`, `网络线程`等等；\n\n如果`渲染进程`为`单线程`那么会引发什么问题？\n\n下面会介绍在`js`中`单线程`引发的问题, 如果了解其原理之后那么就可以解释`如果渲染进程为单线程的问题？`\n\n## 同步与异步\n\n在计算机中，同步和异步是两种不同的编程概念，它们在处理任务时具有不同的行为方式。\n\n1. 同步：同步是指在某个任务执行完成之前，不能继续执行其他任务。在计算机中，同步是指在某个任务执行完成之前，不能继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将一直等待，直到文件被修改完成。\n2. 异步：异步是指在某个任务执行完成之后，可以继续执行其他任务。在计算机中，异步是指在某个任务执行完成之后，可以继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将不会阻塞，而是将文件读取操作放入一个队列中，当文件被修改完成时，队列中的任务将被执行。\n\n一张图描述了：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-4.png)\n\n上面图片大概介绍同步与异步的区别，\n\n```js\n// 大量同步任务带来的影响？\n\nfunction delay(time) {\n\tconst start = Date.now();\n\twhile (Date.now() - start < time) {}\n}\nconsole.log(\"先触发\");\ndelay(3 * 1000);\ndocument.write(\"后触发\");\n\n// 代码解释：\n// 1. 代码为同步代码。\n// 2. 首先执行“先触发”， 等待 3s 之后才会渲染页面；\n```\n\n但是在这 3s 中你会发现页面出现了短暂的卡死现象；避免出现这样的问题，那么就需要将其改为异步\n\n```js\nfunction delay(time) {\n\tconsole.log(2);\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}\nconsole.log(\"先触发\");\ndelay(3 * 1000).then(() => {\n\tdocument.write(\"后触发\");\n});\n\n// 代码解释：\n// 1. 代码为异步代码。\n// 2. 首先执行“先触发”， 在等待 3s 的时间内，可以操作其他任务，不会出现阻塞问题带来的卡死；\n```\n\n## 事件循环与队列\n\n事件循环（Event Loop）是 JavaScript 运行时环境（Runtime Environment）中的一个重要概念，它负责管理 JavaScript 代码的执行顺序。事件循环是 JavaScript 引擎和 JavaScript 运行时环境之间一个重要的交互机制，它负责将 JavaScript 代码中的异步任务与同步任务进行协调，确保代码的顺序执行。\n\n事件循环的运行机制如下：\n\n1. 创建一个任务队列（Task Queue）：任务队列用于存储待执行的任务。\n2. 创建一个事件队列（Event Queue）：事件队列用于存储待处理的事件。\n3. JavaScript 引擎会从任务队列中取出一个任务，并将其放入执行栈（Execution Stack）中。\n4. 当执行栈中的任务执行完毕，JavaScript 引擎会检查事件队列中是否有新的事件。\n5. 如果有新的事件，JavaScript 引擎会将其从事件队列中取出，并将其放入执行栈中，然后继续执行任务。\n6. 重复步骤 4 和 5，直到任务队列和事件队列都为空。\n\n在 JavaScript 中，事件循环的实现主要依赖于 JavaScript 引擎和宿主环境（例如浏览器）提供的 API。以下是 JavaScript 事件循环的简单介绍：\n\n1. 宏任务和微任务：JavaScript 中有两种类型的任务：宏任务和微任务。\n   - 宏任务包括 `script`、`setTimeout`、`setInterval`、`setImmediate`、`I/O`、`UI rendering` 等，\n   - 而微任务包括 `Promise`、`process.nextTick` 等。\n2. 事件循环的运行机制：事件循环会按照以下顺序运行：\n\n   - 首先，执行栈中的所有同步任务。\n   - 然后，将所有微任务放入微任务队列中，并依次执行。\n   - 最后，将所有宏任务放入宏任务队列中，并依次执行。\n\n3. 浏览器和 Node.js 中的事件循环机制：在浏览器中，事件循环会一直运行，直到所有宏任务和微任务都执行完毕。在 Node.js 中，事件循环会在 Node.js 进程退出之前一直运行，直到所有宏任务和微任务都执行完毕。\n\n事件循环与队列如图：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-5.png)\n\n切记事件循环的执行顺序，优先级从高至低为：`全局 > 微队列 > 交互队列 > 延迟队列`,具体执行顺序可参考如下图：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-6.png)\n","source":"_posts/技能小册/javascript/基础沉淀/线程引发的思考.md","raw":"---\ntitle: 线程引发的思考\nabbrlink: eb4e9dd2\ndate: 2024-03-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n\n\n{% note info simple %}\n在介绍线程之前，会先声明`进程`, `进程线程的关系`，在了解了俩者关系之后，再次思考线程带来的一些问题；\n{% endnote %}\n\n## 进程与线程\n\n进程（Process）是指在操作系统中正在运行的一个程序实例。以下是进程的一些关键特性：\n\n- **独立性**：每个进程都有独立的内存空间，这意味着一个进程的执行不会直接影响到另一个进程。\n- **资源分配**：操作系统为每个进程分配资源，如 CPU 时间、内存和文件句柄等。\n- **并发执行**：多个进程可以同时运行在多核处理器上，实现真正的并行处理；在单核处理器上，通过时间片轮转等方式实现并发执行的假象。\n- **通信机制**：进程间可以通过多种方式通信，如管道（Pipe）、消息队列（Message Queue）、共享内存（Shared Memory）等。\n- **生命周期管理**：进程有其生命周期，包括创建、就绪、运行、阻塞和终止等状态。\n\n在`nodejs`中，我们经常使用`child_process`创建一个子进程去处理复杂的应用场景；\n\n```js\nconst { spawn } = require(\"child_process\");\nconst child = spawn(\"node\", [\n\t\"-e\",\n\t'setInterval(() => console.log(\"hello\"), 1000)',\n]);\nchild.stdout.on(\"data\", data => {\n\tconsole.log(data.toString());\n});\nchild.on(\"close\", () => {\n\tconsole.log(\"child process exit\");\n});\nsetTimeout(() => {\n\tchild.kill();\n}, 5000);\n```\n\n然而在浏览器中的`进程`是什么样的；\n\n在计算机中，会单独开辟一块内存空间给到浏览器，因为计算机每时每刻都在处理其他事情，简单的说浏览器就是计算机中的一个子进程之一，因为在`windows`中打开任务管理器，你就会发现浏览器在其中；\n\n从图中就可以看出每个应用占用的内存空间是不一样的；进程与进程之间是允许通信的，但是是需要被同意的；例如：微信与 qq 通信，qq 想要通信给微信，那么微信需要支持并同意通信；\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-1.png)\n\n而对于浏览器而言，也是有子进程与线程的，当打开浏览器不论首页是`百度`还是`Google`主进程已经开始了，那么引发了一个思考？\n\n**浏览器处理了很多东西，为什么不会卡死呢？**\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-3.png)\n\n是因为： 浏览器的渲染引擎是多线程的， 在处理不同的任务例如`network, gpu, 渲染你写的页面`等等都会交给不同的子进程，每个子进程有自己的 id，并且每个子进程都是多线程的；例如下图：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egrmuu60u.webp)\n\n那么就拿渲染主进程来说，如果渲染引擎是单线程，你可以想象的到，页面打开速度会非常慢，因为浏览器需要等待渲染引擎处理完一个任务再处理下一个任务，例如：`同步任务`, 一口气区加载`js`，而有的`js`异常可能会发生阻塞问题，那么浏览器就得一直等，直到加载完毕才继续往下执行，这样渲染速度就会非常慢，所以浏览器就使用了多线程，每个线程负责处理不同的任务，这样渲染速度就会快很多；\n\n浏览器的渲染主进程中，又有多个子线程区处理不同的任务；例如：`计时器线程`, `网络线程`等等；\n\n如果`渲染进程`为`单线程`那么会引发什么问题？\n\n下面会介绍在`js`中`单线程`引发的问题, 如果了解其原理之后那么就可以解释`如果渲染进程为单线程的问题？`\n\n## 同步与异步\n\n在计算机中，同步和异步是两种不同的编程概念，它们在处理任务时具有不同的行为方式。\n\n1. 同步：同步是指在某个任务执行完成之前，不能继续执行其他任务。在计算机中，同步是指在某个任务执行完成之前，不能继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将一直等待，直到文件被修改完成。\n2. 异步：异步是指在某个任务执行完成之后，可以继续执行其他任务。在计算机中，异步是指在某个任务执行完成之后，可以继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将不会阻塞，而是将文件读取操作放入一个队列中，当文件被修改完成时，队列中的任务将被执行。\n\n一张图描述了：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-4.png)\n\n上面图片大概介绍同步与异步的区别，\n\n```js\n// 大量同步任务带来的影响？\n\nfunction delay(time) {\n\tconst start = Date.now();\n\twhile (Date.now() - start < time) {}\n}\nconsole.log(\"先触发\");\ndelay(3 * 1000);\ndocument.write(\"后触发\");\n\n// 代码解释：\n// 1. 代码为同步代码。\n// 2. 首先执行“先触发”， 等待 3s 之后才会渲染页面；\n```\n\n但是在这 3s 中你会发现页面出现了短暂的卡死现象；避免出现这样的问题，那么就需要将其改为异步\n\n```js\nfunction delay(time) {\n\tconsole.log(2);\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, time);\n\t});\n}\nconsole.log(\"先触发\");\ndelay(3 * 1000).then(() => {\n\tdocument.write(\"后触发\");\n});\n\n// 代码解释：\n// 1. 代码为异步代码。\n// 2. 首先执行“先触发”， 在等待 3s 的时间内，可以操作其他任务，不会出现阻塞问题带来的卡死；\n```\n\n## 事件循环与队列\n\n事件循环（Event Loop）是 JavaScript 运行时环境（Runtime Environment）中的一个重要概念，它负责管理 JavaScript 代码的执行顺序。事件循环是 JavaScript 引擎和 JavaScript 运行时环境之间一个重要的交互机制，它负责将 JavaScript 代码中的异步任务与同步任务进行协调，确保代码的顺序执行。\n\n事件循环的运行机制如下：\n\n1. 创建一个任务队列（Task Queue）：任务队列用于存储待执行的任务。\n2. 创建一个事件队列（Event Queue）：事件队列用于存储待处理的事件。\n3. JavaScript 引擎会从任务队列中取出一个任务，并将其放入执行栈（Execution Stack）中。\n4. 当执行栈中的任务执行完毕，JavaScript 引擎会检查事件队列中是否有新的事件。\n5. 如果有新的事件，JavaScript 引擎会将其从事件队列中取出，并将其放入执行栈中，然后继续执行任务。\n6. 重复步骤 4 和 5，直到任务队列和事件队列都为空。\n\n在 JavaScript 中，事件循环的实现主要依赖于 JavaScript 引擎和宿主环境（例如浏览器）提供的 API。以下是 JavaScript 事件循环的简单介绍：\n\n1. 宏任务和微任务：JavaScript 中有两种类型的任务：宏任务和微任务。\n   - 宏任务包括 `script`、`setTimeout`、`setInterval`、`setImmediate`、`I/O`、`UI rendering` 等，\n   - 而微任务包括 `Promise`、`process.nextTick` 等。\n2. 事件循环的运行机制：事件循环会按照以下顺序运行：\n\n   - 首先，执行栈中的所有同步任务。\n   - 然后，将所有微任务放入微任务队列中，并依次执行。\n   - 最后，将所有宏任务放入宏任务队列中，并依次执行。\n\n3. 浏览器和 Node.js 中的事件循环机制：在浏览器中，事件循环会一直运行，直到所有宏任务和微任务都执行完毕。在 Node.js 中，事件循环会在 Node.js 进程退出之前一直运行，直到所有宏任务和微任务都执行完毕。\n\n事件循环与队列如图：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-5.png)\n\n切记事件循环的执行顺序，优先级从高至低为：`全局 > 微队列 > 交互队列 > 延迟队列`,具体执行顺序可参考如下图：\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/event-6.png)\n","slug":"技能小册/javascript/基础沉淀/线程引发的思考","published":1,"updated":"2025-03-13T10:16:18.908Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j50066fg9mbmup6432","content":"<div class=\"note info simple\"><p>在介绍线程之前，会先声明<code>进程</code>, <code>进程线程的关系</code>，在了解了俩者关系之后，再次思考线程带来的一些问题；</p>\n</div>\n\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>进程（Process）是指在操作系统中正在运行的一个程序实例。以下是进程的一些关键特性：</p>\n<ul>\n<li><strong>独立性</strong>：每个进程都有独立的内存空间，这意味着一个进程的执行不会直接影响到另一个进程。</li>\n<li><strong>资源分配</strong>：操作系统为每个进程分配资源，如 CPU 时间、内存和文件句柄等。</li>\n<li><strong>并发执行</strong>：多个进程可以同时运行在多核处理器上，实现真正的并行处理；在单核处理器上，通过时间片轮转等方式实现并发执行的假象。</li>\n<li><strong>通信机制</strong>：进程间可以通过多种方式通信，如管道（Pipe）、消息队列（Message Queue）、共享内存（Shared Memory）等。</li>\n<li><strong>生命周期管理</strong>：进程有其生命周期，包括创建、就绪、运行、阻塞和终止等状态。</li>\n</ul>\n<p>在<code>nodejs</code>中，我们经常使用<code>child_process</code>创建一个子进程去处理复杂的应用场景；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [</span><br><span class=\"line\">\t<span class=\"string\">&quot;-e&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;setInterval(() =&gt; console.log(&quot;hello&quot;), 1000)&#x27;</span>,</span><br><span class=\"line\">]);</span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">child.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;close&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;child process exit&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tchild.<span class=\"title function_\">kill</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然而在浏览器中的<code>进程</code>是什么样的；</p>\n<p>在计算机中，会单独开辟一块内存空间给到浏览器，因为计算机每时每刻都在处理其他事情，简单的说浏览器就是计算机中的一个子进程之一，因为在<code>windows</code>中打开任务管理器，你就会发现浏览器在其中；</p>\n<p>从图中就可以看出每个应用占用的内存空间是不一样的；进程与进程之间是允许通信的，但是是需要被同意的；例如：微信与 qq 通信，qq 想要通信给微信，那么微信需要支持并同意通信；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-1.png\" alt=\"x\"></p>\n<p>而对于浏览器而言，也是有子进程与线程的，当打开浏览器不论首页是<code>百度</code>还是<code>Google</code>主进程已经开始了，那么引发了一个思考？</p>\n<p><strong>浏览器处理了很多东西，为什么不会卡死呢？</strong></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-3.png\" alt=\"x\"></p>\n<p>是因为： 浏览器的渲染引擎是多线程的， 在处理不同的任务例如<code>network, gpu, 渲染你写的页面</code>等等都会交给不同的子进程，每个子进程有自己的 id，并且每个子进程都是多线程的；例如下图：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egrmuu60u.webp\" alt=\"x\"></p>\n<p>那么就拿渲染主进程来说，如果渲染引擎是单线程，你可以想象的到，页面打开速度会非常慢，因为浏览器需要等待渲染引擎处理完一个任务再处理下一个任务，例如：<code>同步任务</code>, 一口气区加载<code>js</code>，而有的<code>js</code>异常可能会发生阻塞问题，那么浏览器就得一直等，直到加载完毕才继续往下执行，这样渲染速度就会非常慢，所以浏览器就使用了多线程，每个线程负责处理不同的任务，这样渲染速度就会快很多；</p>\n<p>浏览器的渲染主进程中，又有多个子线程区处理不同的任务；例如：<code>计时器线程</code>, <code>网络线程</code>等等；</p>\n<p>如果<code>渲染进程</code>为<code>单线程</code>那么会引发什么问题？</p>\n<p>下面会介绍在<code>js</code>中<code>单线程</code>引发的问题, 如果了解其原理之后那么就可以解释<code>如果渲染进程为单线程的问题？</code></p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>在计算机中，同步和异步是两种不同的编程概念，它们在处理任务时具有不同的行为方式。</p>\n<ol>\n<li>同步：同步是指在某个任务执行完成之前，不能继续执行其他任务。在计算机中，同步是指在某个任务执行完成之前，不能继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将一直等待，直到文件被修改完成。</li>\n<li>异步：异步是指在某个任务执行完成之后，可以继续执行其他任务。在计算机中，异步是指在某个任务执行完成之后，可以继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将不会阻塞，而是将文件读取操作放入一个队列中，当文件被修改完成时，队列中的任务将被执行。</li>\n</ol>\n<p>一张图描述了：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-4.png\" alt=\"x\"></p>\n<p>上面图片大概介绍同步与异步的区别，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大量同步任务带来的影响？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">time</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> start = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() - start &lt; time) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;先触发&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">delay</span>(<span class=\"number\">3</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;后触发&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码解释：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 代码为同步代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 首先执行“先触发”， 等待 3s 之后才会渲染页面；</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在这 3s 中你会发现页面出现了短暂的卡死现象；避免出现这样的问题，那么就需要将其改为异步</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">time</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(resolve, time);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;先触发&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">delay</span>(<span class=\"number\">3</span> * <span class=\"number\">1000</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;后触发&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码解释：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 代码为异步代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 首先执行“先触发”， 在等待 3s 的时间内，可以操作其他任务，不会出现阻塞问题带来的卡死；</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件循环与队列\"><a href=\"#事件循环与队列\" class=\"headerlink\" title=\"事件循环与队列\"></a>事件循环与队列</h2><p>事件循环（Event Loop）是 JavaScript 运行时环境（Runtime Environment）中的一个重要概念，它负责管理 JavaScript 代码的执行顺序。事件循环是 JavaScript 引擎和 JavaScript 运行时环境之间一个重要的交互机制，它负责将 JavaScript 代码中的异步任务与同步任务进行协调，确保代码的顺序执行。</p>\n<p>事件循环的运行机制如下：</p>\n<ol>\n<li>创建一个任务队列（Task Queue）：任务队列用于存储待执行的任务。</li>\n<li>创建一个事件队列（Event Queue）：事件队列用于存储待处理的事件。</li>\n<li>JavaScript 引擎会从任务队列中取出一个任务，并将其放入执行栈（Execution Stack）中。</li>\n<li>当执行栈中的任务执行完毕，JavaScript 引擎会检查事件队列中是否有新的事件。</li>\n<li>如果有新的事件，JavaScript 引擎会将其从事件队列中取出，并将其放入执行栈中，然后继续执行任务。</li>\n<li>重复步骤 4 和 5，直到任务队列和事件队列都为空。</li>\n</ol>\n<p>在 JavaScript 中，事件循环的实现主要依赖于 JavaScript 引擎和宿主环境（例如浏览器）提供的 API。以下是 JavaScript 事件循环的简单介绍：</p>\n<ol>\n<li><p>宏任务和微任务：JavaScript 中有两种类型的任务：宏任务和微任务。</p>\n<ul>\n<li>宏任务包括 <code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>UI rendering</code> 等，</li>\n<li>而微任务包括 <code>Promise</code>、<code>process.nextTick</code> 等。</li>\n</ul>\n</li>\n<li><p>事件循环的运行机制：事件循环会按照以下顺序运行：</p>\n<ul>\n<li>首先，执行栈中的所有同步任务。</li>\n<li>然后，将所有微任务放入微任务队列中，并依次执行。</li>\n<li>最后，将所有宏任务放入宏任务队列中，并依次执行。</li>\n</ul>\n</li>\n<li><p>浏览器和 Node.js 中的事件循环机制：在浏览器中，事件循环会一直运行，直到所有宏任务和微任务都执行完毕。在 Node.js 中，事件循环会在 Node.js 进程退出之前一直运行，直到所有宏任务和微任务都执行完毕。</p>\n</li>\n</ol>\n<p>事件循环与队列如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-5.png\" alt=\"x\"></p>\n<p>切记事件循环的执行顺序，优先级从高至低为：<code>全局 &gt; 微队列 &gt; 交互队列 &gt; 延迟队列</code>,具体执行顺序可参考如下图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-6.png\" alt=\"x\"></p>\n","excerpt":"","more":"<div class=\"note info simple\"><p>在介绍线程之前，会先声明<code>进程</code>, <code>进程线程的关系</code>，在了解了俩者关系之后，再次思考线程带来的一些问题；</p>\n</div>\n\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>进程（Process）是指在操作系统中正在运行的一个程序实例。以下是进程的一些关键特性：</p>\n<ul>\n<li><strong>独立性</strong>：每个进程都有独立的内存空间，这意味着一个进程的执行不会直接影响到另一个进程。</li>\n<li><strong>资源分配</strong>：操作系统为每个进程分配资源，如 CPU 时间、内存和文件句柄等。</li>\n<li><strong>并发执行</strong>：多个进程可以同时运行在多核处理器上，实现真正的并行处理；在单核处理器上，通过时间片轮转等方式实现并发执行的假象。</li>\n<li><strong>通信机制</strong>：进程间可以通过多种方式通信，如管道（Pipe）、消息队列（Message Queue）、共享内存（Shared Memory）等。</li>\n<li><strong>生命周期管理</strong>：进程有其生命周期，包括创建、就绪、运行、阻塞和终止等状态。</li>\n</ul>\n<p>在<code>nodejs</code>中，我们经常使用<code>child_process</code>创建一个子进程去处理复杂的应用场景；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; spawn &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">spawn</span>(<span class=\"string\">&quot;node&quot;</span>, [</span><br><span class=\"line\">\t<span class=\"string\">&quot;-e&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;setInterval(() =&gt; console.log(&quot;hello&quot;), 1000)&#x27;</span>,</span><br><span class=\"line\">]);</span><br><span class=\"line\">child.<span class=\"property\">stdout</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">child.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;close&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;child process exit&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tchild.<span class=\"title function_\">kill</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然而在浏览器中的<code>进程</code>是什么样的；</p>\n<p>在计算机中，会单独开辟一块内存空间给到浏览器，因为计算机每时每刻都在处理其他事情，简单的说浏览器就是计算机中的一个子进程之一，因为在<code>windows</code>中打开任务管理器，你就会发现浏览器在其中；</p>\n<p>从图中就可以看出每个应用占用的内存空间是不一样的；进程与进程之间是允许通信的，但是是需要被同意的；例如：微信与 qq 通信，qq 想要通信给微信，那么微信需要支持并同意通信；<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-1.png\" alt=\"x\"></p>\n<p>而对于浏览器而言，也是有子进程与线程的，当打开浏览器不论首页是<code>百度</code>还是<code>Google</code>主进程已经开始了，那么引发了一个思考？</p>\n<p><strong>浏览器处理了很多东西，为什么不会卡死呢？</strong></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-3.png\" alt=\"x\"></p>\n<p>是因为： 浏览器的渲染引擎是多线程的， 在处理不同的任务例如<code>network, gpu, 渲染你写的页面</code>等等都会交给不同的子进程，每个子进程有自己的 id，并且每个子进程都是多线程的；例如下图：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.7egrmuu60u.webp\" alt=\"x\"></p>\n<p>那么就拿渲染主进程来说，如果渲染引擎是单线程，你可以想象的到，页面打开速度会非常慢，因为浏览器需要等待渲染引擎处理完一个任务再处理下一个任务，例如：<code>同步任务</code>, 一口气区加载<code>js</code>，而有的<code>js</code>异常可能会发生阻塞问题，那么浏览器就得一直等，直到加载完毕才继续往下执行，这样渲染速度就会非常慢，所以浏览器就使用了多线程，每个线程负责处理不同的任务，这样渲染速度就会快很多；</p>\n<p>浏览器的渲染主进程中，又有多个子线程区处理不同的任务；例如：<code>计时器线程</code>, <code>网络线程</code>等等；</p>\n<p>如果<code>渲染进程</code>为<code>单线程</code>那么会引发什么问题？</p>\n<p>下面会介绍在<code>js</code>中<code>单线程</code>引发的问题, 如果了解其原理之后那么就可以解释<code>如果渲染进程为单线程的问题？</code></p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>在计算机中，同步和异步是两种不同的编程概念，它们在处理任务时具有不同的行为方式。</p>\n<ol>\n<li>同步：同步是指在某个任务执行完成之前，不能继续执行其他任务。在计算机中，同步是指在某个任务执行完成之前，不能继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将一直等待，直到文件被修改完成。</li>\n<li>异步：异步是指在某个任务执行完成之后，可以继续执行其他任务。在计算机中，异步是指在某个任务执行完成之后，可以继续执行其他任务。例如，在读取文件时，如果文件正在被其他进程修改，那么读取操作将不会阻塞，而是将文件读取操作放入一个队列中，当文件被修改完成时，队列中的任务将被执行。</li>\n</ol>\n<p>一张图描述了：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-4.png\" alt=\"x\"></p>\n<p>上面图片大概介绍同步与异步的区别，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 大量同步任务带来的影响？</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">time</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> start = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() - start &lt; time) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;先触发&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">delay</span>(<span class=\"number\">3</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;后触发&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码解释：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 代码为同步代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 首先执行“先触发”， 等待 3s 之后才会渲染页面；</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在这 3s 中你会发现页面出现了短暂的卡死现象；避免出现这样的问题，那么就需要将其改为异步</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">time</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(resolve, time);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;先触发&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">delay</span>(<span class=\"number\">3</span> * <span class=\"number\">1000</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;后触发&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代码解释：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 代码为异步代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 首先执行“先触发”， 在等待 3s 的时间内，可以操作其他任务，不会出现阻塞问题带来的卡死；</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件循环与队列\"><a href=\"#事件循环与队列\" class=\"headerlink\" title=\"事件循环与队列\"></a>事件循环与队列</h2><p>事件循环（Event Loop）是 JavaScript 运行时环境（Runtime Environment）中的一个重要概念，它负责管理 JavaScript 代码的执行顺序。事件循环是 JavaScript 引擎和 JavaScript 运行时环境之间一个重要的交互机制，它负责将 JavaScript 代码中的异步任务与同步任务进行协调，确保代码的顺序执行。</p>\n<p>事件循环的运行机制如下：</p>\n<ol>\n<li>创建一个任务队列（Task Queue）：任务队列用于存储待执行的任务。</li>\n<li>创建一个事件队列（Event Queue）：事件队列用于存储待处理的事件。</li>\n<li>JavaScript 引擎会从任务队列中取出一个任务，并将其放入执行栈（Execution Stack）中。</li>\n<li>当执行栈中的任务执行完毕，JavaScript 引擎会检查事件队列中是否有新的事件。</li>\n<li>如果有新的事件，JavaScript 引擎会将其从事件队列中取出，并将其放入执行栈中，然后继续执行任务。</li>\n<li>重复步骤 4 和 5，直到任务队列和事件队列都为空。</li>\n</ol>\n<p>在 JavaScript 中，事件循环的实现主要依赖于 JavaScript 引擎和宿主环境（例如浏览器）提供的 API。以下是 JavaScript 事件循环的简单介绍：</p>\n<ol>\n<li><p>宏任务和微任务：JavaScript 中有两种类型的任务：宏任务和微任务。</p>\n<ul>\n<li>宏任务包括 <code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>UI rendering</code> 等，</li>\n<li>而微任务包括 <code>Promise</code>、<code>process.nextTick</code> 等。</li>\n</ul>\n</li>\n<li><p>事件循环的运行机制：事件循环会按照以下顺序运行：</p>\n<ul>\n<li>首先，执行栈中的所有同步任务。</li>\n<li>然后，将所有微任务放入微任务队列中，并依次执行。</li>\n<li>最后，将所有宏任务放入宏任务队列中，并依次执行。</li>\n</ul>\n</li>\n<li><p>浏览器和 Node.js 中的事件循环机制：在浏览器中，事件循环会一直运行，直到所有宏任务和微任务都执行完毕。在 Node.js 中，事件循环会在 Node.js 进程退出之前一直运行，直到所有宏任务和微任务都执行完毕。</p>\n</li>\n</ol>\n<p>事件循环与队列如图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-5.png\" alt=\"x\"></p>\n<p>切记事件循环的执行顺序，优先级从高至低为：<code>全局 &gt; 微队列 &gt; 交互队列 &gt; 延迟队列</code>,具体执行顺序可参考如下图：<br><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/event-6.png\" alt=\"x\"></p>\n"},{"title":"选择排序","abbrlink":"43d00a99","date":"2024-08-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`选择排序`（Selection Sort）是一种简单的排序算法，它的基本思想是每次从未排序的数据中找出最小（或最大）元素，并将其放到已排序的数据的末尾。\n{% endnote %}\n\n选择排序的步骤如下：\n\n1. 从未排序的数据中找出最小（或最大）元素。\n2. 将最小（或最大）元素与当前元素交换位置。\n3. 将当前元素标记为已排序。\n4. 重复步骤 1-3，直到整个数据被排序。\n\n## demo\n\n### 代码\n\n```js\nfunction selectionSort(data = []) {\n\tfor (let i = 0; i < data.length; i++) {\n\t\tlet min = i;\n\t\tfor (let j = i + 1; j < data.length; j++) {\n\t\t\tif (data[min] > data[j]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\t// let temp = data[i];\n\t\t// data[i] = data[min];\n\t\t// data[min] = temp;\n\t\t// 简化\n\t\t[data[i], data[min]] = [data[min], data[i]];\n\t}\n\treturn data;\n}\nselectionSort([5, 2, 8, 3, 1, 6, 4]);\n```\n\n### 可视化\n\n<demo html=\"html/选择排序.html\"/>\n\n## 优缺点\n\n选择排序的优点是：\n\n- 简单易懂\n- 实现容易\n- 时间复杂度为 O(n^2)，适合小规模数据排序\n\n选择排序的缺点是：\n\n- 时间复杂度高，不适合大规模数据排序\n- 不稳定排序算法（如果两个元素相等，可能会交换它们的位置）\n\n选择排序的应用场景：\n\n- 小规模数据排序\n- 需要简单易懂的排序算法\n- 不需要高效的排序算法\n","source":"_posts/技能小册/javascript/算法/选择排序.md","raw":"---\ntitle: 选择排序\nabbrlink: 43d00a99\ndate: 2024-08-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n{% note info simple %}\n`选择排序`（Selection Sort）是一种简单的排序算法，它的基本思想是每次从未排序的数据中找出最小（或最大）元素，并将其放到已排序的数据的末尾。\n{% endnote %}\n\n选择排序的步骤如下：\n\n1. 从未排序的数据中找出最小（或最大）元素。\n2. 将最小（或最大）元素与当前元素交换位置。\n3. 将当前元素标记为已排序。\n4. 重复步骤 1-3，直到整个数据被排序。\n\n## demo\n\n### 代码\n\n```js\nfunction selectionSort(data = []) {\n\tfor (let i = 0; i < data.length; i++) {\n\t\tlet min = i;\n\t\tfor (let j = i + 1; j < data.length; j++) {\n\t\t\tif (data[min] > data[j]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\t// let temp = data[i];\n\t\t// data[i] = data[min];\n\t\t// data[min] = temp;\n\t\t// 简化\n\t\t[data[i], data[min]] = [data[min], data[i]];\n\t}\n\treturn data;\n}\nselectionSort([5, 2, 8, 3, 1, 6, 4]);\n```\n\n### 可视化\n\n<demo html=\"html/选择排序.html\"/>\n\n## 优缺点\n\n选择排序的优点是：\n\n- 简单易懂\n- 实现容易\n- 时间复杂度为 O(n^2)，适合小规模数据排序\n\n选择排序的缺点是：\n\n- 时间复杂度高，不适合大规模数据排序\n- 不稳定排序算法（如果两个元素相等，可能会交换它们的位置）\n\n选择排序的应用场景：\n\n- 小规模数据排序\n- 需要简单易懂的排序算法\n- 不需要高效的排序算法\n","slug":"技能小册/javascript/算法/选择排序","published":1,"updated":"2025-03-12T09:24:39.763Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j60069fg9m1nhs313z","content":"<div class=\"note info simple\"><p><code>选择排序</code>（Selection Sort）是一种简单的排序算法，它的基本思想是每次从未排序的数据中找出最小（或最大）元素，并将其放到已排序的数据的末尾。</p>\n</div>\n\n<p>选择排序的步骤如下：</p>\n<ol>\n<li>从未排序的数据中找出最小（或最大）元素。</li>\n<li>将最小（或最大）元素与当前元素交换位置。</li>\n<li>将当前元素标记为已排序。</li>\n<li>重复步骤 1-3，直到整个数据被排序。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectionSort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> min = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; data.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[min] &gt; data[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// let temp = data[i];</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// data[i] = data[min];</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// data[min] = temp;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 简化</span></span><br><span class=\"line\">\t\t[data[i], data[min]] = [data[min], data[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">selectionSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/选择排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>选择排序的优点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>实现容易</li>\n<li>时间复杂度为 O(n^2)，适合小规模数据排序</li>\n</ul>\n<p>选择排序的缺点是：</p>\n<ul>\n<li>时间复杂度高，不适合大规模数据排序</li>\n<li>不稳定排序算法（如果两个元素相等，可能会交换它们的位置）</li>\n</ul>\n<p>选择排序的应用场景：</p>\n<ul>\n<li>小规模数据排序</li>\n<li>需要简单易懂的排序算法</li>\n<li>不需要高效的排序算法</li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>选择排序</code>（Selection Sort）是一种简单的排序算法，它的基本思想是每次从未排序的数据中找出最小（或最大）元素，并将其放到已排序的数据的末尾。</p>\n</div>\n\n<p>选择排序的步骤如下：</p>\n<ol>\n<li>从未排序的数据中找出最小（或最大）元素。</li>\n<li>将最小（或最大）元素与当前元素交换位置。</li>\n<li>将当前元素标记为已排序。</li>\n<li>重复步骤 1-3，直到整个数据被排序。</li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectionSort</span>(<span class=\"params\">data = []</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> min = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; data.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data[min] &gt; data[j]) &#123;</span><br><span class=\"line\">\t\t\t\tmin = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// let temp = data[i];</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// data[i] = data[min];</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// data[min] = temp;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 简化</span></span><br><span class=\"line\">\t\t[data[i], data[min]] = [data[min], data[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">selectionSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/选择排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>选择排序的优点是：</p>\n<ul>\n<li>简单易懂</li>\n<li>实现容易</li>\n<li>时间复杂度为 O(n^2)，适合小规模数据排序</li>\n</ul>\n<p>选择排序的缺点是：</p>\n<ul>\n<li>时间复杂度高，不适合大规模数据排序</li>\n<li>不稳定排序算法（如果两个元素相等，可能会交换它们的位置）</li>\n</ul>\n<p>选择排序的应用场景：</p>\n<ul>\n<li>小规模数据排序</li>\n<li>需要简单易懂的排序算法</li>\n<li>不需要高效的排序算法</li>\n</ul>\n"},{"title":"代理模式？","abbrlink":"ebf6ce09","date":"2025-01-15T03:20:38.000Z","_content":"\n# 代理模式？\n\n代理模式是一种结构型设计模式，它允许你提供对另一个对象的访问点。使用代理对象，我们可以更好地控制与某些对象的交互。代理对象可以确定我们与对象交互时的行为，例如获取值或设置值时。\n\n一般来说，代理是指其他人的替身。您无需直接与该人交谈，而是与代理人交谈，该代理人将代表您尝试联系的人。`JavaScript` 中也是如此：我们无需直接与目标对象交互，而是与代理对象交互。\n\n## 简单案例\n\n首先创建一个对象，\n\n```js\nconst person = {\n\tname: \"John Doe\",\n\tage: 42,\n\tnationality: \"American\",\n};\n```\n\n我们不想直接与该对象交互，而是想与代理对象交互。在 `JavaScript` 中，我们可以通过创建一个新的实例来轻松创建新的代理`Proxy`。\n\n```js\nconst person = {\n\tname: \"John Doe\",\n\tage: 42,\n\tnationality: \"American\",\n};\n\nconst personProxy = new Proxy(person, {});\n```\n\n的第二个参数是一个代表处理程序的 `Proxy` 对象。在处理程序对象中，我们可以根据交互类型定义特定行为。虽然你可以向代理处理程序添加[许多方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)，但最常见的两个方法是和：`get` `set`\n\n- `get`：当对象属性被访问时，该方法被调用。\n- `set`：当对象属性被设置或更改时，该方法被调用。\n\n让我们向`personProxy`代理添加处理程序。当尝试修改属性时，从而调用`set`上的方法`Proxy`，我们希望代理记录该属性的先前值和新值。当尝试访问属性时，从而调用`get`上的方法`Proxy`，我们希望代理记录一个更易读的语句，其中包含属性的键和值。\n\n```js\nconst personProxy = new Proxy(person, {\n\tget: (obj, prop) => {\n\t\tconsole.log(`The value of ${prop} is ${obj[prop]}`);\n\t},\n\tset: (obj, prop, value) => {\n\t\tconsole.log(`Changed ${prop} from ${obj[prop]} to ${value}`);\n\t\tobj[prop] = value;\n\t},\n});\n```\n\n当访问该`name`属性时，代理返回了一个听起来更好的句子：`The value of name is John Doe。`\n\n当修改`age`属性时，代理返回该属性的先前值和新值：`Changed age from 42 to 43。`\n\n## Reflect\n\nJavaScript 提供了一个名为的内置对象`Reflect`，这使得我们在使用代理时可以更轻松地操作目标对象。\n\n之前我们使用对象中括号去获取和修改对象的属性，相反，我们可以使用该`Reflect`对象。对象上的方法`Reflect`与对象上的方法同名`handler`。\n\n简单来讲呢，就是换个用法；[张鑫旭-Proxy 是代理，Reflect 是干嘛用的？](https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/), 其中有句话解释：**“一句话，Reflect 没什么用，除了装装逼，让人看起来高大上以外，并不具有什么牛逼之处。”**\n\n关于`Reflect`用法如下：\n\n```js\nconst per = {\n\tname: \"zhangsan\",\n\tage: 18,\n\tsex: \"男\",\n\tsay: function () {\n\t\tconsole.log(this.name + \" say hello\");\n\t},\n};\n\nconst pxy = new Proxy(per, {\n\tget(target, key, receiver) {\n\t\treturn Reflect.get(target, key, receiver);\n\t},\n\tset(target, key, value, receiver) {\n\t\treturn Reflect.set(target, key, value, receiver);\n\t},\n});\n\nconsole.log(pxy.name);\npxy.name = \"lisi\";\nconsole.log(pxy.name);\npxy.say();\n```\n","source":"_posts/技能小册/javascript/设计模式/代理模式.md","raw":"---\ntitle: 代理模式？\nabbrlink: ebf6ce09\ndate: 2025-01-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n# 代理模式？\n\n代理模式是一种结构型设计模式，它允许你提供对另一个对象的访问点。使用代理对象，我们可以更好地控制与某些对象的交互。代理对象可以确定我们与对象交互时的行为，例如获取值或设置值时。\n\n一般来说，代理是指其他人的替身。您无需直接与该人交谈，而是与代理人交谈，该代理人将代表您尝试联系的人。`JavaScript` 中也是如此：我们无需直接与目标对象交互，而是与代理对象交互。\n\n## 简单案例\n\n首先创建一个对象，\n\n```js\nconst person = {\n\tname: \"John Doe\",\n\tage: 42,\n\tnationality: \"American\",\n};\n```\n\n我们不想直接与该对象交互，而是想与代理对象交互。在 `JavaScript` 中，我们可以通过创建一个新的实例来轻松创建新的代理`Proxy`。\n\n```js\nconst person = {\n\tname: \"John Doe\",\n\tage: 42,\n\tnationality: \"American\",\n};\n\nconst personProxy = new Proxy(person, {});\n```\n\n的第二个参数是一个代表处理程序的 `Proxy` 对象。在处理程序对象中，我们可以根据交互类型定义特定行为。虽然你可以向代理处理程序添加[许多方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)，但最常见的两个方法是和：`get` `set`\n\n- `get`：当对象属性被访问时，该方法被调用。\n- `set`：当对象属性被设置或更改时，该方法被调用。\n\n让我们向`personProxy`代理添加处理程序。当尝试修改属性时，从而调用`set`上的方法`Proxy`，我们希望代理记录该属性的先前值和新值。当尝试访问属性时，从而调用`get`上的方法`Proxy`，我们希望代理记录一个更易读的语句，其中包含属性的键和值。\n\n```js\nconst personProxy = new Proxy(person, {\n\tget: (obj, prop) => {\n\t\tconsole.log(`The value of ${prop} is ${obj[prop]}`);\n\t},\n\tset: (obj, prop, value) => {\n\t\tconsole.log(`Changed ${prop} from ${obj[prop]} to ${value}`);\n\t\tobj[prop] = value;\n\t},\n});\n```\n\n当访问该`name`属性时，代理返回了一个听起来更好的句子：`The value of name is John Doe。`\n\n当修改`age`属性时，代理返回该属性的先前值和新值：`Changed age from 42 to 43。`\n\n## Reflect\n\nJavaScript 提供了一个名为的内置对象`Reflect`，这使得我们在使用代理时可以更轻松地操作目标对象。\n\n之前我们使用对象中括号去获取和修改对象的属性，相反，我们可以使用该`Reflect`对象。对象上的方法`Reflect`与对象上的方法同名`handler`。\n\n简单来讲呢，就是换个用法；[张鑫旭-Proxy 是代理，Reflect 是干嘛用的？](https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/), 其中有句话解释：**“一句话，Reflect 没什么用，除了装装逼，让人看起来高大上以外，并不具有什么牛逼之处。”**\n\n关于`Reflect`用法如下：\n\n```js\nconst per = {\n\tname: \"zhangsan\",\n\tage: 18,\n\tsex: \"男\",\n\tsay: function () {\n\t\tconsole.log(this.name + \" say hello\");\n\t},\n};\n\nconst pxy = new Proxy(per, {\n\tget(target, key, receiver) {\n\t\treturn Reflect.get(target, key, receiver);\n\t},\n\tset(target, key, value, receiver) {\n\t\treturn Reflect.set(target, key, value, receiver);\n\t},\n});\n\nconsole.log(pxy.name);\npxy.name = \"lisi\";\nconsole.log(pxy.name);\npxy.say();\n```\n","slug":"技能小册/javascript/设计模式/代理模式","published":1,"updated":"2025-03-12T09:21:04.397Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j6006cfg9mdzqbg6a3","content":"<h1 id=\"代理模式？\"><a href=\"#代理模式？\" class=\"headerlink\" title=\"代理模式？\"></a>代理模式？</h1><p>代理模式是一种结构型设计模式，它允许你提供对另一个对象的访问点。使用代理对象，我们可以更好地控制与某些对象的交互。代理对象可以确定我们与对象交互时的行为，例如获取值或设置值时。</p>\n<p>一般来说，代理是指其他人的替身。您无需直接与该人交谈，而是与代理人交谈，该代理人将代表您尝试联系的人。<code>JavaScript</code> 中也是如此：我们无需直接与目标对象交互，而是与代理对象交互。</p>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><p>首先创建一个对象，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">\t<span class=\"attr\">nationality</span>: <span class=\"string\">&quot;American&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们不想直接与该对象交互，而是想与代理对象交互。在 <code>JavaScript</code> 中，我们可以通过创建一个新的实例来轻松创建新的代理<code>Proxy</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">\t<span class=\"attr\">nationality</span>: <span class=\"string\">&quot;American&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> personProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(person, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>的第二个参数是一个代表处理程序的 <code>Proxy</code> 对象。在处理程序对象中，我们可以根据交互类型定义特定行为。虽然你可以向代理处理程序添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">许多方法</a>，但最常见的两个方法是和：<code>get</code> <code>set</code></p>\n<ul>\n<li><code>get</code>：当对象属性被访问时，该方法被调用。</li>\n<li><code>set</code>：当对象属性被设置或更改时，该方法被调用。</li>\n</ul>\n<p>让我们向<code>personProxy</code>代理添加处理程序。当尝试修改属性时，从而调用<code>set</code>上的方法<code>Proxy</code>，我们希望代理记录该属性的先前值和新值。当尝试访问属性时，从而调用<code>get</code>上的方法<code>Proxy</code>，我们希望代理记录一个更易读的语句，其中包含属性的键和值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> personProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(person, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`The value of <span class=\"subst\">$&#123;prop&#125;</span> is <span class=\"subst\">$&#123;obj[prop]&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">set</span>: <span class=\"function\">(<span class=\"params\">obj, prop, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Changed <span class=\"subst\">$&#123;prop&#125;</span> from <span class=\"subst\">$&#123;obj[prop]&#125;</span> to <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">\t\tobj[prop] = value;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当访问该<code>name</code>属性时，代理返回了一个听起来更好的句子：<code>The value of name is John Doe。</code></p>\n<p>当修改<code>age</code>属性时，代理返回该属性的先前值和新值：<code>Changed age from 42 to 43。</code></p>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><p>JavaScript 提供了一个名为的内置对象<code>Reflect</code>，这使得我们在使用代理时可以更轻松地操作目标对象。</p>\n<p>之前我们使用对象中括号去获取和修改对象的属性，相反，我们可以使用该<code>Reflect</code>对象。对象上的方法<code>Reflect</code>与对象上的方法同名<code>handler</code>。</p>\n<p>简单来讲呢，就是换个用法；<a href=\"https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/\">张鑫旭-Proxy 是代理，Reflect 是干嘛用的？</a>, 其中有句话解释：<strong>“一句话，Reflect 没什么用，除了装装逼，让人看起来高大上以外，并不具有什么牛逼之处。”</strong></p>\n<p>关于<code>Reflect</code>用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> per = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">say</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot; say hello&quot;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(per, &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">get</span>(<span class=\"params\">target, key, receiver</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(target, key, receiver);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, receiver</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(target, key, value, receiver);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pxy.<span class=\"property\">name</span>);</span><br><span class=\"line\">pxy.<span class=\"property\">name</span> = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pxy.<span class=\"property\">name</span>);</span><br><span class=\"line\">pxy.<span class=\"title function_\">say</span>();</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"代理模式？\"><a href=\"#代理模式？\" class=\"headerlink\" title=\"代理模式？\"></a>代理模式？</h1><p>代理模式是一种结构型设计模式，它允许你提供对另一个对象的访问点。使用代理对象，我们可以更好地控制与某些对象的交互。代理对象可以确定我们与对象交互时的行为，例如获取值或设置值时。</p>\n<p>一般来说，代理是指其他人的替身。您无需直接与该人交谈，而是与代理人交谈，该代理人将代表您尝试联系的人。<code>JavaScript</code> 中也是如此：我们无需直接与目标对象交互，而是与代理对象交互。</p>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><p>首先创建一个对象，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">\t<span class=\"attr\">nationality</span>: <span class=\"string\">&quot;American&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们不想直接与该对象交互，而是想与代理对象交互。在 <code>JavaScript</code> 中，我们可以通过创建一个新的实例来轻松创建新的代理<code>Proxy</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;John Doe&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">42</span>,</span><br><span class=\"line\">\t<span class=\"attr\">nationality</span>: <span class=\"string\">&quot;American&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> personProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(person, &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>的第二个参数是一个代表处理程序的 <code>Proxy</code> 对象。在处理程序对象中，我们可以根据交互类型定义特定行为。虽然你可以向代理处理程序添加<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">许多方法</a>，但最常见的两个方法是和：<code>get</code> <code>set</code></p>\n<ul>\n<li><code>get</code>：当对象属性被访问时，该方法被调用。</li>\n<li><code>set</code>：当对象属性被设置或更改时，该方法被调用。</li>\n</ul>\n<p>让我们向<code>personProxy</code>代理添加处理程序。当尝试修改属性时，从而调用<code>set</code>上的方法<code>Proxy</code>，我们希望代理记录该属性的先前值和新值。当尝试访问属性时，从而调用<code>get</code>上的方法<code>Proxy</code>，我们希望代理记录一个更易读的语句，其中包含属性的键和值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> personProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(person, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">get</span>: <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`The value of <span class=\"subst\">$&#123;prop&#125;</span> is <span class=\"subst\">$&#123;obj[prop]&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">set</span>: <span class=\"function\">(<span class=\"params\">obj, prop, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Changed <span class=\"subst\">$&#123;prop&#125;</span> from <span class=\"subst\">$&#123;obj[prop]&#125;</span> to <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">\t\tobj[prop] = value;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当访问该<code>name</code>属性时，代理返回了一个听起来更好的句子：<code>The value of name is John Doe。</code></p>\n<p>当修改<code>age</code>属性时，代理返回该属性的先前值和新值：<code>Changed age from 42 to 43。</code></p>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><p>JavaScript 提供了一个名为的内置对象<code>Reflect</code>，这使得我们在使用代理时可以更轻松地操作目标对象。</p>\n<p>之前我们使用对象中括号去获取和修改对象的属性，相反，我们可以使用该<code>Reflect</code>对象。对象上的方法<code>Reflect</code>与对象上的方法同名<code>handler</code>。</p>\n<p>简单来讲呢，就是换个用法；<a href=\"https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/\">张鑫旭-Proxy 是代理，Reflect 是干嘛用的？</a>, 其中有句话解释：<strong>“一句话，Reflect 没什么用，除了装装逼，让人看起来高大上以外，并不具有什么牛逼之处。”</strong></p>\n<p>关于<code>Reflect</code>用法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> per = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t<span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">say</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot; say hello&quot;</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(per, &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">get</span>(<span class=\"params\">target, key, receiver</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">get</span>(target, key, receiver);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, receiver</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(target, key, value, receiver);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pxy.<span class=\"property\">name</span>);</span><br><span class=\"line\">pxy.<span class=\"property\">name</span> = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pxy.<span class=\"property\">name</span>);</span><br><span class=\"line\">pxy.<span class=\"title function_\">say</span>();</span><br></pre></td></tr></table></figure>\n"},{"title":"快速排序","abbrlink":"ff8068c0","date":"2024-08-14T03:20:38.000Z","_content":"\n{% note info simple %}\n`快速排序`（Quicksort）是一种高效的排序算法，它的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。\n{% endnote %}\n\n快速排序的基本步骤是：\n\n1. 选择一个元素作为枢轴（pivot）。\n2. 将所有小于枢轴的元素放在枢轴的左边，所有大于枢轴的元素放在枢轴的右边。\n3. 对枢轴左边和右边的子序列递归应用快速排序算法。\n\n快速排序的关键在于选择合适的枢轴。不同的枢轴选择方法会影响快速排序的性能。常见的枢轴选择方法包括：\n\n- 随机选择：随机选择一个元素作为枢轴。\n- 中位数选择：选择中位数作为枢轴。\n- 最小值选择：选择最小值作为枢轴。\n\n## demo\n\n### 代码\n\n```js\nfunction quickSort(arr) {\n\tif (arr.length <= 1) {\n\t\treturn arr;\n\t}\n\tconst pivot = arr[0];\n\tconst left = [];\n\tconst right = [];\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i] <= pivot) {\n\t\t\tleft.push(arr[i]);\n\t\t} else {\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\treturn quickSort(left).concat(pivot, quickSort(right));\n}\n\nconsole.log(quickSort([5, 2, 8, 3, 1, 6, 4]));\n```\n\n这个函数接受一个数组 `arr` 作为输入，返回一个排序后的数组。它的工作原理是：\n\n1. 如果数组长度小于或等于 1，则返回原数组（因为已经排序）。\n2. 选择第一个元素作为枢轴 (`pivot`）。\n3. 创建两个空数组 `left` 和 `right。`\n4. 遍历数组（从第二个元素开始），如果当前元素小于或等于枢轴，则将其添加到 `left` 数组，否则添加到 `right` 数组。\n5. 递归调用 `quickSort` 函数对 `left` 和 `right` 数组进行排序。\n6. 将排序后的 `left` 数组、枢轴和排序后的 `right` 数组拼接起来，返回结果。\n\n### 可视化\n\n<demo html=\"html/快速排序.html\"/>\n\n## 优缺点\n\n快速排序的特点是：\n\n- 高效：快速排序的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。\n- 稳定：快速排序是稳定排序算法，不会改变相同元素的相对顺序。\n- 适合大数据集：快速排序适合大数据集的排序。\n\n快速排序的缺点是：\n\n- 不稳定：快速排序在最坏情况下可能会出现不稳定的现象。\n- 需要额外空间：快速排序需要额外的空间来存储递归函数的调用栈。\n\n快速排序可以用于以下场景：\n\n- 大数据集排序：快速排序适合大数据集的排序。\n- 需要高效率的场景：快速排序适合需要高效率的场景。\n- 需要稳定排序的场景：快速排序适合需要稳定排序的场景。\n\n## 参考\n\n- [github](https://github.com/herenpeng/herenpeng.github.io)\n- [在线排序](https://herenpeng.github.io/static/sort.html)\n","source":"_posts/技能小册/javascript/算法/快速排序.md","raw":"---\ntitle: 快速排序\nabbrlink: ff8068c0\ndate: 2024-08-14 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript \n---\n\n{% note info simple %}\n`快速排序`（Quicksort）是一种高效的排序算法，它的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。\n{% endnote %}\n\n快速排序的基本步骤是：\n\n1. 选择一个元素作为枢轴（pivot）。\n2. 将所有小于枢轴的元素放在枢轴的左边，所有大于枢轴的元素放在枢轴的右边。\n3. 对枢轴左边和右边的子序列递归应用快速排序算法。\n\n快速排序的关键在于选择合适的枢轴。不同的枢轴选择方法会影响快速排序的性能。常见的枢轴选择方法包括：\n\n- 随机选择：随机选择一个元素作为枢轴。\n- 中位数选择：选择中位数作为枢轴。\n- 最小值选择：选择最小值作为枢轴。\n\n## demo\n\n### 代码\n\n```js\nfunction quickSort(arr) {\n\tif (arr.length <= 1) {\n\t\treturn arr;\n\t}\n\tconst pivot = arr[0];\n\tconst left = [];\n\tconst right = [];\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i] <= pivot) {\n\t\t\tleft.push(arr[i]);\n\t\t} else {\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\treturn quickSort(left).concat(pivot, quickSort(right));\n}\n\nconsole.log(quickSort([5, 2, 8, 3, 1, 6, 4]));\n```\n\n这个函数接受一个数组 `arr` 作为输入，返回一个排序后的数组。它的工作原理是：\n\n1. 如果数组长度小于或等于 1，则返回原数组（因为已经排序）。\n2. 选择第一个元素作为枢轴 (`pivot`）。\n3. 创建两个空数组 `left` 和 `right。`\n4. 遍历数组（从第二个元素开始），如果当前元素小于或等于枢轴，则将其添加到 `left` 数组，否则添加到 `right` 数组。\n5. 递归调用 `quickSort` 函数对 `left` 和 `right` 数组进行排序。\n6. 将排序后的 `left` 数组、枢轴和排序后的 `right` 数组拼接起来，返回结果。\n\n### 可视化\n\n<demo html=\"html/快速排序.html\"/>\n\n## 优缺点\n\n快速排序的特点是：\n\n- 高效：快速排序的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。\n- 稳定：快速排序是稳定排序算法，不会改变相同元素的相对顺序。\n- 适合大数据集：快速排序适合大数据集的排序。\n\n快速排序的缺点是：\n\n- 不稳定：快速排序在最坏情况下可能会出现不稳定的现象。\n- 需要额外空间：快速排序需要额外的空间来存储递归函数的调用栈。\n\n快速排序可以用于以下场景：\n\n- 大数据集排序：快速排序适合大数据集的排序。\n- 需要高效率的场景：快速排序适合需要高效率的场景。\n- 需要稳定排序的场景：快速排序适合需要稳定排序的场景。\n\n## 参考\n\n- [github](https://github.com/herenpeng/herenpeng.github.io)\n- [在线排序](https://herenpeng.github.io/static/sort.html)\n","slug":"技能小册/javascript/算法/快速排序","published":1,"updated":"2025-03-12T09:24:02.414Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j6006ffg9mblqb00rz","content":"<div class=\"note info simple\"><p><code>快速排序</code>（Quicksort）是一种高效的排序算法，它的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。</p>\n</div>\n\n<p>快速排序的基本步骤是：</p>\n<ol>\n<li>选择一个元素作为枢轴（pivot）。</li>\n<li>将所有小于枢轴的元素放在枢轴的左边，所有大于枢轴的元素放在枢轴的右边。</li>\n<li>对枢轴左边和右边的子序列递归应用快速排序算法。</li>\n</ol>\n<p>快速排序的关键在于选择合适的枢轴。不同的枢轴选择方法会影响快速排序的性能。常见的枢轴选择方法包括：</p>\n<ul>\n<li>随机选择：随机选择一个元素作为枢轴。</li>\n<li>中位数选择：选择中位数作为枢轴。</li>\n<li>最小值选择：选择最小值作为枢轴。</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pivot = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> left = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> right = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">\t\t\tleft.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tright.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">quickSort</span>(left).<span class=\"title function_\">concat</span>(pivot, <span class=\"title function_\">quickSort</span>(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">quickSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<p>这个函数接受一个数组 <code>arr</code> 作为输入，返回一个排序后的数组。它的工作原理是：</p>\n<ol>\n<li>如果数组长度小于或等于 1，则返回原数组（因为已经排序）。</li>\n<li>选择第一个元素作为枢轴 (<code>pivot</code>）。</li>\n<li>创建两个空数组 <code>left</code> 和 <code>right。</code></li>\n<li>遍历数组（从第二个元素开始），如果当前元素小于或等于枢轴，则将其添加到 <code>left</code> 数组，否则添加到 <code>right</code> 数组。</li>\n<li>递归调用 <code>quickSort</code> 函数对 <code>left</code> 和 <code>right</code> 数组进行排序。</li>\n<li>将排序后的 <code>left</code> 数组、枢轴和排序后的 <code>right</code> 数组拼接起来，返回结果。</li>\n</ol>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/快速排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>快速排序的特点是：</p>\n<ul>\n<li>高效：快速排序的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。</li>\n<li>稳定：快速排序是稳定排序算法，不会改变相同元素的相对顺序。</li>\n<li>适合大数据集：快速排序适合大数据集的排序。</li>\n</ul>\n<p>快速排序的缺点是：</p>\n<ul>\n<li>不稳定：快速排序在最坏情况下可能会出现不稳定的现象。</li>\n<li>需要额外空间：快速排序需要额外的空间来存储递归函数的调用栈。</li>\n</ul>\n<p>快速排序可以用于以下场景：</p>\n<ul>\n<li>大数据集排序：快速排序适合大数据集的排序。</li>\n<li>需要高效率的场景：快速排序适合需要高效率的场景。</li>\n<li>需要稳定排序的场景：快速排序适合需要稳定排序的场景。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/herenpeng/herenpeng.github.io\">github</a></li>\n<li><a href=\"https://herenpeng.github.io/static/sort.html\">在线排序</a></li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p><code>快速排序</code>（Quicksort）是一种高效的排序算法，它的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。</p>\n</div>\n\n<p>快速排序的基本步骤是：</p>\n<ol>\n<li>选择一个元素作为枢轴（pivot）。</li>\n<li>将所有小于枢轴的元素放在枢轴的左边，所有大于枢轴的元素放在枢轴的右边。</li>\n<li>对枢轴左边和右边的子序列递归应用快速排序算法。</li>\n</ol>\n<p>快速排序的关键在于选择合适的枢轴。不同的枢轴选择方法会影响快速排序的性能。常见的枢轴选择方法包括：</p>\n<ul>\n<li>随机选择：随机选择一个元素作为枢轴。</li>\n<li>中位数选择：选择中位数作为枢轴。</li>\n<li>最小值选择：选择最小值作为枢轴。</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> pivot = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> left = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> right = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">\t\t\tleft.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tright.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">quickSort</span>(left).<span class=\"title function_\">concat</span>(pivot, <span class=\"title function_\">quickSort</span>(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">quickSort</span>([<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]));</span><br></pre></td></tr></table></figure>\n\n<p>这个函数接受一个数组 <code>arr</code> 作为输入，返回一个排序后的数组。它的工作原理是：</p>\n<ol>\n<li>如果数组长度小于或等于 1，则返回原数组（因为已经排序）。</li>\n<li>选择第一个元素作为枢轴 (<code>pivot</code>）。</li>\n<li>创建两个空数组 <code>left</code> 和 <code>right。</code></li>\n<li>遍历数组（从第二个元素开始），如果当前元素小于或等于枢轴，则将其添加到 <code>left</code> 数组，否则添加到 <code>right</code> 数组。</li>\n<li>递归调用 <code>quickSort</code> 函数对 <code>left</code> 和 <code>right</code> 数组进行排序。</li>\n<li>将排序后的 <code>left</code> 数组、枢轴和排序后的 <code>right</code> 数组拼接起来，返回结果。</li>\n</ol>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><demo html=\"html/快速排序.html\"/>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>快速排序的特点是：</p>\n<ul>\n<li>高效：快速排序的平均时间复杂度为 O(n log n)，是目前最快的通用排序算法之一。</li>\n<li>稳定：快速排序是稳定排序算法，不会改变相同元素的相对顺序。</li>\n<li>适合大数据集：快速排序适合大数据集的排序。</li>\n</ul>\n<p>快速排序的缺点是：</p>\n<ul>\n<li>不稳定：快速排序在最坏情况下可能会出现不稳定的现象。</li>\n<li>需要额外空间：快速排序需要额外的空间来存储递归函数的调用栈。</li>\n</ul>\n<p>快速排序可以用于以下场景：</p>\n<ul>\n<li>大数据集排序：快速排序适合大数据集的排序。</li>\n<li>需要高效率的场景：快速排序适合需要高效率的场景。</li>\n<li>需要稳定排序的场景：快速排序适合需要稳定排序的场景。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/herenpeng/herenpeng.github.io\">github</a></li>\n<li><a href=\"https://herenpeng.github.io/static/sort.html\">在线排序</a></li>\n</ul>\n"},{"title":"发布订阅","abbrlink":"fdc49cc4","date":"2025-01-15T03:20:38.000Z","_content":"\n# 什么是发布订阅\n\n发布订阅是一种软件设计模式和通信范式，它旨在促进不同软件组件间的松散耦合通信。在订阅发布模式中，有如下两个核心概念：\n\n1. **发布者**: 负责发布信息或事件。发布者并不直接将消息发送给特定的接收者，而是将其发布到一个共享的通信媒介——通常是被称为“主题”（Topic）、“频道”（Channel）或“事件总线”（Event Bus）的中介。\n2. **订阅者**: 对特定类型的信息或事件感兴趣。订阅者向中介（主题或频道）表达其关注的事件类型，并提供一个回调函数（或处理器）以便在相关事件发生时得到通知。订阅者并不关心发布者是谁，也不需要了解其他订阅者的存在。\n\n就好比：\n\n订阅者就好比手机开了个提醒，只关注感兴趣的那块新闻，比如你想知道关于足球比赛的结果，于是你对手机说: \"只要有关足球比赛结果出来，就立刻告诉我\" 这就是你向手机订阅了足球比赛的结果。\n\n发布者就好比手机的短信，你发布一个消息，比如: \"今天足球比赛结果出来了，结果是：胜负平\"，然后手机就会把消息发送给订阅者，订阅者收到消息后，就会收到短信，然后你就知道了。\n\n订阅者就是指定了自己关心的内容类型，然后等待这个类型的消息出现时，会收到专门的通知，而无需理会消息从哪里来，还有谁也在关注同样的消息。\n\n![图片](https://wangxiaoze-view.github.io/picx-images-hosting/images/d_20240426094751.png)\n\n订阅发布模式，也叫发布订阅模式，是观察者模式的一种变种，观察者模式是订阅一个主题，主题会通知所有观察者，而发布订阅模式是订阅一个主题，主题会通知所有订阅者。\n\n- 发布者：通过事件中心派发事件\n- 订阅者：通过事件中心进行事件的订阅\n- 事件中心：负责存放事件和订阅者的关系.\n\n## 代码理解\n\n```js\n// 事件中心\nclass EventChannel {\n\tconstructor() {\n\t\tthis.subscribers = {};\n\t}\n}\n\n// 订阅中心\nEventChannel.prototype.subscribe = function (eventType, handler) {\n\tif (!this.subscribers[eventType]) {\n\t\tthis.subscribers[eventType] = [];\n\t}\n\tthis.subscribers[eventType].push(handler);\n};\n\n// 发布中心\nEventChannel.prototype.publish = function (eventType, data) {\n\tconst handlers = this.subscribers[eventType];\n\tif (handlers) {\n\t\thandlers.forEach(handler => handler(data));\n\t}\n};\n\n// 取消订阅\nEventChannel.prototype.unsubscribe = function (eventType, handler) {\n\tconst handlers = this.subscribers[eventType];\n\tif (handlers) {\n\t\tconst index = handlers.indexOf(handler);\n\t\tif (index !== -1) {\n\t\t\thandlers.splice(index, 1);\n\t\t}\n\t}\n};\n```\n\n### 如何操作?\n\n```js\n// 初始化\nconst eventChannel = new EventChannel();\n\n// z这里模仿用户订阅足球比赛结果，等比赛结束之后将结果发布给订阅者\nfunction user_1({ result }) {\n\tconsole.log(`用户1接受到短信：比赛结果为${result}`);\n}\nfunction user_2({ result }) {\n\tconsole.log(`用户2接受到短信：比赛结果为${result}`);\n}\n// 用户1订阅了比赛结果\neventChannel.subscribe(\"result\", user_1);\n// 用户2订阅了比赛结果\neventChannel.subscribe(\"result\", user_2);\n\n// 模拟官方的结果\nsetTimeout(() => {\n\teventChannel.publish(\"result\", {\n\t\tresult: \"胜\",\n\t});\n}, 2000);\n\n// 突然有一天，用户1 不想订阅了，不想每次都收到短信了\nsetTimeout(() => {\n\teventChannel.unsubscribe(\"result\", user_1);\n\t// 等到下次比赛结果公布  只有用户2就收到了短信\n\teventChannel.publish(\"result\", {\n\t\tresult: \"负\",\n\t});\n}, 3000);\n```\n","source":"_posts/技能小册/javascript/设计模式/发布订阅.md","raw":"---\ntitle: 发布订阅\nabbrlink: fdc49cc4\ndate: 2025-01-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n# 什么是发布订阅\n\n发布订阅是一种软件设计模式和通信范式，它旨在促进不同软件组件间的松散耦合通信。在订阅发布模式中，有如下两个核心概念：\n\n1. **发布者**: 负责发布信息或事件。发布者并不直接将消息发送给特定的接收者，而是将其发布到一个共享的通信媒介——通常是被称为“主题”（Topic）、“频道”（Channel）或“事件总线”（Event Bus）的中介。\n2. **订阅者**: 对特定类型的信息或事件感兴趣。订阅者向中介（主题或频道）表达其关注的事件类型，并提供一个回调函数（或处理器）以便在相关事件发生时得到通知。订阅者并不关心发布者是谁，也不需要了解其他订阅者的存在。\n\n就好比：\n\n订阅者就好比手机开了个提醒，只关注感兴趣的那块新闻，比如你想知道关于足球比赛的结果，于是你对手机说: \"只要有关足球比赛结果出来，就立刻告诉我\" 这就是你向手机订阅了足球比赛的结果。\n\n发布者就好比手机的短信，你发布一个消息，比如: \"今天足球比赛结果出来了，结果是：胜负平\"，然后手机就会把消息发送给订阅者，订阅者收到消息后，就会收到短信，然后你就知道了。\n\n订阅者就是指定了自己关心的内容类型，然后等待这个类型的消息出现时，会收到专门的通知，而无需理会消息从哪里来，还有谁也在关注同样的消息。\n\n![图片](https://wangxiaoze-view.github.io/picx-images-hosting/images/d_20240426094751.png)\n\n订阅发布模式，也叫发布订阅模式，是观察者模式的一种变种，观察者模式是订阅一个主题，主题会通知所有观察者，而发布订阅模式是订阅一个主题，主题会通知所有订阅者。\n\n- 发布者：通过事件中心派发事件\n- 订阅者：通过事件中心进行事件的订阅\n- 事件中心：负责存放事件和订阅者的关系.\n\n## 代码理解\n\n```js\n// 事件中心\nclass EventChannel {\n\tconstructor() {\n\t\tthis.subscribers = {};\n\t}\n}\n\n// 订阅中心\nEventChannel.prototype.subscribe = function (eventType, handler) {\n\tif (!this.subscribers[eventType]) {\n\t\tthis.subscribers[eventType] = [];\n\t}\n\tthis.subscribers[eventType].push(handler);\n};\n\n// 发布中心\nEventChannel.prototype.publish = function (eventType, data) {\n\tconst handlers = this.subscribers[eventType];\n\tif (handlers) {\n\t\thandlers.forEach(handler => handler(data));\n\t}\n};\n\n// 取消订阅\nEventChannel.prototype.unsubscribe = function (eventType, handler) {\n\tconst handlers = this.subscribers[eventType];\n\tif (handlers) {\n\t\tconst index = handlers.indexOf(handler);\n\t\tif (index !== -1) {\n\t\t\thandlers.splice(index, 1);\n\t\t}\n\t}\n};\n```\n\n### 如何操作?\n\n```js\n// 初始化\nconst eventChannel = new EventChannel();\n\n// z这里模仿用户订阅足球比赛结果，等比赛结束之后将结果发布给订阅者\nfunction user_1({ result }) {\n\tconsole.log(`用户1接受到短信：比赛结果为${result}`);\n}\nfunction user_2({ result }) {\n\tconsole.log(`用户2接受到短信：比赛结果为${result}`);\n}\n// 用户1订阅了比赛结果\neventChannel.subscribe(\"result\", user_1);\n// 用户2订阅了比赛结果\neventChannel.subscribe(\"result\", user_2);\n\n// 模拟官方的结果\nsetTimeout(() => {\n\teventChannel.publish(\"result\", {\n\t\tresult: \"胜\",\n\t});\n}, 2000);\n\n// 突然有一天，用户1 不想订阅了，不想每次都收到短信了\nsetTimeout(() => {\n\teventChannel.unsubscribe(\"result\", user_1);\n\t// 等到下次比赛结果公布  只有用户2就收到了短信\n\teventChannel.publish(\"result\", {\n\t\tresult: \"负\",\n\t});\n}, 3000);\n```\n","slug":"技能小册/javascript/设计模式/发布订阅","published":1,"updated":"2025-03-13T10:16:18.827Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j6006ifg9m6jq2dniv","content":"<h1 id=\"什么是发布订阅\"><a href=\"#什么是发布订阅\" class=\"headerlink\" title=\"什么是发布订阅\"></a>什么是发布订阅</h1><p>发布订阅是一种软件设计模式和通信范式，它旨在促进不同软件组件间的松散耦合通信。在订阅发布模式中，有如下两个核心概念：</p>\n<ol>\n<li><strong>发布者</strong>: 负责发布信息或事件。发布者并不直接将消息发送给特定的接收者，而是将其发布到一个共享的通信媒介——通常是被称为“主题”（Topic）、“频道”（Channel）或“事件总线”（Event Bus）的中介。</li>\n<li><strong>订阅者</strong>: 对特定类型的信息或事件感兴趣。订阅者向中介（主题或频道）表达其关注的事件类型，并提供一个回调函数（或处理器）以便在相关事件发生时得到通知。订阅者并不关心发布者是谁，也不需要了解其他订阅者的存在。</li>\n</ol>\n<p>就好比：</p>\n<p>订阅者就好比手机开了个提醒，只关注感兴趣的那块新闻，比如你想知道关于足球比赛的结果，于是你对手机说: “只要有关足球比赛结果出来，就立刻告诉我” 这就是你向手机订阅了足球比赛的结果。</p>\n<p>发布者就好比手机的短信，你发布一个消息，比如: “今天足球比赛结果出来了，结果是：胜负平”，然后手机就会把消息发送给订阅者，订阅者收到消息后，就会收到短信，然后你就知道了。</p>\n<p>订阅者就是指定了自己关心的内容类型，然后等待这个类型的消息出现时，会收到专门的通知，而无需理会消息从哪里来，还有谁也在关注同样的消息。</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/d_20240426094751.png\" alt=\"图片\"></p>\n<p>订阅发布模式，也叫发布订阅模式，是观察者模式的一种变种，观察者模式是订阅一个主题，主题会通知所有观察者，而发布订阅模式是订阅一个主题，主题会通知所有订阅者。</p>\n<ul>\n<li>发布者：通过事件中心派发事件</li>\n<li>订阅者：通过事件中心进行事件的订阅</li>\n<li>事件中心：负责存放事件和订阅者的关系.</li>\n</ul>\n<h2 id=\"代码理解\"><a href=\"#代码理解\" class=\"headerlink\" title=\"代码理解\"></a>代码理解</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件中心</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventChannel</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span> = &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅中心</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">subscribe</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, handler</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType]) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType] = [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布中心</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">publish</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> handlers = <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">\t\thandlers.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> <span class=\"title function_\">handler</span>(data));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">unsubscribe</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, handler</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> handlers = <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = handlers.<span class=\"title function_\">indexOf</span>(handler);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\thandlers.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何操作\"><a href=\"#如何操作\" class=\"headerlink\" title=\"如何操作?\"></a>如何操作?</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> eventChannel = <span class=\"keyword\">new</span> <span class=\"title class_\">EventChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// z这里模仿用户订阅足球比赛结果，等比赛结束之后将结果发布给订阅者</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user_1</span>(<span class=\"params\">&#123; result &#125;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`用户1接受到短信：比赛结果为<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user_2</span>(<span class=\"params\">&#123; result &#125;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`用户2接受到短信：比赛结果为<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 用户1订阅了比赛结果</span></span><br><span class=\"line\">eventChannel.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_1);</span><br><span class=\"line\"><span class=\"comment\">// 用户2订阅了比赛结果</span></span><br><span class=\"line\">eventChannel.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟官方的结果</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;result&quot;</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">result</span>: <span class=\"string\">&quot;胜&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 突然有一天，用户1 不想订阅了，不想每次都收到短信了</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_1);</span><br><span class=\"line\">\t<span class=\"comment\">// 等到下次比赛结果公布  只有用户2就收到了短信</span></span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;result&quot;</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">result</span>: <span class=\"string\">&quot;负&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"什么是发布订阅\"><a href=\"#什么是发布订阅\" class=\"headerlink\" title=\"什么是发布订阅\"></a>什么是发布订阅</h1><p>发布订阅是一种软件设计模式和通信范式，它旨在促进不同软件组件间的松散耦合通信。在订阅发布模式中，有如下两个核心概念：</p>\n<ol>\n<li><strong>发布者</strong>: 负责发布信息或事件。发布者并不直接将消息发送给特定的接收者，而是将其发布到一个共享的通信媒介——通常是被称为“主题”（Topic）、“频道”（Channel）或“事件总线”（Event Bus）的中介。</li>\n<li><strong>订阅者</strong>: 对特定类型的信息或事件感兴趣。订阅者向中介（主题或频道）表达其关注的事件类型，并提供一个回调函数（或处理器）以便在相关事件发生时得到通知。订阅者并不关心发布者是谁，也不需要了解其他订阅者的存在。</li>\n</ol>\n<p>就好比：</p>\n<p>订阅者就好比手机开了个提醒，只关注感兴趣的那块新闻，比如你想知道关于足球比赛的结果，于是你对手机说: “只要有关足球比赛结果出来，就立刻告诉我” 这就是你向手机订阅了足球比赛的结果。</p>\n<p>发布者就好比手机的短信，你发布一个消息，比如: “今天足球比赛结果出来了，结果是：胜负平”，然后手机就会把消息发送给订阅者，订阅者收到消息后，就会收到短信，然后你就知道了。</p>\n<p>订阅者就是指定了自己关心的内容类型，然后等待这个类型的消息出现时，会收到专门的通知，而无需理会消息从哪里来，还有谁也在关注同样的消息。</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/d_20240426094751.png\" alt=\"图片\"></p>\n<p>订阅发布模式，也叫发布订阅模式，是观察者模式的一种变种，观察者模式是订阅一个主题，主题会通知所有观察者，而发布订阅模式是订阅一个主题，主题会通知所有订阅者。</p>\n<ul>\n<li>发布者：通过事件中心派发事件</li>\n<li>订阅者：通过事件中心进行事件的订阅</li>\n<li>事件中心：负责存放事件和订阅者的关系.</li>\n</ul>\n<h2 id=\"代码理解\"><a href=\"#代码理解\" class=\"headerlink\" title=\"代码理解\"></a>代码理解</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件中心</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventChannel</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span> = &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅中心</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">subscribe</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, handler</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType]) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType] = [];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布中心</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">publish</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> handlers = <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">\t\thandlers.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> <span class=\"title function_\">handler</span>(data));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\"><span class=\"title class_\">EventChannel</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">unsubscribe</span> = <span class=\"keyword\">function</span> (<span class=\"params\">eventType, handler</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> handlers = <span class=\"variable language_\">this</span>.<span class=\"property\">subscribers</span>[eventType];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = handlers.<span class=\"title function_\">indexOf</span>(handler);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\thandlers.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何操作\"><a href=\"#如何操作\" class=\"headerlink\" title=\"如何操作?\"></a>如何操作?</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> eventChannel = <span class=\"keyword\">new</span> <span class=\"title class_\">EventChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// z这里模仿用户订阅足球比赛结果，等比赛结束之后将结果发布给订阅者</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user_1</span>(<span class=\"params\">&#123; result &#125;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`用户1接受到短信：比赛结果为<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">user_2</span>(<span class=\"params\">&#123; result &#125;</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`用户2接受到短信：比赛结果为<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 用户1订阅了比赛结果</span></span><br><span class=\"line\">eventChannel.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_1);</span><br><span class=\"line\"><span class=\"comment\">// 用户2订阅了比赛结果</span></span><br><span class=\"line\">eventChannel.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟官方的结果</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;result&quot;</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">result</span>: <span class=\"string\">&quot;胜&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 突然有一天，用户1 不想订阅了，不想每次都收到短信了</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;result&quot;</span>, user_1);</span><br><span class=\"line\">\t<span class=\"comment\">// 等到下次比赛结果公布  只有用户2就收到了短信</span></span><br><span class=\"line\">\teventChannel.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;result&quot;</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">result</span>: <span class=\"string\">&quot;负&quot;</span>,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"单例模式","abbrlink":"f1601c3e","date":"2025-01-15T03:20:38.000Z","_content":"\n# 什么是单例模式？\n\n单例模式（Singleton Pattern）是简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\n简单的说就是不管实例多少次,最终返回的是首次的实例对象; 单例模式不仅减少了内存的开销, 并且解决了一部分在全局变量中冲突的问题。\n\n单例模式确保一个类只有一个实例存在。举个例子说: 一个班只有一名班主任, 而对于这个问题就是一个简单的介绍,同一个班级可以有多个老师,但是只有一个班主任,所以这个班主任就是单例模式。\n\n## 简单的单例模式\n\n```js\nconst time_tool = {\n\ttitle: \"时间处理方法\",\n\tgetTime: function () {},\n\tgetDate: function () {},\n\tgetYear: function () {},\n};\n```\n\n上面的例子就是以为`字面量`的形式创建一个封装时间的处理工具,同时暴露出一个全局的变量`time_tool`,在使用的时候只需要调用`time_tool.getTime()`即可。`time_tool`就是单例模式的体现,在创建对象的方式实例化了一个对象, 并且`const`定义的变量是不能修改以及重复存在的;\n\n## 构造函数与立即执行函数表达式\n\n```js\nconst Singleton = (function () {\n\tlet instance;\n\n\tfunction init() {\n\t\tfunction privateMethod() {\n\t\t\tconsole.log(\"私有\");\n\t\t}\n\t\treturn {\n\t\t\tpublicMethod: function () {\n\t\t\t\tconsole.log(\"公有\");\n\t\t\t\tprivateMethod();\n\t\t\t},\n\t\t};\n\t}\n\n\treturn {\n\t\tgetInstance: function () {\n\t\t\tif (!instance) {\n\t\t\t\t// 创建\n\t\t\t\tinstance = init();\n\t\t\t}\n\t\t\treturn instance;\n\t\t},\n\t};\n})();\nconst instance1 = Singleton.getInstance();\nconst instance2 = Singleton.getInstance();\nconsole.log(instance1, instance2);\nconsole.log(instance1 === instance2);\n```\n\n## 使用模块模式\n\n```js\nconst SingletonModule = (function () {\n\tlet instance;\n\n\tfunction Singleton() {\n\t\t// 私有属性和方法\n\t\tconst privateVar = \"I am private\";\n\n\t\tthis.publicMethod = function () {\n\t\t\tconsole.log(\"Public Method\");\n\t\t\tconsole.log(privateVar);\n\t\t};\n\t}\n\n\treturn {\n\t\tgetInstance: function () {\n\t\t\tif (!instance) {\n\t\t\t\tinstance = new Singleton();\n\t\t\t}\n\t\t\treturn instance;\n\t\t},\n\t};\n})();\n\n// 使用单例\nconst singletonInstance1 = SingletonModule.getInstance();\nconst singletonInstance2 = SingletonModule.getInstance();\nconsole.log(singletonInstance1 === singletonInstance2); // 输出: true\n```\n\n## 使用 ES6 的类和静态属性\n\n```js\nclass SingletonClass {\n\tstatic instance = null;\n\n\tconstructor() {\n\t\tif (!SingletonClass.instance) {\n\t\t\tSingletonClass.instance = this;\n\t\t\t// 初始化操作\n\t\t}\n\t\treturn SingletonClass.instance;\n\t}\n\n\tpublicMethod() {\n\t\tconsole.log(\"Singleton Class Public Method\");\n\t}\n}\n\n// 使用单例\nconst singletonInstance1 = new SingletonClass();\nconst singletonInstance2 = new SingletonClass();\n\nconsole.log(singletonInstance1 === singletonInstance2); // 输出: true\n```\n\n单例模式的实现方式有很多种,如使用字面量,使用构造函数,使用立即执行函数表达式,使用模块模式,使用 ES6 的类和静态属性等。\n","source":"_posts/技能小册/javascript/设计模式/单例模式.md","raw":"---\ntitle: 单例模式\nabbrlink: f1601c3e\ndate: 2025-01-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n# 什么是单例模式？\n\n单例模式（Singleton Pattern）是简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n\n简单的说就是不管实例多少次,最终返回的是首次的实例对象; 单例模式不仅减少了内存的开销, 并且解决了一部分在全局变量中冲突的问题。\n\n单例模式确保一个类只有一个实例存在。举个例子说: 一个班只有一名班主任, 而对于这个问题就是一个简单的介绍,同一个班级可以有多个老师,但是只有一个班主任,所以这个班主任就是单例模式。\n\n## 简单的单例模式\n\n```js\nconst time_tool = {\n\ttitle: \"时间处理方法\",\n\tgetTime: function () {},\n\tgetDate: function () {},\n\tgetYear: function () {},\n};\n```\n\n上面的例子就是以为`字面量`的形式创建一个封装时间的处理工具,同时暴露出一个全局的变量`time_tool`,在使用的时候只需要调用`time_tool.getTime()`即可。`time_tool`就是单例模式的体现,在创建对象的方式实例化了一个对象, 并且`const`定义的变量是不能修改以及重复存在的;\n\n## 构造函数与立即执行函数表达式\n\n```js\nconst Singleton = (function () {\n\tlet instance;\n\n\tfunction init() {\n\t\tfunction privateMethod() {\n\t\t\tconsole.log(\"私有\");\n\t\t}\n\t\treturn {\n\t\t\tpublicMethod: function () {\n\t\t\t\tconsole.log(\"公有\");\n\t\t\t\tprivateMethod();\n\t\t\t},\n\t\t};\n\t}\n\n\treturn {\n\t\tgetInstance: function () {\n\t\t\tif (!instance) {\n\t\t\t\t// 创建\n\t\t\t\tinstance = init();\n\t\t\t}\n\t\t\treturn instance;\n\t\t},\n\t};\n})();\nconst instance1 = Singleton.getInstance();\nconst instance2 = Singleton.getInstance();\nconsole.log(instance1, instance2);\nconsole.log(instance1 === instance2);\n```\n\n## 使用模块模式\n\n```js\nconst SingletonModule = (function () {\n\tlet instance;\n\n\tfunction Singleton() {\n\t\t// 私有属性和方法\n\t\tconst privateVar = \"I am private\";\n\n\t\tthis.publicMethod = function () {\n\t\t\tconsole.log(\"Public Method\");\n\t\t\tconsole.log(privateVar);\n\t\t};\n\t}\n\n\treturn {\n\t\tgetInstance: function () {\n\t\t\tif (!instance) {\n\t\t\t\tinstance = new Singleton();\n\t\t\t}\n\t\t\treturn instance;\n\t\t},\n\t};\n})();\n\n// 使用单例\nconst singletonInstance1 = SingletonModule.getInstance();\nconst singletonInstance2 = SingletonModule.getInstance();\nconsole.log(singletonInstance1 === singletonInstance2); // 输出: true\n```\n\n## 使用 ES6 的类和静态属性\n\n```js\nclass SingletonClass {\n\tstatic instance = null;\n\n\tconstructor() {\n\t\tif (!SingletonClass.instance) {\n\t\t\tSingletonClass.instance = this;\n\t\t\t// 初始化操作\n\t\t}\n\t\treturn SingletonClass.instance;\n\t}\n\n\tpublicMethod() {\n\t\tconsole.log(\"Singleton Class Public Method\");\n\t}\n}\n\n// 使用单例\nconst singletonInstance1 = new SingletonClass();\nconst singletonInstance2 = new SingletonClass();\n\nconsole.log(singletonInstance1 === singletonInstance2); // 输出: true\n```\n\n单例模式的实现方式有很多种,如使用字面量,使用构造函数,使用立即执行函数表达式,使用模块模式,使用 ES6 的类和静态属性等。\n","slug":"技能小册/javascript/设计模式/单例模式","published":1,"updated":"2025-03-12T09:21:23.566Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j6006lfg9mdl6kfej9","content":"<h1 id=\"什么是单例模式？\"><a href=\"#什么是单例模式？\" class=\"headerlink\" title=\"什么是单例模式？\"></a>什么是单例模式？</h1><p>单例模式（Singleton Pattern）是简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>简单的说就是不管实例多少次,最终返回的是首次的实例对象; 单例模式不仅减少了内存的开销, 并且解决了一部分在全局变量中冲突的问题。</p>\n<p>单例模式确保一个类只有一个实例存在。举个例子说: 一个班只有一名班主任, 而对于这个问题就是一个简单的介绍,同一个班级可以有多个老师,但是只有一个班主任,所以这个班主任就是单例模式。</p>\n<h2 id=\"简单的单例模式\"><a href=\"#简单的单例模式\" class=\"headerlink\" title=\"简单的单例模式\"></a>简单的单例模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> time_tool = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;时间处理方法&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">getTime</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getDate</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getYear</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子就是以为<code>字面量</code>的形式创建一个封装时间的处理工具,同时暴露出一个全局的变量<code>time_tool</code>,在使用的时候只需要调用<code>time_tool.getTime()</code>即可。<code>time_tool</code>就是单例模式的体现,在创建对象的方式实例化了一个对象, 并且<code>const</code>定义的变量是不能修改以及重复存在的;</p>\n<h2 id=\"构造函数与立即执行函数表达式\"><a href=\"#构造函数与立即执行函数表达式\" class=\"headerlink\" title=\"构造函数与立即执行函数表达式\"></a>构造函数与立即执行函数表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">privateMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;私有&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">publicMethod</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;公有&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">privateMethod</span>();</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">getInstance</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 创建</span></span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"title function_\">init</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance1 = <span class=\"title class_\">Singleton</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance2 = <span class=\"title class_\">Singleton</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(instance1, instance2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(instance1 === instance2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用模块模式\"><a href=\"#使用模块模式\" class=\"headerlink\" title=\"使用模块模式\"></a>使用模块模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SingletonModule</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 私有属性和方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> privateVar = <span class=\"string\">&quot;I am private&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">publicMethod</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Public Method&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(privateVar);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">getInstance</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用单例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance1 = <span class=\"title class_\">SingletonModule</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance2 = <span class=\"title class_\">SingletonModule</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(singletonInstance1 === singletonInstance2); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-ES6-的类和静态属性\"><a href=\"#使用-ES6-的类和静态属性\" class=\"headerlink\" title=\"使用 ES6 的类和静态属性\"></a>使用 ES6 的类和静态属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SingletonClass</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 初始化操作</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">publicMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Singleton Class Public Method&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用单例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance1 = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonClass</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance2 = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonClass</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(singletonInstance1 === singletonInstance2); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></table></figure>\n\n<p>单例模式的实现方式有很多种,如使用字面量,使用构造函数,使用立即执行函数表达式,使用模块模式,使用 ES6 的类和静态属性等。</p>\n","excerpt":"","more":"<h1 id=\"什么是单例模式？\"><a href=\"#什么是单例模式？\" class=\"headerlink\" title=\"什么是单例模式？\"></a>什么是单例模式？</h1><p>单例模式（Singleton Pattern）是简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>简单的说就是不管实例多少次,最终返回的是首次的实例对象; 单例模式不仅减少了内存的开销, 并且解决了一部分在全局变量中冲突的问题。</p>\n<p>单例模式确保一个类只有一个实例存在。举个例子说: 一个班只有一名班主任, 而对于这个问题就是一个简单的介绍,同一个班级可以有多个老师,但是只有一个班主任,所以这个班主任就是单例模式。</p>\n<h2 id=\"简单的单例模式\"><a href=\"#简单的单例模式\" class=\"headerlink\" title=\"简单的单例模式\"></a>简单的单例模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> time_tool = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;时间处理方法&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">getTime</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getDate</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">getYear</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子就是以为<code>字面量</code>的形式创建一个封装时间的处理工具,同时暴露出一个全局的变量<code>time_tool</code>,在使用的时候只需要调用<code>time_tool.getTime()</code>即可。<code>time_tool</code>就是单例模式的体现,在创建对象的方式实例化了一个对象, 并且<code>const</code>定义的变量是不能修改以及重复存在的;</p>\n<h2 id=\"构造函数与立即执行函数表达式\"><a href=\"#构造函数与立即执行函数表达式\" class=\"headerlink\" title=\"构造函数与立即执行函数表达式\"></a>构造函数与立即执行函数表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">privateMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;私有&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">publicMethod</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;公有&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">privateMethod</span>();</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">getInstance</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 创建</span></span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"title function_\">init</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance1 = <span class=\"title class_\">Singleton</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance2 = <span class=\"title class_\">Singleton</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(instance1, instance2);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(instance1 === instance2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用模块模式\"><a href=\"#使用模块模式\" class=\"headerlink\" title=\"使用模块模式\"></a>使用模块模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SingletonModule</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 私有属性和方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> privateVar = <span class=\"string\">&quot;I am private&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">publicMethod</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Public Method&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(privateVar);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">getInstance</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用单例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance1 = <span class=\"title class_\">SingletonModule</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance2 = <span class=\"title class_\">SingletonModule</span>.<span class=\"title function_\">getInstance</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(singletonInstance1 === singletonInstance2); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-ES6-的类和静态属性\"><a href=\"#使用-ES6-的类和静态属性\" class=\"headerlink\" title=\"使用 ES6 的类和静态属性\"></a>使用 ES6 的类和静态属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SingletonClass</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 初始化操作</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">SingletonClass</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">publicMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Singleton Class Public Method&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用单例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance1 = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonClass</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> singletonInstance2 = <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonClass</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(singletonInstance1 === singletonInstance2); <span class=\"comment\">// 输出: true</span></span><br></pre></td></tr></table></figure>\n\n<p>单例模式的实现方式有很多种,如使用字面量,使用构造函数,使用立即执行函数表达式,使用模块模式,使用 ES6 的类和静态属性等。</p>\n"},{"title":"观察者模式","abbrlink":"9a246216","_content":"\n# 观察者模式？\n\n是一种一对多的关系，当一个对象发生改变时，其他依赖者都会收到对应的通知并及时更新；\n\n就比如说：现场拍卖，台上的是观察者，当商品价格发生改变时就会更新通知所有的竞拍者，其中一件商品对应了多个竞拍者，体现了一对多的关系；\n\n可以参考如下图片：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.3k7zr6l0sj.webp)\n\n## 简单案例\n\n```js\nclass Observer {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n\n\tupdate(price) {\n\t\tconsole.log(`${this.name} 您收到的价格为: $${price}`);\n\t}\n}\n\nclass Subject {\n\tconstructor() {\n\t\tthis.observers = []; // 所有竞拍者\n\t\tthis.price = 0; // 当前价格\n\t}\n\n\t// 添加竞拍者\n\taddObserver(observer) {\n\t\tthis.observers.push(observer);\n\t}\n\n\t// 删除竞拍者\n\tremoveObserver(observer) {\n\t\tthis.observers = this.observers.filter(item => item !== observer);\n\t}\n\n\t// 更新价格 并通知所有竞拍者\n\tupdatePrice(price) {\n\t\tthis.price = price;\n\t\tthis.observers.forEach(item => item.update(price));\n\t}\n}\n\n// 创建拍卖品\nconst subject = new Subject();\n\n// 创建竞拍者\nconst ob1 = new Observer(\"竞拍者A\");\nconst ob2 = new Observer(\"竞拍者B\");\nconst ob3 = new Observer(\"竞拍者C\");\n\n// 注册竞拍者\nsubject.addObserver(ob1);\nsubject.addObserver(ob2);\nsubject.addObserver(ob3);\n\n// 更新价格\nsubject.updatePrice(100);\n\n// 竞拍者A离席不参与竞拍了\nsubject.removeObserver(ob1);\n\n// 更新价格， 这时候只有竞拍者B,C收到通知\nsubject.updatePrice(200);\n```\n","source":"_posts/技能小册/javascript/设计模式/观察者模式.md","raw":"---\ntitle: 观察者模式\nabbrlink: 9a246216\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n# 观察者模式？\n\n是一种一对多的关系，当一个对象发生改变时，其他依赖者都会收到对应的通知并及时更新；\n\n就比如说：现场拍卖，台上的是观察者，当商品价格发生改变时就会更新通知所有的竞拍者，其中一件商品对应了多个竞拍者，体现了一对多的关系；\n\n可以参考如下图片：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.3k7zr6l0sj.webp)\n\n## 简单案例\n\n```js\nclass Observer {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t}\n\n\tupdate(price) {\n\t\tconsole.log(`${this.name} 您收到的价格为: $${price}`);\n\t}\n}\n\nclass Subject {\n\tconstructor() {\n\t\tthis.observers = []; // 所有竞拍者\n\t\tthis.price = 0; // 当前价格\n\t}\n\n\t// 添加竞拍者\n\taddObserver(observer) {\n\t\tthis.observers.push(observer);\n\t}\n\n\t// 删除竞拍者\n\tremoveObserver(observer) {\n\t\tthis.observers = this.observers.filter(item => item !== observer);\n\t}\n\n\t// 更新价格 并通知所有竞拍者\n\tupdatePrice(price) {\n\t\tthis.price = price;\n\t\tthis.observers.forEach(item => item.update(price));\n\t}\n}\n\n// 创建拍卖品\nconst subject = new Subject();\n\n// 创建竞拍者\nconst ob1 = new Observer(\"竞拍者A\");\nconst ob2 = new Observer(\"竞拍者B\");\nconst ob3 = new Observer(\"竞拍者C\");\n\n// 注册竞拍者\nsubject.addObserver(ob1);\nsubject.addObserver(ob2);\nsubject.addObserver(ob3);\n\n// 更新价格\nsubject.updatePrice(100);\n\n// 竞拍者A离席不参与竞拍了\nsubject.removeObserver(ob1);\n\n// 更新价格， 这时候只有竞拍者B,C收到通知\nsubject.updatePrice(200);\n```\n","slug":"技能小册/javascript/设计模式/观察者模式","published":1,"date":"2025-03-12T09:20:29.229Z","updated":"2025-03-13T10:16:18.381Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j7006ofg9m3joedpbt","content":"<h1 id=\"观察者模式？\"><a href=\"#观察者模式？\" class=\"headerlink\" title=\"观察者模式？\"></a>观察者模式？</h1><p>是一种一对多的关系，当一个对象发生改变时，其他依赖者都会收到对应的通知并及时更新；</p>\n<p>就比如说：现场拍卖，台上的是观察者，当商品价格发生改变时就会更新通知所有的竞拍者，其中一件商品对应了多个竞拍者，体现了一对多的关系；</p>\n<p>可以参考如下图片：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.3k7zr6l0sj.webp\" alt=\"x\"></p>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">update</span>(<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> 您收到的价格为: $<span class=\"subst\">$&#123;price&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = []; <span class=\"comment\">// 所有竞拍者</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">price</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 当前价格</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">addObserver</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">push</span>(observer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">removeObserver</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== observer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新价格 并通知所有竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">updatePrice</span>(<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">price</span> = price;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">update</span>(price));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建拍卖品</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建竞拍者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者A&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ob2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者B&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ob3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册竞拍者</span></span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob1);</span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob2);</span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新价格</span></span><br><span class=\"line\">subject.<span class=\"title function_\">updatePrice</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 竞拍者A离席不参与竞拍了</span></span><br><span class=\"line\">subject.<span class=\"title function_\">removeObserver</span>(ob1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新价格， 这时候只有竞拍者B,C收到通知</span></span><br><span class=\"line\">subject.<span class=\"title function_\">updatePrice</span>(<span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"观察者模式？\"><a href=\"#观察者模式？\" class=\"headerlink\" title=\"观察者模式？\"></a>观察者模式？</h1><p>是一种一对多的关系，当一个对象发生改变时，其他依赖者都会收到对应的通知并及时更新；</p>\n<p>就比如说：现场拍卖，台上的是观察者，当商品价格发生改变时就会更新通知所有的竞拍者，其中一件商品对应了多个竞拍者，体现了一对多的关系；</p>\n<p>可以参考如下图片：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/2024-08-16-1140.3k7zr6l0sj.webp\" alt=\"x\"></p>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">update</span>(<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span> 您收到的价格为: $<span class=\"subst\">$&#123;price&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = []; <span class=\"comment\">// 所有竞拍者</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">price</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 当前价格</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">addObserver</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">push</span>(observer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">removeObserver</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== observer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新价格 并通知所有竞拍者</span></span><br><span class=\"line\">\t<span class=\"title function_\">updatePrice</span>(<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">price</span> = price;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">update</span>(price));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建拍卖品</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建竞拍者</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ob1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者A&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ob2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者B&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ob3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(<span class=\"string\">&quot;竞拍者C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册竞拍者</span></span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob1);</span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob2);</span><br><span class=\"line\">subject.<span class=\"title function_\">addObserver</span>(ob3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新价格</span></span><br><span class=\"line\">subject.<span class=\"title function_\">updatePrice</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 竞拍者A离席不参与竞拍了</span></span><br><span class=\"line\">subject.<span class=\"title function_\">removeObserver</span>(ob1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新价格， 这时候只有竞拍者B,C收到通知</span></span><br><span class=\"line\">subject.<span class=\"title function_\">updatePrice</span>(<span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"订阅发布与观察者区别","abbrlink":"d5ff89f2","date":"2025-01-15T03:20:38.000Z","_content":"\n{% note info simple %}\n在 JavaScript 中，`订阅发布（Publish-Subscribe）模式`和`观察者（Observer）模式`都是用于实现对象间解耦通信的设计模式。虽然这两种模式有相似之处，但它们之间存在一些关键的区别：\n{% endnote %}\n\n## 概念上的不同：\n\n- 观察者模式：是一种对象行为模式，它定义了对象之间的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。\n- 订阅发布模式：是一种消息通信模式，对象之间通过事件或消息进行通信，发送者（发布者）不会直接调用接收者（订阅者）的方法，而是将消息发布到一个中介（通常是事件总线或消息队列），订阅者可以订阅这些消息。\n\n## 实现方式的不同\n\n- 在观察者模式中，通常有一个具体的 Subject 类，它可以注册、移除观察者（Observer），并且在状态发生变化时通知所有的观察者。\n- 在订阅发布模式中，并没有明确的 Subject 和 Observer 角色，任何对象都可以作为发布者或者订阅者，通信是通过事件名称来进行的。\n\n## 应用场景的不同\n\n- 观察者模式更适合于一对多的关系，即一个主题对象管理所有观察者对象，并且任何给定的观察者对象都只依赖于一个具体主题。\n- 订阅发布模式适用于更广泛的情况，包括多对多的关系，即多个发布者可以向多个订阅者发送消息，订阅者可以根据自己的需求选择订阅哪些消息。\n\n## 灵活性与扩展性\n\n- 观察者模式在添加新的观察者时相对简单，但是当主题对象的状态变化频繁时，可能会导致大量的通知消息。\n- 订阅发布模式由于其基于事件的机制，在处理复杂的消息传递场景时更加灵活，也更容易扩展。\n","source":"_posts/技能小册/javascript/设计模式/订阅发布与观察者区别.md","raw":"---\ntitle: 订阅发布与观察者区别\nabbrlink: d5ff89f2\ndate: 2025-01-15 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - JavaScript\n---\n\n{% note info simple %}\n在 JavaScript 中，`订阅发布（Publish-Subscribe）模式`和`观察者（Observer）模式`都是用于实现对象间解耦通信的设计模式。虽然这两种模式有相似之处，但它们之间存在一些关键的区别：\n{% endnote %}\n\n## 概念上的不同：\n\n- 观察者模式：是一种对象行为模式，它定义了对象之间的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。\n- 订阅发布模式：是一种消息通信模式，对象之间通过事件或消息进行通信，发送者（发布者）不会直接调用接收者（订阅者）的方法，而是将消息发布到一个中介（通常是事件总线或消息队列），订阅者可以订阅这些消息。\n\n## 实现方式的不同\n\n- 在观察者模式中，通常有一个具体的 Subject 类，它可以注册、移除观察者（Observer），并且在状态发生变化时通知所有的观察者。\n- 在订阅发布模式中，并没有明确的 Subject 和 Observer 角色，任何对象都可以作为发布者或者订阅者，通信是通过事件名称来进行的。\n\n## 应用场景的不同\n\n- 观察者模式更适合于一对多的关系，即一个主题对象管理所有观察者对象，并且任何给定的观察者对象都只依赖于一个具体主题。\n- 订阅发布模式适用于更广泛的情况，包括多对多的关系，即多个发布者可以向多个订阅者发送消息，订阅者可以根据自己的需求选择订阅哪些消息。\n\n## 灵活性与扩展性\n\n- 观察者模式在添加新的观察者时相对简单，但是当主题对象的状态变化频繁时，可能会导致大量的通知消息。\n- 订阅发布模式由于其基于事件的机制，在处理复杂的消息传递场景时更加灵活，也更容易扩展。\n","slug":"技能小册/javascript/设计模式/订阅发布与观察者区别","published":1,"updated":"2025-03-12T09:21:52.440Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j7006rfg9m8pg4fque","content":"<div class=\"note info simple\"><p>在 JavaScript 中，<code>订阅发布（Publish-Subscribe）模式</code>和<code>观察者（Observer）模式</code>都是用于实现对象间解耦通信的设计模式。虽然这两种模式有相似之处，但它们之间存在一些关键的区别：</p>\n</div>\n\n<h2 id=\"概念上的不同：\"><a href=\"#概念上的不同：\" class=\"headerlink\" title=\"概念上的不同：\"></a>概念上的不同：</h2><ul>\n<li>观察者模式：是一种对象行为模式，它定义了对象之间的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</li>\n<li>订阅发布模式：是一种消息通信模式，对象之间通过事件或消息进行通信，发送者（发布者）不会直接调用接收者（订阅者）的方法，而是将消息发布到一个中介（通常是事件总线或消息队列），订阅者可以订阅这些消息。</li>\n</ul>\n<h2 id=\"实现方式的不同\"><a href=\"#实现方式的不同\" class=\"headerlink\" title=\"实现方式的不同\"></a>实现方式的不同</h2><ul>\n<li>在观察者模式中，通常有一个具体的 Subject 类，它可以注册、移除观察者（Observer），并且在状态发生变化时通知所有的观察者。</li>\n<li>在订阅发布模式中，并没有明确的 Subject 和 Observer 角色，任何对象都可以作为发布者或者订阅者，通信是通过事件名称来进行的。</li>\n</ul>\n<h2 id=\"应用场景的不同\"><a href=\"#应用场景的不同\" class=\"headerlink\" title=\"应用场景的不同\"></a>应用场景的不同</h2><ul>\n<li>观察者模式更适合于一对多的关系，即一个主题对象管理所有观察者对象，并且任何给定的观察者对象都只依赖于一个具体主题。</li>\n<li>订阅发布模式适用于更广泛的情况，包括多对多的关系，即多个发布者可以向多个订阅者发送消息，订阅者可以根据自己的需求选择订阅哪些消息。</li>\n</ul>\n<h2 id=\"灵活性与扩展性\"><a href=\"#灵活性与扩展性\" class=\"headerlink\" title=\"灵活性与扩展性\"></a>灵活性与扩展性</h2><ul>\n<li>观察者模式在添加新的观察者时相对简单，但是当主题对象的状态变化频繁时，可能会导致大量的通知消息。</li>\n<li>订阅发布模式由于其基于事件的机制，在处理复杂的消息传递场景时更加灵活，也更容易扩展。</li>\n</ul>\n","excerpt":"","more":"<div class=\"note info simple\"><p>在 JavaScript 中，<code>订阅发布（Publish-Subscribe）模式</code>和<code>观察者（Observer）模式</code>都是用于实现对象间解耦通信的设计模式。虽然这两种模式有相似之处，但它们之间存在一些关键的区别：</p>\n</div>\n\n<h2 id=\"概念上的不同：\"><a href=\"#概念上的不同：\" class=\"headerlink\" title=\"概念上的不同：\"></a>概念上的不同：</h2><ul>\n<li>观察者模式：是一种对象行为模式，它定义了对象之间的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</li>\n<li>订阅发布模式：是一种消息通信模式，对象之间通过事件或消息进行通信，发送者（发布者）不会直接调用接收者（订阅者）的方法，而是将消息发布到一个中介（通常是事件总线或消息队列），订阅者可以订阅这些消息。</li>\n</ul>\n<h2 id=\"实现方式的不同\"><a href=\"#实现方式的不同\" class=\"headerlink\" title=\"实现方式的不同\"></a>实现方式的不同</h2><ul>\n<li>在观察者模式中，通常有一个具体的 Subject 类，它可以注册、移除观察者（Observer），并且在状态发生变化时通知所有的观察者。</li>\n<li>在订阅发布模式中，并没有明确的 Subject 和 Observer 角色，任何对象都可以作为发布者或者订阅者，通信是通过事件名称来进行的。</li>\n</ul>\n<h2 id=\"应用场景的不同\"><a href=\"#应用场景的不同\" class=\"headerlink\" title=\"应用场景的不同\"></a>应用场景的不同</h2><ul>\n<li>观察者模式更适合于一对多的关系，即一个主题对象管理所有观察者对象，并且任何给定的观察者对象都只依赖于一个具体主题。</li>\n<li>订阅发布模式适用于更广泛的情况，包括多对多的关系，即多个发布者可以向多个订阅者发送消息，订阅者可以根据自己的需求选择订阅哪些消息。</li>\n</ul>\n<h2 id=\"灵活性与扩展性\"><a href=\"#灵活性与扩展性\" class=\"headerlink\" title=\"灵活性与扩展性\"></a>灵活性与扩展性</h2><ul>\n<li>观察者模式在添加新的观察者时相对简单，但是当主题对象的状态变化频繁时，可能会导致大量的通知消息。</li>\n<li>订阅发布模式由于其基于事件的机制，在处理复杂的消息传递场景时更加灵活，也更容易扩展。</li>\n</ul>\n"},{"title":"项目工程化-Browserslist","abbrlink":"d3a81133","date":"2024-08-08T01:05:01.000Z","_content":"\n# Browserslist\n\n什么是 `Browserslist`\n\n这个文件指定了项目的浏览器兼容性目标，用于指导自动化工具`（如Autoprefixer或Babel）`如何处理`CSS和JavaScript`，确保代码在指定的浏览器版本中正常工作。\n\n由于各种浏览器对 `ECMAScript 和 CSS` 的支持程度不同，因此开发者需要根据使用场景，为 `Web` 应用设置正确的浏览器范围。\n\n`Browserslist` 可以指定 `Web` 应用能够在哪些浏览器中正常运行，它提供了统一的配置格式，并且已经成为了前端社区中的标准。`Browserslist 被 SWC, Lightning CSS, Babel, ESLint, PostCSS 和 webpack` 等库所使用。\n\n\n## Browserslist 文件是什么样子的\n\n```bash\n[production]\nchrome >= 87\nedge >= 88\nfirefox >= 78\nsafari >= 14\n\n[development]\nlast 1 chrome version\nlast 1 firefox version\nlast 1 safari version\n```\n\n规定了哪些浏览器版本， 哪些浏览器版本可以运行。\n\n**注意：有些项目是与 App 相关的，比如 iOS，那么就需要在 Browserslist 中添加 iOS 的版本号。安卓同样如此；这样才能保证项目在各种设备上都能运行。**\n\n## 使用\n\n### 单独.browserslistrc\n\n可以在项目根目录创建文件`.browserslistrc`, 代码格式如下：\n\n```bash\niOS >= 9\nAndroid >= 4.4\nlast 2 versions\n> 0.2%\nnot dead\n```\n\n### package.json 中\n\n通过 `package.json` 的 `browserslist` 设置：\n\n```json\n{\n\t\"browserslist\": [\n\t\t\"iOS >= 9\",\n\t\t\"Android >= 4.4\",\n\t\t\"last 2 versions\",\n\t\t\"> 0.2%\",\n\t\t\"not dead\"\n\t]\n}\n```\n","source":"_posts/技能小册/项目管理/工程化/browserslistrc.md","raw":"---\ntitle: 项目工程化-Browserslist\nabbrlink: d3a81133\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# Browserslist\n\n什么是 `Browserslist`\n\n这个文件指定了项目的浏览器兼容性目标，用于指导自动化工具`（如Autoprefixer或Babel）`如何处理`CSS和JavaScript`，确保代码在指定的浏览器版本中正常工作。\n\n由于各种浏览器对 `ECMAScript 和 CSS` 的支持程度不同，因此开发者需要根据使用场景，为 `Web` 应用设置正确的浏览器范围。\n\n`Browserslist` 可以指定 `Web` 应用能够在哪些浏览器中正常运行，它提供了统一的配置格式，并且已经成为了前端社区中的标准。`Browserslist 被 SWC, Lightning CSS, Babel, ESLint, PostCSS 和 webpack` 等库所使用。\n\n\n## Browserslist 文件是什么样子的\n\n```bash\n[production]\nchrome >= 87\nedge >= 88\nfirefox >= 78\nsafari >= 14\n\n[development]\nlast 1 chrome version\nlast 1 firefox version\nlast 1 safari version\n```\n\n规定了哪些浏览器版本， 哪些浏览器版本可以运行。\n\n**注意：有些项目是与 App 相关的，比如 iOS，那么就需要在 Browserslist 中添加 iOS 的版本号。安卓同样如此；这样才能保证项目在各种设备上都能运行。**\n\n## 使用\n\n### 单独.browserslistrc\n\n可以在项目根目录创建文件`.browserslistrc`, 代码格式如下：\n\n```bash\niOS >= 9\nAndroid >= 4.4\nlast 2 versions\n> 0.2%\nnot dead\n```\n\n### package.json 中\n\n通过 `package.json` 的 `browserslist` 设置：\n\n```json\n{\n\t\"browserslist\": [\n\t\t\"iOS >= 9\",\n\t\t\"Android >= 4.4\",\n\t\t\"last 2 versions\",\n\t\t\"> 0.2%\",\n\t\t\"not dead\"\n\t]\n}\n```\n","slug":"技能小册/项目管理/工程化/browserslistrc","published":1,"updated":"2025-03-12T09:37:54.978Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j7006tfg9m6txb6dyg","content":"<h1 id=\"Browserslist\"><a href=\"#Browserslist\" class=\"headerlink\" title=\"Browserslist\"></a>Browserslist</h1><p>什么是 <code>Browserslist</code></p>\n<p>这个文件指定了项目的浏览器兼容性目标，用于指导自动化工具<code>（如Autoprefixer或Babel）</code>如何处理<code>CSS和JavaScript</code>，确保代码在指定的浏览器版本中正常工作。</p>\n<p>由于各种浏览器对 <code>ECMAScript 和 CSS</code> 的支持程度不同，因此开发者需要根据使用场景，为 <code>Web</code> 应用设置正确的浏览器范围。</p>\n<p><code>Browserslist</code> 可以指定 <code>Web</code> 应用能够在哪些浏览器中正常运行，它提供了统一的配置格式，并且已经成为了前端社区中的标准。<code>Browserslist 被 SWC, Lightning CSS, Babel, ESLint, PostCSS 和 webpack</code> 等库所使用。</p>\n<h2 id=\"Browserslist-文件是什么样子的\"><a href=\"#Browserslist-文件是什么样子的\" class=\"headerlink\" title=\"Browserslist 文件是什么样子的\"></a>Browserslist 文件是什么样子的</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[production]</span><br><span class=\"line\">chrome &gt;= 87</span><br><span class=\"line\">edge &gt;= 88</span><br><span class=\"line\">firefox &gt;= 78</span><br><span class=\"line\">safari &gt;= 14</span><br><span class=\"line\"></span><br><span class=\"line\">[development]</span><br><span class=\"line\">last 1 chrome version</span><br><span class=\"line\">last 1 firefox version</span><br><span class=\"line\">last 1 safari version</span><br></pre></td></tr></table></figure>\n\n<p>规定了哪些浏览器版本， 哪些浏览器版本可以运行。</p>\n<p><strong>注意：有些项目是与 App 相关的，比如 iOS，那么就需要在 Browserslist 中添加 iOS 的版本号。安卓同样如此；这样才能保证项目在各种设备上都能运行。</strong></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"单独-browserslistrc\"><a href=\"#单独-browserslistrc\" class=\"headerlink\" title=\"单独.browserslistrc\"></a>单独.browserslistrc</h3><p>可以在项目根目录创建文件<code>.browserslistrc</code>, 代码格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iOS &gt;= 9</span><br><span class=\"line\">Android &gt;= 4.4</span><br><span class=\"line\">last 2 versions</span><br><span class=\"line\">&gt; 0.2%</span><br><span class=\"line\">not dead</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-中\"><a href=\"#package-json-中\" class=\"headerlink\" title=\"package.json 中\"></a>package.json 中</h3><p>通过 <code>package.json</code> 的 <code>browserslist</code> 设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;browserslist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;iOS &gt;= 9&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Android &gt;= 4.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;last 2 versions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&gt; 0.2%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;not dead&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Browserslist\"><a href=\"#Browserslist\" class=\"headerlink\" title=\"Browserslist\"></a>Browserslist</h1><p>什么是 <code>Browserslist</code></p>\n<p>这个文件指定了项目的浏览器兼容性目标，用于指导自动化工具<code>（如Autoprefixer或Babel）</code>如何处理<code>CSS和JavaScript</code>，确保代码在指定的浏览器版本中正常工作。</p>\n<p>由于各种浏览器对 <code>ECMAScript 和 CSS</code> 的支持程度不同，因此开发者需要根据使用场景，为 <code>Web</code> 应用设置正确的浏览器范围。</p>\n<p><code>Browserslist</code> 可以指定 <code>Web</code> 应用能够在哪些浏览器中正常运行，它提供了统一的配置格式，并且已经成为了前端社区中的标准。<code>Browserslist 被 SWC, Lightning CSS, Babel, ESLint, PostCSS 和 webpack</code> 等库所使用。</p>\n<h2 id=\"Browserslist-文件是什么样子的\"><a href=\"#Browserslist-文件是什么样子的\" class=\"headerlink\" title=\"Browserslist 文件是什么样子的\"></a>Browserslist 文件是什么样子的</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[production]</span><br><span class=\"line\">chrome &gt;= 87</span><br><span class=\"line\">edge &gt;= 88</span><br><span class=\"line\">firefox &gt;= 78</span><br><span class=\"line\">safari &gt;= 14</span><br><span class=\"line\"></span><br><span class=\"line\">[development]</span><br><span class=\"line\">last 1 chrome version</span><br><span class=\"line\">last 1 firefox version</span><br><span class=\"line\">last 1 safari version</span><br></pre></td></tr></table></figure>\n\n<p>规定了哪些浏览器版本， 哪些浏览器版本可以运行。</p>\n<p><strong>注意：有些项目是与 App 相关的，比如 iOS，那么就需要在 Browserslist 中添加 iOS 的版本号。安卓同样如此；这样才能保证项目在各种设备上都能运行。</strong></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"单独-browserslistrc\"><a href=\"#单独-browserslistrc\" class=\"headerlink\" title=\"单独.browserslistrc\"></a>单独.browserslistrc</h3><p>可以在项目根目录创建文件<code>.browserslistrc</code>, 代码格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iOS &gt;= 9</span><br><span class=\"line\">Android &gt;= 4.4</span><br><span class=\"line\">last 2 versions</span><br><span class=\"line\">&gt; 0.2%</span><br><span class=\"line\">not dead</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-中\"><a href=\"#package-json-中\" class=\"headerlink\" title=\"package.json 中\"></a>package.json 中</h3><p>通过 <code>package.json</code> 的 <code>browserslist</code> 设置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;browserslist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;iOS &gt;= 9&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Android &gt;= 4.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;last 2 versions&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&gt; 0.2%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;not dead&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-changelog","abbrlink":"c8422601","date":"2024-08-08T01:05:01.000Z","_content":"\n# Changelo.md 是什么\n\n`Changelog.md` 是一个用于记录项目变更历史的文件，通常以 `Markdown` 格式编写。这个文件会详细列出所有版本的更新内容，包括新增功能、修复的 bug、改进的地方以及其他重要变更。这对于开发者和用户来说非常重要，因为它可以帮助他们了解软件的演化过程以及每个版本的具体变化。\n\n特点：\n\n- 版本号明确：每个更新都会带有版本号，便于追踪。\n- 日期标记：每次更新都附有日期，帮助用户了解变更的时间。\n- 变更分类：如新增功能、问题修复、性能提升等，让阅读者快速定位关心的信息。\n- 简洁明了：内容通常直接切入要点，避免冗长描述。\n\n## 怎么使用？\n\n我们使用`CHANGELOG`不需要手动创建，手动创建需要吧`commit`的消息显示在`CHANGELOG`；并且太麻烦了。这里推荐使用一些第三方的工具或者依赖；\n\n```bash\npnpm add -D conventional-changelog conventional-changelog-cli\n```\n\n安装完成之后不需要配置任何文件，只需要在项目`package.json`中添加一行命令即可：\n\n```json\n{\n\t\"scripts\": {\n\t\t\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\"\n\t}\n}\n```\n\n当你执行这条命令的时候就会自动生成`CHANGELOG.md`文件, 如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45o6bf0ut.webp)\n\n## 自定义格式\n\n`conventional-changelog` 默认的格式是 `Angular` 的，但是也可以自定义格式。\n\n创建文件`scripts/changelog.option.mjs`\n\n```js\n// 记得安装对应的依赖\nimport compareFunc from \"compare-func\";\nimport { cloneDeep } from \"lodash-es\"; // 引入 lodash 库用于深拷贝\n\nconst typeMapping = {\n\tfeat: \"✨ Features | 新功能\",\n\tfix: \"🐛 Bug Fixes | Bug 修复\",\n\tperf: \"⚡ Performance Improvements | 性能优化\",\n\trevert: \"⏪ Reverts | 回退\",\n\tdocs: \"📝 Documentation | 文档\",\n\tstyle: \"💄 Styles | 风格\",\n\trefactor: \"♻ Code Refactoring | 代码重构\",\n\ttest: \"✅ Tests | 测试\",\n\tbuild: \"👷‍ Build System | 构建\",\n\tci: \"🔧 Continuous Integration | CI 配置\",\n\tchore: \"🎫 Chores | 其他更新\",\n};\nexport default {\n\twriterOpts: {\n\t\ttransform: (commit, context) => {\n\t\t\tlet discard = true;\n\t\t\tconst issues = [];\n\t\t\tlet _commit = cloneDeep(commit); // 使用 lodash 的深拷贝\n\n\t\t\t_commit.notes = _commit.notes.map(note => {\n\t\t\t\tif (note.title === \"BREAKING CHANGES\") {\n\t\t\t\t\tnote.title = \"BREAKING CHANGES\";\n\t\t\t\t\tdiscard = false;\n\t\t\t\t}\n\t\t\t\treturn note;\n\t\t\t});\n\n\t\t\t_commit.type = typeMapping[_commit.type] || _commit.type;\n\n\t\t\tif (_commit.scope === \"*\") {\n\t\t\t\t_commit.scope = \"\";\n\t\t\t}\n\n\t\t\tif (typeof _commit.hash === \"string\") {\n\t\t\t\t_commit.shortHash = _commit.hash.substring(0, 7);\n\t\t\t}\n\n\t\t\tif (typeof _commit.subject === \"string\") {\n\t\t\t\tlet url = context.repository\n\t\t\t\t\t? `${context.host}/${context.owner}/${context.repository}`\n\t\t\t\t\t: context.repoUrl;\n\n\t\t\t\tif (url) {\n\t\t\t\t\turl = `${url}/issues/`;\n\t\t\t\t\t_commit.subject = _commit.subject.replace(\n\t\t\t\t\t\t/#([0-9]+)/g,\n\t\t\t\t\t\t(_, issue) => {\n\t\t\t\t\t\t\tissues.push(issue);\n\t\t\t\t\t\t\treturn `[#${issue}](${url}${issue})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (context.host) {\n\t\t\t\t\t_commit.subject = _commit.subject.replace(\n\t\t\t\t\t\t/\\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,\n\t\t\t\t\t\t(_, username) => {\n\t\t\t\t\t\t\tif (username.includes(\"/\")) {\n\t\t\t\t\t\t\t\treturn `@${username}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn `[@${username}](${context.host}/${username})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commit.references = _commit.references.filter(reference => {\n\t\t\t\treturn issues.indexOf(reference.issue) === -1;\n\t\t\t});\n\n\t\t\treturn _commit;\n\t\t},\n\t\tgroupBy: \"type\",\n\t\tcommitGroupsSort: \"title\",\n\t\tcommitsSort: [\"scope\", \"subject\"],\n\t\tnoteGroupsSort: \"title\",\n\t\tnotesSort: compareFunc,\n\t},\n};\n```\n\n在项目`package.json`中添加命令\n\n```json\n{\n\t\"scripts\": {\n\t\t\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 -n ./scripts/changelog-option.mjs && git add CHANGELOG.md\"\n\t}\n}\n```\n\n效果如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8l02pz4vrj.webp)\n","source":"_posts/技能小册/项目管理/工程化/changelog.md","raw":"---\ntitle: 项目工程化-changelog\nabbrlink: c8422601\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# Changelo.md 是什么\n\n`Changelog.md` 是一个用于记录项目变更历史的文件，通常以 `Markdown` 格式编写。这个文件会详细列出所有版本的更新内容，包括新增功能、修复的 bug、改进的地方以及其他重要变更。这对于开发者和用户来说非常重要，因为它可以帮助他们了解软件的演化过程以及每个版本的具体变化。\n\n特点：\n\n- 版本号明确：每个更新都会带有版本号，便于追踪。\n- 日期标记：每次更新都附有日期，帮助用户了解变更的时间。\n- 变更分类：如新增功能、问题修复、性能提升等，让阅读者快速定位关心的信息。\n- 简洁明了：内容通常直接切入要点，避免冗长描述。\n\n## 怎么使用？\n\n我们使用`CHANGELOG`不需要手动创建，手动创建需要吧`commit`的消息显示在`CHANGELOG`；并且太麻烦了。这里推荐使用一些第三方的工具或者依赖；\n\n```bash\npnpm add -D conventional-changelog conventional-changelog-cli\n```\n\n安装完成之后不需要配置任何文件，只需要在项目`package.json`中添加一行命令即可：\n\n```json\n{\n\t\"scripts\": {\n\t\t\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0\"\n\t}\n}\n```\n\n当你执行这条命令的时候就会自动生成`CHANGELOG.md`文件, 如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45o6bf0ut.webp)\n\n## 自定义格式\n\n`conventional-changelog` 默认的格式是 `Angular` 的，但是也可以自定义格式。\n\n创建文件`scripts/changelog.option.mjs`\n\n```js\n// 记得安装对应的依赖\nimport compareFunc from \"compare-func\";\nimport { cloneDeep } from \"lodash-es\"; // 引入 lodash 库用于深拷贝\n\nconst typeMapping = {\n\tfeat: \"✨ Features | 新功能\",\n\tfix: \"🐛 Bug Fixes | Bug 修复\",\n\tperf: \"⚡ Performance Improvements | 性能优化\",\n\trevert: \"⏪ Reverts | 回退\",\n\tdocs: \"📝 Documentation | 文档\",\n\tstyle: \"💄 Styles | 风格\",\n\trefactor: \"♻ Code Refactoring | 代码重构\",\n\ttest: \"✅ Tests | 测试\",\n\tbuild: \"👷‍ Build System | 构建\",\n\tci: \"🔧 Continuous Integration | CI 配置\",\n\tchore: \"🎫 Chores | 其他更新\",\n};\nexport default {\n\twriterOpts: {\n\t\ttransform: (commit, context) => {\n\t\t\tlet discard = true;\n\t\t\tconst issues = [];\n\t\t\tlet _commit = cloneDeep(commit); // 使用 lodash 的深拷贝\n\n\t\t\t_commit.notes = _commit.notes.map(note => {\n\t\t\t\tif (note.title === \"BREAKING CHANGES\") {\n\t\t\t\t\tnote.title = \"BREAKING CHANGES\";\n\t\t\t\t\tdiscard = false;\n\t\t\t\t}\n\t\t\t\treturn note;\n\t\t\t});\n\n\t\t\t_commit.type = typeMapping[_commit.type] || _commit.type;\n\n\t\t\tif (_commit.scope === \"*\") {\n\t\t\t\t_commit.scope = \"\";\n\t\t\t}\n\n\t\t\tif (typeof _commit.hash === \"string\") {\n\t\t\t\t_commit.shortHash = _commit.hash.substring(0, 7);\n\t\t\t}\n\n\t\t\tif (typeof _commit.subject === \"string\") {\n\t\t\t\tlet url = context.repository\n\t\t\t\t\t? `${context.host}/${context.owner}/${context.repository}`\n\t\t\t\t\t: context.repoUrl;\n\n\t\t\t\tif (url) {\n\t\t\t\t\turl = `${url}/issues/`;\n\t\t\t\t\t_commit.subject = _commit.subject.replace(\n\t\t\t\t\t\t/#([0-9]+)/g,\n\t\t\t\t\t\t(_, issue) => {\n\t\t\t\t\t\t\tissues.push(issue);\n\t\t\t\t\t\t\treturn `[#${issue}](${url}${issue})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (context.host) {\n\t\t\t\t\t_commit.subject = _commit.subject.replace(\n\t\t\t\t\t\t/\\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/g,\n\t\t\t\t\t\t(_, username) => {\n\t\t\t\t\t\t\tif (username.includes(\"/\")) {\n\t\t\t\t\t\t\t\treturn `@${username}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn `[@${username}](${context.host}/${username})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_commit.references = _commit.references.filter(reference => {\n\t\t\t\treturn issues.indexOf(reference.issue) === -1;\n\t\t\t});\n\n\t\t\treturn _commit;\n\t\t},\n\t\tgroupBy: \"type\",\n\t\tcommitGroupsSort: \"title\",\n\t\tcommitsSort: [\"scope\", \"subject\"],\n\t\tnoteGroupsSort: \"title\",\n\t\tnotesSort: compareFunc,\n\t},\n};\n```\n\n在项目`package.json`中添加命令\n\n```json\n{\n\t\"scripts\": {\n\t\t\"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 -n ./scripts/changelog-option.mjs && git add CHANGELOG.md\"\n\t}\n}\n```\n\n效果如下：\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8l02pz4vrj.webp)\n","slug":"技能小册/项目管理/工程化/changelog","published":1,"updated":"2025-03-13T10:16:19.266Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j7006xfg9m8fn63dzs","content":"<h1 id=\"Changelo-md-是什么\"><a href=\"#Changelo-md-是什么\" class=\"headerlink\" title=\"Changelo.md 是什么\"></a>Changelo.md 是什么</h1><p><code>Changelog.md</code> 是一个用于记录项目变更历史的文件，通常以 <code>Markdown</code> 格式编写。这个文件会详细列出所有版本的更新内容，包括新增功能、修复的 bug、改进的地方以及其他重要变更。这对于开发者和用户来说非常重要，因为它可以帮助他们了解软件的演化过程以及每个版本的具体变化。</p>\n<p>特点：</p>\n<ul>\n<li>版本号明确：每个更新都会带有版本号，便于追踪。</li>\n<li>日期标记：每次更新都附有日期，帮助用户了解变更的时间。</li>\n<li>变更分类：如新增功能、问题修复、性能提升等，让阅读者快速定位关心的信息。</li>\n<li>简洁明了：内容通常直接切入要点，避免冗长描述。</li>\n</ul>\n<h2 id=\"怎么使用？\"><a href=\"#怎么使用？\" class=\"headerlink\" title=\"怎么使用？\"></a>怎么使用？</h2><p>我们使用<code>CHANGELOG</code>不需要手动创建，手动创建需要吧<code>commit</code>的消息显示在<code>CHANGELOG</code>；并且太麻烦了。这里推荐使用一些第三方的工具或者依赖；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D conventional-changelog conventional-changelog-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后不需要配置任何文件，只需要在项目<code>package.json</code>中添加一行命令即可：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你执行这条命令的时候就会自动生成<code>CHANGELOG.md</code>文件, 如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45o6bf0ut.webp\" alt=\"x\"></p>\n<h2 id=\"自定义格式\"><a href=\"#自定义格式\" class=\"headerlink\" title=\"自定义格式\"></a>自定义格式</h2><p><code>conventional-changelog</code> 默认的格式是 <code>Angular</code> 的，但是也可以自定义格式。</p>\n<p>创建文件<code>scripts/changelog.option.mjs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记得安装对应的依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> compareFunc <span class=\"keyword\">from</span> <span class=\"string\">&quot;compare-func&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; cloneDeep &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;lodash-es&quot;</span>; <span class=\"comment\">// 引入 lodash 库用于深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeMapping = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">feat</span>: <span class=\"string\">&quot;✨ Features | 新功能&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fix</span>: <span class=\"string\">&quot;🐛 Bug Fixes | Bug 修复&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">perf</span>: <span class=\"string\">&quot;⚡ Performance Improvements | 性能优化&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">revert</span>: <span class=\"string\">&quot;⏪ Reverts | 回退&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">docs</span>: <span class=\"string\">&quot;📝 Documentation | 文档&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">style</span>: <span class=\"string\">&quot;💄 Styles | 风格&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">refactor</span>: <span class=\"string\">&quot;♻ Code Refactoring | 代码重构&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"string\">&quot;✅ Tests | 测试&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: <span class=\"string\">&quot;👷‍ Build System | 构建&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">ci</span>: <span class=\"string\">&quot;🔧 Continuous Integration | CI 配置&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">chore</span>: <span class=\"string\">&quot;🎫 Chores | 其他更新&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">writerOpts</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">transform</span>: <span class=\"function\">(<span class=\"params\">commit, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> discard = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> issues = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> _commit = <span class=\"title function_\">cloneDeep</span>(commit); <span class=\"comment\">// 使用 lodash 的深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">notes</span> = _commit.<span class=\"property\">notes</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">note</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (note.<span class=\"property\">title</span> === <span class=\"string\">&quot;BREAKING CHANGES&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tnote.<span class=\"property\">title</span> = <span class=\"string\">&quot;BREAKING CHANGES&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\tdiscard = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> note;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">type</span> = typeMapping[_commit.<span class=\"property\">type</span>] || _commit.<span class=\"property\">type</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_commit.<span class=\"property\">scope</span> === <span class=\"string\">&quot;*&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t_commit.<span class=\"property\">scope</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _commit.<span class=\"property\">hash</span> === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t_commit.<span class=\"property\">shortHash</span> = _commit.<span class=\"property\">hash</span>.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _commit.<span class=\"property\">subject</span> === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> url = context.<span class=\"property\">repository</span></span><br><span class=\"line\">\t\t\t\t\t? <span class=\"string\">`<span class=\"subst\">$&#123;context.host&#125;</span>/<span class=\"subst\">$&#123;context.owner&#125;</span>/<span class=\"subst\">$&#123;context.repository&#125;</span>`</span></span><br><span class=\"line\">\t\t\t\t\t: context.<span class=\"property\">repoUrl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url) &#123;</span><br><span class=\"line\">\t\t\t\t\turl = <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>/issues/`</span>;</span><br><span class=\"line\">\t\t\t\t\t_commit.<span class=\"property\">subject</span> = _commit.<span class=\"property\">subject</span>.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"regexp\">/#([0-9]+)/g</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">(<span class=\"params\">_, issue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tissues.<span class=\"title function_\">push</span>(issue);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`[#<span class=\"subst\">$&#123;issue&#125;</span>](<span class=\"subst\">$&#123;url&#125;</span><span class=\"subst\">$&#123;issue&#125;</span>)`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (context.<span class=\"property\">host</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t_commit.<span class=\"property\">subject</span> = _commit.<span class=\"property\">subject</span>.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"regexp\">/\\B@([a-z0-9](?:-?[a-z0-9/])&#123;0,38&#125;)/g</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">(<span class=\"params\">_, username</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (username.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`@<span class=\"subst\">$&#123;username&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`[@<span class=\"subst\">$&#123;username&#125;</span>](<span class=\"subst\">$&#123;context.host&#125;</span>/<span class=\"subst\">$&#123;username&#125;</span>)`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">references</span> = _commit.<span class=\"property\">references</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">reference</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> issues.<span class=\"title function_\">indexOf</span>(reference.<span class=\"property\">issue</span>) === -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _commit;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">groupBy</span>: <span class=\"string\">&quot;type&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">commitGroupsSort</span>: <span class=\"string\">&quot;title&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">commitsSort</span>: [<span class=\"string\">&quot;scope&quot;</span>, <span class=\"string\">&quot;subject&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"attr\">noteGroupsSort</span>: <span class=\"string\">&quot;title&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">notesSort</span>: compareFunc,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在项目<code>package.json</code>中添加命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0 -n ./scripts/changelog-option.mjs &amp;&amp; git add CHANGELOG.md&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8l02pz4vrj.webp\" alt=\"x\"></p>\n","excerpt":"","more":"<h1 id=\"Changelo-md-是什么\"><a href=\"#Changelo-md-是什么\" class=\"headerlink\" title=\"Changelo.md 是什么\"></a>Changelo.md 是什么</h1><p><code>Changelog.md</code> 是一个用于记录项目变更历史的文件，通常以 <code>Markdown</code> 格式编写。这个文件会详细列出所有版本的更新内容，包括新增功能、修复的 bug、改进的地方以及其他重要变更。这对于开发者和用户来说非常重要，因为它可以帮助他们了解软件的演化过程以及每个版本的具体变化。</p>\n<p>特点：</p>\n<ul>\n<li>版本号明确：每个更新都会带有版本号，便于追踪。</li>\n<li>日期标记：每次更新都附有日期，帮助用户了解变更的时间。</li>\n<li>变更分类：如新增功能、问题修复、性能提升等，让阅读者快速定位关心的信息。</li>\n<li>简洁明了：内容通常直接切入要点，避免冗长描述。</li>\n</ul>\n<h2 id=\"怎么使用？\"><a href=\"#怎么使用？\" class=\"headerlink\" title=\"怎么使用？\"></a>怎么使用？</h2><p>我们使用<code>CHANGELOG</code>不需要手动创建，手动创建需要吧<code>commit</code>的消息显示在<code>CHANGELOG</code>；并且太麻烦了。这里推荐使用一些第三方的工具或者依赖；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D conventional-changelog conventional-changelog-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后不需要配置任何文件，只需要在项目<code>package.json</code>中添加一行命令即可：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你执行这条命令的时候就会自动生成<code>CHANGELOG.md</code>文件, 如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.45o6bf0ut.webp\" alt=\"x\"></p>\n<h2 id=\"自定义格式\"><a href=\"#自定义格式\" class=\"headerlink\" title=\"自定义格式\"></a>自定义格式</h2><p><code>conventional-changelog</code> 默认的格式是 <code>Angular</code> 的，但是也可以自定义格式。</p>\n<p>创建文件<code>scripts/changelog.option.mjs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记得安装对应的依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> compareFunc <span class=\"keyword\">from</span> <span class=\"string\">&quot;compare-func&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; cloneDeep &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;lodash-es&quot;</span>; <span class=\"comment\">// 引入 lodash 库用于深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeMapping = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">feat</span>: <span class=\"string\">&quot;✨ Features | 新功能&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fix</span>: <span class=\"string\">&quot;🐛 Bug Fixes | Bug 修复&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">perf</span>: <span class=\"string\">&quot;⚡ Performance Improvements | 性能优化&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">revert</span>: <span class=\"string\">&quot;⏪ Reverts | 回退&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">docs</span>: <span class=\"string\">&quot;📝 Documentation | 文档&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">style</span>: <span class=\"string\">&quot;💄 Styles | 风格&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">refactor</span>: <span class=\"string\">&quot;♻ Code Refactoring | 代码重构&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">test</span>: <span class=\"string\">&quot;✅ Tests | 测试&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">build</span>: <span class=\"string\">&quot;👷‍ Build System | 构建&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">ci</span>: <span class=\"string\">&quot;🔧 Continuous Integration | CI 配置&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">chore</span>: <span class=\"string\">&quot;🎫 Chores | 其他更新&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">writerOpts</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">transform</span>: <span class=\"function\">(<span class=\"params\">commit, context</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> discard = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> issues = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> _commit = <span class=\"title function_\">cloneDeep</span>(commit); <span class=\"comment\">// 使用 lodash 的深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">notes</span> = _commit.<span class=\"property\">notes</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">note</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (note.<span class=\"property\">title</span> === <span class=\"string\">&quot;BREAKING CHANGES&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tnote.<span class=\"property\">title</span> = <span class=\"string\">&quot;BREAKING CHANGES&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\tdiscard = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> note;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">type</span> = typeMapping[_commit.<span class=\"property\">type</span>] || _commit.<span class=\"property\">type</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (_commit.<span class=\"property\">scope</span> === <span class=\"string\">&quot;*&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t_commit.<span class=\"property\">scope</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _commit.<span class=\"property\">hash</span> === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t_commit.<span class=\"property\">shortHash</span> = _commit.<span class=\"property\">hash</span>.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> _commit.<span class=\"property\">subject</span> === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> url = context.<span class=\"property\">repository</span></span><br><span class=\"line\">\t\t\t\t\t? <span class=\"string\">`<span class=\"subst\">$&#123;context.host&#125;</span>/<span class=\"subst\">$&#123;context.owner&#125;</span>/<span class=\"subst\">$&#123;context.repository&#125;</span>`</span></span><br><span class=\"line\">\t\t\t\t\t: context.<span class=\"property\">repoUrl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url) &#123;</span><br><span class=\"line\">\t\t\t\t\turl = <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>/issues/`</span>;</span><br><span class=\"line\">\t\t\t\t\t_commit.<span class=\"property\">subject</span> = _commit.<span class=\"property\">subject</span>.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"regexp\">/#([0-9]+)/g</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">(<span class=\"params\">_, issue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tissues.<span class=\"title function_\">push</span>(issue);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`[#<span class=\"subst\">$&#123;issue&#125;</span>](<span class=\"subst\">$&#123;url&#125;</span><span class=\"subst\">$&#123;issue&#125;</span>)`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (context.<span class=\"property\">host</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t_commit.<span class=\"property\">subject</span> = _commit.<span class=\"property\">subject</span>.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"regexp\">/\\B@([a-z0-9](?:-?[a-z0-9/])&#123;0,38&#125;)/g</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"function\">(<span class=\"params\">_, username</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (username.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`@<span class=\"subst\">$&#123;username&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`[@<span class=\"subst\">$&#123;username&#125;</span>](<span class=\"subst\">$&#123;context.host&#125;</span>/<span class=\"subst\">$&#123;username&#125;</span>)`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_commit.<span class=\"property\">references</span> = _commit.<span class=\"property\">references</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">reference</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> issues.<span class=\"title function_\">indexOf</span>(reference.<span class=\"property\">issue</span>) === -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _commit;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">groupBy</span>: <span class=\"string\">&quot;type&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">commitGroupsSort</span>: <span class=\"string\">&quot;title&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">commitsSort</span>: [<span class=\"string\">&quot;scope&quot;</span>, <span class=\"string\">&quot;subject&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"attr\">noteGroupsSort</span>: <span class=\"string\">&quot;title&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">notesSort</span>: compareFunc,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在项目<code>package.json</code>中添加命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0 -n ./scripts/changelog-option.mjs &amp;&amp; git add CHANGELOG.md&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/image.8l02pz4vrj.webp\" alt=\"x\"></p>\n"},{"title":"项目工程化-EditorConfig","abbrlink":"a37da6aa","date":"2024-08-08T01:05:01.000Z","_content":"\n# Editor Config\n\n什么是[EditorConfig](https://editorconfig.org/)\n\nEditorConfig 有助于为在不同编辑器和 IDE 中处理同一项目的多个开发人员维护一致的编码风格\n\nEditorConfig 项目由一个用于定义编码样式的文件格式和一组文本编辑器插件组成，这些插件使编辑器能够读取文件格式并遵守定义的样式\n\nEditorConfig 文件很容易阅读，并且可以很好地与版本控制系统配合使用\n\n\n## EditorConfig 文件是什么样子的\n\n```bash\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n```\n\n## 属性配置\n\n[文档](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties)\n\n### indent_style\n\n缩进样式; 这些值不区分大小写。核心库将它们转换为小写。\n可以选择：\n\n- `tab`\n- `space`\n\n### indent_size\n\n缩进大小（以单间距字符为单位） 这些值不区分大小写。它们将被核心库降为小写\n可以选择：\n\n- `tab`\n- `整数`\n\n如果 indent_size 等于 tab，则 indent_size 将设置为 tab 大小。如果指定了 tab_width，则应为 tab_width；如果未指定 tab_width，则应设置为编辑器设置的 tab 大小\n\n### tab_width\n\n单个制表符的宽度\n可以选择：\n\n- 正整数（当 indent_size 是一个数字时，默认为 indent_size）\n\n### end_of_line\n\n行尾文件格式（Unix、DOS、Mac）\n\n这些值不区分大小写。它们将被核心库降为小写\n\n注意：如果您想在不同的操作系统之间使用行结尾，最好不要设置此选项，而是将该任务留给 VCS！在未来，我们可能会为这种情况添加像 native 这样的值[（cf #226）](https://github.com/editorconfig/editorconfig/issues/226)\n\n可能的值\n\n- `lf`\n- `crlf`\n- `cr`\n\n### charset\n\n文件字符编码（请参阅字符集支持）\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `latin1`\n- `utf-8`\n- `utf-16be`\n- `utf-16le`\n- `utf-8-bom`\n\n### trim_trailing_whitespace\n\n表示是否从行尾删除空白\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `true`：删除换行符之前的任何空白字符\n- `false`：确保编辑器保留空白字符\n\n### insert_final_newline\n\n表示文件是否应以换行结束\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `true`\n- `false`\n\n### max_line_length\n\n在指定的字符数之后强制换行。off 可关闭此功能（使用编辑器设置）\n\n可能的值\n\n- `正整数`\n- `off`\n\n## vscode 插件\n\n[EditorConfig for VS Code](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)\n\n此插件尝试使用文件中找到的设置覆盖用户/工作区设置`.editorconfig`。无需其他文件或特定于 `vscode` 的文件。与任何 `EditorConfig` 插件一样，如果` root=true` `未指定，EditorConfig` 将继续.`editorconfig` 在项目外寻找文件 .\n\n## 优先级问题\n\n项目中，我们会经常安装`eslint + stylelint + prettier`去规范项目开发，但是在`prettier`中的配置和`editorconfig`中一些配置是相同的，那么问题来了？项目中都有这些配置，优先级问题如何选择？\n\n配置文件优先级：`.editorconfig > settings.json (Workspace工作区) > settings.json (User全局) > .eslintrc 和 .prettierrc`\n","source":"_posts/技能小册/项目管理/工程化/editorConfig.md","raw":"---\ntitle: 项目工程化-EditorConfig\nabbrlink: a37da6aa\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# Editor Config\n\n什么是[EditorConfig](https://editorconfig.org/)\n\nEditorConfig 有助于为在不同编辑器和 IDE 中处理同一项目的多个开发人员维护一致的编码风格\n\nEditorConfig 项目由一个用于定义编码样式的文件格式和一组文本编辑器插件组成，这些插件使编辑器能够读取文件格式并遵守定义的样式\n\nEditorConfig 文件很容易阅读，并且可以很好地与版本控制系统配合使用\n\n\n## EditorConfig 文件是什么样子的\n\n```bash\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n```\n\n## 属性配置\n\n[文档](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties)\n\n### indent_style\n\n缩进样式; 这些值不区分大小写。核心库将它们转换为小写。\n可以选择：\n\n- `tab`\n- `space`\n\n### indent_size\n\n缩进大小（以单间距字符为单位） 这些值不区分大小写。它们将被核心库降为小写\n可以选择：\n\n- `tab`\n- `整数`\n\n如果 indent_size 等于 tab，则 indent_size 将设置为 tab 大小。如果指定了 tab_width，则应为 tab_width；如果未指定 tab_width，则应设置为编辑器设置的 tab 大小\n\n### tab_width\n\n单个制表符的宽度\n可以选择：\n\n- 正整数（当 indent_size 是一个数字时，默认为 indent_size）\n\n### end_of_line\n\n行尾文件格式（Unix、DOS、Mac）\n\n这些值不区分大小写。它们将被核心库降为小写\n\n注意：如果您想在不同的操作系统之间使用行结尾，最好不要设置此选项，而是将该任务留给 VCS！在未来，我们可能会为这种情况添加像 native 这样的值[（cf #226）](https://github.com/editorconfig/editorconfig/issues/226)\n\n可能的值\n\n- `lf`\n- `crlf`\n- `cr`\n\n### charset\n\n文件字符编码（请参阅字符集支持）\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `latin1`\n- `utf-8`\n- `utf-16be`\n- `utf-16le`\n- `utf-8-bom`\n\n### trim_trailing_whitespace\n\n表示是否从行尾删除空白\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `true`：删除换行符之前的任何空白字符\n- `false`：确保编辑器保留空白字符\n\n### insert_final_newline\n\n表示文件是否应以换行结束\n\n这些值不区分大小写。它们将被核心库降为小写\n\n可能的值\n\n- `true`\n- `false`\n\n### max_line_length\n\n在指定的字符数之后强制换行。off 可关闭此功能（使用编辑器设置）\n\n可能的值\n\n- `正整数`\n- `off`\n\n## vscode 插件\n\n[EditorConfig for VS Code](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)\n\n此插件尝试使用文件中找到的设置覆盖用户/工作区设置`.editorconfig`。无需其他文件或特定于 `vscode` 的文件。与任何 `EditorConfig` 插件一样，如果` root=true` `未指定，EditorConfig` 将继续.`editorconfig` 在项目外寻找文件 .\n\n## 优先级问题\n\n项目中，我们会经常安装`eslint + stylelint + prettier`去规范项目开发，但是在`prettier`中的配置和`editorconfig`中一些配置是相同的，那么问题来了？项目中都有这些配置，优先级问题如何选择？\n\n配置文件优先级：`.editorconfig > settings.json (Workspace工作区) > settings.json (User全局) > .eslintrc 和 .prettierrc`\n","slug":"技能小册/项目管理/工程化/editorConfig","published":1,"updated":"2025-03-12T09:38:20.979Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j8006zfg9mh61fbuh4","content":"<h1 id=\"Editor-Config\"><a href=\"#Editor-Config\" class=\"headerlink\" title=\"Editor Config\"></a>Editor Config</h1><p>什么是<a href=\"https://editorconfig.org/\">EditorConfig</a></p>\n<p>EditorConfig 有助于为在不同编辑器和 IDE 中处理同一项目的多个开发人员维护一致的编码风格</p>\n<p>EditorConfig 项目由一个用于定义编码样式的文件格式和一组文本编辑器插件组成，这些插件使编辑器能够读取文件格式并遵守定义的样式</p>\n<p>EditorConfig 文件很容易阅读，并且可以很好地与版本控制系统配合使用</p>\n<h2 id=\"EditorConfig-文件是什么样子的\"><a href=\"#EditorConfig-文件是什么样子的\" class=\"headerlink\" title=\"EditorConfig 文件是什么样子的\"></a>EditorConfig 文件是什么样子的</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">insert_final_newline = <span class=\"literal\">true</span></span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性配置\"><a href=\"#属性配置\" class=\"headerlink\" title=\"属性配置\"></a>属性配置</h2><p><a href=\"https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\">文档</a></p>\n<h3 id=\"indent-style\"><a href=\"#indent-style\" class=\"headerlink\" title=\"indent_style\"></a>indent_style</h3><p>缩进样式; 这些值不区分大小写。核心库将它们转换为小写。<br>可以选择：</p>\n<ul>\n<li><code>tab</code></li>\n<li><code>space</code></li>\n</ul>\n<h3 id=\"indent-size\"><a href=\"#indent-size\" class=\"headerlink\" title=\"indent_size\"></a>indent_size</h3><p>缩进大小（以单间距字符为单位） 这些值不区分大小写。它们将被核心库降为小写<br>可以选择：</p>\n<ul>\n<li><code>tab</code></li>\n<li><code>整数</code></li>\n</ul>\n<p>如果 indent_size 等于 tab，则 indent_size 将设置为 tab 大小。如果指定了 tab_width，则应为 tab_width；如果未指定 tab_width，则应设置为编辑器设置的 tab 大小</p>\n<h3 id=\"tab-width\"><a href=\"#tab-width\" class=\"headerlink\" title=\"tab_width\"></a>tab_width</h3><p>单个制表符的宽度<br>可以选择：</p>\n<ul>\n<li>正整数（当 indent_size 是一个数字时，默认为 indent_size）</li>\n</ul>\n<h3 id=\"end-of-line\"><a href=\"#end-of-line\" class=\"headerlink\" title=\"end_of_line\"></a>end_of_line</h3><p>行尾文件格式（Unix、DOS、Mac）</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>注意：如果您想在不同的操作系统之间使用行结尾，最好不要设置此选项，而是将该任务留给 VCS！在未来，我们可能会为这种情况添加像 native 这样的值<a href=\"https://github.com/editorconfig/editorconfig/issues/226\">（cf #226）</a></p>\n<p>可能的值</p>\n<ul>\n<li><code>lf</code></li>\n<li><code>crlf</code></li>\n<li><code>cr</code></li>\n</ul>\n<h3 id=\"charset\"><a href=\"#charset\" class=\"headerlink\" title=\"charset\"></a>charset</h3><p>文件字符编码（请参阅字符集支持）</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>latin1</code></li>\n<li><code>utf-8</code></li>\n<li><code>utf-16be</code></li>\n<li><code>utf-16le</code></li>\n<li><code>utf-8-bom</code></li>\n</ul>\n<h3 id=\"trim-trailing-whitespace\"><a href=\"#trim-trailing-whitespace\" class=\"headerlink\" title=\"trim_trailing_whitespace\"></a>trim_trailing_whitespace</h3><p>表示是否从行尾删除空白</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>true</code>：删除换行符之前的任何空白字符</li>\n<li><code>false</code>：确保编辑器保留空白字符</li>\n</ul>\n<h3 id=\"insert-final-newline\"><a href=\"#insert-final-newline\" class=\"headerlink\" title=\"insert_final_newline\"></a>insert_final_newline</h3><p>表示文件是否应以换行结束</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>true</code></li>\n<li><code>false</code></li>\n</ul>\n<h3 id=\"max-line-length\"><a href=\"#max-line-length\" class=\"headerlink\" title=\"max_line_length\"></a>max_line_length</h3><p>在指定的字符数之后强制换行。off 可关闭此功能（使用编辑器设置）</p>\n<p>可能的值</p>\n<ul>\n<li><code>正整数</code></li>\n<li><code>off</code></li>\n</ul>\n<h2 id=\"vscode-插件\"><a href=\"#vscode-插件\" class=\"headerlink\" title=\"vscode 插件\"></a>vscode 插件</h2><p><a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\">EditorConfig for VS Code</a></p>\n<p>此插件尝试使用文件中找到的设置覆盖用户&#x2F;工作区设置<code>.editorconfig</code>。无需其他文件或特定于 <code>vscode</code> 的文件。与任何 <code>EditorConfig</code> 插件一样，如果<code> root=true</code> <code>未指定，EditorConfig</code> 将继续.<code>editorconfig</code> 在项目外寻找文件 .</p>\n<h2 id=\"优先级问题\"><a href=\"#优先级问题\" class=\"headerlink\" title=\"优先级问题\"></a>优先级问题</h2><p>项目中，我们会经常安装<code>eslint + stylelint + prettier</code>去规范项目开发，但是在<code>prettier</code>中的配置和<code>editorconfig</code>中一些配置是相同的，那么问题来了？项目中都有这些配置，优先级问题如何选择？</p>\n<p>配置文件优先级：<code>.editorconfig &gt; settings.json (Workspace工作区) &gt; settings.json (User全局) &gt; .eslintrc 和 .prettierrc</code></p>\n","excerpt":"","more":"<h1 id=\"Editor-Config\"><a href=\"#Editor-Config\" class=\"headerlink\" title=\"Editor Config\"></a>Editor Config</h1><p>什么是<a href=\"https://editorconfig.org/\">EditorConfig</a></p>\n<p>EditorConfig 有助于为在不同编辑器和 IDE 中处理同一项目的多个开发人员维护一致的编码风格</p>\n<p>EditorConfig 项目由一个用于定义编码样式的文件格式和一组文本编辑器插件组成，这些插件使编辑器能够读取文件格式并遵守定义的样式</p>\n<p>EditorConfig 文件很容易阅读，并且可以很好地与版本控制系统配合使用</p>\n<h2 id=\"EditorConfig-文件是什么样子的\"><a href=\"#EditorConfig-文件是什么样子的\" class=\"headerlink\" title=\"EditorConfig 文件是什么样子的\"></a>EditorConfig 文件是什么样子的</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">insert_final_newline = <span class=\"literal\">true</span></span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性配置\"><a href=\"#属性配置\" class=\"headerlink\" title=\"属性配置\"></a>属性配置</h2><p><a href=\"https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\">文档</a></p>\n<h3 id=\"indent-style\"><a href=\"#indent-style\" class=\"headerlink\" title=\"indent_style\"></a>indent_style</h3><p>缩进样式; 这些值不区分大小写。核心库将它们转换为小写。<br>可以选择：</p>\n<ul>\n<li><code>tab</code></li>\n<li><code>space</code></li>\n</ul>\n<h3 id=\"indent-size\"><a href=\"#indent-size\" class=\"headerlink\" title=\"indent_size\"></a>indent_size</h3><p>缩进大小（以单间距字符为单位） 这些值不区分大小写。它们将被核心库降为小写<br>可以选择：</p>\n<ul>\n<li><code>tab</code></li>\n<li><code>整数</code></li>\n</ul>\n<p>如果 indent_size 等于 tab，则 indent_size 将设置为 tab 大小。如果指定了 tab_width，则应为 tab_width；如果未指定 tab_width，则应设置为编辑器设置的 tab 大小</p>\n<h3 id=\"tab-width\"><a href=\"#tab-width\" class=\"headerlink\" title=\"tab_width\"></a>tab_width</h3><p>单个制表符的宽度<br>可以选择：</p>\n<ul>\n<li>正整数（当 indent_size 是一个数字时，默认为 indent_size）</li>\n</ul>\n<h3 id=\"end-of-line\"><a href=\"#end-of-line\" class=\"headerlink\" title=\"end_of_line\"></a>end_of_line</h3><p>行尾文件格式（Unix、DOS、Mac）</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>注意：如果您想在不同的操作系统之间使用行结尾，最好不要设置此选项，而是将该任务留给 VCS！在未来，我们可能会为这种情况添加像 native 这样的值<a href=\"https://github.com/editorconfig/editorconfig/issues/226\">（cf #226）</a></p>\n<p>可能的值</p>\n<ul>\n<li><code>lf</code></li>\n<li><code>crlf</code></li>\n<li><code>cr</code></li>\n</ul>\n<h3 id=\"charset\"><a href=\"#charset\" class=\"headerlink\" title=\"charset\"></a>charset</h3><p>文件字符编码（请参阅字符集支持）</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>latin1</code></li>\n<li><code>utf-8</code></li>\n<li><code>utf-16be</code></li>\n<li><code>utf-16le</code></li>\n<li><code>utf-8-bom</code></li>\n</ul>\n<h3 id=\"trim-trailing-whitespace\"><a href=\"#trim-trailing-whitespace\" class=\"headerlink\" title=\"trim_trailing_whitespace\"></a>trim_trailing_whitespace</h3><p>表示是否从行尾删除空白</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>true</code>：删除换行符之前的任何空白字符</li>\n<li><code>false</code>：确保编辑器保留空白字符</li>\n</ul>\n<h3 id=\"insert-final-newline\"><a href=\"#insert-final-newline\" class=\"headerlink\" title=\"insert_final_newline\"></a>insert_final_newline</h3><p>表示文件是否应以换行结束</p>\n<p>这些值不区分大小写。它们将被核心库降为小写</p>\n<p>可能的值</p>\n<ul>\n<li><code>true</code></li>\n<li><code>false</code></li>\n</ul>\n<h3 id=\"max-line-length\"><a href=\"#max-line-length\" class=\"headerlink\" title=\"max_line_length\"></a>max_line_length</h3><p>在指定的字符数之后强制换行。off 可关闭此功能（使用编辑器设置）</p>\n<p>可能的值</p>\n<ul>\n<li><code>正整数</code></li>\n<li><code>off</code></li>\n</ul>\n<h2 id=\"vscode-插件\"><a href=\"#vscode-插件\" class=\"headerlink\" title=\"vscode 插件\"></a>vscode 插件</h2><p><a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\">EditorConfig for VS Code</a></p>\n<p>此插件尝试使用文件中找到的设置覆盖用户&#x2F;工作区设置<code>.editorconfig</code>。无需其他文件或特定于 <code>vscode</code> 的文件。与任何 <code>EditorConfig</code> 插件一样，如果<code> root=true</code> <code>未指定，EditorConfig</code> 将继续.<code>editorconfig</code> 在项目外寻找文件 .</p>\n<h2 id=\"优先级问题\"><a href=\"#优先级问题\" class=\"headerlink\" title=\"优先级问题\"></a>优先级问题</h2><p>项目中，我们会经常安装<code>eslint + stylelint + prettier</code>去规范项目开发，但是在<code>prettier</code>中的配置和<code>editorconfig</code>中一些配置是相同的，那么问题来了？项目中都有这些配置，优先级问题如何选择？</p>\n<p>配置文件优先级：<code>.editorconfig &gt; settings.json (Workspace工作区) &gt; settings.json (User全局) &gt; .eslintrc 和 .prettierrc</code></p>\n"},{"title":"项目工程化-git配置","abbrlink":"925e341a","date":"2024-08-08T01:05:01.000Z","_content":"\n\n`.gitignore` 和 `.gitattributes`都是为`git`提交需要配置的一些信息，例如某些文件不需要提交，提交的格式是什么等等;\n\n- `.gitignore`: 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 `Git` 应该忽略和不追踪的。 在 `.gitignore` 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 `Git` 只忽略一个文件或一个文件夹。 你也可以用同样的方法告诉 `Git` 忽略多个文件或文件夹。\n\n- `.gitattributes`: 文件是一个用来配置 `Git` 版本控制系统的文件，文件允许你对 `Git` 中的文件和操作进行更精细的控制和配置，以适应项目的特定需求和工作流程。这可以提高代码管理的灵活性和效率。[详细说明](https://www.cnblogs.com/huangtq/p/17745759.html)\n\n\n\n## 文件是什么样子的?\n\n### .gitignore\n\n```bash\n# .gitignore\n# Local\n.DS_Store\n*.local\n*.log*\n\n# Dist\nnode_modules\ndist/\n\n# IDE\n.vscode/*\n!.vscode/extensions.json\n.idea\n```\n\n### .gitattributes\n\n在不同的设备上拉取对应的`git`显示的行为序列都为`lf`，这样在`windows, macos`上的代码就不会爆红(`prettier报错`)\n\n```bash\n*.html text eol=lf\n*.css text eol=lf\n*.js text eol=lf\n*.ts text eol=lf\n*.scss text eol=lf\n*.vue text eol=lf\n*.hbs text eol=lf\n*.sh text eol=lf\n*.md text eol=lf\n*.json text eol=lf\n*.yml text eol=lf\n.browserslistrc text eol=lf\n.editorconfig text eol=lf\n.eslintignore text eol=lf\n.gitattributes text eol=lf\nLICENSE text eol=lf\n*.conf  text eol=lf\n```\n","source":"_posts/技能小册/项目管理/工程化/git配置.md","raw":"---\ntitle: 项目工程化-git配置\nabbrlink: 925e341a\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n\n`.gitignore` 和 `.gitattributes`都是为`git`提交需要配置的一些信息，例如某些文件不需要提交，提交的格式是什么等等;\n\n- `.gitignore`: 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 `Git` 应该忽略和不追踪的。 在 `.gitignore` 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 `Git` 只忽略一个文件或一个文件夹。 你也可以用同样的方法告诉 `Git` 忽略多个文件或文件夹。\n\n- `.gitattributes`: 文件是一个用来配置 `Git` 版本控制系统的文件，文件允许你对 `Git` 中的文件和操作进行更精细的控制和配置，以适应项目的特定需求和工作流程。这可以提高代码管理的灵活性和效率。[详细说明](https://www.cnblogs.com/huangtq/p/17745759.html)\n\n\n\n## 文件是什么样子的?\n\n### .gitignore\n\n```bash\n# .gitignore\n# Local\n.DS_Store\n*.local\n*.log*\n\n# Dist\nnode_modules\ndist/\n\n# IDE\n.vscode/*\n!.vscode/extensions.json\n.idea\n```\n\n### .gitattributes\n\n在不同的设备上拉取对应的`git`显示的行为序列都为`lf`，这样在`windows, macos`上的代码就不会爆红(`prettier报错`)\n\n```bash\n*.html text eol=lf\n*.css text eol=lf\n*.js text eol=lf\n*.ts text eol=lf\n*.scss text eol=lf\n*.vue text eol=lf\n*.hbs text eol=lf\n*.sh text eol=lf\n*.md text eol=lf\n*.json text eol=lf\n*.yml text eol=lf\n.browserslistrc text eol=lf\n.editorconfig text eol=lf\n.eslintignore text eol=lf\n.gitattributes text eol=lf\nLICENSE text eol=lf\n*.conf  text eol=lf\n```\n","slug":"技能小册/项目管理/工程化/git配置","published":1,"updated":"2025-03-12T09:38:12.692Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j80073fg9ma3rsg448","content":"<p><code>.gitignore</code> 和 <code>.gitattributes</code>都是为<code>git</code>提交需要配置的一些信息，例如某些文件不需要提交，提交的格式是什么等等;</p>\n<ul>\n<li><p><code>.gitignore</code>: 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 <code>Git</code> 应该忽略和不追踪的。 在 <code>.gitignore</code> 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 <code>Git</code> 只忽略一个文件或一个文件夹。 你也可以用同样的方法告诉 <code>Git</code> 忽略多个文件或文件夹。</p>\n</li>\n<li><p><code>.gitattributes</code>: 文件是一个用来配置 <code>Git</code> 版本控制系统的文件，文件允许你对 <code>Git</code> 中的文件和操作进行更精细的控制和配置，以适应项目的特定需求和工作流程。这可以提高代码管理的灵活性和效率。<a href=\"https://www.cnblogs.com/huangtq/p/17745759.html\">详细说明</a></p>\n</li>\n</ul>\n<h2 id=\"文件是什么样子的\"><a href=\"#文件是什么样子的\" class=\"headerlink\" title=\"文件是什么样子的?\"></a>文件是什么样子的?</h2><h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitignore</span></span><br><span class=\"line\"><span class=\"comment\"># Local</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">*.<span class=\"built_in\">local</span></span><br><span class=\"line\">*.<span class=\"built_in\">log</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dist</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\">dist/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IDE</span></span><br><span class=\"line\">.vscode/*</span><br><span class=\"line\">!.vscode/extensions.json</span><br><span class=\"line\">.idea</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gitattributes\"><a href=\"#gitattributes\" class=\"headerlink\" title=\".gitattributes\"></a>.gitattributes</h3><p>在不同的设备上拉取对应的<code>git</code>显示的行为序列都为<code>lf</code>，这样在<code>windows, macos</code>上的代码就不会爆红(<code>prettier报错</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.html text eol=lf</span><br><span class=\"line\">*.css text eol=lf</span><br><span class=\"line\">*.js text eol=lf</span><br><span class=\"line\">*.ts text eol=lf</span><br><span class=\"line\">*.scss text eol=lf</span><br><span class=\"line\">*.vue text eol=lf</span><br><span class=\"line\">*.hbs text eol=lf</span><br><span class=\"line\">*.sh text eol=lf</span><br><span class=\"line\">*.md text eol=lf</span><br><span class=\"line\">*.json text eol=lf</span><br><span class=\"line\">*.yml text eol=lf</span><br><span class=\"line\">.browserslistrc text eol=lf</span><br><span class=\"line\">.editorconfig text eol=lf</span><br><span class=\"line\">.eslintignore text eol=lf</span><br><span class=\"line\">.gitattributes text eol=lf</span><br><span class=\"line\">LICENSE text eol=lf</span><br><span class=\"line\">*.conf  text eol=lf</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><code>.gitignore</code> 和 <code>.gitattributes</code>都是为<code>git</code>提交需要配置的一些信息，例如某些文件不需要提交，提交的格式是什么等等;</p>\n<ul>\n<li><p><code>.gitignore</code>: 文件是一个纯文本文件，包含了项目中所有指定的文件和文件夹的列表，这些文件和文件夹是 <code>Git</code> 应该忽略和不追踪的。 在 <code>.gitignore</code> 中，你可以通过提及特定文件或文件夹的名称或模式来告诉 <code>Git</code> 只忽略一个文件或一个文件夹。 你也可以用同样的方法告诉 <code>Git</code> 忽略多个文件或文件夹。</p>\n</li>\n<li><p><code>.gitattributes</code>: 文件是一个用来配置 <code>Git</code> 版本控制系统的文件，文件允许你对 <code>Git</code> 中的文件和操作进行更精细的控制和配置，以适应项目的特定需求和工作流程。这可以提高代码管理的灵活性和效率。<a href=\"https://www.cnblogs.com/huangtq/p/17745759.html\">详细说明</a></p>\n</li>\n</ul>\n<h2 id=\"文件是什么样子的\"><a href=\"#文件是什么样子的\" class=\"headerlink\" title=\"文件是什么样子的?\"></a>文件是什么样子的?</h2><h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .gitignore</span></span><br><span class=\"line\"><span class=\"comment\"># Local</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\">*.<span class=\"built_in\">local</span></span><br><span class=\"line\">*.<span class=\"built_in\">log</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dist</span></span><br><span class=\"line\">node_modules</span><br><span class=\"line\">dist/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IDE</span></span><br><span class=\"line\">.vscode/*</span><br><span class=\"line\">!.vscode/extensions.json</span><br><span class=\"line\">.idea</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gitattributes\"><a href=\"#gitattributes\" class=\"headerlink\" title=\".gitattributes\"></a>.gitattributes</h3><p>在不同的设备上拉取对应的<code>git</code>显示的行为序列都为<code>lf</code>，这样在<code>windows, macos</code>上的代码就不会爆红(<code>prettier报错</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.html text eol=lf</span><br><span class=\"line\">*.css text eol=lf</span><br><span class=\"line\">*.js text eol=lf</span><br><span class=\"line\">*.ts text eol=lf</span><br><span class=\"line\">*.scss text eol=lf</span><br><span class=\"line\">*.vue text eol=lf</span><br><span class=\"line\">*.hbs text eol=lf</span><br><span class=\"line\">*.sh text eol=lf</span><br><span class=\"line\">*.md text eol=lf</span><br><span class=\"line\">*.json text eol=lf</span><br><span class=\"line\">*.yml text eol=lf</span><br><span class=\"line\">.browserslistrc text eol=lf</span><br><span class=\"line\">.editorconfig text eol=lf</span><br><span class=\"line\">.eslintignore text eol=lf</span><br><span class=\"line\">.gitattributes text eol=lf</span><br><span class=\"line\">LICENSE text eol=lf</span><br><span class=\"line\">*.conf  text eol=lf</span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-env配置","abbrlink":"21f204ac","date":"2024-08-08T01:05:01.000Z","_content":"\n# Env\n\n\n\n`env`代表`环境`，不论是在前端还是后端开发，都有不同的环境，每个环境对应的一些配置都是不同的，例如：请求的地址，一些加密的字符等等；\n\n通常在`node`中会获取环境变量`process.env.NODE_ENV`等等；\n\n这样的一个好处就是：在前端项目本地开发对应本地的配置环境，而打包对应着生产环境，俩个环境独立且分开，不会造成其中的冲突。\n\n\n## 文件是什么样子？\n\n```bash\n# vite 中使用需要带有VITE_APP前缀\nVITE_APP_BASE_URL = '/'\n\n# webpack 中使用。需要带有VUE_APP前缀\nVUE_APP_BASE_URL = ''\n\n# rsbuid中使用 分为俩种情况：\n#一种是rsbuild.config.ts读取，\n#一种是客户端读取,vue文件中可以读取\n# rsbuild,config.ts读取, 没有前缀，可以自定义\nAPP_MODE='dev'\nAPP_NAME='app'\n\n# 客户端读取，需要加PUBLIC前缀，例如：\nPUBLIC_API_URL='/'\n```\n\n## 配置说明\n\n通常项目中会配置多个环境文件，\n\n```bash\n# 每个环境都会加载\n.env\n# 生产环境\n.env.production\n# 预备发布环境\n.env.preview\n# 测试环境\n.env.test\n# 开发环境\n.env.development\n```\n\n现在有个问题，不清楚使用的是哪个环境，那么就需要你在`package.json`中使用了\n\n## 命令配置\n\n以下命令说明:\n\n- `build:release`: 生产环境\n- `build:pre`: 预发布环境\n- `build:test`: 测试环境\n- `build:dev`: 开发环境\n\n### vite\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"vite build\",\n\t\t\"build:pre\": \"vite build --mode preview\",\n\t\t\"build:test\": \"vite build --mode test\",\n\t\t\"build:dev\": \"vite build --mode development\"\n\t}\n}\n```\n\n### webpack\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"vue-cli-service build\",\n\t\t\"build:pre\": \"vue-cli-service build --mode preview\",\n\t\t\"build:test\": \"vue-cli-servic build --mode test\",\n\t\t\"build:dev\": \"vue-cli-servic build --mode development\"\n\t}\n}\n```\n\n### node\n\n这里我拿`nest`举例， 需要安装`cross-env`：\n\n```sh\npnpm add -D cross-env\n```\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"nest build\",\n\t\t\"build:pre\": \"cross-env NODE_ENV=preview nest build\",\n\t\t\"build:test\": \"cross-env NODE_ENV=test nest build\",\n\t\t\"build:dev\": \"cross-env NODE_ENV=development nest build\"\n\t}\n}\n```\n\n### rsbuild\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"rsbuild build\",\n\t\t\"build:pre\": \"rsbuild build --env-mode preview\",\n\t\t\"build:test\": \"rsbuild build --env-mode test\",\n\t\t\"build:dev\": \"rsbuild build --env-mode development\"\n\t}\n}\n```\n","source":"_posts/技能小册/项目管理/工程化/env配置.md","raw":"---\ntitle: 项目工程化-env配置\nabbrlink: 21f204ac\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# Env\n\n\n\n`env`代表`环境`，不论是在前端还是后端开发，都有不同的环境，每个环境对应的一些配置都是不同的，例如：请求的地址，一些加密的字符等等；\n\n通常在`node`中会获取环境变量`process.env.NODE_ENV`等等；\n\n这样的一个好处就是：在前端项目本地开发对应本地的配置环境，而打包对应着生产环境，俩个环境独立且分开，不会造成其中的冲突。\n\n\n## 文件是什么样子？\n\n```bash\n# vite 中使用需要带有VITE_APP前缀\nVITE_APP_BASE_URL = '/'\n\n# webpack 中使用。需要带有VUE_APP前缀\nVUE_APP_BASE_URL = ''\n\n# rsbuid中使用 分为俩种情况：\n#一种是rsbuild.config.ts读取，\n#一种是客户端读取,vue文件中可以读取\n# rsbuild,config.ts读取, 没有前缀，可以自定义\nAPP_MODE='dev'\nAPP_NAME='app'\n\n# 客户端读取，需要加PUBLIC前缀，例如：\nPUBLIC_API_URL='/'\n```\n\n## 配置说明\n\n通常项目中会配置多个环境文件，\n\n```bash\n# 每个环境都会加载\n.env\n# 生产环境\n.env.production\n# 预备发布环境\n.env.preview\n# 测试环境\n.env.test\n# 开发环境\n.env.development\n```\n\n现在有个问题，不清楚使用的是哪个环境，那么就需要你在`package.json`中使用了\n\n## 命令配置\n\n以下命令说明:\n\n- `build:release`: 生产环境\n- `build:pre`: 预发布环境\n- `build:test`: 测试环境\n- `build:dev`: 开发环境\n\n### vite\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"vite build\",\n\t\t\"build:pre\": \"vite build --mode preview\",\n\t\t\"build:test\": \"vite build --mode test\",\n\t\t\"build:dev\": \"vite build --mode development\"\n\t}\n}\n```\n\n### webpack\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"vue-cli-service build\",\n\t\t\"build:pre\": \"vue-cli-service build --mode preview\",\n\t\t\"build:test\": \"vue-cli-servic build --mode test\",\n\t\t\"build:dev\": \"vue-cli-servic build --mode development\"\n\t}\n}\n```\n\n### node\n\n这里我拿`nest`举例， 需要安装`cross-env`：\n\n```sh\npnpm add -D cross-env\n```\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"nest build\",\n\t\t\"build:pre\": \"cross-env NODE_ENV=preview nest build\",\n\t\t\"build:test\": \"cross-env NODE_ENV=test nest build\",\n\t\t\"build:dev\": \"cross-env NODE_ENV=development nest build\"\n\t}\n}\n```\n\n### rsbuild\n\n```json\n{\n\t\"scripts\": {\n\t\t\"build:release\": \"rsbuild build\",\n\t\t\"build:pre\": \"rsbuild build --env-mode preview\",\n\t\t\"build:test\": \"rsbuild build --env-mode test\",\n\t\t\"build:dev\": \"rsbuild build --env-mode development\"\n\t}\n}\n```\n","slug":"技能小册/项目管理/工程化/env配置","published":1,"updated":"2025-03-12T09:38:17.752Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j80075fg9mfgd9abkv","content":"<h1 id=\"Env\"><a href=\"#Env\" class=\"headerlink\" title=\"Env\"></a>Env</h1><p><code>env</code>代表<code>环境</code>，不论是在前端还是后端开发，都有不同的环境，每个环境对应的一些配置都是不同的，例如：请求的地址，一些加密的字符等等；</p>\n<p>通常在<code>node</code>中会获取环境变量<code>process.env.NODE_ENV</code>等等；</p>\n<p>这样的一个好处就是：在前端项目本地开发对应本地的配置环境，而打包对应着生产环境，俩个环境独立且分开，不会造成其中的冲突。</p>\n<h2 id=\"文件是什么样子？\"><a href=\"#文件是什么样子？\" class=\"headerlink\" title=\"文件是什么样子？\"></a>文件是什么样子？</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vite 中使用需要带有VITE_APP前缀</span></span><br><span class=\"line\">VITE_APP_BASE_URL = <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># webpack 中使用。需要带有VUE_APP前缀</span></span><br><span class=\"line\">VUE_APP_BASE_URL = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rsbuid中使用 分为俩种情况：</span></span><br><span class=\"line\"><span class=\"comment\">#一种是rsbuild.config.ts读取，</span></span><br><span class=\"line\"><span class=\"comment\">#一种是客户端读取,vue文件中可以读取</span></span><br><span class=\"line\"><span class=\"comment\"># rsbuild,config.ts读取, 没有前缀，可以自定义</span></span><br><span class=\"line\">APP_MODE=<span class=\"string\">&#x27;dev&#x27;</span></span><br><span class=\"line\">APP_NAME=<span class=\"string\">&#x27;app&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端读取，需要加PUBLIC前缀，例如：</span></span><br><span class=\"line\">PUBLIC_API_URL=<span class=\"string\">&#x27;/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p>通常项目中会配置多个环境文件，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每个环境都会加载</span></span><br><span class=\"line\">.<span class=\"built_in\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\">.env.production</span><br><span class=\"line\"><span class=\"comment\"># 预备发布环境</span></span><br><span class=\"line\">.env.preview</span><br><span class=\"line\"><span class=\"comment\"># 测试环境</span></span><br><span class=\"line\">.env.test</span><br><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\">.env.development</span><br></pre></td></tr></table></figure>\n\n<p>现在有个问题，不清楚使用的是哪个环境，那么就需要你在<code>package.json</code>中使用了</p>\n<h2 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置\"></a>命令配置</h2><p>以下命令说明:</p>\n<ul>\n<li><code>build:release</code>: 生产环境</li>\n<li><code>build:pre</code>: 预发布环境</li>\n<li><code>build:test</code>: 测试环境</li>\n<li><code>build:dev</code>: 开发环境</li>\n</ul>\n<h3 id=\"vite\"><a href=\"#vite\" class=\"headerlink\" title=\"vite\"></a>vite</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service build --mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-servic build --mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-servic build --mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><p>这里我拿<code>nest</code>举例， 需要安装<code>cross-env</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D cross-env</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=preview nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=test nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest build&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rsbuild\"><a href=\"#rsbuild\" class=\"headerlink\" title=\"rsbuild\"></a>rsbuild</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Env\"><a href=\"#Env\" class=\"headerlink\" title=\"Env\"></a>Env</h1><p><code>env</code>代表<code>环境</code>，不论是在前端还是后端开发，都有不同的环境，每个环境对应的一些配置都是不同的，例如：请求的地址，一些加密的字符等等；</p>\n<p>通常在<code>node</code>中会获取环境变量<code>process.env.NODE_ENV</code>等等；</p>\n<p>这样的一个好处就是：在前端项目本地开发对应本地的配置环境，而打包对应着生产环境，俩个环境独立且分开，不会造成其中的冲突。</p>\n<h2 id=\"文件是什么样子？\"><a href=\"#文件是什么样子？\" class=\"headerlink\" title=\"文件是什么样子？\"></a>文件是什么样子？</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vite 中使用需要带有VITE_APP前缀</span></span><br><span class=\"line\">VITE_APP_BASE_URL = <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># webpack 中使用。需要带有VUE_APP前缀</span></span><br><span class=\"line\">VUE_APP_BASE_URL = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rsbuid中使用 分为俩种情况：</span></span><br><span class=\"line\"><span class=\"comment\">#一种是rsbuild.config.ts读取，</span></span><br><span class=\"line\"><span class=\"comment\">#一种是客户端读取,vue文件中可以读取</span></span><br><span class=\"line\"><span class=\"comment\"># rsbuild,config.ts读取, 没有前缀，可以自定义</span></span><br><span class=\"line\">APP_MODE=<span class=\"string\">&#x27;dev&#x27;</span></span><br><span class=\"line\">APP_NAME=<span class=\"string\">&#x27;app&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端读取，需要加PUBLIC前缀，例如：</span></span><br><span class=\"line\">PUBLIC_API_URL=<span class=\"string\">&#x27;/&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p>通常项目中会配置多个环境文件，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每个环境都会加载</span></span><br><span class=\"line\">.<span class=\"built_in\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 生产环境</span></span><br><span class=\"line\">.env.production</span><br><span class=\"line\"><span class=\"comment\"># 预备发布环境</span></span><br><span class=\"line\">.env.preview</span><br><span class=\"line\"><span class=\"comment\"># 测试环境</span></span><br><span class=\"line\">.env.test</span><br><span class=\"line\"><span class=\"comment\"># 开发环境</span></span><br><span class=\"line\">.env.development</span><br></pre></td></tr></table></figure>\n\n<p>现在有个问题，不清楚使用的是哪个环境，那么就需要你在<code>package.json</code>中使用了</p>\n<h2 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置\"></a>命令配置</h2><p>以下命令说明:</p>\n<ul>\n<li><code>build:release</code>: 生产环境</li>\n<li><code>build:pre</code>: 预发布环境</li>\n<li><code>build:test</code>: 测试环境</li>\n<li><code>build:dev</code>: 开发环境</li>\n</ul>\n<h3 id=\"vite\"><a href=\"#vite\" class=\"headerlink\" title=\"vite\"></a>vite</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite build --mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service build --mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-servic build --mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-servic build --mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><p>这里我拿<code>nest</code>举例， 需要安装<code>cross-env</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D cross-env</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=preview nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=test nest build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env NODE_ENV=development nest build&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rsbuild\"><a href=\"#rsbuild\" class=\"headerlink\" title=\"rsbuild\"></a>rsbuild</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:pre&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rsbuild build --env-mode development&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-Commitizen","abbrlink":"3a339cc0","date":"2024-08-08T01:05:01.000Z","_content":"\n# Commitizen?\n\n一个工具,用于规范代码提交信息的工具。`cz-conventional-changelog` 是一个 `Commitizen` 的适配器,用于适配 `conventional-changelog` 的提交规范。\n\n为什么要介绍这么一个工具：\n当你在提交`commit`的时候，肯定会手动输入一些`type`:\n\n`fix(axios): 修复axios请求失败的问题 #1`\n\n但是现在有这么一个工具，只需要根据自己的情况选择对应的条件就好了；\n\n## 如何使用？\n\n这里可以安装到全局,也可以安装到项目中,这里推荐安装到项目中,因为这样可以避免不同项目使用不同的 `Commitizen` 版本,导致提交信息不一致的问题。\n\n::: tip\n**官方模板**:`cz-conventional-changelog`, 特点是免配置,开箱即用,但提示全部为英文,不太友好\n\n**自定义模板**:`cz-customizable`, 特点是可以自定义添加 `emoji` 表情,可以自定义提示语言,但需要配置,且无法自定义提交类型(`scope`)\n\n**linpengteng**:`cz-message-helper` 修改版,特点是可以自定义 `emoji` 表情,可以自定义提示语言,可以自定义提交类型(`scope`),但需要配置\n:::\n\n### 使用官方模板`cz-conventional-changelog`\n\n### 安装依赖\n\n```bash\npnpm add -D commitizen cz-conventional-changelog\n```\n\n添加配置文件的方式为俩种：\n\n#### package.json 配置\n\n```json\n{\n\t\"scripts\": {},\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-conventional-changelog\"\n\t\t}\n\t}\n}\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-conventional-changelog\"\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n当你执行`pnpm commit`控制台会输出如下：\n\n```bash\nebugger attached.\ncz-cli@4.3.1, cz-conventional-changelog@3.3.0\n\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n  refactor: A code change that neither fixes a bug nor adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests or correcting existing tests\n```\n\n这个时候就完成了。如果英文不好的可以继续看下一个方案：\n\n### 使用自定义模板`cz-customizable`\n\n#### 安装依赖\n\n```bash\npnpm add -D commitizen cz-customizable\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-customizable\"\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n#### 自定义模板 `.cz-config.js`\n\n需要在项目根目录下创建一个名为`.cz-config.js`的文件,文件内容如下:\n\n```js\n// .cz-config.js\nmodule.exports = {\n\ttypes: [\n\t\t{\n\t\t\tvalue: \":sparkles: feat\",\n\t\t\tname: \"✨ feat:         新功能\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":bug: fix\",\n\t\t\tname: \"🐛 fix:          修复\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":memo: docs\",\n\t\t\tname: \"📝 docs:         文档变更\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":lipstick: style\",\n\t\t\tname: \"💄 style:        代码格式 (不影响代码运行的变动)\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":recycle: refactor\",\n\t\t\tname: \"♻️  refactor:     重构 (既不增加 feature, 也不修复 bug)\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":zap: perf\",\n\t\t\tname: \"⚡️ perf:         性能优化\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":white_check_mark: test\",\n\t\t\tname: \"✅ test:         增加测试\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":wrench: chore\",\n\t\t\tname: \"🔧 chore:        构建过程或辅助工具的变动\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":rewind: revert\",\n\t\t\tname: \"⏪ revert:       回退\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":package: build\",\n\t\t\tname: \"📦 build:        打包\",\n\t\t},\n\t],\n\tmessages: {\n\t\ttype: \"请选择提交的类型: \",\n\t\tscope: \"请选择此更改的范围(可选): \",\n\t\tcustomScope: \"请输入修改的范围(可选): \",\n\t\tsubject: \"请简要描述提交(必填): \",\n\t\tbody: \"请输入详细描述(可选): \",\n\t\tbreaking: \"列举破坏性修改(可选): \",\n\t\tfooter: \"请输入要关闭的 issue(可选): \",\n\t\tconfirmCommit: \"确认要使用以上信息提交？(y/n): \",\n\t},\n\t// 你可以在这里预定义 Scope\n\tscopes: [],\n\tallowCustomScopes: true, // 允许输入自定义 Scope 信息\n\tallowBreakingChanges: [\":sparkles: feat\", \":bug: fix\"], // 允许添加 Breaking Change 的操作\n\tsubjectLimit: 100, // body 主题字数限制\n};\n```\n\n把代码文件添加到暂存区后,使用 Commitizen 生成符合规范的代码提交信息:\n\n```bash\nAll lines except first will be wrapped after 100 characters.\n? 请选择提交的类型： (Use arrow keys)\n❯ ✨ feat:        新功能\n  🐛 fix:         修复\n  📝 docs:        文档变更\n  💄 style:       代码格式 (不影响代码运行的变动)\n  ♻️  refactor:    重构 (既不增加 feature, 也不修复 bug)\n  ⚡️ perf:         性能优化\n  ✅ test:        增加测试\n(Move up and down to reveal more choices)\n```\n\n这样看起来是不是舒服多了? 但令人遗憾的是,`cz-customizable` 无法自定义提交类型(`scope`),所以我找到了 `linpengteng` 的 [`cz-message-helper`](https://github.com/linpengteng/cz-message-helper) 进行了修改,使其可以自定义提交类型(`scope`)\n\n### cz-message-helper\n\n#### 安装\n\n```bash\npnpm add -D commitizen cz-message-helper\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-message-helper\"\n}\n```\n\n不过我习惯将配置文件放置`package.json`\n\n```json\n{\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-message-helper\"\n\t\t}\n\t}\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n#### 自定义模板 `.cz-message.js`\n\n需要在项目根目录下创建一个名为`.cz-message.js`的文件,文件内容如下:\n\n```js\nmodule.exports = {\n\tquestions: [\n\t\t{\n\t\t\ttype: \"list\",\n\t\t\tname: \"type\",\n\t\t\tmessage: \"请选择要提交的更改类型:\",\n\t\t\tchoices: [\n\t\t\t\t{ value: \"fix\", name: \"🐛 fix: -------- 修复BUG\" },\n\t\t\t\t{ value: \"feat\", name: \"✨ feat: ------- 新功能\" },\n\t\t\t\t{ value: \"docs\", name: \"📝 docs: ------- 仅文档更改\" },\n\t\t\t\t{\n\t\t\t\t\tvalue: \"style\",\n\t\t\t\t\tname: \"💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"chore\",\n\t\t\t\t\tname: \"🗃️  chore: ------ 非 src 和 test 的修改\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"refactor\",\n\t\t\t\t\tname: \"♻️  refactor: --- 重构架构或代码\",\n\t\t\t\t},\n\t\t\t\t{ value: \"perf\", name: \"⚡️ perf:  ------ 改进性能的代码更改\" },\n\t\t\t\t{ value: \"test\", name: \"🧪 test:  ------ 添加测试单元\" },\n\t\t\t\t{\n\t\t\t\t\tvalue: \"revert\",\n\t\t\t\t\tname: \"⏪ revert: ----- 回退至某一个版本\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"merge\",\n\t\t\t\t\tname: \"🚚 merge: ------ 合并一个分支, 解决冲突分支\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"ci\",\n\t\t\t\t\tname: \"👷 ci: --------- 自动化流程配置或脚本修改\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"build\",\n\t\t\t\t\tname: \"🔧 build: ------ 修改构建流程或外部依赖\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\n\t\t{\n\t\t\ttype: \"list\",\n\t\t\tname: \"scope\",\n\t\t\tmessage: \"请选择更改的范围:\",\n\t\t\tchoices() {\n\t\t\t\treturn [\n\t\t\t\t\t{ name: \"无\", value: false },\n\t\t\t\t\t{ name: \"自定义\", value: \"custom\" },\n\t\t\t\t];\n\t\t\t},\n\t\t\tfilter(value, answers) {\n\t\t\t\treturn value || \"\";\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"customScope\",\n\t\t\tmessage: \"请输入自定义的变更的范围(可选):\",\n\t\t\twhen(answers) {\n\t\t\t\treturn answers.scope === \"custom\";\n\t\t\t},\n\t\t\tfilter(value, answers) {\n\t\t\t\tanswers.scope = value || \"\";\n\t\t\t\treturn value || \"\";\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"subject\",\n\t\t\tmessage: \"请简明扼要的摘要描述(建议字数在50字内):\",\n\t\t\tvalidate(value) {\n\t\t\t\treturn value.length > 50 ? `[subject] Exceed limit: 50` : true;\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"body\",\n\t\t\tmessage: \"请提供更详细的变更说明(可选), 使用“\\\\n”换行:\",\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"breaking\",\n\t\t\tmessage: \"请列出任何重大变化(可选):\",\n\t\t\twhen(answers) {\n\t\t\t\treturn /^(:[a-z0-9A-Z_-]+(:)(\\s*))?(feat|fix)(\\2\\s*)?$/.test(\n\t\t\t\t\tanswers.type.toLowerCase()\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"footer\",\n\t\t\tmessage: \"请列出此更改关闭的任何问题(可选), 例如: #31,#34:\",\n\t\t},\n\t],\n\n\ttemplater: (answers, wrap) => {\n\t\tlet template = \"\";\n\n\t\tconsole.log(answers);\n\n\t\ttemplate += answers.type ? `${answers.type}` : ``;\n\t\ttemplate += answers.scope ? `(${answers.scope})` : ``;\n\t\ttemplate += answers.subject ? `: ${answers.subject}` : ``;\n\t\ttemplate += answers.body ? `\\n\\n${wrap(answers.body)}` : ``;\n\t\ttemplate += answers.breaking\n\t\t\t? `\\n\\nBREAKING CHANGE: ${wrap(answers.breaking)}`\n\t\t\t: ``;\n\t\ttemplate += answers.footer\n\t\t\t? `\\n\\nISSUES CLOSED: ${wrap(answers.footer)}`\n\t\t\t: ``;\n\n\t\treturn template;\n\t},\n\n\tlanguage: \"cn\",\n};\n```\n\n```json\n{\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-message-helper\"\n\t\t},\n\t\t\"cz-message-helper\": {\n\t\t\t\"config\": \"./.cz-message.js\"\n\t\t}\n\t}\n}\n```\n\n把代码文件添加到暂存区后,使用 `Commitizen` 生成符合规范的代码提交信息:\n\n```bash\n版本提交规范 on  master [⇡»+] is 📦 1.0.0 via ⬢ v18.16.0\n➜ pm commit\n\ncomm@1.0.0 commit /Users/bddxg/Documents/coding/tmp/版本提交规范\ngit-cz\n\ncz-cli@4.3.0, cz-message-helper@1.2.2\n\n? 请选择要提交的更改类型:\n  🧪 test:  ------ 添加测试单元\n  ⏪ revert: ----- 回退至某一个版本\n  🚚 merge: ------ 合并一个分支, 解决冲突分支\n❯ 🐛 fix: -------- 修复BUG\n  ✨ feat: ------- 新功能\n  📝 docs: ------- 仅文档更改\n  💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)\n(Move up and down to reveal more choices)\n\n? 请选择要提交的更改类型: ✨ feat: ------- 新功能\n? 请选择更改的范围: 自定义\n? 请输入自定义的变更的范围(可选): main.js\n? 请简明扼要的摘要描述(建议字数在50字内): 新建了main.js\n? 请提供更详细的变更说明(可选), 使用“\\n”换行: 初始化项目\n? 请列出此更改关闭的任何问题(可选), 例如: #31,#34:\n\n###--------------------------------------------------------###\n:sparkles: feat: (main.js): 初始化项目\n\n新建了main.js文件\n###--------------------------------------------------------###\n\n? 您确定要继续执行上面的提交吗？ (Yneh)\n```\n\n## 参考资料\n\n- [Commitizen 快速上手](https://bddxg.top/article/expansion/%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91/Commitizen.html#_1-commitizen-cz-conventional-changelog)\n","source":"_posts/技能小册/项目管理/工程化/commitizen.md","raw":"---\ntitle: 项目工程化-Commitizen\nabbrlink: 3a339cc0\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# Commitizen?\n\n一个工具,用于规范代码提交信息的工具。`cz-conventional-changelog` 是一个 `Commitizen` 的适配器,用于适配 `conventional-changelog` 的提交规范。\n\n为什么要介绍这么一个工具：\n当你在提交`commit`的时候，肯定会手动输入一些`type`:\n\n`fix(axios): 修复axios请求失败的问题 #1`\n\n但是现在有这么一个工具，只需要根据自己的情况选择对应的条件就好了；\n\n## 如何使用？\n\n这里可以安装到全局,也可以安装到项目中,这里推荐安装到项目中,因为这样可以避免不同项目使用不同的 `Commitizen` 版本,导致提交信息不一致的问题。\n\n::: tip\n**官方模板**:`cz-conventional-changelog`, 特点是免配置,开箱即用,但提示全部为英文,不太友好\n\n**自定义模板**:`cz-customizable`, 特点是可以自定义添加 `emoji` 表情,可以自定义提示语言,但需要配置,且无法自定义提交类型(`scope`)\n\n**linpengteng**:`cz-message-helper` 修改版,特点是可以自定义 `emoji` 表情,可以自定义提示语言,可以自定义提交类型(`scope`),但需要配置\n:::\n\n### 使用官方模板`cz-conventional-changelog`\n\n### 安装依赖\n\n```bash\npnpm add -D commitizen cz-conventional-changelog\n```\n\n添加配置文件的方式为俩种：\n\n#### package.json 配置\n\n```json\n{\n\t\"scripts\": {},\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-conventional-changelog\"\n\t\t}\n\t}\n}\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-conventional-changelog\"\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n当你执行`pnpm commit`控制台会输出如下：\n\n```bash\nebugger attached.\ncz-cli@4.3.1, cz-conventional-changelog@3.3.0\n\n? Select the type of change that you're committing: (Use arrow keys)\n❯ feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n  refactor: A code change that neither fixes a bug nor adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests or correcting existing tests\n```\n\n这个时候就完成了。如果英文不好的可以继续看下一个方案：\n\n### 使用自定义模板`cz-customizable`\n\n#### 安装依赖\n\n```bash\npnpm add -D commitizen cz-customizable\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-customizable\"\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n#### 自定义模板 `.cz-config.js`\n\n需要在项目根目录下创建一个名为`.cz-config.js`的文件,文件内容如下:\n\n```js\n// .cz-config.js\nmodule.exports = {\n\ttypes: [\n\t\t{\n\t\t\tvalue: \":sparkles: feat\",\n\t\t\tname: \"✨ feat:         新功能\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":bug: fix\",\n\t\t\tname: \"🐛 fix:          修复\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":memo: docs\",\n\t\t\tname: \"📝 docs:         文档变更\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":lipstick: style\",\n\t\t\tname: \"💄 style:        代码格式 (不影响代码运行的变动)\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":recycle: refactor\",\n\t\t\tname: \"♻️  refactor:     重构 (既不增加 feature, 也不修复 bug)\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":zap: perf\",\n\t\t\tname: \"⚡️ perf:         性能优化\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":white_check_mark: test\",\n\t\t\tname: \"✅ test:         增加测试\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":wrench: chore\",\n\t\t\tname: \"🔧 chore:        构建过程或辅助工具的变动\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":rewind: revert\",\n\t\t\tname: \"⏪ revert:       回退\",\n\t\t},\n\t\t{\n\t\t\tvalue: \":package: build\",\n\t\t\tname: \"📦 build:        打包\",\n\t\t},\n\t],\n\tmessages: {\n\t\ttype: \"请选择提交的类型: \",\n\t\tscope: \"请选择此更改的范围(可选): \",\n\t\tcustomScope: \"请输入修改的范围(可选): \",\n\t\tsubject: \"请简要描述提交(必填): \",\n\t\tbody: \"请输入详细描述(可选): \",\n\t\tbreaking: \"列举破坏性修改(可选): \",\n\t\tfooter: \"请输入要关闭的 issue(可选): \",\n\t\tconfirmCommit: \"确认要使用以上信息提交？(y/n): \",\n\t},\n\t// 你可以在这里预定义 Scope\n\tscopes: [],\n\tallowCustomScopes: true, // 允许输入自定义 Scope 信息\n\tallowBreakingChanges: [\":sparkles: feat\", \":bug: fix\"], // 允许添加 Breaking Change 的操作\n\tsubjectLimit: 100, // body 主题字数限制\n};\n```\n\n把代码文件添加到暂存区后,使用 Commitizen 生成符合规范的代码提交信息:\n\n```bash\nAll lines except first will be wrapped after 100 characters.\n? 请选择提交的类型： (Use arrow keys)\n❯ ✨ feat:        新功能\n  🐛 fix:         修复\n  📝 docs:        文档变更\n  💄 style:       代码格式 (不影响代码运行的变动)\n  ♻️  refactor:    重构 (既不增加 feature, 也不修复 bug)\n  ⚡️ perf:         性能优化\n  ✅ test:        增加测试\n(Move up and down to reveal more choices)\n```\n\n这样看起来是不是舒服多了? 但令人遗憾的是,`cz-customizable` 无法自定义提交类型(`scope`),所以我找到了 `linpengteng` 的 [`cz-message-helper`](https://github.com/linpengteng/cz-message-helper) 进行了修改,使其可以自定义提交类型(`scope`)\n\n### cz-message-helper\n\n#### 安装\n\n```bash\npnpm add -D commitizen cz-message-helper\n```\n\n#### .czrc\n\n在项目根目录创建`.czrc`文件，内容如下：\n\n```js\n{\n  \"path\": \"cz-message-helper\"\n}\n```\n\n不过我习惯将配置文件放置`package.json`\n\n```json\n{\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-message-helper\"\n\t\t}\n\t}\n}\n```\n\n接着在`package.json`中添加命令”\n\n```json\n{\n\t\"scripts\": {\n\t\t\"commit\": \"git-cz\"\n\t}\n}\n```\n\n#### 自定义模板 `.cz-message.js`\n\n需要在项目根目录下创建一个名为`.cz-message.js`的文件,文件内容如下:\n\n```js\nmodule.exports = {\n\tquestions: [\n\t\t{\n\t\t\ttype: \"list\",\n\t\t\tname: \"type\",\n\t\t\tmessage: \"请选择要提交的更改类型:\",\n\t\t\tchoices: [\n\t\t\t\t{ value: \"fix\", name: \"🐛 fix: -------- 修复BUG\" },\n\t\t\t\t{ value: \"feat\", name: \"✨ feat: ------- 新功能\" },\n\t\t\t\t{ value: \"docs\", name: \"📝 docs: ------- 仅文档更改\" },\n\t\t\t\t{\n\t\t\t\t\tvalue: \"style\",\n\t\t\t\t\tname: \"💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"chore\",\n\t\t\t\t\tname: \"🗃️  chore: ------ 非 src 和 test 的修改\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"refactor\",\n\t\t\t\t\tname: \"♻️  refactor: --- 重构架构或代码\",\n\t\t\t\t},\n\t\t\t\t{ value: \"perf\", name: \"⚡️ perf:  ------ 改进性能的代码更改\" },\n\t\t\t\t{ value: \"test\", name: \"🧪 test:  ------ 添加测试单元\" },\n\t\t\t\t{\n\t\t\t\t\tvalue: \"revert\",\n\t\t\t\t\tname: \"⏪ revert: ----- 回退至某一个版本\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"merge\",\n\t\t\t\t\tname: \"🚚 merge: ------ 合并一个分支, 解决冲突分支\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"ci\",\n\t\t\t\t\tname: \"👷 ci: --------- 自动化流程配置或脚本修改\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: \"build\",\n\t\t\t\t\tname: \"🔧 build: ------ 修改构建流程或外部依赖\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\n\t\t{\n\t\t\ttype: \"list\",\n\t\t\tname: \"scope\",\n\t\t\tmessage: \"请选择更改的范围:\",\n\t\t\tchoices() {\n\t\t\t\treturn [\n\t\t\t\t\t{ name: \"无\", value: false },\n\t\t\t\t\t{ name: \"自定义\", value: \"custom\" },\n\t\t\t\t];\n\t\t\t},\n\t\t\tfilter(value, answers) {\n\t\t\t\treturn value || \"\";\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"customScope\",\n\t\t\tmessage: \"请输入自定义的变更的范围(可选):\",\n\t\t\twhen(answers) {\n\t\t\t\treturn answers.scope === \"custom\";\n\t\t\t},\n\t\t\tfilter(value, answers) {\n\t\t\t\tanswers.scope = value || \"\";\n\t\t\t\treturn value || \"\";\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"subject\",\n\t\t\tmessage: \"请简明扼要的摘要描述(建议字数在50字内):\",\n\t\t\tvalidate(value) {\n\t\t\t\treturn value.length > 50 ? `[subject] Exceed limit: 50` : true;\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"body\",\n\t\t\tmessage: \"请提供更详细的变更说明(可选), 使用“\\\\n”换行:\",\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"breaking\",\n\t\t\tmessage: \"请列出任何重大变化(可选):\",\n\t\t\twhen(answers) {\n\t\t\t\treturn /^(:[a-z0-9A-Z_-]+(:)(\\s*))?(feat|fix)(\\2\\s*)?$/.test(\n\t\t\t\t\tanswers.type.toLowerCase()\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: \"input\",\n\t\t\tname: \"footer\",\n\t\t\tmessage: \"请列出此更改关闭的任何问题(可选), 例如: #31,#34:\",\n\t\t},\n\t],\n\n\ttemplater: (answers, wrap) => {\n\t\tlet template = \"\";\n\n\t\tconsole.log(answers);\n\n\t\ttemplate += answers.type ? `${answers.type}` : ``;\n\t\ttemplate += answers.scope ? `(${answers.scope})` : ``;\n\t\ttemplate += answers.subject ? `: ${answers.subject}` : ``;\n\t\ttemplate += answers.body ? `\\n\\n${wrap(answers.body)}` : ``;\n\t\ttemplate += answers.breaking\n\t\t\t? `\\n\\nBREAKING CHANGE: ${wrap(answers.breaking)}`\n\t\t\t: ``;\n\t\ttemplate += answers.footer\n\t\t\t? `\\n\\nISSUES CLOSED: ${wrap(answers.footer)}`\n\t\t\t: ``;\n\n\t\treturn template;\n\t},\n\n\tlanguage: \"cn\",\n};\n```\n\n```json\n{\n\t\"config\": {\n\t\t\"commitizen\": {\n\t\t\t\"path\": \"./node_modules/cz-message-helper\"\n\t\t},\n\t\t\"cz-message-helper\": {\n\t\t\t\"config\": \"./.cz-message.js\"\n\t\t}\n\t}\n}\n```\n\n把代码文件添加到暂存区后,使用 `Commitizen` 生成符合规范的代码提交信息:\n\n```bash\n版本提交规范 on  master [⇡»+] is 📦 1.0.0 via ⬢ v18.16.0\n➜ pm commit\n\ncomm@1.0.0 commit /Users/bddxg/Documents/coding/tmp/版本提交规范\ngit-cz\n\ncz-cli@4.3.0, cz-message-helper@1.2.2\n\n? 请选择要提交的更改类型:\n  🧪 test:  ------ 添加测试单元\n  ⏪ revert: ----- 回退至某一个版本\n  🚚 merge: ------ 合并一个分支, 解决冲突分支\n❯ 🐛 fix: -------- 修复BUG\n  ✨ feat: ------- 新功能\n  📝 docs: ------- 仅文档更改\n  💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)\n(Move up and down to reveal more choices)\n\n? 请选择要提交的更改类型: ✨ feat: ------- 新功能\n? 请选择更改的范围: 自定义\n? 请输入自定义的变更的范围(可选): main.js\n? 请简明扼要的摘要描述(建议字数在50字内): 新建了main.js\n? 请提供更详细的变更说明(可选), 使用“\\n”换行: 初始化项目\n? 请列出此更改关闭的任何问题(可选), 例如: #31,#34:\n\n###--------------------------------------------------------###\n:sparkles: feat: (main.js): 初始化项目\n\n新建了main.js文件\n###--------------------------------------------------------###\n\n? 您确定要继续执行上面的提交吗？ (Yneh)\n```\n\n## 参考资料\n\n- [Commitizen 快速上手](https://bddxg.top/article/expansion/%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91/Commitizen.html#_1-commitizen-cz-conventional-changelog)\n","slug":"技能小册/项目管理/工程化/commitizen","published":1,"updated":"2025-03-12T09:38:23.317Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j90079fg9m525z0ny1","content":"<h1 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen?\"></a>Commitizen?</h1><p>一个工具,用于规范代码提交信息的工具。<code>cz-conventional-changelog</code> 是一个 <code>Commitizen</code> 的适配器,用于适配 <code>conventional-changelog</code> 的提交规范。</p>\n<p>为什么要介绍这么一个工具：<br>当你在提交<code>commit</code>的时候，肯定会手动输入一些<code>type</code>:</p>\n<p><code>fix(axios): 修复axios请求失败的问题 #1</code></p>\n<p>但是现在有这么一个工具，只需要根据自己的情况选择对应的条件就好了；</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>这里可以安装到全局,也可以安装到项目中,这里推荐安装到项目中,因为这样可以避免不同项目使用不同的 <code>Commitizen</code> 版本,导致提交信息不一致的问题。</p>\n<p>::: tip<br><strong>官方模板</strong>:<code>cz-conventional-changelog</code>, 特点是免配置,开箱即用,但提示全部为英文,不太友好</p>\n<p><strong>自定义模板</strong>:<code>cz-customizable</code>, 特点是可以自定义添加 <code>emoji</code> 表情,可以自定义提示语言,但需要配置,且无法自定义提交类型(<code>scope</code>)</p>\n<p><strong>linpengteng</strong>:<code>cz-message-helper</code> 修改版,特点是可以自定义 <code>emoji</code> 表情,可以自定义提示语言,可以自定义提交类型(<code>scope</code>),但需要配置<br>:::</p>\n<h3 id=\"使用官方模板cz-conventional-changelog\"><a href=\"#使用官方模板cz-conventional-changelog\" class=\"headerlink\" title=\"使用官方模板cz-conventional-changelog\"></a>使用官方模板<code>cz-conventional-changelog</code></h3><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure>\n\n<p>添加配置文件的方式为俩种：</p>\n<h4 id=\"package-json-配置\"><a href=\"#package-json-配置\" class=\"headerlink\" title=\"package.json 配置\"></a>package.json 配置</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc\"><a href=\"#czrc\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-conventional-changelog&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你执行<code>pnpm commit</code>控制台会输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ebugger attached.</span><br><span class=\"line\">cz-cli@4.3.1, cz-conventional-changelog@3.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">? Select the <span class=\"built_in\">type</span> of change that you<span class=\"string\">&#x27;re committing: (Use arrow keys)</span></span><br><span class=\"line\"><span class=\"string\">❯ feat:     A new feature</span></span><br><span class=\"line\"><span class=\"string\">  fix:      A bug fix</span></span><br><span class=\"line\"><span class=\"string\">  docs:     Documentation only changes</span></span><br><span class=\"line\"><span class=\"string\">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span></span><br><span class=\"line\"><span class=\"string\">  refactor: A code change that neither fixes a bug nor adds a feature</span></span><br><span class=\"line\"><span class=\"string\">  perf:     A code change that improves performance</span></span><br><span class=\"line\"><span class=\"string\">  test:     Adding missing tests or correcting existing tests</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候就完成了。如果英文不好的可以继续看下一个方案：</p>\n<h3 id=\"使用自定义模板cz-customizable\"><a href=\"#使用自定义模板cz-customizable\" class=\"headerlink\" title=\"使用自定义模板cz-customizable\"></a>使用自定义模板<code>cz-customizable</code></h3><h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-customizable</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc-1\"><a href=\"#czrc-1\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-customizable&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模板-cz-config-js\"><a href=\"#自定义模板-cz-config-js\" class=\"headerlink\" title=\"自定义模板 .cz-config.js\"></a>自定义模板 <code>.cz-config.js</code></h4><p>需要在项目根目录下创建一个名为<code>.cz-config.js</code>的文件,文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .cz-config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">types</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:sparkles: feat&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;✨ feat:         新功能&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:bug: fix&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🐛 fix:          修复&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:memo: docs&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;📝 docs:         文档变更&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:lipstick: style&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;💄 style:        代码格式 (不影响代码运行的变动)&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:recycle: refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;♻️  refactor:     重构 (既不增加 feature, 也不修复 bug)&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:zap: perf&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⚡️ perf:         性能优化&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:white_check_mark: test&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;✅ test:         增加测试&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:wrench: chore&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🔧 chore:        构建过程或辅助工具的变动&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:rewind: revert&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⏪ revert:       回退&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:package: build&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;📦 build:        打包&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;请选择提交的类型: &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">scope</span>: <span class=\"string\">&quot;请选择此更改的范围(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">customScope</span>: <span class=\"string\">&quot;请输入修改的范围(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">subject</span>: <span class=\"string\">&quot;请简要描述提交(必填): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">body</span>: <span class=\"string\">&quot;请输入详细描述(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">breaking</span>: <span class=\"string\">&quot;列举破坏性修改(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">footer</span>: <span class=\"string\">&quot;请输入要关闭的 issue(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">confirmCommit</span>: <span class=\"string\">&quot;确认要使用以上信息提交？(y/n): &quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 你可以在这里预定义 Scope</span></span><br><span class=\"line\">\t<span class=\"attr\">scopes</span>: [],</span><br><span class=\"line\">\t<span class=\"attr\">allowCustomScopes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 允许输入自定义 Scope 信息</span></span><br><span class=\"line\">\t<span class=\"attr\">allowBreakingChanges</span>: [<span class=\"string\">&quot;:sparkles: feat&quot;</span>, <span class=\"string\">&quot;:bug: fix&quot;</span>], <span class=\"comment\">// 允许添加 Breaking Change 的操作</span></span><br><span class=\"line\">\t<span class=\"attr\">subjectLimit</span>: <span class=\"number\">100</span>, <span class=\"comment\">// body 主题字数限制</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>把代码文件添加到暂存区后,使用 Commitizen 生成符合规范的代码提交信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">All lines except first will be wrapped after 100 characters.</span><br><span class=\"line\">? 请选择提交的类型： (Use arrow keys)</span><br><span class=\"line\">❯ ✨ feat:        新功能</span><br><span class=\"line\">  🐛 fix:         修复</span><br><span class=\"line\">  📝 docs:        文档变更</span><br><span class=\"line\">  💄 style:       代码格式 (不影响代码运行的变动)</span><br><span class=\"line\">  ♻️  refactor:    重构 (既不增加 feature, 也不修复 bug)</span><br><span class=\"line\">  ⚡️ perf:         性能优化</span><br><span class=\"line\">  ✅ <span class=\"built_in\">test</span>:        增加测试</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>\n\n<p>这样看起来是不是舒服多了? 但令人遗憾的是,<code>cz-customizable</code> 无法自定义提交类型(<code>scope</code>),所以我找到了 <code>linpengteng</code> 的 <a href=\"https://github.com/linpengteng/cz-message-helper\"><code>cz-message-helper</code></a> 进行了修改,使其可以自定义提交类型(<code>scope</code>)</p>\n<h3 id=\"cz-message-helper\"><a href=\"#cz-message-helper\" class=\"headerlink\" title=\"cz-message-helper\"></a>cz-message-helper</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-message-helper</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc-2\"><a href=\"#czrc-2\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-message-helper&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过我习惯将配置文件放置<code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-message-helper&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模板-cz-message-js\"><a href=\"#自定义模板-cz-message-js\" class=\"headerlink\" title=\"自定义模板 .cz-message.js\"></a>自定义模板 <code>.cz-message.js</code></h4><p>需要在项目根目录下创建一个名为<code>.cz-message.js</code>的文件,文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">questions</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;type&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请选择要提交的更改类型:&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">choices</span>: [</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;fix&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;🐛 fix: -------- 修复BUG&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;feat&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;✨ feat: ------- 新功能&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;docs&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;📝 docs: ------- 仅文档更改&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;style&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;chore&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🗃️  chore: ------ 非 src 和 test 的修改&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;♻️  refactor: --- 重构架构或代码&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;perf&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;⚡️ perf:  ------ 改进性能的代码更改&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;test&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;🧪 test:  ------ 添加测试单元&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;revert&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⏪ revert: ----- 回退至某一个版本&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;merge&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🚚 merge: ------ 合并一个分支, 解决冲突分支&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;ci&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;👷 ci: --------- 自动化流程配置或脚本修改&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🔧 build: ------ 修改构建流程或外部依赖&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;scope&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请选择更改的范围:&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">choices</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t\t\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;无&quot;</span>, <span class=\"attr\">value</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">\t\t\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;自定义&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;custom&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t];</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">filter</span>(<span class=\"params\">value, answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;customScope&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请输入自定义的变更的范围(可选):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">when</span>(<span class=\"params\">answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> answers.<span class=\"property\">scope</span> === <span class=\"string\">&quot;custom&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">filter</span>(<span class=\"params\">value, answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\tanswers.<span class=\"property\">scope</span> = value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;subject&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请简明扼要的摘要描述(建议字数在50字内):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">validate</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value.<span class=\"property\">length</span> &gt; <span class=\"number\">50</span> ? <span class=\"string\">`[subject] Exceed limit: 50`</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请提供更详细的变更说明(可选), 使用“\\\\n”换行:&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;breaking&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请列出任何重大变化(可选):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">when</span>(<span class=\"params\">answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"regexp\">/^(:[a-z0-9A-Z_-]+(:)(\\s*))?(feat|fix)(\\2\\s*)?$/</span>.<span class=\"title function_\">test</span>(</span><br><span class=\"line\">\t\t\t\t\tanswers.<span class=\"property\">type</span>.<span class=\"title function_\">toLowerCase</span>()</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;footer&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请列出此更改关闭的任何问题(可选), 例如: #31,#34:&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">templater</span>: <span class=\"function\">(<span class=\"params\">answers, wrap</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> template = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(answers);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">type</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;answers.type&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">scope</span> ? <span class=\"string\">`(<span class=\"subst\">$&#123;answers.scope&#125;</span>)`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">subject</span> ? <span class=\"string\">`: <span class=\"subst\">$&#123;answers.subject&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">body</span> ? <span class=\"string\">`\\n\\n<span class=\"subst\">$&#123;wrap(answers.body)&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">breaking</span></span><br><span class=\"line\">\t\t\t? <span class=\"string\">`\\n\\nBREAKING CHANGE: <span class=\"subst\">$&#123;wrap(answers.breaking)&#125;</span>`</span></span><br><span class=\"line\">\t\t\t: <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">footer</span></span><br><span class=\"line\">\t\t\t? <span class=\"string\">`\\n\\nISSUES CLOSED: <span class=\"subst\">$&#123;wrap(answers.footer)&#125;</span>`</span></span><br><span class=\"line\">\t\t\t: <span class=\"string\">``</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">language</span>: <span class=\"string\">&quot;cn&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-message-helper&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;cz-message-helper&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./.cz-message.js&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>把代码文件添加到暂存区后,使用 <code>Commitizen</code> 生成符合规范的代码提交信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本提交规范 on  master [⇡»+] is 📦 1.0.0 via ⬢ v18.16.0</span><br><span class=\"line\">➜ pm commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">comm</span>@1.0.0 commit /Users/bddxg/Documents/coding/tmp/版本提交规范</span><br><span class=\"line\">git-cz</span><br><span class=\"line\"></span><br><span class=\"line\">cz-cli@4.3.0, cz-message-helper@1.2.2</span><br><span class=\"line\"></span><br><span class=\"line\">? 请选择要提交的更改类型:</span><br><span class=\"line\">  🧪 <span class=\"built_in\">test</span>:  ------ 添加测试单元</span><br><span class=\"line\">  ⏪ revert: ----- 回退至某一个版本</span><br><span class=\"line\">  🚚 merge: ------ 合并一个分支, 解决冲突分支</span><br><span class=\"line\">❯ 🐛 fix: -------- 修复BUG</span><br><span class=\"line\">  ✨ feat: ------- 新功能</span><br><span class=\"line\">  📝 docs: ------- 仅文档更改</span><br><span class=\"line\">  💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br><span class=\"line\"></span><br><span class=\"line\">? 请选择要提交的更改类型: ✨ feat: ------- 新功能</span><br><span class=\"line\">? 请选择更改的范围: 自定义</span><br><span class=\"line\">? 请输入自定义的变更的范围(可选): main.js</span><br><span class=\"line\">? 请简明扼要的摘要描述(建议字数在50字内): 新建了main.js</span><br><span class=\"line\">? 请提供更详细的变更说明(可选), 使用“\\n”换行: 初始化项目</span><br><span class=\"line\">? 请列出此更改关闭的任何问题(可选), 例如: <span class=\"comment\">#31,#34:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###--------------------------------------------------------###</span></span><br><span class=\"line\">:sparkles: feat: (main.js): 初始化项目</span><br><span class=\"line\"></span><br><span class=\"line\">新建了main.js文件</span><br><span class=\"line\"><span class=\"comment\">###--------------------------------------------------------###</span></span><br><span class=\"line\"></span><br><span class=\"line\">? 您确定要继续执行上面的提交吗？ (Yneh)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://bddxg.top/article/expansion/%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91/Commitizen.html#_1-commitizen-cz-conventional-changelog\">Commitizen 快速上手</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen?\"></a>Commitizen?</h1><p>一个工具,用于规范代码提交信息的工具。<code>cz-conventional-changelog</code> 是一个 <code>Commitizen</code> 的适配器,用于适配 <code>conventional-changelog</code> 的提交规范。</p>\n<p>为什么要介绍这么一个工具：<br>当你在提交<code>commit</code>的时候，肯定会手动输入一些<code>type</code>:</p>\n<p><code>fix(axios): 修复axios请求失败的问题 #1</code></p>\n<p>但是现在有这么一个工具，只需要根据自己的情况选择对应的条件就好了；</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>这里可以安装到全局,也可以安装到项目中,这里推荐安装到项目中,因为这样可以避免不同项目使用不同的 <code>Commitizen</code> 版本,导致提交信息不一致的问题。</p>\n<p>::: tip<br><strong>官方模板</strong>:<code>cz-conventional-changelog</code>, 特点是免配置,开箱即用,但提示全部为英文,不太友好</p>\n<p><strong>自定义模板</strong>:<code>cz-customizable</code>, 特点是可以自定义添加 <code>emoji</code> 表情,可以自定义提示语言,但需要配置,且无法自定义提交类型(<code>scope</code>)</p>\n<p><strong>linpengteng</strong>:<code>cz-message-helper</code> 修改版,特点是可以自定义 <code>emoji</code> 表情,可以自定义提示语言,可以自定义提交类型(<code>scope</code>),但需要配置<br>:::</p>\n<h3 id=\"使用官方模板cz-conventional-changelog\"><a href=\"#使用官方模板cz-conventional-changelog\" class=\"headerlink\" title=\"使用官方模板cz-conventional-changelog\"></a>使用官方模板<code>cz-conventional-changelog</code></h3><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure>\n\n<p>添加配置文件的方式为俩种：</p>\n<h4 id=\"package-json-配置\"><a href=\"#package-json-配置\" class=\"headerlink\" title=\"package.json 配置\"></a>package.json 配置</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc\"><a href=\"#czrc\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-conventional-changelog&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你执行<code>pnpm commit</code>控制台会输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ebugger attached.</span><br><span class=\"line\">cz-cli@4.3.1, cz-conventional-changelog@3.3.0</span><br><span class=\"line\"></span><br><span class=\"line\">? Select the <span class=\"built_in\">type</span> of change that you<span class=\"string\">&#x27;re committing: (Use arrow keys)</span></span><br><span class=\"line\"><span class=\"string\">❯ feat:     A new feature</span></span><br><span class=\"line\"><span class=\"string\">  fix:      A bug fix</span></span><br><span class=\"line\"><span class=\"string\">  docs:     Documentation only changes</span></span><br><span class=\"line\"><span class=\"string\">  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span></span><br><span class=\"line\"><span class=\"string\">  refactor: A code change that neither fixes a bug nor adds a feature</span></span><br><span class=\"line\"><span class=\"string\">  perf:     A code change that improves performance</span></span><br><span class=\"line\"><span class=\"string\">  test:     Adding missing tests or correcting existing tests</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候就完成了。如果英文不好的可以继续看下一个方案：</p>\n<h3 id=\"使用自定义模板cz-customizable\"><a href=\"#使用自定义模板cz-customizable\" class=\"headerlink\" title=\"使用自定义模板cz-customizable\"></a>使用自定义模板<code>cz-customizable</code></h3><h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-customizable</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc-1\"><a href=\"#czrc-1\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-customizable&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模板-cz-config-js\"><a href=\"#自定义模板-cz-config-js\" class=\"headerlink\" title=\"自定义模板 .cz-config.js\"></a>自定义模板 <code>.cz-config.js</code></h4><p>需要在项目根目录下创建一个名为<code>.cz-config.js</code>的文件,文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .cz-config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">types</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:sparkles: feat&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;✨ feat:         新功能&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:bug: fix&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🐛 fix:          修复&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:memo: docs&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;📝 docs:         文档变更&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:lipstick: style&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;💄 style:        代码格式 (不影响代码运行的变动)&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:recycle: refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;♻️  refactor:     重构 (既不增加 feature, 也不修复 bug)&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:zap: perf&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⚡️ perf:         性能优化&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:white_check_mark: test&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;✅ test:         增加测试&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:wrench: chore&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🔧 chore:        构建过程或辅助工具的变动&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:rewind: revert&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⏪ revert:       回退&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;:package: build&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;📦 build:        打包&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;请选择提交的类型: &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">scope</span>: <span class=\"string\">&quot;请选择此更改的范围(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">customScope</span>: <span class=\"string\">&quot;请输入修改的范围(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">subject</span>: <span class=\"string\">&quot;请简要描述提交(必填): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">body</span>: <span class=\"string\">&quot;请输入详细描述(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">breaking</span>: <span class=\"string\">&quot;列举破坏性修改(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">footer</span>: <span class=\"string\">&quot;请输入要关闭的 issue(可选): &quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">confirmCommit</span>: <span class=\"string\">&quot;确认要使用以上信息提交？(y/n): &quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 你可以在这里预定义 Scope</span></span><br><span class=\"line\">\t<span class=\"attr\">scopes</span>: [],</span><br><span class=\"line\">\t<span class=\"attr\">allowCustomScopes</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 允许输入自定义 Scope 信息</span></span><br><span class=\"line\">\t<span class=\"attr\">allowBreakingChanges</span>: [<span class=\"string\">&quot;:sparkles: feat&quot;</span>, <span class=\"string\">&quot;:bug: fix&quot;</span>], <span class=\"comment\">// 允许添加 Breaking Change 的操作</span></span><br><span class=\"line\">\t<span class=\"attr\">subjectLimit</span>: <span class=\"number\">100</span>, <span class=\"comment\">// body 主题字数限制</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>把代码文件添加到暂存区后,使用 Commitizen 生成符合规范的代码提交信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">All lines except first will be wrapped after 100 characters.</span><br><span class=\"line\">? 请选择提交的类型： (Use arrow keys)</span><br><span class=\"line\">❯ ✨ feat:        新功能</span><br><span class=\"line\">  🐛 fix:         修复</span><br><span class=\"line\">  📝 docs:        文档变更</span><br><span class=\"line\">  💄 style:       代码格式 (不影响代码运行的变动)</span><br><span class=\"line\">  ♻️  refactor:    重构 (既不增加 feature, 也不修复 bug)</span><br><span class=\"line\">  ⚡️ perf:         性能优化</span><br><span class=\"line\">  ✅ <span class=\"built_in\">test</span>:        增加测试</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>\n\n<p>这样看起来是不是舒服多了? 但令人遗憾的是,<code>cz-customizable</code> 无法自定义提交类型(<code>scope</code>),所以我找到了 <code>linpengteng</code> 的 <a href=\"https://github.com/linpengteng/cz-message-helper\"><code>cz-message-helper</code></a> 进行了修改,使其可以自定义提交类型(<code>scope</code>)</p>\n<h3 id=\"cz-message-helper\"><a href=\"#cz-message-helper\" class=\"headerlink\" title=\"cz-message-helper\"></a>cz-message-helper</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D commitizen cz-message-helper</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"czrc-2\"><a href=\"#czrc-2\" class=\"headerlink\" title=\".czrc\"></a>.czrc</h4><p>在项目根目录创建<code>.czrc</code>文件，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;path&quot;</span>: <span class=\"string\">&quot;cz-message-helper&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过我习惯将配置文件放置<code>package.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-message-helper&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>package.json</code>中添加命令”</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;git-cz&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义模板-cz-message-js\"><a href=\"#自定义模板-cz-message-js\" class=\"headerlink\" title=\"自定义模板 .cz-message.js\"></a>自定义模板 <code>.cz-message.js</code></h4><p>需要在项目根目录下创建一个名为<code>.cz-message.js</code>的文件,文件内容如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">questions</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;type&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请选择要提交的更改类型:&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">choices</span>: [</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;fix&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;🐛 fix: -------- 修复BUG&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;feat&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;✨ feat: ------- 新功能&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;docs&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;📝 docs: ------- 仅文档更改&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;style&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;chore&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🗃️  chore: ------ 非 src 和 test 的修改&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;♻️  refactor: --- 重构架构或代码&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;perf&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;⚡️ perf:  ------ 改进性能的代码更改&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;test&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;🧪 test:  ------ 添加测试单元&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;revert&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;⏪ revert: ----- 回退至某一个版本&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;merge&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🚚 merge: ------ 合并一个分支, 解决冲突分支&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;ci&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;👷 ci: --------- 自动化流程配置或脚本修改&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;🔧 build: ------ 修改构建流程或外部依赖&quot;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;list&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;scope&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请选择更改的范围:&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">choices</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> [</span><br><span class=\"line\">\t\t\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;无&quot;</span>, <span class=\"attr\">value</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">\t\t\t\t\t&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;自定义&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;custom&quot;</span> &#125;,</span><br><span class=\"line\">\t\t\t\t];</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">filter</span>(<span class=\"params\">value, answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;customScope&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请输入自定义的变更的范围(可选):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">when</span>(<span class=\"params\">answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> answers.<span class=\"property\">scope</span> === <span class=\"string\">&quot;custom&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">filter</span>(<span class=\"params\">value, answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\tanswers.<span class=\"property\">scope</span> = value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;subject&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请简明扼要的摘要描述(建议字数在50字内):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">validate</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> value.<span class=\"property\">length</span> &gt; <span class=\"number\">50</span> ? <span class=\"string\">`[subject] Exceed limit: 50`</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请提供更详细的变更说明(可选), 使用“\\\\n”换行:&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;breaking&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请列出任何重大变化(可选):&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">when</span>(<span class=\"params\">answers</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"regexp\">/^(:[a-z0-9A-Z_-]+(:)(\\s*))?(feat|fix)(\\2\\s*)?$/</span>.<span class=\"title function_\">test</span>(</span><br><span class=\"line\">\t\t\t\t\tanswers.<span class=\"property\">type</span>.<span class=\"title function_\">toLowerCase</span>()</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;input&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;footer&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&quot;请列出此更改关闭的任何问题(可选), 例如: #31,#34:&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">templater</span>: <span class=\"function\">(<span class=\"params\">answers, wrap</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> template = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(answers);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">type</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;answers.type&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">scope</span> ? <span class=\"string\">`(<span class=\"subst\">$&#123;answers.scope&#125;</span>)`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">subject</span> ? <span class=\"string\">`: <span class=\"subst\">$&#123;answers.subject&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">body</span> ? <span class=\"string\">`\\n\\n<span class=\"subst\">$&#123;wrap(answers.body)&#125;</span>`</span> : <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">breaking</span></span><br><span class=\"line\">\t\t\t? <span class=\"string\">`\\n\\nBREAKING CHANGE: <span class=\"subst\">$&#123;wrap(answers.breaking)&#125;</span>`</span></span><br><span class=\"line\">\t\t\t: <span class=\"string\">``</span>;</span><br><span class=\"line\">\t\ttemplate += answers.<span class=\"property\">footer</span></span><br><span class=\"line\">\t\t\t? <span class=\"string\">`\\n\\nISSUES CLOSED: <span class=\"subst\">$&#123;wrap(answers.footer)&#125;</span>`</span></span><br><span class=\"line\">\t\t\t: <span class=\"string\">``</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attr\">language</span>: <span class=\"string\">&quot;cn&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./node_modules/cz-message-helper&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;cz-message-helper&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./.cz-message.js&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>把代码文件添加到暂存区后,使用 <code>Commitizen</code> 生成符合规范的代码提交信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">版本提交规范 on  master [⇡»+] is 📦 1.0.0 via ⬢ v18.16.0</span><br><span class=\"line\">➜ pm commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">comm</span>@1.0.0 commit /Users/bddxg/Documents/coding/tmp/版本提交规范</span><br><span class=\"line\">git-cz</span><br><span class=\"line\"></span><br><span class=\"line\">cz-cli@4.3.0, cz-message-helper@1.2.2</span><br><span class=\"line\"></span><br><span class=\"line\">? 请选择要提交的更改类型:</span><br><span class=\"line\">  🧪 <span class=\"built_in\">test</span>:  ------ 添加测试单元</span><br><span class=\"line\">  ⏪ revert: ----- 回退至某一个版本</span><br><span class=\"line\">  🚚 merge: ------ 合并一个分支, 解决冲突分支</span><br><span class=\"line\">❯ 🐛 fix: -------- 修复BUG</span><br><span class=\"line\">  ✨ feat: ------- 新功能</span><br><span class=\"line\">  📝 docs: ------- 仅文档更改</span><br><span class=\"line\">  💄 style: ------ 不影响代码运行的更改(调整空白、格式、缺少分号等)</span><br><span class=\"line\">(Move up and down to reveal more choices)</span><br><span class=\"line\"></span><br><span class=\"line\">? 请选择要提交的更改类型: ✨ feat: ------- 新功能</span><br><span class=\"line\">? 请选择更改的范围: 自定义</span><br><span class=\"line\">? 请输入自定义的变更的范围(可选): main.js</span><br><span class=\"line\">? 请简明扼要的摘要描述(建议字数在50字内): 新建了main.js</span><br><span class=\"line\">? 请提供更详细的变更说明(可选), 使用“\\n”换行: 初始化项目</span><br><span class=\"line\">? 请列出此更改关闭的任何问题(可选), 例如: <span class=\"comment\">#31,#34:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###--------------------------------------------------------###</span></span><br><span class=\"line\">:sparkles: feat: (main.js): 初始化项目</span><br><span class=\"line\"></span><br><span class=\"line\">新建了main.js文件</span><br><span class=\"line\"><span class=\"comment\">###--------------------------------------------------------###</span></span><br><span class=\"line\"></span><br><span class=\"line\">? 您确定要继续执行上面的提交吗？ (Yneh)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://bddxg.top/article/expansion/%E5%89%8D%E7%AB%AF%E6%96%B9%E5%90%91/Commitizen.html#_1-commitizen-cz-conventional-changelog\">Commitizen 快速上手</a></li>\n</ul>\n"},{"title":"项目工程化-eslint","abbrlink":"cd69ee4d","date":"2024-08-08T01:05:01.000Z","_content":"\n# eslint\n\n`ESLint` 是一个可配置的 `JavaScript linter`。它可以帮助您发现并修复 `JavaScript` 代码中的问题。问题可以是任何问题，从潜在的运行时错误，到不遵循最佳实践，再到样式问题\n\n## 配置文件\n\n配置文件的名字有很多，版本的不同会导致不同的导出语法：\n\n首先说明文件名的变动\n\n- 8.x 版本\n\n  - `module.exports = {}`\n\n  1. .eslintrc.js\n  2. .eslintrc.cjs\n  3. .eslintrc.yaml\n  4. .eslintrc.yml\n  5. .eslintrc.json\n\n- 9.x 版本\n\n  - `export default []`\n\n  1. eslint.config.js\n  2. eslint.config.mjs\n  3. eslint.config.cjs\n\n### 8.x 版本配置\n\n```js\n// .eslintrc.js\nmodule.exports = {\n\t// 配置根目录\n\troot: true,\n\t// 配置环境,支持的环境\n\tenv: {\n\t\tnode: true,\n\t\tbrowser: true,\n\t\tes2021: true,\n\t},\n\t// 继承的插件\n\textends: [\n\t\t// https://github.com/antfu/vue-global-api\n\t\t\"vue-global-api\",\n\t\t// eslint:recommended 或者 eslint:all\n\t\t// 开启eslint规则，eslint:all 代表开启所有的规则（官方不推荐此规则）\n\t\t\"eslint:recommended\",\n\t\t// eslint-plugin-vue 插件\n\t\t\"plugin:vue/vue3-recommended\",\n\t\t// 是一个专为 Vue.js 项目设计的 TypeScript ESLint 配置包。它旨在帮助开发者在使用 TypeScript 和 Vue.js 时\n\t\t// https://www.npmjs.com/package/@vue/eslint-config-typescript\n\t\t\"@vue/eslint-config-typescript/recommended\",\n\t\t// 启用prettier/prettier规则\n\t\t\"plugin:prettier/recommended\",\n\t\t// https://www.npmjs.com/package/@vue/eslint-config-prettier\n\t\t// 主要需要安装8.0的版本\n\t\t\"@vue/eslint-config-prettier\",\n\t],\n\t// 配置规则\n\trules: {},\n};\n```\n\n### 9.x 版本配置\n\n关于`9.0`的说明，在[vue 项目创建](/brochure/project/product/init_vuel#eslint)中就提到了\n\n```js\nimport js from \"@eslint/js\";\nimport globals from \"globals\";\nimport ts from \"typescript-eslint\";\n\nimport eslintPluginPrettierRecommended from \"eslint-plugin-prettier/recommended\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport vueTsEslintConfig from \"@vue/eslint-config-typescript\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tjs.configs.recommended,\n\t// ts 默认推荐规则\n\t...ts.configs.recommended,\n\t// vue3 基础推荐规则\n\t// https://www.npmjs.com/package/@vue/eslint-config-typescript\n\t...pluginVue.configs[\"flat/essential\"],\n\t...vueTsEslintConfig(),\n\t// prettier 默认推荐规则\n\t// https://github.com/prettier/eslint-plugin-prettier?tab=readme-ov-file\n\teslintPluginPrettierRecommended,\n\t// 忽略dist目录\n\t{ ignores: [\"dist/\"] },\n];\n```\n\n### 什么是 rules\n\n```json\n{\n\t\"rules\": {\n\t\t\"semi\": [\"error\", \"always\"],\n\t\t\"quotes\": [\"error\", \"double\"]\n\t}\n}\n```\n\n名称“semi”和“quotes”是 ESLint 中规则的名称。第一个值是规则的错误级别，可以是以下值之一：\n\n- `\"off\"` 或则 `0` - 关闭规则\n- `\"warn\"` or `1` - 显示警告 (不会影响 exit code)\n- `\"error\"` or `2` - 显示错误 (exit code 会是 1)\n\n## .eslintignore\n\n`eslint` 忽略规则类似如下：\n\n```bash\n/library/build/unplugin/components.d.ts\nnode_modules\nsrc/assets\nsrc/icons\npublic\ndist\n```\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t\"lint:fix\": \"eslint {src,mock,library}/**/*.{vue,js,ts} --fix\"\n\t}\n}\n```\n","source":"_posts/技能小册/项目管理/工程化/eslint.md","raw":"---\ntitle: 项目工程化-eslint\nabbrlink: cd69ee4d\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# eslint\n\n`ESLint` 是一个可配置的 `JavaScript linter`。它可以帮助您发现并修复 `JavaScript` 代码中的问题。问题可以是任何问题，从潜在的运行时错误，到不遵循最佳实践，再到样式问题\n\n## 配置文件\n\n配置文件的名字有很多，版本的不同会导致不同的导出语法：\n\n首先说明文件名的变动\n\n- 8.x 版本\n\n  - `module.exports = {}`\n\n  1. .eslintrc.js\n  2. .eslintrc.cjs\n  3. .eslintrc.yaml\n  4. .eslintrc.yml\n  5. .eslintrc.json\n\n- 9.x 版本\n\n  - `export default []`\n\n  1. eslint.config.js\n  2. eslint.config.mjs\n  3. eslint.config.cjs\n\n### 8.x 版本配置\n\n```js\n// .eslintrc.js\nmodule.exports = {\n\t// 配置根目录\n\troot: true,\n\t// 配置环境,支持的环境\n\tenv: {\n\t\tnode: true,\n\t\tbrowser: true,\n\t\tes2021: true,\n\t},\n\t// 继承的插件\n\textends: [\n\t\t// https://github.com/antfu/vue-global-api\n\t\t\"vue-global-api\",\n\t\t// eslint:recommended 或者 eslint:all\n\t\t// 开启eslint规则，eslint:all 代表开启所有的规则（官方不推荐此规则）\n\t\t\"eslint:recommended\",\n\t\t// eslint-plugin-vue 插件\n\t\t\"plugin:vue/vue3-recommended\",\n\t\t// 是一个专为 Vue.js 项目设计的 TypeScript ESLint 配置包。它旨在帮助开发者在使用 TypeScript 和 Vue.js 时\n\t\t// https://www.npmjs.com/package/@vue/eslint-config-typescript\n\t\t\"@vue/eslint-config-typescript/recommended\",\n\t\t// 启用prettier/prettier规则\n\t\t\"plugin:prettier/recommended\",\n\t\t// https://www.npmjs.com/package/@vue/eslint-config-prettier\n\t\t// 主要需要安装8.0的版本\n\t\t\"@vue/eslint-config-prettier\",\n\t],\n\t// 配置规则\n\trules: {},\n};\n```\n\n### 9.x 版本配置\n\n关于`9.0`的说明，在[vue 项目创建](/brochure/project/product/init_vuel#eslint)中就提到了\n\n```js\nimport js from \"@eslint/js\";\nimport globals from \"globals\";\nimport ts from \"typescript-eslint\";\n\nimport eslintPluginPrettierRecommended from \"eslint-plugin-prettier/recommended\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport vueTsEslintConfig from \"@vue/eslint-config-typescript\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tjs.configs.recommended,\n\t// ts 默认推荐规则\n\t...ts.configs.recommended,\n\t// vue3 基础推荐规则\n\t// https://www.npmjs.com/package/@vue/eslint-config-typescript\n\t...pluginVue.configs[\"flat/essential\"],\n\t...vueTsEslintConfig(),\n\t// prettier 默认推荐规则\n\t// https://github.com/prettier/eslint-plugin-prettier?tab=readme-ov-file\n\teslintPluginPrettierRecommended,\n\t// 忽略dist目录\n\t{ ignores: [\"dist/\"] },\n];\n```\n\n### 什么是 rules\n\n```json\n{\n\t\"rules\": {\n\t\t\"semi\": [\"error\", \"always\"],\n\t\t\"quotes\": [\"error\", \"double\"]\n\t}\n}\n```\n\n名称“semi”和“quotes”是 ESLint 中规则的名称。第一个值是规则的错误级别，可以是以下值之一：\n\n- `\"off\"` 或则 `0` - 关闭规则\n- `\"warn\"` or `1` - 显示警告 (不会影响 exit code)\n- `\"error\"` or `2` - 显示错误 (exit code 会是 1)\n\n## .eslintignore\n\n`eslint` 忽略规则类似如下：\n\n```bash\n/library/build/unplugin/components.d.ts\nnode_modules\nsrc/assets\nsrc/icons\npublic\ndist\n```\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t\"lint:fix\": \"eslint {src,mock,library}/**/*.{vue,js,ts} --fix\"\n\t}\n}\n```\n","slug":"技能小册/项目管理/工程化/eslint","published":1,"updated":"2025-03-12T09:38:15.172Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j9007bfg9m45j4e1al","content":"<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p><code>ESLint</code> 是一个可配置的 <code>JavaScript linter</code>。它可以帮助您发现并修复 <code>JavaScript</code> 代码中的问题。问题可以是任何问题，从潜在的运行时错误，到不遵循最佳实践，再到样式问题</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>配置文件的名字有很多，版本的不同会导致不同的导出语法：</p>\n<p>首先说明文件名的变动</p>\n<ul>\n<li><p>8.x 版本</p>\n<ul>\n<li><code>module.exports = &#123;&#125;</code></li>\n</ul>\n<ol>\n<li>.eslintrc.js</li>\n<li>.eslintrc.cjs</li>\n<li>.eslintrc.yaml</li>\n<li>.eslintrc.yml</li>\n<li>.eslintrc.json</li>\n</ol>\n</li>\n<li><p>9.x 版本</p>\n<ul>\n<li><code>export default []</code></li>\n</ul>\n<ol>\n<li>eslint.config.js</li>\n<li>eslint.config.mjs</li>\n<li>eslint.config.cjs</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"8-x-版本配置\"><a href=\"#8-x-版本配置\" class=\"headerlink\" title=\"8.x 版本配置\"></a>8.x 版本配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslintrc.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 配置根目录</span></span><br><span class=\"line\">\t<span class=\"attr\">root</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 配置环境,支持的环境</span></span><br><span class=\"line\">\t<span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">node</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">browser</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">es2021</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 继承的插件</span></span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// https://github.com/antfu/vue-global-api</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-global-api&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// eslint:recommended 或者 eslint:all</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 开启eslint规则，eslint:all 代表开启所有的规则（官方不推荐此规则）</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// eslint-plugin-vue 插件</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;plugin:vue/vue3-recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是一个专为 Vue.js 项目设计的 TypeScript ESLint 配置包。它旨在帮助开发者在使用 TypeScript 和 Vue.js 时</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-typescript</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/eslint-config-typescript/recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 启用prettier/prettier规则</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-prettier</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 主要需要安装8.0的版本</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/eslint-config-prettier&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 配置规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-x-版本配置\"><a href=\"#9-x-版本配置\" class=\"headerlink\" title=\"9.x 版本配置\"></a>9.x 版本配置</h3><p>关于<code>9.0</code>的说明，在<a href=\"/brochure/project/product/init_vuel#eslint\">vue 项目创建</a>中就提到了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> js <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ts <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> eslintPluginPrettierRecommended <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vueTsEslintConfig <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/eslint-config-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tjs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...ts.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-typescript</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">\t...<span class=\"title function_\">vueTsEslintConfig</span>(),</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/prettier/eslint-plugin-prettier?tab=readme-ov-file</span></span><br><span class=\"line\">\teslintPluginPrettierRecommended,</span><br><span class=\"line\">\t<span class=\"comment\">// 忽略dist目录</span></span><br><span class=\"line\">\t&#123; <span class=\"attr\">ignores</span>: [<span class=\"string\">&quot;dist/&quot;</span>] &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是-rules\"><a href=\"#什么是-rules\" class=\"headerlink\" title=\"什么是 rules\"></a>什么是 rules</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;always&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;quotes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;double&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>名称“semi”和“quotes”是 ESLint 中规则的名称。第一个值是规则的错误级别，可以是以下值之一：</p>\n<ul>\n<li><code>&quot;off&quot;</code> 或则 <code>0</code> - 关闭规则</li>\n<li><code>&quot;warn&quot;</code> or <code>1</code> - 显示警告 (不会影响 exit code)</li>\n<li><code>&quot;error&quot;</code> or <code>2</code> - 显示错误 (exit code 会是 1)</li>\n</ul>\n<h2 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h2><p><code>eslint</code> 忽略规则类似如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/library/build/unplugin/components.d.ts</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">src/assets</span><br><span class=\"line\">src/icons</span><br><span class=\"line\">public</span><br><span class=\"line\">dist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint &#123;src,mock,library&#125;/**/*.&#123;vue,js,ts&#125; --fix&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p><code>ESLint</code> 是一个可配置的 <code>JavaScript linter</code>。它可以帮助您发现并修复 <code>JavaScript</code> 代码中的问题。问题可以是任何问题，从潜在的运行时错误，到不遵循最佳实践，再到样式问题</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>配置文件的名字有很多，版本的不同会导致不同的导出语法：</p>\n<p>首先说明文件名的变动</p>\n<ul>\n<li><p>8.x 版本</p>\n<ul>\n<li><code>module.exports = &#123;&#125;</code></li>\n</ul>\n<ol>\n<li>.eslintrc.js</li>\n<li>.eslintrc.cjs</li>\n<li>.eslintrc.yaml</li>\n<li>.eslintrc.yml</li>\n<li>.eslintrc.json</li>\n</ol>\n</li>\n<li><p>9.x 版本</p>\n<ul>\n<li><code>export default []</code></li>\n</ul>\n<ol>\n<li>eslint.config.js</li>\n<li>eslint.config.mjs</li>\n<li>eslint.config.cjs</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"8-x-版本配置\"><a href=\"#8-x-版本配置\" class=\"headerlink\" title=\"8.x 版本配置\"></a>8.x 版本配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslintrc.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 配置根目录</span></span><br><span class=\"line\">\t<span class=\"attr\">root</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 配置环境,支持的环境</span></span><br><span class=\"line\">\t<span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">node</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">browser</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">es2021</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 继承的插件</span></span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// https://github.com/antfu/vue-global-api</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-global-api&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// eslint:recommended 或者 eslint:all</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 开启eslint规则，eslint:all 代表开启所有的规则（官方不推荐此规则）</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// eslint-plugin-vue 插件</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;plugin:vue/vue3-recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是一个专为 Vue.js 项目设计的 TypeScript ESLint 配置包。它旨在帮助开发者在使用 TypeScript 和 Vue.js 时</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-typescript</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/eslint-config-typescript/recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 启用prettier/prettier规则</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;plugin:prettier/recommended&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-prettier</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 主要需要安装8.0的版本</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/eslint-config-prettier&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 配置规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-x-版本配置\"><a href=\"#9-x-版本配置\" class=\"headerlink\" title=\"9.x 版本配置\"></a>9.x 版本配置</h3><p>关于<code>9.0</code>的说明，在<a href=\"/brochure/project/product/init_vuel#eslint\">vue 项目创建</a>中就提到了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> js <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ts <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> eslintPluginPrettierRecommended <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vueTsEslintConfig <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/eslint-config-typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tjs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...ts.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://www.npmjs.com/package/@vue/eslint-config-typescript</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">\t...<span class=\"title function_\">vueTsEslintConfig</span>(),</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/prettier/eslint-plugin-prettier?tab=readme-ov-file</span></span><br><span class=\"line\">\teslintPluginPrettierRecommended,</span><br><span class=\"line\">\t<span class=\"comment\">// 忽略dist目录</span></span><br><span class=\"line\">\t&#123; <span class=\"attr\">ignores</span>: [<span class=\"string\">&quot;dist/&quot;</span>] &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是-rules\"><a href=\"#什么是-rules\" class=\"headerlink\" title=\"什么是 rules\"></a>什么是 rules</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;always&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;quotes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;double&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>名称“semi”和“quotes”是 ESLint 中规则的名称。第一个值是规则的错误级别，可以是以下值之一：</p>\n<ul>\n<li><code>&quot;off&quot;</code> 或则 <code>0</code> - 关闭规则</li>\n<li><code>&quot;warn&quot;</code> or <code>1</code> - 显示警告 (不会影响 exit code)</li>\n<li><code>&quot;error&quot;</code> or <code>2</code> - 显示错误 (exit code 会是 1)</li>\n</ul>\n<h2 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h2><p><code>eslint</code> 忽略规则类似如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/library/build/unplugin/components.d.ts</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">src/assets</span><br><span class=\"line\">src/icons</span><br><span class=\"line\">public</span><br><span class=\"line\">dist</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:fix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint &#123;src,mock,library&#125;/**/*.&#123;vue,js,ts&#125; --fix&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-husky","abbrlink":"cae636c2","date":"2024-08-08T01:05:01.000Z","_content":"\n# husky\n\n`Husky` 作为一个强大的`Git`钩子管理器，通过自动化代码质量检查和测试流程，极大地提升了软件开发团队的工作效率和代码质量。 通过合理配置，它能够帮助开发者在提交代码之前发现并修正潜在的问题，从而减少后续的修复成本和沟通成本。\n\n在项目中，经常使用`husky + lint-staged`再提交代码之前做一系列代码格式操作，因为项目中安装的`eslint + stylelint + perttier`有可能会出现如果代码没有进行格式化，那么在钩子管理器中检测执行对应的格式化命令；这样保证代码的规范性；\n\n## 安装对应的依赖\n\n```bash\npnpm add -D husky lint-staged @commitlint/cli @commitlint/config-conventional\n```\n\n- `husky`: `Git hooks` 工具，对`git`执行的一些命令，通过对应的`hooks`钩子触发，执行自定义的脚本程序\n- `lint-staged`: 检测文件插件，只检测`git add .` 中暂存区的文件，对过滤出的文件执行脚本\n- `@commitlint/cli`与`@commitlint/config-conventional`是提交规范配置\n\n## lint-staged 配置\n\n```json\n{\n\t\"scripts\": {},\n\t// 注意：和scripts是同级\n\t\"lint-staged\": {\n\t\t\"*.{js,ts,vue,json}\": [\n\t\t\t\"pnpm run lint:fix\",\n\t\t\t\"pnpm run lint:format\",\n\t\t\t\"pnpm run lint:style\",\n\t\t\t\"git add\"\n\t\t]\n\t}\n}\n```\n\n关于`lint:fix, lint:format, lint:style`是什么？\n\n- [`link:fix`](/brochure/05_项目管理/02_工程化/.eslint.html#在package-json配置)\n- [`link:format`](/brochure/05_项目管理/02_工程化/.prettier.html#在package-json配置)\n- [`link:style`](/brochure/05_项目管理/02_工程化/.stylelint.html#在package-json配置)\n\n## commitlint 配置\n\n安装成功`@commitlint/cli`与`@commitlint/config-conventional`之后，需要在项目根目录中添加配置文件`commitlint.config.cjs`\n\n```js\nmodule.exports = {\n\textends: [\"@commitlint/config-conventional\"],\n\t// 校验规则\n\trules: {\n\t\t\"type-enum\": [\n\t\t\t2,\n\t\t\t\"always\",\n\t\t\t[\n\t\t\t\t\"feat\",\n\t\t\t\t\"fix\",\n\t\t\t\t\"docs\",\n\t\t\t\t\"style\",\n\t\t\t\t\"refactor\",\n\t\t\t\t\"perf\",\n\t\t\t\t\"test\",\n\t\t\t\t\"chore\",\n\t\t\t\t\"revert\",\n\t\t\t\t\"build\",\n\t\t\t],\n\t\t],\n\t\t\"type-case\": [0],\n\t\t\"type-empty\": [0],\n\t\t\"scope-empty\": [0],\n\t\t\"scope-case\": [0],\n\t\t\"subject-full-stop\": [0, \"never\"],\n\t\t\"subject-case\": [0, \"never\"],\n\t\t\"header-max-length\": [0, \"always\", 72],\n\t},\n};\n```\n\n接着需要在`package.json`中配置命令：\n\n```json\n{\n\t// commitlint.config.cjs需要在项目根目录添加这个配置文件\n\t\"scripts\": {\n\t\t\"commitlint\": \"commitlint --config commitlint.config.cjs -e -V\"\n\t}\n}\n```\n\n## 使用\n\n### 添加命令\n\n```json\n{\n\t\"scripts\": {\n\t\t\"prepare\": \"husky install\"\n\t}\n}\n```\n\n在执行`pnpm install`的时候, 就会执行`prepare`, 当然注意的是： `husky install`是需要你的项目是有`.git`配置的，如果没有则使用`git init`初始化即可；\n\n### 配置对应的钩子\n\n#### pre-commit\n\n在项目根目录找到`.husky`, 在这个目录中添加`pre-commit`文件，代码如下：\n\n```bash\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\npnpm exec lint-staged\n```\n\n在提交之前会执行`lint-staged`, 这样默认就会把代码格式修复一下\n\n### commit-msg\n\n在项目根目录找到`.husky`, 在这个目录中添加`commit-msg`文件，代码如下：\n\n```sh\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\npnpm commitlint\n\n```\n\n**commitlint 是什么？**\n\n> `commitlint`就是`package.json--->script--->commitlint命令`\n","source":"_posts/技能小册/项目管理/工程化/husky.md","raw":"---\ntitle: 项目工程化-husky\nabbrlink: cae636c2\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# husky\n\n`Husky` 作为一个强大的`Git`钩子管理器，通过自动化代码质量检查和测试流程，极大地提升了软件开发团队的工作效率和代码质量。 通过合理配置，它能够帮助开发者在提交代码之前发现并修正潜在的问题，从而减少后续的修复成本和沟通成本。\n\n在项目中，经常使用`husky + lint-staged`再提交代码之前做一系列代码格式操作，因为项目中安装的`eslint + stylelint + perttier`有可能会出现如果代码没有进行格式化，那么在钩子管理器中检测执行对应的格式化命令；这样保证代码的规范性；\n\n## 安装对应的依赖\n\n```bash\npnpm add -D husky lint-staged @commitlint/cli @commitlint/config-conventional\n```\n\n- `husky`: `Git hooks` 工具，对`git`执行的一些命令，通过对应的`hooks`钩子触发，执行自定义的脚本程序\n- `lint-staged`: 检测文件插件，只检测`git add .` 中暂存区的文件，对过滤出的文件执行脚本\n- `@commitlint/cli`与`@commitlint/config-conventional`是提交规范配置\n\n## lint-staged 配置\n\n```json\n{\n\t\"scripts\": {},\n\t// 注意：和scripts是同级\n\t\"lint-staged\": {\n\t\t\"*.{js,ts,vue,json}\": [\n\t\t\t\"pnpm run lint:fix\",\n\t\t\t\"pnpm run lint:format\",\n\t\t\t\"pnpm run lint:style\",\n\t\t\t\"git add\"\n\t\t]\n\t}\n}\n```\n\n关于`lint:fix, lint:format, lint:style`是什么？\n\n- [`link:fix`](/brochure/05_项目管理/02_工程化/.eslint.html#在package-json配置)\n- [`link:format`](/brochure/05_项目管理/02_工程化/.prettier.html#在package-json配置)\n- [`link:style`](/brochure/05_项目管理/02_工程化/.stylelint.html#在package-json配置)\n\n## commitlint 配置\n\n安装成功`@commitlint/cli`与`@commitlint/config-conventional`之后，需要在项目根目录中添加配置文件`commitlint.config.cjs`\n\n```js\nmodule.exports = {\n\textends: [\"@commitlint/config-conventional\"],\n\t// 校验规则\n\trules: {\n\t\t\"type-enum\": [\n\t\t\t2,\n\t\t\t\"always\",\n\t\t\t[\n\t\t\t\t\"feat\",\n\t\t\t\t\"fix\",\n\t\t\t\t\"docs\",\n\t\t\t\t\"style\",\n\t\t\t\t\"refactor\",\n\t\t\t\t\"perf\",\n\t\t\t\t\"test\",\n\t\t\t\t\"chore\",\n\t\t\t\t\"revert\",\n\t\t\t\t\"build\",\n\t\t\t],\n\t\t],\n\t\t\"type-case\": [0],\n\t\t\"type-empty\": [0],\n\t\t\"scope-empty\": [0],\n\t\t\"scope-case\": [0],\n\t\t\"subject-full-stop\": [0, \"never\"],\n\t\t\"subject-case\": [0, \"never\"],\n\t\t\"header-max-length\": [0, \"always\", 72],\n\t},\n};\n```\n\n接着需要在`package.json`中配置命令：\n\n```json\n{\n\t// commitlint.config.cjs需要在项目根目录添加这个配置文件\n\t\"scripts\": {\n\t\t\"commitlint\": \"commitlint --config commitlint.config.cjs -e -V\"\n\t}\n}\n```\n\n## 使用\n\n### 添加命令\n\n```json\n{\n\t\"scripts\": {\n\t\t\"prepare\": \"husky install\"\n\t}\n}\n```\n\n在执行`pnpm install`的时候, 就会执行`prepare`, 当然注意的是： `husky install`是需要你的项目是有`.git`配置的，如果没有则使用`git init`初始化即可；\n\n### 配置对应的钩子\n\n#### pre-commit\n\n在项目根目录找到`.husky`, 在这个目录中添加`pre-commit`文件，代码如下：\n\n```bash\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\npnpm exec lint-staged\n```\n\n在提交之前会执行`lint-staged`, 这样默认就会把代码格式修复一下\n\n### commit-msg\n\n在项目根目录找到`.husky`, 在这个目录中添加`commit-msg`文件，代码如下：\n\n```sh\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\npnpm commitlint\n\n```\n\n**commitlint 是什么？**\n\n> `commitlint`就是`package.json--->script--->commitlint命令`\n","slug":"技能小册/项目管理/工程化/husky","published":1,"updated":"2025-03-12T09:38:10.245Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j9007ffg9m8vvd3k8k","content":"<h1 id=\"husky\"><a href=\"#husky\" class=\"headerlink\" title=\"husky\"></a>husky</h1><p><code>Husky</code> 作为一个强大的<code>Git</code>钩子管理器，通过自动化代码质量检查和测试流程，极大地提升了软件开发团队的工作效率和代码质量。 通过合理配置，它能够帮助开发者在提交代码之前发现并修正潜在的问题，从而减少后续的修复成本和沟通成本。</p>\n<p>在项目中，经常使用<code>husky + lint-staged</code>再提交代码之前做一系列代码格式操作，因为项目中安装的<code>eslint + stylelint + perttier</code>有可能会出现如果代码没有进行格式化，那么在钩子管理器中检测执行对应的格式化命令；这样保证代码的规范性；</p>\n<h2 id=\"安装对应的依赖\"><a href=\"#安装对应的依赖\" class=\"headerlink\" title=\"安装对应的依赖\"></a>安装对应的依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D husky lint-staged @commitlint/cli @commitlint/config-conventional</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>husky</code>: <code>Git hooks</code> 工具，对<code>git</code>执行的一些命令，通过对应的<code>hooks</code>钩子触发，执行自定义的脚本程序</li>\n<li><code>lint-staged</code>: 检测文件插件，只检测<code>git add .</code> 中暂存区的文件，对过滤出的文件执行脚本</li>\n<li><code>@commitlint/cli</code>与<code>@commitlint/config-conventional</code>是提交规范配置</li>\n</ul>\n<h2 id=\"lint-staged-配置\"><a href=\"#lint-staged-配置\" class=\"headerlink\" title=\"lint-staged 配置\"></a>lint-staged 配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意：和scripts是同级</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;*.&#123;js,ts,vue,json&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:style&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;git add&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>关于<code>lint:fix, lint:format, lint:style</code>是什么？</p>\n<ul>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.eslint.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:fix</code></a></li>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.prettier.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:format</code></a></li>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.stylelint.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:style</code></a></li>\n</ul>\n<h2 id=\"commitlint-配置\"><a href=\"#commitlint-配置\" class=\"headerlink\" title=\"commitlint 配置\"></a>commitlint 配置</h2><p>安装成功<code>@commitlint/cli</code>与<code>@commitlint/config-conventional</code>之后，需要在项目根目录中添加配置文件<code>commitlint.config.cjs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [<span class=\"string\">&quot;@commitlint/config-conventional&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 校验规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-enum&quot;</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">\t\t\t[</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;feat&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;fix&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;docs&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;style&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;perf&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;chore&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;revert&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-empty&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;scope-empty&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;scope-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;subject-full-stop&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;subject-case&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;header-max-length&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接着需要在<code>package.json</code>中配置命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// commitlint.config.cjs需要在项目根目录添加这个配置文件</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitlint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在执行<code>pnpm install</code>的时候, 就会执行<code>prepare</code>, 当然注意的是： <code>husky install</code>是需要你的项目是有<code>.git</code>配置的，如果没有则使用<code>git init</code>初始化即可；</p>\n<h3 id=\"配置对应的钩子\"><a href=\"#配置对应的钩子\" class=\"headerlink\" title=\"配置对应的钩子\"></a>配置对应的钩子</h3><h4 id=\"pre-commit\"><a href=\"#pre-commit\" class=\"headerlink\" title=\"pre-commit\"></a>pre-commit</h4><p>在项目根目录找到<code>.husky</code>, 在这个目录中添加<code>pre-commit</code>文件，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\">pnpm <span class=\"built_in\">exec</span> lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>在提交之前会执行<code>lint-staged</code>, 这样默认就会把代码格式修复一下</p>\n<h3 id=\"commit-msg\"><a href=\"#commit-msg\" class=\"headerlink\" title=\"commit-msg\"></a>commit-msg</h3><p>在项目根目录找到<code>.husky</code>, 在这个目录中添加<code>commit-msg</code>文件，代码如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pnpm commitlint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>commitlint 是什么？</strong></p>\n<blockquote>\n<p><code>commitlint</code>就是<code>package.json---&gt;script---&gt;commitlint命令</code></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"husky\"><a href=\"#husky\" class=\"headerlink\" title=\"husky\"></a>husky</h1><p><code>Husky</code> 作为一个强大的<code>Git</code>钩子管理器，通过自动化代码质量检查和测试流程，极大地提升了软件开发团队的工作效率和代码质量。 通过合理配置，它能够帮助开发者在提交代码之前发现并修正潜在的问题，从而减少后续的修复成本和沟通成本。</p>\n<p>在项目中，经常使用<code>husky + lint-staged</code>再提交代码之前做一系列代码格式操作，因为项目中安装的<code>eslint + stylelint + perttier</code>有可能会出现如果代码没有进行格式化，那么在钩子管理器中检测执行对应的格式化命令；这样保证代码的规范性；</p>\n<h2 id=\"安装对应的依赖\"><a href=\"#安装对应的依赖\" class=\"headerlink\" title=\"安装对应的依赖\"></a>安装对应的依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D husky lint-staged @commitlint/cli @commitlint/config-conventional</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>husky</code>: <code>Git hooks</code> 工具，对<code>git</code>执行的一些命令，通过对应的<code>hooks</code>钩子触发，执行自定义的脚本程序</li>\n<li><code>lint-staged</code>: 检测文件插件，只检测<code>git add .</code> 中暂存区的文件，对过滤出的文件执行脚本</li>\n<li><code>@commitlint/cli</code>与<code>@commitlint/config-conventional</code>是提交规范配置</li>\n</ul>\n<h2 id=\"lint-staged-配置\"><a href=\"#lint-staged-配置\" class=\"headerlink\" title=\"lint-staged 配置\"></a>lint-staged 配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意：和scripts是同级</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;*.&#123;js,ts,vue,json&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:format&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;pnpm run lint:style&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;git add&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>关于<code>lint:fix, lint:format, lint:style</code>是什么？</p>\n<ul>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.eslint.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:fix</code></a></li>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.prettier.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:format</code></a></li>\n<li><a href=\"/brochure/05_%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02_%E5%B7%A5%E7%A8%8B%E5%8C%96/.stylelint.html#%E5%9C%A8package-json%E9%85%8D%E7%BD%AE\"><code>link:style</code></a></li>\n</ul>\n<h2 id=\"commitlint-配置\"><a href=\"#commitlint-配置\" class=\"headerlink\" title=\"commitlint 配置\"></a>commitlint 配置</h2><p>安装成功<code>@commitlint/cli</code>与<code>@commitlint/config-conventional</code>之后，需要在项目根目录中添加配置文件<code>commitlint.config.cjs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [<span class=\"string\">&quot;@commitlint/config-conventional&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// 校验规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-enum&quot;</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">\t\t\t[</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;feat&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;fix&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;docs&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;style&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;refactor&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;perf&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;chore&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;revert&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;type-empty&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;scope-empty&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;scope-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;subject-full-stop&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;subject-case&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;header-max-length&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接着需要在<code>package.json</code>中配置命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// commitlint.config.cjs需要在项目根目录添加这个配置文件</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitlint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"添加命令\"><a href=\"#添加命令\" class=\"headerlink\" title=\"添加命令\"></a>添加命令</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在执行<code>pnpm install</code>的时候, 就会执行<code>prepare</code>, 当然注意的是： <code>husky install</code>是需要你的项目是有<code>.git</code>配置的，如果没有则使用<code>git init</code>初始化即可；</p>\n<h3 id=\"配置对应的钩子\"><a href=\"#配置对应的钩子\" class=\"headerlink\" title=\"配置对应的钩子\"></a>配置对应的钩子</h3><h4 id=\"pre-commit\"><a href=\"#pre-commit\" class=\"headerlink\" title=\"pre-commit\"></a>pre-commit</h4><p>在项目根目录找到<code>.husky</code>, 在这个目录中添加<code>pre-commit</code>文件，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\">pnpm <span class=\"built_in\">exec</span> lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>在提交之前会执行<code>lint-staged</code>, 这样默认就会把代码格式修复一下</p>\n<h3 id=\"commit-msg\"><a href=\"#commit-msg\" class=\"headerlink\" title=\"commit-msg\"></a>commit-msg</h3><p>在项目根目录找到<code>.husky</code>, 在这个目录中添加<code>commit-msg</code>文件，代码如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">. <span class=\"string\">&quot;<span class=\"subst\">$(dirname -- <span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pnpm commitlint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>commitlint 是什么？</strong></p>\n<blockquote>\n<p><code>commitlint</code>就是<code>package.json---&gt;script---&gt;commitlint命令</code></p>\n</blockquote>\n"},{"title":"webpack和vite的区别?","abbrlink":"ae321f5","date":"2024-08-08T01:05:01.000Z","_content":"\n# 区别?\n\n在使用`vite`之前，项目基本都是使用的`webpack`, 但是针对于`wite`和`webpack`的区别如下：\n\n## 开发模式\n\n1. `webpack` 在开发过程中，它首先需要完全构建整个项目，生成一个或多个 bundle，然后通过热模块替换（HMR）来更新变化的部分。\n2. `vite` Vite 使用原生 ES 模块和即时编译，允许在不完整构建的情况下直接加载源代码，提供更快的初始启动时间和按需编译。\n\n## 启动速度\n\n1. `webpack`启动时是需要先编译整个项目，小型项目还好但是对于大型项目，编译时间会比较长;\n2. `vite` 是预构建和按需编译 但是在启动速度上优于`webpack`。\n\n## 打包效率\n\n1. `webpack` 提供丰富的插件与加载器生态系统，可以处理复杂的构建需求，但是这也是缺点，因为需要更多的配置和依赖。一定程度上导致较长的打包时间\n2. `vite` 使用`esbuild`进行打包，`esbuild` 是一个快速、小巧的 JavaScript 构建工具，可以快速构建项目，并且可以支持 TypeScript、Vue、React 等。但是在对项目的高级优化与定制化方面没有`webpack`强大\n\n## 底层实现\n\n1. `webpack` 基于`Nodejs`，打包速度限制与`js`单线程，对于大项目而言构建速度受其影响\n2. `vite` esbuild(go 语言开发) 基于`Go`语言，打包速度限制与`Go`多线程，对于大项目而言构建速度不受其影响\n\n## 生态和成熟\n\n1. `webpack` 社区生态丰富，许多插件和 loader 已经开源 可用于复杂的场景\n2. `vite` 不如`webpack` 社区生态丰富，在特定的构建需求和定制化插件方面不如`webpack`完善\n\n## 生产环境\n\n1. `webpack` 在生产环境中. 能够提供高度优化的输出, 如代码分割和压缩, 缓存, 模块热更新等.\n2. `vite` 在某些情况在需要安装额外的配置或者插件才能做到\n","source":"_posts/技能小册/项目管理/工程化/webpack和vite的区别.md","raw":"---\ntitle: webpack和vite的区别?\nabbrlink: ae321f5\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# 区别?\n\n在使用`vite`之前，项目基本都是使用的`webpack`, 但是针对于`wite`和`webpack`的区别如下：\n\n## 开发模式\n\n1. `webpack` 在开发过程中，它首先需要完全构建整个项目，生成一个或多个 bundle，然后通过热模块替换（HMR）来更新变化的部分。\n2. `vite` Vite 使用原生 ES 模块和即时编译，允许在不完整构建的情况下直接加载源代码，提供更快的初始启动时间和按需编译。\n\n## 启动速度\n\n1. `webpack`启动时是需要先编译整个项目，小型项目还好但是对于大型项目，编译时间会比较长;\n2. `vite` 是预构建和按需编译 但是在启动速度上优于`webpack`。\n\n## 打包效率\n\n1. `webpack` 提供丰富的插件与加载器生态系统，可以处理复杂的构建需求，但是这也是缺点，因为需要更多的配置和依赖。一定程度上导致较长的打包时间\n2. `vite` 使用`esbuild`进行打包，`esbuild` 是一个快速、小巧的 JavaScript 构建工具，可以快速构建项目，并且可以支持 TypeScript、Vue、React 等。但是在对项目的高级优化与定制化方面没有`webpack`强大\n\n## 底层实现\n\n1. `webpack` 基于`Nodejs`，打包速度限制与`js`单线程，对于大项目而言构建速度受其影响\n2. `vite` esbuild(go 语言开发) 基于`Go`语言，打包速度限制与`Go`多线程，对于大项目而言构建速度不受其影响\n\n## 生态和成熟\n\n1. `webpack` 社区生态丰富，许多插件和 loader 已经开源 可用于复杂的场景\n2. `vite` 不如`webpack` 社区生态丰富，在特定的构建需求和定制化插件方面不如`webpack`完善\n\n## 生产环境\n\n1. `webpack` 在生产环境中. 能够提供高度优化的输出, 如代码分割和压缩, 缓存, 模块热更新等.\n2. `vite` 在某些情况在需要安装额外的配置或者插件才能做到\n","slug":"技能小册/项目管理/工程化/webpack和vite的区别","published":1,"updated":"2025-03-12T09:37:58.608Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0j9007hfg9m9mef8n10","content":"<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别?\"></a>区别?</h1><p>在使用<code>vite</code>之前，项目基本都是使用的<code>webpack</code>, 但是针对于<code>wite</code>和<code>webpack</code>的区别如下：</p>\n<h2 id=\"开发模式\"><a href=\"#开发模式\" class=\"headerlink\" title=\"开发模式\"></a>开发模式</h2><ol>\n<li><code>webpack</code> 在开发过程中，它首先需要完全构建整个项目，生成一个或多个 bundle，然后通过热模块替换（HMR）来更新变化的部分。</li>\n<li><code>vite</code> Vite 使用原生 ES 模块和即时编译，允许在不完整构建的情况下直接加载源代码，提供更快的初始启动时间和按需编译。</li>\n</ol>\n<h2 id=\"启动速度\"><a href=\"#启动速度\" class=\"headerlink\" title=\"启动速度\"></a>启动速度</h2><ol>\n<li><code>webpack</code>启动时是需要先编译整个项目，小型项目还好但是对于大型项目，编译时间会比较长;</li>\n<li><code>vite</code> 是预构建和按需编译 但是在启动速度上优于<code>webpack</code>。</li>\n</ol>\n<h2 id=\"打包效率\"><a href=\"#打包效率\" class=\"headerlink\" title=\"打包效率\"></a>打包效率</h2><ol>\n<li><code>webpack</code> 提供丰富的插件与加载器生态系统，可以处理复杂的构建需求，但是这也是缺点，因为需要更多的配置和依赖。一定程度上导致较长的打包时间</li>\n<li><code>vite</code> 使用<code>esbuild</code>进行打包，<code>esbuild</code> 是一个快速、小巧的 JavaScript 构建工具，可以快速构建项目，并且可以支持 TypeScript、Vue、React 等。但是在对项目的高级优化与定制化方面没有<code>webpack</code>强大</li>\n</ol>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><ol>\n<li><code>webpack</code> 基于<code>Nodejs</code>，打包速度限制与<code>js</code>单线程，对于大项目而言构建速度受其影响</li>\n<li><code>vite</code> esbuild(go 语言开发) 基于<code>Go</code>语言，打包速度限制与<code>Go</code>多线程，对于大项目而言构建速度不受其影响</li>\n</ol>\n<h2 id=\"生态和成熟\"><a href=\"#生态和成熟\" class=\"headerlink\" title=\"生态和成熟\"></a>生态和成熟</h2><ol>\n<li><code>webpack</code> 社区生态丰富，许多插件和 loader 已经开源 可用于复杂的场景</li>\n<li><code>vite</code> 不如<code>webpack</code> 社区生态丰富，在特定的构建需求和定制化插件方面不如<code>webpack</code>完善</li>\n</ol>\n<h2 id=\"生产环境\"><a href=\"#生产环境\" class=\"headerlink\" title=\"生产环境\"></a>生产环境</h2><ol>\n<li><code>webpack</code> 在生产环境中. 能够提供高度优化的输出, 如代码分割和压缩, 缓存, 模块热更新等.</li>\n<li><code>vite</code> 在某些情况在需要安装额外的配置或者插件才能做到</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别?\"></a>区别?</h1><p>在使用<code>vite</code>之前，项目基本都是使用的<code>webpack</code>, 但是针对于<code>wite</code>和<code>webpack</code>的区别如下：</p>\n<h2 id=\"开发模式\"><a href=\"#开发模式\" class=\"headerlink\" title=\"开发模式\"></a>开发模式</h2><ol>\n<li><code>webpack</code> 在开发过程中，它首先需要完全构建整个项目，生成一个或多个 bundle，然后通过热模块替换（HMR）来更新变化的部分。</li>\n<li><code>vite</code> Vite 使用原生 ES 模块和即时编译，允许在不完整构建的情况下直接加载源代码，提供更快的初始启动时间和按需编译。</li>\n</ol>\n<h2 id=\"启动速度\"><a href=\"#启动速度\" class=\"headerlink\" title=\"启动速度\"></a>启动速度</h2><ol>\n<li><code>webpack</code>启动时是需要先编译整个项目，小型项目还好但是对于大型项目，编译时间会比较长;</li>\n<li><code>vite</code> 是预构建和按需编译 但是在启动速度上优于<code>webpack</code>。</li>\n</ol>\n<h2 id=\"打包效率\"><a href=\"#打包效率\" class=\"headerlink\" title=\"打包效率\"></a>打包效率</h2><ol>\n<li><code>webpack</code> 提供丰富的插件与加载器生态系统，可以处理复杂的构建需求，但是这也是缺点，因为需要更多的配置和依赖。一定程度上导致较长的打包时间</li>\n<li><code>vite</code> 使用<code>esbuild</code>进行打包，<code>esbuild</code> 是一个快速、小巧的 JavaScript 构建工具，可以快速构建项目，并且可以支持 TypeScript、Vue、React 等。但是在对项目的高级优化与定制化方面没有<code>webpack</code>强大</li>\n</ol>\n<h2 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h2><ol>\n<li><code>webpack</code> 基于<code>Nodejs</code>，打包速度限制与<code>js</code>单线程，对于大项目而言构建速度受其影响</li>\n<li><code>vite</code> esbuild(go 语言开发) 基于<code>Go</code>语言，打包速度限制与<code>Go</code>多线程，对于大项目而言构建速度不受其影响</li>\n</ol>\n<h2 id=\"生态和成熟\"><a href=\"#生态和成熟\" class=\"headerlink\" title=\"生态和成熟\"></a>生态和成熟</h2><ol>\n<li><code>webpack</code> 社区生态丰富，许多插件和 loader 已经开源 可用于复杂的场景</li>\n<li><code>vite</code> 不如<code>webpack</code> 社区生态丰富，在特定的构建需求和定制化插件方面不如<code>webpack</code>完善</li>\n</ol>\n<h2 id=\"生产环境\"><a href=\"#生产环境\" class=\"headerlink\" title=\"生产环境\"></a>生产环境</h2><ol>\n<li><code>webpack</code> 在生产环境中. 能够提供高度优化的输出, 如代码分割和压缩, 缓存, 模块热更新等.</li>\n<li><code>vite</code> 在某些情况在需要安装额外的配置或者插件才能做到</li>\n</ol>\n"},{"title":"项目工程化-prettier","abbrlink":"e3341f8b","date":"2024-08-08T01:05:01.000Z","_content":"\n# prettier\n\n`Prettier` 是一个固执己见的代码格式化程序\n\n一般通过以下方式使用 `prettier`\n\n- 使用 vscode 等代码编辑器的 `prettier` 插件：搭配快捷键如 ` ctrl+s`，保存时自动格式化，配置简单，使用方便，但是缺点是由于团队成员可能使用不同的编辑器，`prettier ` 版本、配置不同，从而格式化的风格迥异且难统一。所以这种使用方式个人使用没问题，团队推广不太适合\n- 下载 `prettier npm` 包，在项目中配置好，统一格式化风格\n\n## 使用\n\n`prettier`的使用很简单, 我拿`vscode`举例：\n\n1. 需要下载编辑器插件, 这样在在完成之后会在全局`settings.json`中配置，不论编写`html, css 还是js`，保存之后都会统一格式化；\n2. 对应项目下载`prettier`依赖，并且在项目根目录添加`.prettierrc配置文件`和`.prettierignore排除文件`\n\n对于企业项目来讲，我们都会使用第二种方式，因为有可能每个项目的一些特殊配置是不一样的(正常来讲，每个企业的规则都是一样的)；\n\n### 安装依赖\n\n`prettier`是需要本地开发使用的，所以只需要将依赖安装到`devDependencies`\n\n```sh\npnpm add -D prettier\n```\n\n使用命令行格式文件：\n\n```bash\n# 格式化某个文件\nnpx prettier --write .\\test.js\n# 格式化所有文件\nnpx prettier --write .\n```\n\n`prettier` 默认不会处理 `node_modules` 里的文件，如果想忽略其他的文件或目录，可以在项目目录下新建.`.prettierignore` 文件，表示忽略某些文件或文件夹，具体格式跟`.gitignore` 类似\n\n### .prettierignore\n\n设置 prettier 格式化忽视哪些文件, 例如：\n\n```bash\n# Lock files\npackage-lock.json\npnpm-lock.yaml\nyarn.lock\n```\n\n### .prettierrc 配置文件\n\n具体的配置选项[prettier](https://prettier.io/docs/en/options)\n\n```bash\n{\n  # 指定prettier将换行的行长<int>，默认80\n  printWidth: 80,\n\n  # 指定每个缩进级别的空格数<int>，默认2\n  tabWidth: 2,\n\n  # 用制表符而不是空格缩进行<bool>，默认false\n  useTabs: false,\n\n  # 在语句末尾添加分号<bool>，默认true\n  semi: true,\n\n  # 使用单引号而不是双引号<bool>，默认false\n  singleQuote: true,\n\n  # object对象中key值是否加引号<as-needed|consistent|preserve>，默认as-needed\n  #/ as-needed-仅在需要时在对象属性周围添加引号\n  # consistent-如果一个对象中至少有一个属性需要引号，所有属性添加引号\n  # preserve-保留对象属性中用户输入使用的引号\n  quoteProps: 'as-needed',\n\n  # 在 JSX 中使用单引号而不是双引号<bool>，默认false\n  jsxSingleQuote: false,\n\n  # 在多行逗号分隔的句法结构中尽可能打印尾随逗号<es5|none|all>，默认es5\n  # es5-在 ES5 中有效的尾随逗号（对象、数组等），TypeScript 的类型参数中没有尾随逗号\n  # none-没有尾随逗号\n  # all-尽可能以逗号结尾（包括函数参数和调用）。要运行以这种方式格式化的 JavaScript 代码需要一个支持 ES2017（Node.js 8+ 或现代浏览器）或下层编译的引擎。这还会在 TypeScript 的类型参数中启用尾随逗号（自 2018 年 1 月发布的 TypeScript 2.7 起支持）\n  trailingComma: 'all',\n\n  # 对象字面量中括号之间的空格<bool>，默认true\n  bracketSpacing: true,\n\n  # 将>多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自关闭元素）<bool>，默认false\n\n  bracketSameLine: true,\n\n  # 在唯一的箭头函数参数周围包含括号<always|avoid>\n  # always-始终包含括号\n  # avoid-尽可能省略括号\n  arrowParens: 'always',\n\n  # Prettier 可以限制自己只格式化在文件顶部包含特殊注释（称为 pragma）的文件。这在逐渐将大型、未格式化的代码库过渡到 Prettier 时非常有用<bool>\n  requirePragma: false,\n\n  # Prettier可以在文件的顶部插入一个 @format的特殊注释，以表明改文件已经被Prettier格式化过了。在使用 --require-pragma参数处理一连串的文件时这个功能将十分有用。如果文件顶部已经有一个doclock，这个选项将新建一行注释，并打上@format标记<bool>，默认false\n  insertPragma: false,\n\n  # 超过最大宽度是否换行<always|never|preserve>，默认preserve\n  # always-如果超过最大宽度换行\n  # never-不要换行\n  # preserve-按原样显示\n  proseWrap: 'preserve',\n\n  # 指定 HTML、Vue、Angular 和 Handlebars 的全局空格敏感度<css|strict|ignore>，默认css\n  # css-遵循CSS属性的默认值\n  # strict-所有标签周围的空格（或缺少空格）被认为是重要的\n  # ignore-所有标签周围的空格（或缺少空格）被认为是无关紧要的\n  htmlWhitespaceSensitivity: 'css',\n\n  # vue文件script和style标签中是否缩进<bool>，默认false\n  vueIndentScriptAndStyle: false,\n\n  # 行尾换行符<lf|crlf|cr|auto>，默认lf\n  endOfLine: 'lf',\n\n  # 控制 Prettier 是否格式化嵌入在文件中的引用代码<off|auto>，默认auto\n  # auto–如果 Prettier 可以自动识别，则格式化嵌入代码\n  # off-从不自动格式化嵌入代码\n  embeddedLanguageFormatting: 'auto',\n\n  # 在 HTML、Vue 和 JSX 中强制执行每行单个属性<bool>，默认false\n  singleAttributePerLine: true\n}\n```\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t\"lint:format\": \"prettier  {src,mock,library}/**/*.{html,vue,css,sass,scss,js,ts,md} --write\"\n\t}\n}\n```\n","source":"_posts/技能小册/项目管理/工程化/prettier.md","raw":"---\ntitle: 项目工程化-prettier\nabbrlink: e3341f8b\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# prettier\n\n`Prettier` 是一个固执己见的代码格式化程序\n\n一般通过以下方式使用 `prettier`\n\n- 使用 vscode 等代码编辑器的 `prettier` 插件：搭配快捷键如 ` ctrl+s`，保存时自动格式化，配置简单，使用方便，但是缺点是由于团队成员可能使用不同的编辑器，`prettier ` 版本、配置不同，从而格式化的风格迥异且难统一。所以这种使用方式个人使用没问题，团队推广不太适合\n- 下载 `prettier npm` 包，在项目中配置好，统一格式化风格\n\n## 使用\n\n`prettier`的使用很简单, 我拿`vscode`举例：\n\n1. 需要下载编辑器插件, 这样在在完成之后会在全局`settings.json`中配置，不论编写`html, css 还是js`，保存之后都会统一格式化；\n2. 对应项目下载`prettier`依赖，并且在项目根目录添加`.prettierrc配置文件`和`.prettierignore排除文件`\n\n对于企业项目来讲，我们都会使用第二种方式，因为有可能每个项目的一些特殊配置是不一样的(正常来讲，每个企业的规则都是一样的)；\n\n### 安装依赖\n\n`prettier`是需要本地开发使用的，所以只需要将依赖安装到`devDependencies`\n\n```sh\npnpm add -D prettier\n```\n\n使用命令行格式文件：\n\n```bash\n# 格式化某个文件\nnpx prettier --write .\\test.js\n# 格式化所有文件\nnpx prettier --write .\n```\n\n`prettier` 默认不会处理 `node_modules` 里的文件，如果想忽略其他的文件或目录，可以在项目目录下新建.`.prettierignore` 文件，表示忽略某些文件或文件夹，具体格式跟`.gitignore` 类似\n\n### .prettierignore\n\n设置 prettier 格式化忽视哪些文件, 例如：\n\n```bash\n# Lock files\npackage-lock.json\npnpm-lock.yaml\nyarn.lock\n```\n\n### .prettierrc 配置文件\n\n具体的配置选项[prettier](https://prettier.io/docs/en/options)\n\n```bash\n{\n  # 指定prettier将换行的行长<int>，默认80\n  printWidth: 80,\n\n  # 指定每个缩进级别的空格数<int>，默认2\n  tabWidth: 2,\n\n  # 用制表符而不是空格缩进行<bool>，默认false\n  useTabs: false,\n\n  # 在语句末尾添加分号<bool>，默认true\n  semi: true,\n\n  # 使用单引号而不是双引号<bool>，默认false\n  singleQuote: true,\n\n  # object对象中key值是否加引号<as-needed|consistent|preserve>，默认as-needed\n  #/ as-needed-仅在需要时在对象属性周围添加引号\n  # consistent-如果一个对象中至少有一个属性需要引号，所有属性添加引号\n  # preserve-保留对象属性中用户输入使用的引号\n  quoteProps: 'as-needed',\n\n  # 在 JSX 中使用单引号而不是双引号<bool>，默认false\n  jsxSingleQuote: false,\n\n  # 在多行逗号分隔的句法结构中尽可能打印尾随逗号<es5|none|all>，默认es5\n  # es5-在 ES5 中有效的尾随逗号（对象、数组等），TypeScript 的类型参数中没有尾随逗号\n  # none-没有尾随逗号\n  # all-尽可能以逗号结尾（包括函数参数和调用）。要运行以这种方式格式化的 JavaScript 代码需要一个支持 ES2017（Node.js 8+ 或现代浏览器）或下层编译的引擎。这还会在 TypeScript 的类型参数中启用尾随逗号（自 2018 年 1 月发布的 TypeScript 2.7 起支持）\n  trailingComma: 'all',\n\n  # 对象字面量中括号之间的空格<bool>，默认true\n  bracketSpacing: true,\n\n  # 将>多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自关闭元素）<bool>，默认false\n\n  bracketSameLine: true,\n\n  # 在唯一的箭头函数参数周围包含括号<always|avoid>\n  # always-始终包含括号\n  # avoid-尽可能省略括号\n  arrowParens: 'always',\n\n  # Prettier 可以限制自己只格式化在文件顶部包含特殊注释（称为 pragma）的文件。这在逐渐将大型、未格式化的代码库过渡到 Prettier 时非常有用<bool>\n  requirePragma: false,\n\n  # Prettier可以在文件的顶部插入一个 @format的特殊注释，以表明改文件已经被Prettier格式化过了。在使用 --require-pragma参数处理一连串的文件时这个功能将十分有用。如果文件顶部已经有一个doclock，这个选项将新建一行注释，并打上@format标记<bool>，默认false\n  insertPragma: false,\n\n  # 超过最大宽度是否换行<always|never|preserve>，默认preserve\n  # always-如果超过最大宽度换行\n  # never-不要换行\n  # preserve-按原样显示\n  proseWrap: 'preserve',\n\n  # 指定 HTML、Vue、Angular 和 Handlebars 的全局空格敏感度<css|strict|ignore>，默认css\n  # css-遵循CSS属性的默认值\n  # strict-所有标签周围的空格（或缺少空格）被认为是重要的\n  # ignore-所有标签周围的空格（或缺少空格）被认为是无关紧要的\n  htmlWhitespaceSensitivity: 'css',\n\n  # vue文件script和style标签中是否缩进<bool>，默认false\n  vueIndentScriptAndStyle: false,\n\n  # 行尾换行符<lf|crlf|cr|auto>，默认lf\n  endOfLine: 'lf',\n\n  # 控制 Prettier 是否格式化嵌入在文件中的引用代码<off|auto>，默认auto\n  # auto–如果 Prettier 可以自动识别，则格式化嵌入代码\n  # off-从不自动格式化嵌入代码\n  embeddedLanguageFormatting: 'auto',\n\n  # 在 HTML、Vue 和 JSX 中强制执行每行单个属性<bool>，默认false\n  singleAttributePerLine: true\n}\n```\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t\"lint:format\": \"prettier  {src,mock,library}/**/*.{html,vue,css,sass,scss,js,ts,md} --write\"\n\t}\n}\n```\n","slug":"技能小册/项目管理/工程化/prettier","published":1,"updated":"2025-03-12T09:38:07.548Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ja007lfg9m8gdl1as3","content":"<h1 id=\"prettier\"><a href=\"#prettier\" class=\"headerlink\" title=\"prettier\"></a>prettier</h1><p><code>Prettier</code> 是一个固执己见的代码格式化程序</p>\n<p>一般通过以下方式使用 <code>prettier</code></p>\n<ul>\n<li>使用 vscode 等代码编辑器的 <code>prettier</code> 插件：搭配快捷键如 <code> ctrl+s</code>，保存时自动格式化，配置简单，使用方便，但是缺点是由于团队成员可能使用不同的编辑器，<code>prettier </code> 版本、配置不同，从而格式化的风格迥异且难统一。所以这种使用方式个人使用没问题，团队推广不太适合</li>\n<li>下载 <code>prettier npm</code> 包，在项目中配置好，统一格式化风格</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>prettier</code>的使用很简单, 我拿<code>vscode</code>举例：</p>\n<ol>\n<li>需要下载编辑器插件, 这样在在完成之后会在全局<code>settings.json</code>中配置，不论编写<code>html, css 还是js</code>，保存之后都会统一格式化；</li>\n<li>对应项目下载<code>prettier</code>依赖，并且在项目根目录添加<code>.prettierrc配置文件</code>和<code>.prettierignore排除文件</code></li>\n</ol>\n<p>对于企业项目来讲，我们都会使用第二种方式，因为有可能每个项目的一些特殊配置是不一样的(正常来讲，每个企业的规则都是一样的)；</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p><code>prettier</code>是需要本地开发使用的，所以只需要将依赖安装到<code>devDependencies</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D prettier</span><br></pre></td></tr></table></figure>\n\n<p>使用命令行格式文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化某个文件</span></span><br><span class=\"line\">npx prettier --write .\\test.js</span><br><span class=\"line\"><span class=\"comment\"># 格式化所有文件</span></span><br><span class=\"line\">npx prettier --write .</span><br></pre></td></tr></table></figure>\n\n<p><code>prettier</code> 默认不会处理 <code>node_modules</code> 里的文件，如果想忽略其他的文件或目录，可以在项目目录下新建.<code>.prettierignore</code> 文件，表示忽略某些文件或文件夹，具体格式跟<code>.gitignore</code> 类似</p>\n<h3 id=\"prettierignore\"><a href=\"#prettierignore\" class=\"headerlink\" title=\".prettierignore\"></a>.prettierignore</h3><p>设置 prettier 格式化忽视哪些文件, 例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Lock files</span></span><br><span class=\"line\">package-lock.json</span><br><span class=\"line\">pnpm-lock.yaml</span><br><span class=\"line\">yarn.lock</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prettierrc-配置文件\"><a href=\"#prettierrc-配置文件\" class=\"headerlink\" title=\".prettierrc 配置文件\"></a>.prettierrc 配置文件</h3><p>具体的配置选项<a href=\"https://prettier.io/docs/en/options\">prettier</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\"># 指定prettier将换行的行长&lt;int&gt;，默认80</span></span><br><span class=\"line\">  printWidth: 80,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 指定每个缩进级别的空格数&lt;int&gt;，默认2</span></span><br><span class=\"line\">  tabWidth: 2,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 用制表符而不是空格缩进行&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  useTabs: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在语句末尾添加分号&lt;bool&gt;，默认true</span></span><br><span class=\"line\">  semi: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 使用单引号而不是双引号&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  singleQuote: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># object对象中key值是否加引号&lt;as-needed|consistent|preserve&gt;，默认as-needed</span></span><br><span class=\"line\">  <span class=\"comment\">#/ as-needed-仅在需要时在对象属性周围添加引号</span></span><br><span class=\"line\">  <span class=\"comment\"># consistent-如果一个对象中至少有一个属性需要引号，所有属性添加引号</span></span><br><span class=\"line\">  <span class=\"comment\"># preserve-保留对象属性中用户输入使用的引号</span></span><br><span class=\"line\">  quoteProps: <span class=\"string\">&#x27;as-needed&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在 JSX 中使用单引号而不是双引号&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  jsxSingleQuote: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在多行逗号分隔的句法结构中尽可能打印尾随逗号&lt;es5|none|all&gt;，默认es5</span></span><br><span class=\"line\">  <span class=\"comment\"># es5-在 ES5 中有效的尾随逗号（对象、数组等），TypeScript 的类型参数中没有尾随逗号</span></span><br><span class=\"line\">  <span class=\"comment\"># none-没有尾随逗号</span></span><br><span class=\"line\">  <span class=\"comment\"># all-尽可能以逗号结尾（包括函数参数和调用）。要运行以这种方式格式化的 JavaScript 代码需要一个支持 ES2017（Node.js 8+ 或现代浏览器）或下层编译的引擎。这还会在 TypeScript 的类型参数中启用尾随逗号（自 2018 年 1 月发布的 TypeScript 2.7 起支持）</span></span><br><span class=\"line\">  trailingComma: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 对象字面量中括号之间的空格&lt;bool&gt;，默认true</span></span><br><span class=\"line\">  bracketSpacing: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 将&gt;多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自关闭元素）&lt;bool&gt;，默认false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  bracketSameLine: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在唯一的箭头函数参数周围包含括号&lt;always|avoid&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># always-始终包含括号</span></span><br><span class=\"line\">  <span class=\"comment\"># avoid-尽可能省略括号</span></span><br><span class=\"line\">  arrowParens: <span class=\"string\">&#x27;always&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prettier 可以限制自己只格式化在文件顶部包含特殊注释（称为 pragma）的文件。这在逐渐将大型、未格式化的代码库过渡到 Prettier 时非常有用&lt;bool&gt;</span></span><br><span class=\"line\">  requirePragma: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prettier可以在文件的顶部插入一个 @format的特殊注释，以表明改文件已经被Prettier格式化过了。在使用 --require-pragma参数处理一连串的文件时这个功能将十分有用。如果文件顶部已经有一个doclock，这个选项将新建一行注释，并打上@format标记&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  insertPragma: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 超过最大宽度是否换行&lt;always|never|preserve&gt;，默认preserve</span></span><br><span class=\"line\">  <span class=\"comment\"># always-如果超过最大宽度换行</span></span><br><span class=\"line\">  <span class=\"comment\"># never-不要换行</span></span><br><span class=\"line\">  <span class=\"comment\"># preserve-按原样显示</span></span><br><span class=\"line\">  proseWrap: <span class=\"string\">&#x27;preserve&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 指定 HTML、Vue、Angular 和 Handlebars 的全局空格敏感度&lt;css|strict|ignore&gt;，默认css</span></span><br><span class=\"line\">  <span class=\"comment\"># css-遵循CSS属性的默认值</span></span><br><span class=\"line\">  <span class=\"comment\"># strict-所有标签周围的空格（或缺少空格）被认为是重要的</span></span><br><span class=\"line\">  <span class=\"comment\"># ignore-所有标签周围的空格（或缺少空格）被认为是无关紧要的</span></span><br><span class=\"line\">  htmlWhitespaceSensitivity: <span class=\"string\">&#x27;css&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># vue文件script和style标签中是否缩进&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  vueIndentScriptAndStyle: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 行尾换行符&lt;lf|crlf|cr|auto&gt;，默认lf</span></span><br><span class=\"line\">  endOfLine: <span class=\"string\">&#x27;lf&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 控制 Prettier 是否格式化嵌入在文件中的引用代码&lt;off|auto&gt;，默认auto</span></span><br><span class=\"line\">  <span class=\"comment\"># auto–如果 Prettier 可以自动识别，则格式化嵌入代码</span></span><br><span class=\"line\">  <span class=\"comment\"># off-从不自动格式化嵌入代码</span></span><br><span class=\"line\">  embeddedLanguageFormatting: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在 HTML、Vue 和 JSX 中强制执行每行单个属性&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  singleAttributePerLine: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier  &#123;src,mock,library&#125;/**/*.&#123;html,vue,css,sass,scss,js,ts,md&#125; --write&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"prettier\"><a href=\"#prettier\" class=\"headerlink\" title=\"prettier\"></a>prettier</h1><p><code>Prettier</code> 是一个固执己见的代码格式化程序</p>\n<p>一般通过以下方式使用 <code>prettier</code></p>\n<ul>\n<li>使用 vscode 等代码编辑器的 <code>prettier</code> 插件：搭配快捷键如 <code> ctrl+s</code>，保存时自动格式化，配置简单，使用方便，但是缺点是由于团队成员可能使用不同的编辑器，<code>prettier </code> 版本、配置不同，从而格式化的风格迥异且难统一。所以这种使用方式个人使用没问题，团队推广不太适合</li>\n<li>下载 <code>prettier npm</code> 包，在项目中配置好，统一格式化风格</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>prettier</code>的使用很简单, 我拿<code>vscode</code>举例：</p>\n<ol>\n<li>需要下载编辑器插件, 这样在在完成之后会在全局<code>settings.json</code>中配置，不论编写<code>html, css 还是js</code>，保存之后都会统一格式化；</li>\n<li>对应项目下载<code>prettier</code>依赖，并且在项目根目录添加<code>.prettierrc配置文件</code>和<code>.prettierignore排除文件</code></li>\n</ol>\n<p>对于企业项目来讲，我们都会使用第二种方式，因为有可能每个项目的一些特殊配置是不一样的(正常来讲，每个企业的规则都是一样的)；</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p><code>prettier</code>是需要本地开发使用的，所以只需要将依赖安装到<code>devDependencies</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D prettier</span><br></pre></td></tr></table></figure>\n\n<p>使用命令行格式文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式化某个文件</span></span><br><span class=\"line\">npx prettier --write .\\test.js</span><br><span class=\"line\"><span class=\"comment\"># 格式化所有文件</span></span><br><span class=\"line\">npx prettier --write .</span><br></pre></td></tr></table></figure>\n\n<p><code>prettier</code> 默认不会处理 <code>node_modules</code> 里的文件，如果想忽略其他的文件或目录，可以在项目目录下新建.<code>.prettierignore</code> 文件，表示忽略某些文件或文件夹，具体格式跟<code>.gitignore</code> 类似</p>\n<h3 id=\"prettierignore\"><a href=\"#prettierignore\" class=\"headerlink\" title=\".prettierignore\"></a>.prettierignore</h3><p>设置 prettier 格式化忽视哪些文件, 例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Lock files</span></span><br><span class=\"line\">package-lock.json</span><br><span class=\"line\">pnpm-lock.yaml</span><br><span class=\"line\">yarn.lock</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prettierrc-配置文件\"><a href=\"#prettierrc-配置文件\" class=\"headerlink\" title=\".prettierrc 配置文件\"></a>.prettierrc 配置文件</h3><p>具体的配置选项<a href=\"https://prettier.io/docs/en/options\">prettier</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\"># 指定prettier将换行的行长&lt;int&gt;，默认80</span></span><br><span class=\"line\">  printWidth: 80,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 指定每个缩进级别的空格数&lt;int&gt;，默认2</span></span><br><span class=\"line\">  tabWidth: 2,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 用制表符而不是空格缩进行&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  useTabs: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在语句末尾添加分号&lt;bool&gt;，默认true</span></span><br><span class=\"line\">  semi: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 使用单引号而不是双引号&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  singleQuote: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># object对象中key值是否加引号&lt;as-needed|consistent|preserve&gt;，默认as-needed</span></span><br><span class=\"line\">  <span class=\"comment\">#/ as-needed-仅在需要时在对象属性周围添加引号</span></span><br><span class=\"line\">  <span class=\"comment\"># consistent-如果一个对象中至少有一个属性需要引号，所有属性添加引号</span></span><br><span class=\"line\">  <span class=\"comment\"># preserve-保留对象属性中用户输入使用的引号</span></span><br><span class=\"line\">  quoteProps: <span class=\"string\">&#x27;as-needed&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在 JSX 中使用单引号而不是双引号&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  jsxSingleQuote: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在多行逗号分隔的句法结构中尽可能打印尾随逗号&lt;es5|none|all&gt;，默认es5</span></span><br><span class=\"line\">  <span class=\"comment\"># es5-在 ES5 中有效的尾随逗号（对象、数组等），TypeScript 的类型参数中没有尾随逗号</span></span><br><span class=\"line\">  <span class=\"comment\"># none-没有尾随逗号</span></span><br><span class=\"line\">  <span class=\"comment\"># all-尽可能以逗号结尾（包括函数参数和调用）。要运行以这种方式格式化的 JavaScript 代码需要一个支持 ES2017（Node.js 8+ 或现代浏览器）或下层编译的引擎。这还会在 TypeScript 的类型参数中启用尾随逗号（自 2018 年 1 月发布的 TypeScript 2.7 起支持）</span></span><br><span class=\"line\">  trailingComma: <span class=\"string\">&#x27;all&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 对象字面量中括号之间的空格&lt;bool&gt;，默认true</span></span><br><span class=\"line\">  bracketSpacing: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 将&gt;多行 HTML（HTML、JSX、Vue、Angular）元素放在最后一行的末尾，而不是单独放在下一行（不适用于自关闭元素）&lt;bool&gt;，默认false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  bracketSameLine: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在唯一的箭头函数参数周围包含括号&lt;always|avoid&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># always-始终包含括号</span></span><br><span class=\"line\">  <span class=\"comment\"># avoid-尽可能省略括号</span></span><br><span class=\"line\">  arrowParens: <span class=\"string\">&#x27;always&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prettier 可以限制自己只格式化在文件顶部包含特殊注释（称为 pragma）的文件。这在逐渐将大型、未格式化的代码库过渡到 Prettier 时非常有用&lt;bool&gt;</span></span><br><span class=\"line\">  requirePragma: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prettier可以在文件的顶部插入一个 @format的特殊注释，以表明改文件已经被Prettier格式化过了。在使用 --require-pragma参数处理一连串的文件时这个功能将十分有用。如果文件顶部已经有一个doclock，这个选项将新建一行注释，并打上@format标记&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  insertPragma: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 超过最大宽度是否换行&lt;always|never|preserve&gt;，默认preserve</span></span><br><span class=\"line\">  <span class=\"comment\"># always-如果超过最大宽度换行</span></span><br><span class=\"line\">  <span class=\"comment\"># never-不要换行</span></span><br><span class=\"line\">  <span class=\"comment\"># preserve-按原样显示</span></span><br><span class=\"line\">  proseWrap: <span class=\"string\">&#x27;preserve&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 指定 HTML、Vue、Angular 和 Handlebars 的全局空格敏感度&lt;css|strict|ignore&gt;，默认css</span></span><br><span class=\"line\">  <span class=\"comment\"># css-遵循CSS属性的默认值</span></span><br><span class=\"line\">  <span class=\"comment\"># strict-所有标签周围的空格（或缺少空格）被认为是重要的</span></span><br><span class=\"line\">  <span class=\"comment\"># ignore-所有标签周围的空格（或缺少空格）被认为是无关紧要的</span></span><br><span class=\"line\">  htmlWhitespaceSensitivity: <span class=\"string\">&#x27;css&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># vue文件script和style标签中是否缩进&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  vueIndentScriptAndStyle: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 行尾换行符&lt;lf|crlf|cr|auto&gt;，默认lf</span></span><br><span class=\"line\">  endOfLine: <span class=\"string\">&#x27;lf&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 控制 Prettier 是否格式化嵌入在文件中的引用代码&lt;off|auto&gt;，默认auto</span></span><br><span class=\"line\">  <span class=\"comment\"># auto–如果 Prettier 可以自动识别，则格式化嵌入代码</span></span><br><span class=\"line\">  <span class=\"comment\"># off-从不自动格式化嵌入代码</span></span><br><span class=\"line\">  embeddedLanguageFormatting: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在 HTML、Vue 和 JSX 中强制执行每行单个属性&lt;bool&gt;，默认false</span></span><br><span class=\"line\">  singleAttributePerLine: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier  &#123;src,mock,library&#125;/**/*.&#123;html,vue,css,sass,scss,js,ts,md&#125; --write&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-stylelint","abbrlink":"cac99d28","date":"2024-08-08T01:05:01.000Z","_content":"\n# stylelint\n\n`stylelint` 是一个用于检测 CSS 代码风格和错误的工具，它有点类似于 `ESlint`，但是它专注于 `CSS。` `stylelint` 不仅可以帮助你在团队中保持一致的 CSS 代码风格，发现潜在的错误，并且确保代码符合最佳实践。\n\n`Stylelint` 需要一个配置对象，并在以下位置寻找一个[配置](https://stylelint.io/user-guide/configure)：\n\n- `stylelint.config.js` 或`.stylelintrc.js` 文件使用哪个模块系统取决于 `Node.js` 的默认模块系统配置（例如`\"type\":\"module\"`在 `package.json`）。\n- `stylelint.config.mjs` 或`.stylelintrc.mjs `使用文件 `export default（ES 模块）`\n- `stylelint.config.cjs` 或使用(`CommonJS`) 的`.stylelintrc.cjs` 文件 `module.exports`\n- `.stylelintrc.json`、`.stylelintrc.yml` 或`.stylelintrc.yaml `文件\n\n## 配置\n\n[相关资料-stylelint 规范](http://www.yanhongzhi.com/post/project_specification3.html)\n\n### es 模块配置\n\n```js\n// .stylelintrc.mjs\n// 如果没有下面的依赖，请自行安装\nexport default {\n\textends: [\n\t\t// 配置  scss 样式格式化\n\t\t\"stylelint-config-recommended-scss\",\n\t\t// 配置  vue 样式格式化\n\t\t\"stylelint-config-recommended-vue\",\n\t\t// 配置 stylelint css 属性书写顺序插件,\n\t\t\"stylelint-config-recess-order\",\n\t],\n\trules: {},\n};\n```\n\n### Commonjs 配置\n\n```js\n// .stylelintrc.js\nmodule.exports = {\n\textends: [\n\t\t\"stylelint-config-recommended-scss\",\n\t\t\"stylelint-config-recommended-vue\",\n\t\t\"stylelint-config-recess-order\",\n\t],\n\trules: {},\n};\n```\n\n## .stylelintignore\n\n`.stylelintignore` 文件用于忽略某些文件或文件夹，这些文件或文件夹不会被 `stylelint` 检测。\n\n举个例子：\n\n```sh\n/node_modules/*\n/dist/*\n/public/*\n```\n\n## .stylelintcache\n\n默认生成的 `.stylelintcache` 文件放置于执行目录中\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t// --cache 会生成 .stylelintcache\n\t\t\"lint:style\": \"stylelint {src,mock,library}/**/*.{vue,css,sass,scss} --cache --fix\"\n\t}\n}\n```\n","source":"_posts/技能小册/项目管理/工程化/stylelint.md","raw":"---\ntitle: 项目工程化-stylelint\nabbrlink: cac99d28\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# stylelint\n\n`stylelint` 是一个用于检测 CSS 代码风格和错误的工具，它有点类似于 `ESlint`，但是它专注于 `CSS。` `stylelint` 不仅可以帮助你在团队中保持一致的 CSS 代码风格，发现潜在的错误，并且确保代码符合最佳实践。\n\n`Stylelint` 需要一个配置对象，并在以下位置寻找一个[配置](https://stylelint.io/user-guide/configure)：\n\n- `stylelint.config.js` 或`.stylelintrc.js` 文件使用哪个模块系统取决于 `Node.js` 的默认模块系统配置（例如`\"type\":\"module\"`在 `package.json`）。\n- `stylelint.config.mjs` 或`.stylelintrc.mjs `使用文件 `export default（ES 模块）`\n- `stylelint.config.cjs` 或使用(`CommonJS`) 的`.stylelintrc.cjs` 文件 `module.exports`\n- `.stylelintrc.json`、`.stylelintrc.yml` 或`.stylelintrc.yaml `文件\n\n## 配置\n\n[相关资料-stylelint 规范](http://www.yanhongzhi.com/post/project_specification3.html)\n\n### es 模块配置\n\n```js\n// .stylelintrc.mjs\n// 如果没有下面的依赖，请自行安装\nexport default {\n\textends: [\n\t\t// 配置  scss 样式格式化\n\t\t\"stylelint-config-recommended-scss\",\n\t\t// 配置  vue 样式格式化\n\t\t\"stylelint-config-recommended-vue\",\n\t\t// 配置 stylelint css 属性书写顺序插件,\n\t\t\"stylelint-config-recess-order\",\n\t],\n\trules: {},\n};\n```\n\n### Commonjs 配置\n\n```js\n// .stylelintrc.js\nmodule.exports = {\n\textends: [\n\t\t\"stylelint-config-recommended-scss\",\n\t\t\"stylelint-config-recommended-vue\",\n\t\t\"stylelint-config-recess-order\",\n\t],\n\trules: {},\n};\n```\n\n## .stylelintignore\n\n`.stylelintignore` 文件用于忽略某些文件或文件夹，这些文件或文件夹不会被 `stylelint` 检测。\n\n举个例子：\n\n```sh\n/node_modules/*\n/dist/*\n/public/*\n```\n\n## .stylelintcache\n\n默认生成的 `.stylelintcache` 文件放置于执行目录中\n\n## 在`package.json`配置\n\n```json\n{\n\t\"scripts\": {\n\t\t// --cache 会生成 .stylelintcache\n\t\t\"lint:style\": \"stylelint {src,mock,library}/**/*.{vue,css,sass,scss} --cache --fix\"\n\t}\n}\n```\n","slug":"技能小册/项目管理/工程化/stylelint","published":1,"updated":"2025-03-12T09:38:01.489Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ja007nfg9mg7dad3l6","content":"<h1 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h1><p><code>stylelint</code> 是一个用于检测 CSS 代码风格和错误的工具，它有点类似于 <code>ESlint</code>，但是它专注于 <code>CSS。</code> <code>stylelint</code> 不仅可以帮助你在团队中保持一致的 CSS 代码风格，发现潜在的错误，并且确保代码符合最佳实践。</p>\n<p><code>Stylelint</code> 需要一个配置对象，并在以下位置寻找一个<a href=\"https://stylelint.io/user-guide/configure\">配置</a>：</p>\n<ul>\n<li><code>stylelint.config.js</code> 或<code>.stylelintrc.js</code> 文件使用哪个模块系统取决于 <code>Node.js</code> 的默认模块系统配置（例如<code>&quot;type&quot;:&quot;module&quot;</code>在 <code>package.json</code>）。</li>\n<li><code>stylelint.config.mjs</code> 或<code>.stylelintrc.mjs </code>使用文件 <code>export default（ES 模块）</code></li>\n<li><code>stylelint.config.cjs</code> 或使用(<code>CommonJS</code>) 的<code>.stylelintrc.cjs</code> 文件 <code>module.exports</code></li>\n<li><code>.stylelintrc.json</code>、<code>.stylelintrc.yml</code> 或<code>.stylelintrc.yaml </code>文件</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><a href=\"http://www.yanhongzhi.com/post/project_specification3.html\">相关资料-stylelint 规范</a></p>\n<h3 id=\"es-模块配置\"><a href=\"#es-模块配置\" class=\"headerlink\" title=\"es 模块配置\"></a>es 模块配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .stylelintrc.mjs</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有下面的依赖，请自行安装</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置  scss 样式格式化</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置  vue 样式格式化</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置 stylelint css 属性书写顺序插件,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Commonjs-配置\"><a href=\"#Commonjs-配置\" class=\"headerlink\" title=\"Commonjs 配置\"></a>Commonjs 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .stylelintrc.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stylelintignore\"><a href=\"#stylelintignore\" class=\"headerlink\" title=\".stylelintignore\"></a>.stylelintignore</h2><p><code>.stylelintignore</code> 文件用于忽略某些文件或文件夹，这些文件或文件夹不会被 <code>stylelint</code> 检测。</p>\n<p>举个例子：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/node_modules/*</span><br><span class=\"line\">/dist/*</span><br><span class=\"line\">/public/*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stylelintcache\"><a href=\"#stylelintcache\" class=\"headerlink\" title=\".stylelintcache\"></a>.stylelintcache</h2><p>默认生成的 <code>.stylelintcache</code> 文件放置于执行目录中</p>\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// --cache 会生成 .stylelintcache</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint &#123;src,mock,library&#125;/**/*.&#123;vue,css,sass,scss&#125; --cache --fix&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"stylelint\"><a href=\"#stylelint\" class=\"headerlink\" title=\"stylelint\"></a>stylelint</h1><p><code>stylelint</code> 是一个用于检测 CSS 代码风格和错误的工具，它有点类似于 <code>ESlint</code>，但是它专注于 <code>CSS。</code> <code>stylelint</code> 不仅可以帮助你在团队中保持一致的 CSS 代码风格，发现潜在的错误，并且确保代码符合最佳实践。</p>\n<p><code>Stylelint</code> 需要一个配置对象，并在以下位置寻找一个<a href=\"https://stylelint.io/user-guide/configure\">配置</a>：</p>\n<ul>\n<li><code>stylelint.config.js</code> 或<code>.stylelintrc.js</code> 文件使用哪个模块系统取决于 <code>Node.js</code> 的默认模块系统配置（例如<code>&quot;type&quot;:&quot;module&quot;</code>在 <code>package.json</code>）。</li>\n<li><code>stylelint.config.mjs</code> 或<code>.stylelintrc.mjs </code>使用文件 <code>export default（ES 模块）</code></li>\n<li><code>stylelint.config.cjs</code> 或使用(<code>CommonJS</code>) 的<code>.stylelintrc.cjs</code> 文件 <code>module.exports</code></li>\n<li><code>.stylelintrc.json</code>、<code>.stylelintrc.yml</code> 或<code>.stylelintrc.yaml </code>文件</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><a href=\"http://www.yanhongzhi.com/post/project_specification3.html\">相关资料-stylelint 规范</a></p>\n<h3 id=\"es-模块配置\"><a href=\"#es-模块配置\" class=\"headerlink\" title=\"es 模块配置\"></a>es 模块配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .stylelintrc.mjs</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有下面的依赖，请自行安装</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置  scss 样式格式化</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置  vue 样式格式化</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 配置 stylelint css 属性书写顺序插件,</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Commonjs-配置\"><a href=\"#Commonjs-配置\" class=\"headerlink\" title=\"Commonjs 配置\"></a>Commonjs 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .stylelintrc.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stylelintignore\"><a href=\"#stylelintignore\" class=\"headerlink\" title=\".stylelintignore\"></a>.stylelintignore</h2><p><code>.stylelintignore</code> 文件用于忽略某些文件或文件夹，这些文件或文件夹不会被 <code>stylelint</code> 检测。</p>\n<p>举个例子：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/node_modules/*</span><br><span class=\"line\">/dist/*</span><br><span class=\"line\">/public/*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stylelintcache\"><a href=\"#stylelintcache\" class=\"headerlink\" title=\".stylelintcache\"></a>.stylelintcache</h2><p>默认生成的 <code>.stylelintcache</code> 文件放置于执行目录中</p>\n<h2 id=\"在package-json配置\"><a href=\"#在package-json配置\" class=\"headerlink\" title=\"在package.json配置\"></a>在<code>package.json</code>配置</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// --cache 会生成 .stylelintcache</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lint:style&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint &#123;src,mock,library&#125;/**/*.&#123;vue,css,sass,scss&#125; --cache --fix&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"项目工程化-release-it","abbrlink":"c1959f05","date":"2024-08-08T01:05:01.000Z","_content":"\n# release-it?\n\n是一个用于自动化软件发布的命令行工具。它可以帮助开发团队自动化版本控制、生成更新日志（CHANGELOG）、创建 Git 标签、发布到 npm 等任务。\n\n## 主要功能\n\n- 自动版本号递增 (遵循语义化版本规范 Semantic Versioning)\n- 自动生成/更新 CHANGELOG\n- Git 提交、打标签和推送\n- 发布到 npm 仓库\n- 支持 hooks 来执行自定义脚本\n- 支持插件扩展功能\n\n## 基本使用\n\n### 1. 安装:\n\n```bash\nnpm install --save-dev release-it\n```\n\n### 2.添加发布脚本到 package.json:\n\n```json\n{\n\t\"scripts\": {\n\t\t\"release\": \"release-it\"\n\t}\n}\n```\n\n### 3. 运行发布:\n\n可以在项目根目录创建 `.release-it.json` 进行配置:\n\n```json\n{\n\t\"plugins\": {\n\t\t\"@release-it/conventional-changelog\": {\n\t\t\t\"preset\": {\n\t\t\t\t\"name\": \"conventionalcommits\",\n\t\t\t\t\"types\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"feat\",\n\t\t\t\t\t\t\"section\": \"✨ Features | 新功能\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"fix\",\n\t\t\t\t\t\t\"section\": \"🐛 Bug Fixes | Bug 修复\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"chore\",\n\t\t\t\t\t\t\"section\": \"🎫 Chores | 其他更新\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"docs\",\n\t\t\t\t\t\t\"section\": \"📝 Documentation | 文档\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"style\",\n\t\t\t\t\t\t\"section\": \"💄 Styles | 风格\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"refactor\",\n\t\t\t\t\t\t\"section\": \"♻ Code Refactoring | 代码重构\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"perf\",\n\t\t\t\t\t\t\"section\": \"⚡ Performance Improvements | 性能优化\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"test\",\n\t\t\t\t\t\t\"section\": \"✅ Tests | 测试\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"revert\",\n\t\t\t\t\t\t\"section\": \"⏪ Reverts | 回退\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"build\",\n\t\t\t\t\t\t\"section\": \"👷‍ Build System | 构建\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"ci\",\n\t\t\t\t\t\t\"section\": \"🔧 Continuous Integration | CI 配置\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"config\",\n\t\t\t\t\t\t\"section\": \"🔨 CONFIG | 配置\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"infile\": \"CHANGELOG.md\",\n\t\t\t\"ignoreRecommendedBump\": true,\n\t\t\t\"strictSemVer\": true\n\t\t}\n\t},\n\t\"git\": {\n\t\t\"commitMessage\": \"chore: Release v${version}\"\n\t},\n\t\"github\": {\n\t\t\"release\": true,\n\t\t\"draft\": false\n\t}\n}\n```\n\n一键发布, 同时生成`change.md`文件，直接会生成对应的`tag`当然也是一件发布线上版本的；\n","source":"_posts/技能小册/项目管理/工程化/release-it.md","raw":"---\ntitle: 项目工程化-release-it\nabbrlink: c1959f05\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# release-it?\n\n是一个用于自动化软件发布的命令行工具。它可以帮助开发团队自动化版本控制、生成更新日志（CHANGELOG）、创建 Git 标签、发布到 npm 等任务。\n\n## 主要功能\n\n- 自动版本号递增 (遵循语义化版本规范 Semantic Versioning)\n- 自动生成/更新 CHANGELOG\n- Git 提交、打标签和推送\n- 发布到 npm 仓库\n- 支持 hooks 来执行自定义脚本\n- 支持插件扩展功能\n\n## 基本使用\n\n### 1. 安装:\n\n```bash\nnpm install --save-dev release-it\n```\n\n### 2.添加发布脚本到 package.json:\n\n```json\n{\n\t\"scripts\": {\n\t\t\"release\": \"release-it\"\n\t}\n}\n```\n\n### 3. 运行发布:\n\n可以在项目根目录创建 `.release-it.json` 进行配置:\n\n```json\n{\n\t\"plugins\": {\n\t\t\"@release-it/conventional-changelog\": {\n\t\t\t\"preset\": {\n\t\t\t\t\"name\": \"conventionalcommits\",\n\t\t\t\t\"types\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"feat\",\n\t\t\t\t\t\t\"section\": \"✨ Features | 新功能\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"fix\",\n\t\t\t\t\t\t\"section\": \"🐛 Bug Fixes | Bug 修复\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"chore\",\n\t\t\t\t\t\t\"section\": \"🎫 Chores | 其他更新\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"docs\",\n\t\t\t\t\t\t\"section\": \"📝 Documentation | 文档\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"style\",\n\t\t\t\t\t\t\"section\": \"💄 Styles | 风格\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"refactor\",\n\t\t\t\t\t\t\"section\": \"♻ Code Refactoring | 代码重构\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"perf\",\n\t\t\t\t\t\t\"section\": \"⚡ Performance Improvements | 性能优化\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"test\",\n\t\t\t\t\t\t\"section\": \"✅ Tests | 测试\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"revert\",\n\t\t\t\t\t\t\"section\": \"⏪ Reverts | 回退\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"build\",\n\t\t\t\t\t\t\"section\": \"👷‍ Build System | 构建\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"ci\",\n\t\t\t\t\t\t\"section\": \"🔧 Continuous Integration | CI 配置\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"config\",\n\t\t\t\t\t\t\"section\": \"🔨 CONFIG | 配置\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"infile\": \"CHANGELOG.md\",\n\t\t\t\"ignoreRecommendedBump\": true,\n\t\t\t\"strictSemVer\": true\n\t\t}\n\t},\n\t\"git\": {\n\t\t\"commitMessage\": \"chore: Release v${version}\"\n\t},\n\t\"github\": {\n\t\t\"release\": true,\n\t\t\"draft\": false\n\t}\n}\n```\n\n一键发布, 同时生成`change.md`文件，直接会生成对应的`tag`当然也是一件发布线上版本的；\n","slug":"技能小册/项目管理/工程化/release-it","published":1,"updated":"2025-03-12T09:38:04.454Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ja007qfg9m07gk8pvi","content":"<h1 id=\"release-it\"><a href=\"#release-it\" class=\"headerlink\" title=\"release-it?\"></a>release-it?</h1><p>是一个用于自动化软件发布的命令行工具。它可以帮助开发团队自动化版本控制、生成更新日志（CHANGELOG）、创建 Git 标签、发布到 npm 等任务。</p>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><ul>\n<li>自动版本号递增 (遵循语义化版本规范 Semantic Versioning)</li>\n<li>自动生成&#x2F;更新 CHANGELOG</li>\n<li>Git 提交、打标签和推送</li>\n<li>发布到 npm 仓库</li>\n<li>支持 hooks 来执行自定义脚本</li>\n<li>支持插件扩展功能</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装:\"></a>1. 安装:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev release-it</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-添加发布脚本到-package-json\"><a href=\"#2-添加发布脚本到-package-json\" class=\"headerlink\" title=\"2.添加发布脚本到 package.json:\"></a>2.添加发布脚本到 package.json:</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;release-it&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-运行发布\"><a href=\"#3-运行发布\" class=\"headerlink\" title=\"3. 运行发布:\"></a>3. 运行发布:</h3><p>可以在项目根目录创建 <code>.release-it.json</code> 进行配置:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@release-it/conventional-changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;preset&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventionalcommits&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;feat&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;✨ Features | 新功能&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🐛 Bug Fixes | Bug 修复&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;chore&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🎫 Chores | 其他更新&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;docs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;📝 Documentation | 文档&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;style&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;💄 Styles | 风格&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;refactor&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;♻ Code Refactoring | 代码重构&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;perf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;⚡ Performance Improvements | 性能优化&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;✅ Tests | 测试&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;revert&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;⏪ Reverts | 回退&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;👷‍ Build System | 构建&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ci&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🔧 Continuous Integration | CI 配置&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;config&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🔨 CONFIG | 配置&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;infile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHANGELOG.md&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;ignoreRecommendedBump&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;strictSemVer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;git&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;chore: Release v$&#123;version&#125;&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;github&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;release&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;draft&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一键发布, 同时生成<code>change.md</code>文件，直接会生成对应的<code>tag</code>当然也是一件发布线上版本的；</p>\n","excerpt":"","more":"<h1 id=\"release-it\"><a href=\"#release-it\" class=\"headerlink\" title=\"release-it?\"></a>release-it?</h1><p>是一个用于自动化软件发布的命令行工具。它可以帮助开发团队自动化版本控制、生成更新日志（CHANGELOG）、创建 Git 标签、发布到 npm 等任务。</p>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><ul>\n<li>自动版本号递增 (遵循语义化版本规范 Semantic Versioning)</li>\n<li>自动生成&#x2F;更新 CHANGELOG</li>\n<li>Git 提交、打标签和推送</li>\n<li>发布到 npm 仓库</li>\n<li>支持 hooks 来执行自定义脚本</li>\n<li>支持插件扩展功能</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装:\"></a>1. 安装:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev release-it</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-添加发布脚本到-package-json\"><a href=\"#2-添加发布脚本到-package-json\" class=\"headerlink\" title=\"2.添加发布脚本到 package.json:\"></a>2.添加发布脚本到 package.json:</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;release&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;release-it&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-运行发布\"><a href=\"#3-运行发布\" class=\"headerlink\" title=\"3. 运行发布:\"></a>3. 运行发布:</h3><p>可以在项目根目录创建 <code>.release-it.json</code> 进行配置:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;@release-it/conventional-changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;preset&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;conventionalcommits&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;feat&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;✨ Features | 新功能&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🐛 Bug Fixes | Bug 修复&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;chore&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🎫 Chores | 其他更新&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;docs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;📝 Documentation | 文档&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;style&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;💄 Styles | 风格&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;refactor&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;♻ Code Refactoring | 代码重构&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;perf&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;⚡ Performance Improvements | 性能优化&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;✅ Tests | 测试&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;revert&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;⏪ Reverts | 回退&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;👷‍ Build System | 构建&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ci&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🔧 Continuous Integration | CI 配置&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;config&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">&quot;section&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;🔨 CONFIG | 配置&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t\t\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;infile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CHANGELOG.md&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;ignoreRecommendedBump&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;strictSemVer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;git&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;commitMessage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;chore: Release v$&#123;version&#125;&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;github&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;release&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;draft&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一键发布, 同时生成<code>change.md</code>文件，直接会生成对应的<code>tag</code>当然也是一件发布线上版本的；</p>\n"},{"title":"项目工程化-其他配置文件","abbrlink":"8e8b6215","date":"2024-08-08T01:05:01.000Z","_content":"\n\n项目中的配置文件太多了，除了规范性的配置文件，还有一些其他的配置文件\n\n\n## .node-version\n\n在项目根目录创建文件`.node-version`, 这个文件就是固定`node`版本的，代码如下：\n\n```bash\n# .node-version\n18\n```\n\n当项目 A 我设置之后, 如果电脑安装的有`18`的版本，打开编辑器之后终端会显示`Using Node v18.18.0`， 如果没有，那么会显示\n`Can't find an installed Node version matching v18.x.x.\nDo you want to install it? answer [y/N]: `\n\n你可以输入`y`进行安装，当然也可以退出，使用当前的`node`版本运行项目；\n\n## .npmrc\n\n设置的是`npm`的相关配置\n\n```bash\n# 设置install 源\nregistry=https://registry.npmmirror.com/\n# 设置为 true 时，会提升（hoist）某些依赖到更高层级，以优化依赖树结构。\nshamefully-hoist=true\n# 设置为 false 时，表示放宽对 peer dependencies 的严格检查，避免安装时出现错误。\nstrict-peer-dependencies=false\n```\n\n## .nvmrc\n\n设置`nvm`的配置信息\n\n```bash\n# 设置node版本\nv16.14.0\n```\n","source":"_posts/技能小册/项目管理/工程化/其他配置文件.md","raw":"---\ntitle: 项目工程化-其他配置文件\nabbrlink: 8e8b6215\ndate: 2024-08-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n\n项目中的配置文件太多了，除了规范性的配置文件，还有一些其他的配置文件\n\n\n## .node-version\n\n在项目根目录创建文件`.node-version`, 这个文件就是固定`node`版本的，代码如下：\n\n```bash\n# .node-version\n18\n```\n\n当项目 A 我设置之后, 如果电脑安装的有`18`的版本，打开编辑器之后终端会显示`Using Node v18.18.0`， 如果没有，那么会显示\n`Can't find an installed Node version matching v18.x.x.\nDo you want to install it? answer [y/N]: `\n\n你可以输入`y`进行安装，当然也可以退出，使用当前的`node`版本运行项目；\n\n## .npmrc\n\n设置的是`npm`的相关配置\n\n```bash\n# 设置install 源\nregistry=https://registry.npmmirror.com/\n# 设置为 true 时，会提升（hoist）某些依赖到更高层级，以优化依赖树结构。\nshamefully-hoist=true\n# 设置为 false 时，表示放宽对 peer dependencies 的严格检查，避免安装时出现错误。\nstrict-peer-dependencies=false\n```\n\n## .nvmrc\n\n设置`nvm`的配置信息\n\n```bash\n# 设置node版本\nv16.14.0\n```\n","slug":"技能小册/项目管理/工程化/其他配置文件","published":1,"updated":"2025-03-12T09:37:50.471Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ja007tfg9mcds39sze","content":"<p>项目中的配置文件太多了，除了规范性的配置文件，还有一些其他的配置文件</p>\n<h2 id=\"node-version\"><a href=\"#node-version\" class=\"headerlink\" title=\".node-version\"></a>.node-version</h2><p>在项目根目录创建文件<code>.node-version</code>, 这个文件就是固定<code>node</code>版本的，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .node-version</span></span><br><span class=\"line\">18</span><br></pre></td></tr></table></figure>\n\n<p>当项目 A 我设置之后, 如果电脑安装的有<code>18</code>的版本，打开编辑器之后终端会显示<code>Using Node v18.18.0</code>， 如果没有，那么会显示<br><code>Can&#39;t find an installed Node version matching v18.x.x. Do you want to install it? answer [y/N]: </code></p>\n<p>你可以输入<code>y</code>进行安装，当然也可以退出，使用当前的<code>node</code>版本运行项目；</p>\n<h2 id=\"npmrc\"><a href=\"#npmrc\" class=\"headerlink\" title=\".npmrc\"></a>.npmrc</h2><p>设置的是<code>npm</code>的相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置install 源</span></span><br><span class=\"line\">registry=https://registry.npmmirror.com/</span><br><span class=\"line\"><span class=\"comment\"># 设置为 true 时，会提升（hoist）某些依赖到更高层级，以优化依赖树结构。</span></span><br><span class=\"line\">shamefully-hoist=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 设置为 false 时，表示放宽对 peer dependencies 的严格检查，避免安装时出现错误。</span></span><br><span class=\"line\">strict-peer-dependencies=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nvmrc\"><a href=\"#nvmrc\" class=\"headerlink\" title=\".nvmrc\"></a>.nvmrc</h2><p>设置<code>nvm</code>的配置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置node版本</span></span><br><span class=\"line\">v16.14.0</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>项目中的配置文件太多了，除了规范性的配置文件，还有一些其他的配置文件</p>\n<h2 id=\"node-version\"><a href=\"#node-version\" class=\"headerlink\" title=\".node-version\"></a>.node-version</h2><p>在项目根目录创建文件<code>.node-version</code>, 这个文件就是固定<code>node</code>版本的，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .node-version</span></span><br><span class=\"line\">18</span><br></pre></td></tr></table></figure>\n\n<p>当项目 A 我设置之后, 如果电脑安装的有<code>18</code>的版本，打开编辑器之后终端会显示<code>Using Node v18.18.0</code>， 如果没有，那么会显示<br><code>Can&#39;t find an installed Node version matching v18.x.x. Do you want to install it? answer [y/N]: </code></p>\n<p>你可以输入<code>y</code>进行安装，当然也可以退出，使用当前的<code>node</code>版本运行项目；</p>\n<h2 id=\"npmrc\"><a href=\"#npmrc\" class=\"headerlink\" title=\".npmrc\"></a>.npmrc</h2><p>设置的是<code>npm</code>的相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置install 源</span></span><br><span class=\"line\">registry=https://registry.npmmirror.com/</span><br><span class=\"line\"><span class=\"comment\"># 设置为 true 时，会提升（hoist）某些依赖到更高层级，以优化依赖树结构。</span></span><br><span class=\"line\">shamefully-hoist=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 设置为 false 时，表示放宽对 peer dependencies 的严格检查，避免安装时出现错误。</span></span><br><span class=\"line\">strict-peer-dependencies=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nvmrc\"><a href=\"#nvmrc\" class=\"headerlink\" title=\".nvmrc\"></a>.nvmrc</h2><p>设置<code>nvm</code>的配置信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置node版本</span></span><br><span class=\"line\">v16.14.0</span><br></pre></td></tr></table></figure>\n"},{"title":"项目优化的方向?","abbrlink":"7e0eb1ea","date":"2023-11-08T01:05:01.000Z","_content":"\n# 优化?\n\n性能优化的方面有很多，这里集中拿`vue`举例说明（部分方案网上采集的）：\n\n## 条件渲染优化\n\n条件渲染分为`v-if和v-show`, 具体俩者的区别可详看之前的文章[if 和 show 的区别](/brochure/vue/interview/if_show)\n\n1. `v-if`和`v-show`的区别使用，使用正确可减少 DOM 树的性能开销\n2. 避免在`v-for`中使用`v-if` [v-for 和 v-if 为什么不能同时使用](/brochure/vue/interview/for_if)\n\n## 合理利用计算属性和监听器\n\n关于计算属性和监听器的的详细说明以及区别可可详看之前的文章[watch,watchEffect 和 computed 的区别](/brochure/vue/interview/watch_watchEffect_computed)\n\n1. 合理使用 computed：对于依赖其他数据并需要在多个地方复用的复杂逻辑，使用计算属性可以实现缓存，只在依赖数据变化时才重新计算。\n2. 精简 watch：避免在 watch 中执行过于复杂的计算或操作。对于深度监听或大对象的变化，可以结合 deep 和 immediate 选项优化，或者考虑使用 computed 替代。\n\n## 路由懒加载\n\n1. **动态导入组件** 使用 import() 语法实现异步加载路由对应的组件，避免在应用启动时一次性加载所有代码，从而减少初始加载时间。\n2. **代码分割** 利用 Webpack 等构建工具的代码分割功能，将大型应用拆分为多个按需加载的块。\n\n## 列表渲染优化\n\n1. 为 v-for 遍历的元素添加 key 属性：这有助于 Vue 识别并更准确地进行 DOM 更新，通过高效的元素复用和移动，降低不必要的 DOM 操作。\n2. 对于长列表, 可以使用滚动加载，分页以及 虚拟列表等优化。\n\n## 状态管理优化\n\n1. 合理设计数据结构：避免过多的深层次嵌套，减少不必要的派生状态和计算属性。\n\n## 组件优化\n\n1. 合理设计组件粒度：避免过度细化导致过多组件实例，同时也避免组件过于庞大影响渲染性能。\n2. 使用 `v-once` 静态内容标记：对于无需更新的静态内容，添加 `v-once` 指令以确保它们仅渲染一次，后续不再参与虚拟 `DOM diff` 过程。\n\n## 资源优化\n\n1. **图片懒加载** 使用第三方库（如 vue-lazyload）实现图片按需加载，提升页面加载速度。\n2. **压缩与合并资源** 对 CSS、JavaScript 文件进行压缩，并合理合并以减少 HTTP 请求次数。\n\n## 服务端渲染（SSR）或预渲染\n\n1. **对于 SEO 敏感或首屏加载速度要求高的应用**，采用 SSR 或静态预渲染（如 prerender-spa-plugin）来提升初始加载速度和搜索引擎友好性。\n\n## 性能监测与分析\n\n1. 使用 Vue DevTools：检查组件渲染、props 变更、状态更新等，识别潜在的性能瓶颈。\n2. **性能监控工具**：如 vue-perf-devtool 或第三方服务（如 Google Lighthouse），进行性能基准测试和持续监控。\n\n## 保持 Vue 及依赖项更新\n\n1. **定期升级 Vue 及相关库版本**：新版本通常包含性能改进和 bug 修复，保持更新有利于利用最新优化成果。\n\n通过综合运用上述策略，可以有效地优化 Vue 应用的性能，提升用户交互体验和应用整体响应速度。记得在实践中根据具体项目需求和性能指标进行有针对性的优化。\n","source":"_posts/技能小册/项目管理/项目优化/优化的方向.md","raw":"---\ntitle: 项目优化的方向?\nabbrlink: 7e0eb1ea\ndate: 2023-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# 优化?\n\n性能优化的方面有很多，这里集中拿`vue`举例说明（部分方案网上采集的）：\n\n## 条件渲染优化\n\n条件渲染分为`v-if和v-show`, 具体俩者的区别可详看之前的文章[if 和 show 的区别](/brochure/vue/interview/if_show)\n\n1. `v-if`和`v-show`的区别使用，使用正确可减少 DOM 树的性能开销\n2. 避免在`v-for`中使用`v-if` [v-for 和 v-if 为什么不能同时使用](/brochure/vue/interview/for_if)\n\n## 合理利用计算属性和监听器\n\n关于计算属性和监听器的的详细说明以及区别可可详看之前的文章[watch,watchEffect 和 computed 的区别](/brochure/vue/interview/watch_watchEffect_computed)\n\n1. 合理使用 computed：对于依赖其他数据并需要在多个地方复用的复杂逻辑，使用计算属性可以实现缓存，只在依赖数据变化时才重新计算。\n2. 精简 watch：避免在 watch 中执行过于复杂的计算或操作。对于深度监听或大对象的变化，可以结合 deep 和 immediate 选项优化，或者考虑使用 computed 替代。\n\n## 路由懒加载\n\n1. **动态导入组件** 使用 import() 语法实现异步加载路由对应的组件，避免在应用启动时一次性加载所有代码，从而减少初始加载时间。\n2. **代码分割** 利用 Webpack 等构建工具的代码分割功能，将大型应用拆分为多个按需加载的块。\n\n## 列表渲染优化\n\n1. 为 v-for 遍历的元素添加 key 属性：这有助于 Vue 识别并更准确地进行 DOM 更新，通过高效的元素复用和移动，降低不必要的 DOM 操作。\n2. 对于长列表, 可以使用滚动加载，分页以及 虚拟列表等优化。\n\n## 状态管理优化\n\n1. 合理设计数据结构：避免过多的深层次嵌套，减少不必要的派生状态和计算属性。\n\n## 组件优化\n\n1. 合理设计组件粒度：避免过度细化导致过多组件实例，同时也避免组件过于庞大影响渲染性能。\n2. 使用 `v-once` 静态内容标记：对于无需更新的静态内容，添加 `v-once` 指令以确保它们仅渲染一次，后续不再参与虚拟 `DOM diff` 过程。\n\n## 资源优化\n\n1. **图片懒加载** 使用第三方库（如 vue-lazyload）实现图片按需加载，提升页面加载速度。\n2. **压缩与合并资源** 对 CSS、JavaScript 文件进行压缩，并合理合并以减少 HTTP 请求次数。\n\n## 服务端渲染（SSR）或预渲染\n\n1. **对于 SEO 敏感或首屏加载速度要求高的应用**，采用 SSR 或静态预渲染（如 prerender-spa-plugin）来提升初始加载速度和搜索引擎友好性。\n\n## 性能监测与分析\n\n1. 使用 Vue DevTools：检查组件渲染、props 变更、状态更新等，识别潜在的性能瓶颈。\n2. **性能监控工具**：如 vue-perf-devtool 或第三方服务（如 Google Lighthouse），进行性能基准测试和持续监控。\n\n## 保持 Vue 及依赖项更新\n\n1. **定期升级 Vue 及相关库版本**：新版本通常包含性能改进和 bug 修复，保持更新有利于利用最新优化成果。\n\n通过综合运用上述策略，可以有效地优化 Vue 应用的性能，提升用户交互体验和应用整体响应速度。记得在实践中根据具体项目需求和性能指标进行有针对性的优化。\n","slug":"技能小册/项目管理/项目优化/优化的方向","published":1,"updated":"2025-03-12T09:39:38.968Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0ja007wfg9mahsybot3","content":"<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化?\"></a>优化?</h1><p>性能优化的方面有很多，这里集中拿<code>vue</code>举例说明（部分方案网上采集的）：</p>\n<h2 id=\"条件渲染优化\"><a href=\"#条件渲染优化\" class=\"headerlink\" title=\"条件渲染优化\"></a>条件渲染优化</h2><p>条件渲染分为<code>v-if和v-show</code>, 具体俩者的区别可详看之前的文章<a href=\"/brochure/vue/interview/if_show\">if 和 show 的区别</a></p>\n<ol>\n<li><code>v-if</code>和<code>v-show</code>的区别使用，使用正确可减少 DOM 树的性能开销</li>\n<li>避免在<code>v-for</code>中使用<code>v-if</code> <a href=\"/brochure/vue/interview/for_if\">v-for 和 v-if 为什么不能同时使用</a></li>\n</ol>\n<h2 id=\"合理利用计算属性和监听器\"><a href=\"#合理利用计算属性和监听器\" class=\"headerlink\" title=\"合理利用计算属性和监听器\"></a>合理利用计算属性和监听器</h2><p>关于计算属性和监听器的的详细说明以及区别可可详看之前的文章<a href=\"/brochure/vue/interview/watch_watchEffect_computed\">watch,watchEffect 和 computed 的区别</a></p>\n<ol>\n<li>合理使用 computed：对于依赖其他数据并需要在多个地方复用的复杂逻辑，使用计算属性可以实现缓存，只在依赖数据变化时才重新计算。</li>\n<li>精简 watch：避免在 watch 中执行过于复杂的计算或操作。对于深度监听或大对象的变化，可以结合 deep 和 immediate 选项优化，或者考虑使用 computed 替代。</li>\n</ol>\n<h2 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h2><ol>\n<li><strong>动态导入组件</strong> 使用 import() 语法实现异步加载路由对应的组件，避免在应用启动时一次性加载所有代码，从而减少初始加载时间。</li>\n<li><strong>代码分割</strong> 利用 Webpack 等构建工具的代码分割功能，将大型应用拆分为多个按需加载的块。</li>\n</ol>\n<h2 id=\"列表渲染优化\"><a href=\"#列表渲染优化\" class=\"headerlink\" title=\"列表渲染优化\"></a>列表渲染优化</h2><ol>\n<li>为 v-for 遍历的元素添加 key 属性：这有助于 Vue 识别并更准确地进行 DOM 更新，通过高效的元素复用和移动，降低不必要的 DOM 操作。</li>\n<li>对于长列表, 可以使用滚动加载，分页以及 虚拟列表等优化。</li>\n</ol>\n<h2 id=\"状态管理优化\"><a href=\"#状态管理优化\" class=\"headerlink\" title=\"状态管理优化\"></a>状态管理优化</h2><ol>\n<li>合理设计数据结构：避免过多的深层次嵌套，减少不必要的派生状态和计算属性。</li>\n</ol>\n<h2 id=\"组件优化\"><a href=\"#组件优化\" class=\"headerlink\" title=\"组件优化\"></a>组件优化</h2><ol>\n<li>合理设计组件粒度：避免过度细化导致过多组件实例，同时也避免组件过于庞大影响渲染性能。</li>\n<li>使用 <code>v-once</code> 静态内容标记：对于无需更新的静态内容，添加 <code>v-once</code> 指令以确保它们仅渲染一次，后续不再参与虚拟 <code>DOM diff</code> 过程。</li>\n</ol>\n<h2 id=\"资源优化\"><a href=\"#资源优化\" class=\"headerlink\" title=\"资源优化\"></a>资源优化</h2><ol>\n<li><strong>图片懒加载</strong> 使用第三方库（如 vue-lazyload）实现图片按需加载，提升页面加载速度。</li>\n<li><strong>压缩与合并资源</strong> 对 CSS、JavaScript 文件进行压缩，并合理合并以减少 HTTP 请求次数。</li>\n</ol>\n<h2 id=\"服务端渲染（SSR）或预渲染\"><a href=\"#服务端渲染（SSR）或预渲染\" class=\"headerlink\" title=\"服务端渲染（SSR）或预渲染\"></a>服务端渲染（SSR）或预渲染</h2><ol>\n<li><strong>对于 SEO 敏感或首屏加载速度要求高的应用</strong>，采用 SSR 或静态预渲染（如 prerender-spa-plugin）来提升初始加载速度和搜索引擎友好性。</li>\n</ol>\n<h2 id=\"性能监测与分析\"><a href=\"#性能监测与分析\" class=\"headerlink\" title=\"性能监测与分析\"></a>性能监测与分析</h2><ol>\n<li>使用 Vue DevTools：检查组件渲染、props 变更、状态更新等，识别潜在的性能瓶颈。</li>\n<li><strong>性能监控工具</strong>：如 vue-perf-devtool 或第三方服务（如 Google Lighthouse），进行性能基准测试和持续监控。</li>\n</ol>\n<h2 id=\"保持-Vue-及依赖项更新\"><a href=\"#保持-Vue-及依赖项更新\" class=\"headerlink\" title=\"保持 Vue 及依赖项更新\"></a>保持 Vue 及依赖项更新</h2><ol>\n<li><strong>定期升级 Vue 及相关库版本</strong>：新版本通常包含性能改进和 bug 修复，保持更新有利于利用最新优化成果。</li>\n</ol>\n<p>通过综合运用上述策略，可以有效地优化 Vue 应用的性能，提升用户交互体验和应用整体响应速度。记得在实践中根据具体项目需求和性能指标进行有针对性的优化。</p>\n","excerpt":"","more":"<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化?\"></a>优化?</h1><p>性能优化的方面有很多，这里集中拿<code>vue</code>举例说明（部分方案网上采集的）：</p>\n<h2 id=\"条件渲染优化\"><a href=\"#条件渲染优化\" class=\"headerlink\" title=\"条件渲染优化\"></a>条件渲染优化</h2><p>条件渲染分为<code>v-if和v-show</code>, 具体俩者的区别可详看之前的文章<a href=\"/brochure/vue/interview/if_show\">if 和 show 的区别</a></p>\n<ol>\n<li><code>v-if</code>和<code>v-show</code>的区别使用，使用正确可减少 DOM 树的性能开销</li>\n<li>避免在<code>v-for</code>中使用<code>v-if</code> <a href=\"/brochure/vue/interview/for_if\">v-for 和 v-if 为什么不能同时使用</a></li>\n</ol>\n<h2 id=\"合理利用计算属性和监听器\"><a href=\"#合理利用计算属性和监听器\" class=\"headerlink\" title=\"合理利用计算属性和监听器\"></a>合理利用计算属性和监听器</h2><p>关于计算属性和监听器的的详细说明以及区别可可详看之前的文章<a href=\"/brochure/vue/interview/watch_watchEffect_computed\">watch,watchEffect 和 computed 的区别</a></p>\n<ol>\n<li>合理使用 computed：对于依赖其他数据并需要在多个地方复用的复杂逻辑，使用计算属性可以实现缓存，只在依赖数据变化时才重新计算。</li>\n<li>精简 watch：避免在 watch 中执行过于复杂的计算或操作。对于深度监听或大对象的变化，可以结合 deep 和 immediate 选项优化，或者考虑使用 computed 替代。</li>\n</ol>\n<h2 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h2><ol>\n<li><strong>动态导入组件</strong> 使用 import() 语法实现异步加载路由对应的组件，避免在应用启动时一次性加载所有代码，从而减少初始加载时间。</li>\n<li><strong>代码分割</strong> 利用 Webpack 等构建工具的代码分割功能，将大型应用拆分为多个按需加载的块。</li>\n</ol>\n<h2 id=\"列表渲染优化\"><a href=\"#列表渲染优化\" class=\"headerlink\" title=\"列表渲染优化\"></a>列表渲染优化</h2><ol>\n<li>为 v-for 遍历的元素添加 key 属性：这有助于 Vue 识别并更准确地进行 DOM 更新，通过高效的元素复用和移动，降低不必要的 DOM 操作。</li>\n<li>对于长列表, 可以使用滚动加载，分页以及 虚拟列表等优化。</li>\n</ol>\n<h2 id=\"状态管理优化\"><a href=\"#状态管理优化\" class=\"headerlink\" title=\"状态管理优化\"></a>状态管理优化</h2><ol>\n<li>合理设计数据结构：避免过多的深层次嵌套，减少不必要的派生状态和计算属性。</li>\n</ol>\n<h2 id=\"组件优化\"><a href=\"#组件优化\" class=\"headerlink\" title=\"组件优化\"></a>组件优化</h2><ol>\n<li>合理设计组件粒度：避免过度细化导致过多组件实例，同时也避免组件过于庞大影响渲染性能。</li>\n<li>使用 <code>v-once</code> 静态内容标记：对于无需更新的静态内容，添加 <code>v-once</code> 指令以确保它们仅渲染一次，后续不再参与虚拟 <code>DOM diff</code> 过程。</li>\n</ol>\n<h2 id=\"资源优化\"><a href=\"#资源优化\" class=\"headerlink\" title=\"资源优化\"></a>资源优化</h2><ol>\n<li><strong>图片懒加载</strong> 使用第三方库（如 vue-lazyload）实现图片按需加载，提升页面加载速度。</li>\n<li><strong>压缩与合并资源</strong> 对 CSS、JavaScript 文件进行压缩，并合理合并以减少 HTTP 请求次数。</li>\n</ol>\n<h2 id=\"服务端渲染（SSR）或预渲染\"><a href=\"#服务端渲染（SSR）或预渲染\" class=\"headerlink\" title=\"服务端渲染（SSR）或预渲染\"></a>服务端渲染（SSR）或预渲染</h2><ol>\n<li><strong>对于 SEO 敏感或首屏加载速度要求高的应用</strong>，采用 SSR 或静态预渲染（如 prerender-spa-plugin）来提升初始加载速度和搜索引擎友好性。</li>\n</ol>\n<h2 id=\"性能监测与分析\"><a href=\"#性能监测与分析\" class=\"headerlink\" title=\"性能监测与分析\"></a>性能监测与分析</h2><ol>\n<li>使用 Vue DevTools：检查组件渲染、props 变更、状态更新等，识别潜在的性能瓶颈。</li>\n<li><strong>性能监控工具</strong>：如 vue-perf-devtool 或第三方服务（如 Google Lighthouse），进行性能基准测试和持续监控。</li>\n</ol>\n<h2 id=\"保持-Vue-及依赖项更新\"><a href=\"#保持-Vue-及依赖项更新\" class=\"headerlink\" title=\"保持 Vue 及依赖项更新\"></a>保持 Vue 及依赖项更新</h2><ol>\n<li><strong>定期升级 Vue 及相关库版本</strong>：新版本通常包含性能改进和 bug 修复，保持更新有利于利用最新优化成果。</li>\n</ol>\n<p>通过综合运用上述策略，可以有效地优化 Vue 应用的性能，提升用户交互体验和应用整体响应速度。记得在实践中根据具体项目需求和性能指标进行有针对性的优化。</p>\n"},{"title":"Vue项目管理","abbrlink":"42138971","date":"2024-07-20T03:20:38.000Z","_content":"\n<a style=\"display: flex; gap: 5px;\">\n<img src=\"https://img.shields.io/badge/vue-3.4.21-green\"/>\n<img src=\"https://img.shields.io/badge/node-21.1.0-yellow\"/>\n<img src=\"https://img.shields.io/badge/eslint-9.0.0-blue\"/>\n<img src=\"https://img.shields.io/badge/stylelint-16.3.1-red\"/>\n<img src=\"https://img.shields.io/badge/vite-5.2.0-orange\"/>\n</a>\n\n## 初始化项目\n\n::: code-group\n\n```sh [npm]\nnpm create vite@latest\n```\n\n```sh [Yarn]\nyarn create vite\n```\n\n```sh [PNPM]\npnpm create vite\n```\n\n```sh [bun]\nbun create vite\n```\n\n不管用什么方式都可以安装, 不过要注意的是使用`bun`安装需要先看下官网 [Bun](https://bun.sh)\n\n举个例子:\n\n1. 项目名称为你的项目名字, 如: `vue-project`\n2. 选择项目类型为`vue`\n3. 选择`TypeScript`进行开发, 其它的不用选择即可;\n\n不用去默认选择`Eslint`, 因为这里使用的是高版本的`Eslint（9.0.0）`和默认安装的`Eslint（8.x.x）`的语法有冲突；\n\n## 代码规范\n\n### EditorConfig\n\n::: tip\n`EditorConfig` 的作用是在多个编辑器和 IDE 之间维护一致的代码风格。\n:::\n\n如果使用`Vscode`进行开发的话, 那就要安装`EditorConfig for VS Code`插件, 然后在根目录下创建`.editorconfig`文件, 内容如下:\n\n```shell\n# Editor configuration, see http://editorconfig.org\n# 表示是最顶层的 EditorConfig 配置文件\nroot = true\n[*] # 表示所有文件适用\ncharset = utf-8 # 设置文件字符集为 utf-8\nindent_style = space # 缩进风格（tab | space）\nindent_size = 2 # 缩进大小\nend_of_line = lf # 控制换行类型(lf | cr | crlf)\ntrim_trailing_whitespace = true # 去除行首的任意空白字符\ninsert_final_newline = true # 始终在文件末尾插入一个新行\ntrim_trailing_whitespace = true # 删除一行中的前后空格\n```\n\n### eslint\n\n::: tip\nESLint 是一个用于检测 JavaScript 代码问题的工具，帮我们发现并修复 JavaScript 代码中的问题。\n:::\n\n安装命令：`pnpm create @eslint/config`\n\n```shell\n√ How would you like to use ESLint? · (To check syntax and find problems)\n√ What type of modules does your project use? · (JavaScript modules (import/export))\n√ Which framework does your project use? · (Vue.js)\n√ Does your project use TypeScript? · (Yes)\n√ Where does your code run? · (Browser)\n√ Would you like to install them now?  （Yes）\n√ Which package manager do you want to use? （根据自己情况，本文使用pnpm）\n```\n\n此时根目录会自动成 eslint.config.js 文件, 内容如下：\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/essential\"],\n];\n```\n\n注意：此时我们安装的是 `Eslint` 的版本为：9.0.0, 这也是为什么不用默认脚手架安装的原因： 默认的`eslint`版本为`8.x.x`, 我们直接使用新版本`9.0.0`，不过相对于`8.X.X`写法上有很大变动，可以参考[官方文档](https://eslint.org/docs/latest/use/configure/configuration-files-new)\n\n接着配置`.eslintrc.js`文件：\n\n```js\nmodule.exports = {\n  import globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/essential\"],\n  languageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n      // 这里的parserVue 会使用插件\n\t\t\t// parser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n### Prettier\n\n::: tip\nPrettier 是一个代码格式化工具，可以自动格式化代码，使其符合统一的风格。\n:::\n\n安装命令：`pnpm add -D eslint-plugin-prettier eslint-config-prettier`\n\n修改`eslint.config.js`添加`prettier`配置\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport pluginPrettierRecommendedConfigs from \"eslint-plugin-prettier/recommended\";\nexport default [\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/recommended\"],\n\t// prettier 默认推荐规则\n\tpluginPrettierRecommendedConfigs,\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n\t\t\tparser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n根目录下新建 `prettier.config.js` 添加如下配置：\n\n```js\nexport default {\n\ttabWidth: 2, // 缩进\n\tuseTabs: true, // 缩进方式\n\tsemi: false, // 语句结尾是否加分号\n\tsingleQuote: true, // 单引号\n\tprintWidth: 120, // 换行长度\n\tarrowParens: \"always\", // 箭头函数参数\n\tbracketSpacing: true, // 对象花括号内是否加空格\n\tendOfLine: \"auto\", // 换行符\n\tvueIndentScriptAndStyle: true, // vue文件内script和style标签缩进\n};\n```\n\n### Eslint 可能出现的问题\n\n当打开 components/HelloWorld.vue 文件，会发现此行报错：\n\n```js\ndefineProps<{ msg: string }>() // Parsing error: Unexpected token )eslint\n```\n\n解决办法： 配置 vue-eslint-parser，修改 eslint.config.js\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport pluginPrettierRecommendedConfigs from \"eslint-plugin-prettier/recommended\";\nimport parserVue from \"vue-eslint-parser\";\n\nexport default [\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/recommended\"],\n\t// prettier 默认推荐规则\n\tpluginPrettierRecommendedConfigs,\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n\t\t\tparser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n添加插件 `vite-plugin-eslintpnpm add -D vite-plugin-eslint`\n\n```js\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport eslintPlugin from \"vite-plugin-eslint\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n\tplugins: [vue(), eslintPlugin()],\n});\n```\n\n由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块，所以配置 src\\vite-env.d.ts：\n\n```js\n/// <reference types=\"vite/client\" />\n\n/**\n * 由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块\n * 所以这里手动定义\n */\ndeclare module 'vite-plugin-eslint' {\n\timport { Plugin } from 'vite'\n\timport { ESLint } from 'eslint'\n\n\t/** Plugin options, extending from ESlint options */\n\tinterface Options extends ESLint.Options {\n\t\t/** Path to ESLint instance that will be used for linting */\n\t\teslintPath?: string\n\t\t/** Check all matching files on project startup */\n\t\tlintOnStart?: boolean\n\t\t/** A single file, or array of files, to include when linting */\n\t\tinclude?: string | string[]\n\t\t/** A single file, or array of files, to exclude when linting */\n\t\texclude?: string | string[]\n\t\t/** Custom error formatter or the name of a built-in formatter */\n\t\tformatter?: string | ESLint.Formatter['format']\n\t\t/** The waring found will be printed */\n\t\temitWarning?: boolean\n\t\t/** The errors found will be printed */\n\t\temitError?: boolean\n\t\t/** Will cause the module build to fail if there are any warnings, based on emitWarning */\n\t\tfailOnWarning?: boolean\n\t\t/** Will cause the module build to fail if there are any errors, based on emitError */\n\t\tfailOnError?: boolean\n\t}\n\n\tconst content: (rawOptions?: Options) => Plugin\n\texport default content\n}\n```\n\n修改配置 tsconfig.json\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"target\": \"ES2020\",\n\t\t\"useDefineForClassFields\": true,\n\t\t\"module\": \"ESNext\",\n\t\t\"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n\t\t\"skipLibCheck\": true,\n\n\t\t/* Bundler mode */\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"allowImportingTsExtensions\": true,\n\t\t\"resolveJsonModule\": true,\n\t\t\"isolatedModules\": true,\n\t\t\"noEmit\": true,\n\t\t\"jsx\": \"preserve\",\n\n\t\t/* Linting */\n\t\t\"strict\": true,\n\t\t\"noUnusedLocals\": true,\n\t\t\"noUnusedParameters\": true,\n\t\t\"noFallthroughCasesInSwitch\": true,\n\t\t\"types\": [\n\t\t\t// 编译过程中被包含进来的类型声明文件\n\t\t\t\"vite/client\"\n\t\t]\n\t}\n}\n```\n\n### stylint\n\n::: tip\nstylelint 是一个 CSS 语法检查工具，可以检测 CSS 代码的错误和风格问题。\n:::\n\n安装： `pnpm add -D stylelint stylelint-config-html stylelint-config-prettier stylelint-config-standard stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-recommended-vue`\n\n```shell\nstylelint    核心库\nstylelint-config-html    解析 HTML 文件中的样式\nstylelint-config-prettier    结合 Prettier 使用\nstylelint-config-standard    StyleLint 的标准可共享配置\nstylelint-config-recess-order    提供优化样式顺序的配置\nstylelint-config-recommended-scss    扩展 stylelint-config-recommended 共享配置并为 SCSS 配置其规则\nstylelint-config-recommended-vue    扩展 stylelint-config-recommended 共享配置并为 Vue 配置其规则\n```\n\n根目录创建.stylelintrc.js 并配置：\n\n```js\nexport default {\n\t// 继承推荐规范配置\n\textends: [\n\t\t\"stylelint-config-standard\",\n\t\t\"stylelint-config-recommended-scss\",\n\t\t\"stylelint-config-recommended-vue/scss\",\n\t\t\"stylelint-config-html/vue\",\n\t\t\"stylelint-config-recess-order\",\n\t],\n\t// 指定不同文件对应的解析器\n\toverrides: [\n\t\t{\n\t\t\tfiles: [\"**/*.{vue,html}\"],\n\t\t\tcustomSyntax: \"postcss-html\",\n\t\t},\n\t\t{\n\t\t\tfiles: [\"**/*.{css,scss}\"],\n\t\t\tcustomSyntax: \"postcss-scss\",\n\t\t},\n\t],\n\t// 自定义规则\n\trules: {\n\t\t// 允许 global 、export 、v-deep等伪类\n\t\t\"selector-pseudo-class-no-unknown\": [\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tignorePseudoClasses: [\"global\", \"export\", \"v-deep\", \"deep\"],\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n根目录创建 `.stylelintignore` 文件，配置忽略文件如下：\n\n```shell\ndist\nnode_modules\npublic\n.husky\n.vscode\n```\n\n## 命令配置\n\n配置根目录文件`package.json`的配置：\n\n```json\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vue-tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint:eslint\": \"eslint --fix\",\n\t\t\"lint:format\": \"prettier --write --log-level warn \\\"src/**/*.{js,ts,json,tsx,css,less,vue,html,md}\\\"\",\n\t\t\"lint:stylelint\": \"stylelint \\\"**/*.{css,scss,vue,html}\\\" --fix\"\n  },\n```\n\n代码检查和格式化命令\n\n```shell\npnpm lint:eslint\npnpm lint:format\npnpm lint:stylelint\n```\n\n## vscode 编译器保存自动化配置\n\n修改根目录.vscode 文件夹下的`settings.json`(没有的话新建一个)：\n\n```json\n{\n\t\"files.eol\": \"\\n\", // 文件结束符\n\t\"eslint.format.enable\": true, // 开启保存时自动修复\n\t\"editor.codeLens\": true, // 显示行号\n\t\"editor.tabSize\": 2, // 重新设定tabsize\n\t\"editor.detectIndentation\": false, // 禁用自动检测缩进\n\t// 将prettier设置为默认格式化程序(在编辑器中有可能被其他Formatter占用，所以将prettier设置为默认Formatter)\n\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\t// 关闭js/ts的默认format,统一用eslint进行格式化（tslint已经不维护了，所以转eslint吧）\n\t\"javascript.format.enable\": false,\n\t\"typescript.format.enable\": false,\n\t// 保存时自动格式化 (根据根目录下‘.prettierrc文件配置项’)\n\t\"editor.formatOnSave\": true,\n\t// Enable per-language\n\t\"[html]\": {\n\t\t\"editor.defaultFormatter\": \"vscode.html-language-features\",\n\t\t\"editor.formatOnSave\": true\n\t},\n\t\"[vue]\": {\n\t\t\"editor.formatOnSave\": true, // 交给 eslint\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[javascript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t// 什么类型的文件需要遵守stylelint规则\n\t\"stylelint.validate\": [\"css\", \"less\", \"postcss\", \"scss\", \"sass\", \"vue\"],\n\t// 为ESLint启用“保存时自动修复”，并且仍然具有格式和快速修复功能\n\t\"editor.codeActionsOnSave\": {\n\t\t\"source.fixAll\": \"always\",\n\t\t\"source.fixAll.stylelint\": \"always\"\n\t},\n\t\"[markdown]\": {\n\t\t\"editor.defaultFormatter\": null,\n\t\t\"editor.formatOnSave\": false\n\t},\n\t\"[json]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[typescript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[scss]\": {\n\t\t\"editor.defaultFormatter\": \"stylelint.vscode-stylelint\"\n\t}\n}\n```\n\n## 参考文献\n\n- [原文](https://mp.weixin.qq.com/s/AF2go62o8ueV2rGA1pF-_A)\n- [eslint](https://eslint.org/)\n- [vite](https://vitejs.dev/)\n- [stylelint](https://stylelint.io/)\n- [prettier](https://prettier.io/)\n- [shields](https://shields.io/badges)\n","source":"_posts/技能小册/项目管理/项目创建/vue.md","raw":"---\ntitle: Vue项目管理\nabbrlink: '42138971'\ndate: 2024-07-20 11:20:38\ncategories:\n  - 技能小册\ntags:\n  - Vue\n---\n\n<a style=\"display: flex; gap: 5px;\">\n<img src=\"https://img.shields.io/badge/vue-3.4.21-green\"/>\n<img src=\"https://img.shields.io/badge/node-21.1.0-yellow\"/>\n<img src=\"https://img.shields.io/badge/eslint-9.0.0-blue\"/>\n<img src=\"https://img.shields.io/badge/stylelint-16.3.1-red\"/>\n<img src=\"https://img.shields.io/badge/vite-5.2.0-orange\"/>\n</a>\n\n## 初始化项目\n\n::: code-group\n\n```sh [npm]\nnpm create vite@latest\n```\n\n```sh [Yarn]\nyarn create vite\n```\n\n```sh [PNPM]\npnpm create vite\n```\n\n```sh [bun]\nbun create vite\n```\n\n不管用什么方式都可以安装, 不过要注意的是使用`bun`安装需要先看下官网 [Bun](https://bun.sh)\n\n举个例子:\n\n1. 项目名称为你的项目名字, 如: `vue-project`\n2. 选择项目类型为`vue`\n3. 选择`TypeScript`进行开发, 其它的不用选择即可;\n\n不用去默认选择`Eslint`, 因为这里使用的是高版本的`Eslint（9.0.0）`和默认安装的`Eslint（8.x.x）`的语法有冲突；\n\n## 代码规范\n\n### EditorConfig\n\n::: tip\n`EditorConfig` 的作用是在多个编辑器和 IDE 之间维护一致的代码风格。\n:::\n\n如果使用`Vscode`进行开发的话, 那就要安装`EditorConfig for VS Code`插件, 然后在根目录下创建`.editorconfig`文件, 内容如下:\n\n```shell\n# Editor configuration, see http://editorconfig.org\n# 表示是最顶层的 EditorConfig 配置文件\nroot = true\n[*] # 表示所有文件适用\ncharset = utf-8 # 设置文件字符集为 utf-8\nindent_style = space # 缩进风格（tab | space）\nindent_size = 2 # 缩进大小\nend_of_line = lf # 控制换行类型(lf | cr | crlf)\ntrim_trailing_whitespace = true # 去除行首的任意空白字符\ninsert_final_newline = true # 始终在文件末尾插入一个新行\ntrim_trailing_whitespace = true # 删除一行中的前后空格\n```\n\n### eslint\n\n::: tip\nESLint 是一个用于检测 JavaScript 代码问题的工具，帮我们发现并修复 JavaScript 代码中的问题。\n:::\n\n安装命令：`pnpm create @eslint/config`\n\n```shell\n√ How would you like to use ESLint? · (To check syntax and find problems)\n√ What type of modules does your project use? · (JavaScript modules (import/export))\n√ Which framework does your project use? · (Vue.js)\n√ Does your project use TypeScript? · (Yes)\n√ Where does your code run? · (Browser)\n√ Would you like to install them now?  （Yes）\n√ Which package manager do you want to use? （根据自己情况，本文使用pnpm）\n```\n\n此时根目录会自动成 eslint.config.js 文件, 内容如下：\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/essential\"],\n];\n```\n\n注意：此时我们安装的是 `Eslint` 的版本为：9.0.0, 这也是为什么不用默认脚手架安装的原因： 默认的`eslint`版本为`8.x.x`, 我们直接使用新版本`9.0.0`，不过相对于`8.X.X`写法上有很大变动，可以参考[官方文档](https://eslint.org/docs/latest/use/configure/configuration-files-new)\n\n接着配置`.eslintrc.js`文件：\n\n```js\nmodule.exports = {\n  import globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\n\nexport default [\n\t{ languageOptions: { globals: globals.browser } },\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/essential\"],\n  languageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n      // 这里的parserVue 会使用插件\n\t\t\t// parser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n### Prettier\n\n::: tip\nPrettier 是一个代码格式化工具，可以自动格式化代码，使其符合统一的风格。\n:::\n\n安装命令：`pnpm add -D eslint-plugin-prettier eslint-config-prettier`\n\n修改`eslint.config.js`添加`prettier`配置\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport pluginPrettierRecommendedConfigs from \"eslint-plugin-prettier/recommended\";\nexport default [\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/recommended\"],\n\t// prettier 默认推荐规则\n\tpluginPrettierRecommendedConfigs,\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n\t\t\tparser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n根目录下新建 `prettier.config.js` 添加如下配置：\n\n```js\nexport default {\n\ttabWidth: 2, // 缩进\n\tuseTabs: true, // 缩进方式\n\tsemi: false, // 语句结尾是否加分号\n\tsingleQuote: true, // 单引号\n\tprintWidth: 120, // 换行长度\n\tarrowParens: \"always\", // 箭头函数参数\n\tbracketSpacing: true, // 对象花括号内是否加空格\n\tendOfLine: \"auto\", // 换行符\n\tvueIndentScriptAndStyle: true, // vue文件内script和style标签缩进\n};\n```\n\n### Eslint 可能出现的问题\n\n当打开 components/HelloWorld.vue 文件，会发现此行报错：\n\n```js\ndefineProps<{ msg: string }>() // Parsing error: Unexpected token )eslint\n```\n\n解决办法： 配置 vue-eslint-parser，修改 eslint.config.js\n\n```js\nimport globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport tseslint from \"typescript-eslint\";\nimport pluginVue from \"eslint-plugin-vue\";\nimport pluginPrettierRecommendedConfigs from \"eslint-plugin-prettier/recommended\";\nimport parserVue from \"vue-eslint-parser\";\n\nexport default [\n\t// eslint 默认推荐规则\n\tpluginJs.configs.recommended,\n\t// ts 默认推荐规则\n\t...tseslint.configs.recommended,\n\t// vue3 基础推荐规则\n\t...pluginVue.configs[\"flat/recommended\"],\n\t// prettier 默认推荐规则\n\tpluginPrettierRecommendedConfigs,\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.es2020,\n\t\t\t\t...globals.node,\n\t\t\t},\n\t\t\tecmaVersion: 2020,\n\t\t\tparser: parserVue,\n\t\t\tparserOptions: {\n\t\t\t\tparser: tseslint.parser,\n\t\t\t},\n\t\t},\n\t},\n];\n```\n\n添加插件 `vite-plugin-eslintpnpm add -D vite-plugin-eslint`\n\n```js\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport eslintPlugin from \"vite-plugin-eslint\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n\tplugins: [vue(), eslintPlugin()],\n});\n```\n\n由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块，所以配置 src\\vite-env.d.ts：\n\n```js\n/// <reference types=\"vite/client\" />\n\n/**\n * 由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块\n * 所以这里手动定义\n */\ndeclare module 'vite-plugin-eslint' {\n\timport { Plugin } from 'vite'\n\timport { ESLint } from 'eslint'\n\n\t/** Plugin options, extending from ESlint options */\n\tinterface Options extends ESLint.Options {\n\t\t/** Path to ESLint instance that will be used for linting */\n\t\teslintPath?: string\n\t\t/** Check all matching files on project startup */\n\t\tlintOnStart?: boolean\n\t\t/** A single file, or array of files, to include when linting */\n\t\tinclude?: string | string[]\n\t\t/** A single file, or array of files, to exclude when linting */\n\t\texclude?: string | string[]\n\t\t/** Custom error formatter or the name of a built-in formatter */\n\t\tformatter?: string | ESLint.Formatter['format']\n\t\t/** The waring found will be printed */\n\t\temitWarning?: boolean\n\t\t/** The errors found will be printed */\n\t\temitError?: boolean\n\t\t/** Will cause the module build to fail if there are any warnings, based on emitWarning */\n\t\tfailOnWarning?: boolean\n\t\t/** Will cause the module build to fail if there are any errors, based on emitError */\n\t\tfailOnError?: boolean\n\t}\n\n\tconst content: (rawOptions?: Options) => Plugin\n\texport default content\n}\n```\n\n修改配置 tsconfig.json\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"target\": \"ES2020\",\n\t\t\"useDefineForClassFields\": true,\n\t\t\"module\": \"ESNext\",\n\t\t\"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n\t\t\"skipLibCheck\": true,\n\n\t\t/* Bundler mode */\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"allowImportingTsExtensions\": true,\n\t\t\"resolveJsonModule\": true,\n\t\t\"isolatedModules\": true,\n\t\t\"noEmit\": true,\n\t\t\"jsx\": \"preserve\",\n\n\t\t/* Linting */\n\t\t\"strict\": true,\n\t\t\"noUnusedLocals\": true,\n\t\t\"noUnusedParameters\": true,\n\t\t\"noFallthroughCasesInSwitch\": true,\n\t\t\"types\": [\n\t\t\t// 编译过程中被包含进来的类型声明文件\n\t\t\t\"vite/client\"\n\t\t]\n\t}\n}\n```\n\n### stylint\n\n::: tip\nstylelint 是一个 CSS 语法检查工具，可以检测 CSS 代码的错误和风格问题。\n:::\n\n安装： `pnpm add -D stylelint stylelint-config-html stylelint-config-prettier stylelint-config-standard stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-recommended-vue`\n\n```shell\nstylelint    核心库\nstylelint-config-html    解析 HTML 文件中的样式\nstylelint-config-prettier    结合 Prettier 使用\nstylelint-config-standard    StyleLint 的标准可共享配置\nstylelint-config-recess-order    提供优化样式顺序的配置\nstylelint-config-recommended-scss    扩展 stylelint-config-recommended 共享配置并为 SCSS 配置其规则\nstylelint-config-recommended-vue    扩展 stylelint-config-recommended 共享配置并为 Vue 配置其规则\n```\n\n根目录创建.stylelintrc.js 并配置：\n\n```js\nexport default {\n\t// 继承推荐规范配置\n\textends: [\n\t\t\"stylelint-config-standard\",\n\t\t\"stylelint-config-recommended-scss\",\n\t\t\"stylelint-config-recommended-vue/scss\",\n\t\t\"stylelint-config-html/vue\",\n\t\t\"stylelint-config-recess-order\",\n\t],\n\t// 指定不同文件对应的解析器\n\toverrides: [\n\t\t{\n\t\t\tfiles: [\"**/*.{vue,html}\"],\n\t\t\tcustomSyntax: \"postcss-html\",\n\t\t},\n\t\t{\n\t\t\tfiles: [\"**/*.{css,scss}\"],\n\t\t\tcustomSyntax: \"postcss-scss\",\n\t\t},\n\t],\n\t// 自定义规则\n\trules: {\n\t\t// 允许 global 、export 、v-deep等伪类\n\t\t\"selector-pseudo-class-no-unknown\": [\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tignorePseudoClasses: [\"global\", \"export\", \"v-deep\", \"deep\"],\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n根目录创建 `.stylelintignore` 文件，配置忽略文件如下：\n\n```shell\ndist\nnode_modules\npublic\n.husky\n.vscode\n```\n\n## 命令配置\n\n配置根目录文件`package.json`的配置：\n\n```json\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vue-tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"lint:eslint\": \"eslint --fix\",\n\t\t\"lint:format\": \"prettier --write --log-level warn \\\"src/**/*.{js,ts,json,tsx,css,less,vue,html,md}\\\"\",\n\t\t\"lint:stylelint\": \"stylelint \\\"**/*.{css,scss,vue,html}\\\" --fix\"\n  },\n```\n\n代码检查和格式化命令\n\n```shell\npnpm lint:eslint\npnpm lint:format\npnpm lint:stylelint\n```\n\n## vscode 编译器保存自动化配置\n\n修改根目录.vscode 文件夹下的`settings.json`(没有的话新建一个)：\n\n```json\n{\n\t\"files.eol\": \"\\n\", // 文件结束符\n\t\"eslint.format.enable\": true, // 开启保存时自动修复\n\t\"editor.codeLens\": true, // 显示行号\n\t\"editor.tabSize\": 2, // 重新设定tabsize\n\t\"editor.detectIndentation\": false, // 禁用自动检测缩进\n\t// 将prettier设置为默认格式化程序(在编辑器中有可能被其他Formatter占用，所以将prettier设置为默认Formatter)\n\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\t// 关闭js/ts的默认format,统一用eslint进行格式化（tslint已经不维护了，所以转eslint吧）\n\t\"javascript.format.enable\": false,\n\t\"typescript.format.enable\": false,\n\t// 保存时自动格式化 (根据根目录下‘.prettierrc文件配置项’)\n\t\"editor.formatOnSave\": true,\n\t// Enable per-language\n\t\"[html]\": {\n\t\t\"editor.defaultFormatter\": \"vscode.html-language-features\",\n\t\t\"editor.formatOnSave\": true\n\t},\n\t\"[vue]\": {\n\t\t\"editor.formatOnSave\": true, // 交给 eslint\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[javascript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t// 什么类型的文件需要遵守stylelint规则\n\t\"stylelint.validate\": [\"css\", \"less\", \"postcss\", \"scss\", \"sass\", \"vue\"],\n\t// 为ESLint启用“保存时自动修复”，并且仍然具有格式和快速修复功能\n\t\"editor.codeActionsOnSave\": {\n\t\t\"source.fixAll\": \"always\",\n\t\t\"source.fixAll.stylelint\": \"always\"\n\t},\n\t\"[markdown]\": {\n\t\t\"editor.defaultFormatter\": null,\n\t\t\"editor.formatOnSave\": false\n\t},\n\t\"[json]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[typescript]\": {\n\t\t\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n\t},\n\t\"[scss]\": {\n\t\t\"editor.defaultFormatter\": \"stylelint.vscode-stylelint\"\n\t}\n}\n```\n\n## 参考文献\n\n- [原文](https://mp.weixin.qq.com/s/AF2go62o8ueV2rGA1pF-_A)\n- [eslint](https://eslint.org/)\n- [vite](https://vitejs.dev/)\n- [stylelint](https://stylelint.io/)\n- [prettier](https://prettier.io/)\n- [shields](https://shields.io/badges)\n","slug":"技能小册/项目管理/项目创建/vue","published":1,"updated":"2025-03-12T09:30:14.600Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jb007zfg9m1ces4h49","content":"<a style=\"display: flex; gap: 5px;\">\n<img src=\"https://img.shields.io/badge/vue-3.4.21-green\"/>\n<img src=\"https://img.shields.io/badge/node-21.1.0-yellow\"/>\n<img src=\"https://img.shields.io/badge/eslint-9.0.0-blue\"/>\n<img src=\"https://img.shields.io/badge/stylelint-16.3.1-red\"/>\n<img src=\"https://img.shields.io/badge/vite-5.2.0-orange\"/>\n</a>\n\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>::: code-group</p>\n<figure class=\"highlight sh\"><figcaption><span>[npm]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite@latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[Yarn]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[PNPM]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm create vite</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[bun]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bun create vite</span><br></pre></td></tr></table></figure>\n\n<p>不管用什么方式都可以安装, 不过要注意的是使用<code>bun</code>安装需要先看下官网 <a href=\"https://bun.sh/\">Bun</a></p>\n<p>举个例子:</p>\n<ol>\n<li>项目名称为你的项目名字, 如: <code>vue-project</code></li>\n<li>选择项目类型为<code>vue</code></li>\n<li>选择<code>TypeScript</code>进行开发, 其它的不用选择即可;</li>\n</ol>\n<p>不用去默认选择<code>Eslint</code>, 因为这里使用的是高版本的<code>Eslint（9.0.0）</code>和默认安装的<code>Eslint（8.x.x）</code>的语法有冲突；</p>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h3><p>::: tip<br><code>EditorConfig</code> 的作用是在多个编辑器和 IDE 之间维护一致的代码风格。<br>:::</p>\n<p>如果使用<code>Vscode</code>进行开发的话, 那就要安装<code>EditorConfig for VS Code</code>插件, 然后在根目录下创建<code>.editorconfig</code>文件, 内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Editor configuration, see http://editorconfig.org</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示是最顶层的 EditorConfig 配置文件</span></span><br><span class=\"line\">root = true</span><br><span class=\"line\">[*] # 表示所有文件适用</span><br><span class=\"line\">charset = utf-8 # 设置文件字符集为 utf-8</span><br><span class=\"line\">indent_style = space # 缩进风格（tab | space）</span><br><span class=\"line\">indent_size = 2 # 缩进大小</span><br><span class=\"line\">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span><br><span class=\"line\">trim_trailing_whitespace = true # 去除行首的任意空白字符</span><br><span class=\"line\">insert_final_newline = true # 始终在文件末尾插入一个新行</span><br><span class=\"line\">trim_trailing_whitespace = true # 删除一行中的前后空格</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h3><p>::: tip<br>ESLint 是一个用于检测 JavaScript 代码问题的工具，帮我们发现并修复 JavaScript 代码中的问题。<br>:::</p>\n<p>安装命令：<code>pnpm create @eslint/config</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">√ How would you like to use ESLint? · (To check syntax and find problems)</span><br><span class=\"line\">√ What type of modules does your project use? · (JavaScript modules (import/export))</span><br><span class=\"line\">√ Which framework does your project use? · (Vue.js)</span><br><span class=\"line\">√ Does your project use TypeScript? · (Yes)</span><br><span class=\"line\">√ Where does your code run? · (Browser)</span><br><span class=\"line\">√ Would you like to install them now?  （Yes）</span><br><span class=\"line\">√ Which package manager do you want to use? （根据自己情况，本文使用pnpm）</span><br></pre></td></tr></table></figure>\n\n<p>此时根目录会自动成 eslint.config.js 文件, 内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时我们安装的是 <code>Eslint</code> 的版本为：9.0.0, 这也是为什么不用默认脚手架安装的原因： 默认的<code>eslint</code>版本为<code>8.x.x</code>, 我们直接使用新版本<code>9.0.0</code>，不过相对于<code>8.X.X</code>写法上有很大变动，可以参考<a href=\"https://eslint.org/docs/latest/use/configure/configuration-files-new\">官方文档</a></p>\n<p>接着配置<code>.eslintrc.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 这里的parserVue 会使用插件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// parser: parserVue,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><p>::: tip<br>Prettier 是一个代码格式化工具，可以自动格式化代码，使其符合统一的风格。<br>:::</p>\n<p>安装命令：<code>pnpm add -D eslint-plugin-prettier eslint-config-prettier</code></p>\n<p>修改<code>eslint.config.js</code>添加<code>prettier</code>配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginPrettierRecommendedConfigs <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/recommended&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\tpluginPrettierRecommendedConfigs,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parser</span>: parserVue,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>根目录下新建 <code>prettier.config.js</code> 添加如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">tabWidth</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 缩进</span></span><br><span class=\"line\">\t<span class=\"attr\">useTabs</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 缩进方式</span></span><br><span class=\"line\">\t<span class=\"attr\">semi</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 语句结尾是否加分号</span></span><br><span class=\"line\">\t<span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 单引号</span></span><br><span class=\"line\">\t<span class=\"attr\">printWidth</span>: <span class=\"number\">120</span>, <span class=\"comment\">// 换行长度</span></span><br><span class=\"line\">\t<span class=\"attr\">arrowParens</span>: <span class=\"string\">&quot;always&quot;</span>, <span class=\"comment\">// 箭头函数参数</span></span><br><span class=\"line\">\t<span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 对象花括号内是否加空格</span></span><br><span class=\"line\">\t<span class=\"attr\">endOfLine</span>: <span class=\"string\">&quot;auto&quot;</span>, <span class=\"comment\">// 换行符</span></span><br><span class=\"line\">\t<span class=\"attr\">vueIndentScriptAndStyle</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// vue文件内script和style标签缩进</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Eslint-可能出现的问题\"><a href=\"#Eslint-可能出现的问题\" class=\"headerlink\" title=\"Eslint 可能出现的问题\"></a>Eslint 可能出现的问题</h3><p>当打开 components&#x2F;HelloWorld.vue 文件，会发现此行报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProps&lt;&#123; <span class=\"attr\">msg</span>: string &#125;&gt;() <span class=\"comment\">// Parsing error: Unexpected token )eslint</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法： 配置 vue-eslint-parser，修改 eslint.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginPrettierRecommendedConfigs <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> parserVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-eslint-parser&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/recommended&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\tpluginPrettierRecommendedConfigs,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parser</span>: parserVue,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>添加插件 <code>vite-plugin-eslintpnpm add -D vite-plugin-eslint</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> eslintPlugin <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-eslint&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">eslintPlugin</span>()],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块，所以配置 src\\vite-env.d.ts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以这里手动定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;vite-plugin-eslint&#x27;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Plugin</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ESLint</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;eslint&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Plugin options, extending from ESlint options */</span></span><br><span class=\"line\">\tinterface <span class=\"title class_\">Options</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ESLint</span>.<span class=\"property\">Options</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Path to ESLint instance that will be used for linting */</span></span><br><span class=\"line\">\t\teslintPath?: string</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Check all matching files on project startup */</span></span><br><span class=\"line\">\t\tlintOnStart?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** A single file, or array of files, to include when linting */</span></span><br><span class=\"line\">\t\tinclude?: string | string[]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** A single file, or array of files, to exclude when linting */</span></span><br><span class=\"line\">\t\texclude?: string | string[]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Custom error formatter or the name of a built-in formatter */</span></span><br><span class=\"line\">\t\tformatter?: string | <span class=\"title class_\">ESLint</span>.<span class=\"property\">Formatter</span>[<span class=\"string\">&#x27;format&#x27;</span>]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** The waring found will be printed */</span></span><br><span class=\"line\">\t\temitWarning?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** The errors found will be printed */</span></span><br><span class=\"line\">\t\temitError?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Will cause the module build to fail if there are any warnings, based on emitWarning */</span></span><br><span class=\"line\">\t\tfailOnWarning?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Will cause the module build to fail if there are any errors, based on emitError */</span></span><br><span class=\"line\">\t\tfailOnError?: boolean</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"attr\">content</span>: <span class=\"function\">(<span class=\"params\">rawOptions?: Options</span>) =&gt;</span> <span class=\"title class_\">Plugin</span></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改配置 tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES2020&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ESNext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;ES2020&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;DOM&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;DOM.Iterable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;skipLibCheck&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Bundler mode */</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bundler&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;allowImportingTsExtensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;isolatedModules&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noEmit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Linting */</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedParameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 编译过程中被包含进来的类型声明文件</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;vite/client&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"stylint\"><a href=\"#stylint\" class=\"headerlink\" title=\"stylint\"></a>stylint</h3><p>::: tip<br>stylelint 是一个 CSS 语法检查工具，可以检测 CSS 代码的错误和风格问题。<br>:::</p>\n<p>安装： <code>pnpm add -D stylelint stylelint-config-html stylelint-config-prettier stylelint-config-standard stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-recommended-vue</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylelint    核心库</span><br><span class=\"line\">stylelint-config-html    解析 HTML 文件中的样式</span><br><span class=\"line\">stylelint-config-prettier    结合 Prettier 使用</span><br><span class=\"line\">stylelint-config-standard    StyleLint 的标准可共享配置</span><br><span class=\"line\">stylelint-config-recess-order    提供优化样式顺序的配置</span><br><span class=\"line\">stylelint-config-recommended-scss    扩展 stylelint-config-recommended 共享配置并为 SCSS 配置其规则</span><br><span class=\"line\">stylelint-config-recommended-vue    扩展 stylelint-config-recommended 共享配置并为 Vue 配置其规则</span><br></pre></td></tr></table></figure>\n\n<p>根目录创建.stylelintrc.js 并配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 继承推荐规范配置</span></span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-standard&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue/scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-html/vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 指定不同文件对应的解析器</span></span><br><span class=\"line\">\t<span class=\"attr\">overrides</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">files</span>: [<span class=\"string\">&quot;**/*.&#123;vue,html&#125;&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">customSyntax</span>: <span class=\"string\">&quot;postcss-html&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">files</span>: [<span class=\"string\">&quot;**/*.&#123;css,scss&#125;&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">customSyntax</span>: <span class=\"string\">&quot;postcss-scss&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 自定义规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 允许 global 、export 、v-deep等伪类</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;selector-pseudo-class-no-unknown&quot;</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">ignorePseudoClasses</span>: [<span class=\"string\">&quot;global&quot;</span>, <span class=\"string\">&quot;export&quot;</span>, <span class=\"string\">&quot;v-deep&quot;</span>, <span class=\"string\">&quot;deep&quot;</span>],</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>根目录创建 <code>.stylelintignore</code> 文件，配置忽略文件如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">public</span><br><span class=\"line\">.husky</span><br><span class=\"line\">.vscode</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置\"></a>命令配置</h2><p>配置根目录文件<code>package.json</code>的配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;preview&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint:eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;lint:format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --write --log-level warn \\&quot;src/**/*.&#123;js,ts,json,tsx,css,less,vue,html,md&#125;\\&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;lint:stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint \\&quot;**/*.&#123;css,scss,vue,html&#125;\\&quot; --fix&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>代码检查和格式化命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm lint:eslint</span><br><span class=\"line\">pnpm lint:format</span><br><span class=\"line\">pnpm lint:stylelint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vscode-编译器保存自动化配置\"><a href=\"#vscode-编译器保存自动化配置\" class=\"headerlink\" title=\"vscode 编译器保存自动化配置\"></a>vscode 编译器保存自动化配置</h2><p>修改根目录.vscode 文件夹下的<code>settings.json</code>(没有的话新建一个)：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;files.eol&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;\\n&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 文件结束符</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;eslint.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启保存时自动修复</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.codeLens&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 显示行号</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.tabSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 重新设定tabsize</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.detectIndentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 禁用自动检测缩进</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将prettier设置为默认格式化程序(在编辑器中有可能被其他Formatter占用，所以将prettier设置为默认Formatter)</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 关闭js/ts的默认format,统一用eslint进行格式化（tslint已经不维护了，所以转eslint吧）</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;javascript.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;typescript.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 保存时自动格式化 (根据根目录下‘.prettierrc文件配置项’)</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// Enable per-language</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[html]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode.html-language-features&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[vue]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 交给 eslint</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[javascript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 什么类型的文件需要遵守stylelint规则</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;stylelint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;less&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;postcss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sass&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 为ESLint启用“保存时自动修复”，并且仍然具有格式和快速修复功能</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;source.fixAll&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;always&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;source.fixAll.stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[markdown]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[json]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[typescript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[scss]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint.vscode-stylelint&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/AF2go62o8ueV2rGA1pF-_A\">原文</a></li>\n<li><a href=\"https://eslint.org/\">eslint</a></li>\n<li><a href=\"https://vitejs.dev/\">vite</a></li>\n<li><a href=\"https://stylelint.io/\">stylelint</a></li>\n<li><a href=\"https://prettier.io/\">prettier</a></li>\n<li><a href=\"https://shields.io/badges\">shields</a></li>\n</ul>\n","excerpt":"","more":"<a style=\"display: flex; gap: 5px;\">\n<img src=\"https://img.shields.io/badge/vue-3.4.21-green\"/>\n<img src=\"https://img.shields.io/badge/node-21.1.0-yellow\"/>\n<img src=\"https://img.shields.io/badge/eslint-9.0.0-blue\"/>\n<img src=\"https://img.shields.io/badge/stylelint-16.3.1-red\"/>\n<img src=\"https://img.shields.io/badge/vite-5.2.0-orange\"/>\n</a>\n\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>::: code-group</p>\n<figure class=\"highlight sh\"><figcaption><span>[npm]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite@latest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[Yarn]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[PNPM]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm create vite</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><figcaption><span>[bun]</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bun create vite</span><br></pre></td></tr></table></figure>\n\n<p>不管用什么方式都可以安装, 不过要注意的是使用<code>bun</code>安装需要先看下官网 <a href=\"https://bun.sh/\">Bun</a></p>\n<p>举个例子:</p>\n<ol>\n<li>项目名称为你的项目名字, 如: <code>vue-project</code></li>\n<li>选择项目类型为<code>vue</code></li>\n<li>选择<code>TypeScript</code>进行开发, 其它的不用选择即可;</li>\n</ol>\n<p>不用去默认选择<code>Eslint</code>, 因为这里使用的是高版本的<code>Eslint（9.0.0）</code>和默认安装的<code>Eslint（8.x.x）</code>的语法有冲突；</p>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h3><p>::: tip<br><code>EditorConfig</code> 的作用是在多个编辑器和 IDE 之间维护一致的代码风格。<br>:::</p>\n<p>如果使用<code>Vscode</code>进行开发的话, 那就要安装<code>EditorConfig for VS Code</code>插件, 然后在根目录下创建<code>.editorconfig</code>文件, 内容如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Editor configuration, see http://editorconfig.org</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">表示是最顶层的 EditorConfig 配置文件</span></span><br><span class=\"line\">root = true</span><br><span class=\"line\">[*] # 表示所有文件适用</span><br><span class=\"line\">charset = utf-8 # 设置文件字符集为 utf-8</span><br><span class=\"line\">indent_style = space # 缩进风格（tab | space）</span><br><span class=\"line\">indent_size = 2 # 缩进大小</span><br><span class=\"line\">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span><br><span class=\"line\">trim_trailing_whitespace = true # 去除行首的任意空白字符</span><br><span class=\"line\">insert_final_newline = true # 始终在文件末尾插入一个新行</span><br><span class=\"line\">trim_trailing_whitespace = true # 删除一行中的前后空格</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h3><p>::: tip<br>ESLint 是一个用于检测 JavaScript 代码问题的工具，帮我们发现并修复 JavaScript 代码中的问题。<br>:::</p>\n<p>安装命令：<code>pnpm create @eslint/config</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">√ How would you like to use ESLint? · (To check syntax and find problems)</span><br><span class=\"line\">√ What type of modules does your project use? · (JavaScript modules (import/export))</span><br><span class=\"line\">√ Which framework does your project use? · (Vue.js)</span><br><span class=\"line\">√ Does your project use TypeScript? · (Yes)</span><br><span class=\"line\">√ Where does your code run? · (Browser)</span><br><span class=\"line\">√ Would you like to install them now?  （Yes）</span><br><span class=\"line\">√ Which package manager do you want to use? （根据自己情况，本文使用pnpm）</span><br></pre></td></tr></table></figure>\n\n<p>此时根目录会自动成 eslint.config.js 文件, 内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时我们安装的是 <code>Eslint</code> 的版本为：9.0.0, 这也是为什么不用默认脚手架安装的原因： 默认的<code>eslint</code>版本为<code>8.x.x</code>, 我们直接使用新版本<code>9.0.0</code>，不过相对于<code>8.X.X</code>写法上有很大变动，可以参考<a href=\"https://eslint.org/docs/latest/use/configure/configuration-files-new\">官方文档</a></p>\n<p>接着配置<code>.eslintrc.js</code>文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t&#123; <span class=\"attr\">languageOptions</span>: &#123; <span class=\"attr\">globals</span>: globals.<span class=\"property\">browser</span> &#125; &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/essential&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 这里的parserVue 会使用插件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// parser: parserVue,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><p>::: tip<br>Prettier 是一个代码格式化工具，可以自动格式化代码，使其符合统一的风格。<br>:::</p>\n<p>安装命令：<code>pnpm add -D eslint-plugin-prettier eslint-config-prettier</code></p>\n<p>修改<code>eslint.config.js</code>添加<code>prettier</code>配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginPrettierRecommendedConfigs <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/recommended&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\tpluginPrettierRecommendedConfigs,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parser</span>: parserVue,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>根目录下新建 <code>prettier.config.js</code> 添加如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"attr\">tabWidth</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 缩进</span></span><br><span class=\"line\">\t<span class=\"attr\">useTabs</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 缩进方式</span></span><br><span class=\"line\">\t<span class=\"attr\">semi</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 语句结尾是否加分号</span></span><br><span class=\"line\">\t<span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 单引号</span></span><br><span class=\"line\">\t<span class=\"attr\">printWidth</span>: <span class=\"number\">120</span>, <span class=\"comment\">// 换行长度</span></span><br><span class=\"line\">\t<span class=\"attr\">arrowParens</span>: <span class=\"string\">&quot;always&quot;</span>, <span class=\"comment\">// 箭头函数参数</span></span><br><span class=\"line\">\t<span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 对象花括号内是否加空格</span></span><br><span class=\"line\">\t<span class=\"attr\">endOfLine</span>: <span class=\"string\">&quot;auto&quot;</span>, <span class=\"comment\">// 换行符</span></span><br><span class=\"line\">\t<span class=\"attr\">vueIndentScriptAndStyle</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// vue文件内script和style标签缩进</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Eslint-可能出现的问题\"><a href=\"#Eslint-可能出现的问题\" class=\"headerlink\" title=\"Eslint 可能出现的问题\"></a>Eslint 可能出现的问题</h3><p>当打开 components&#x2F;HelloWorld.vue 文件，会发现此行报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defineProps&lt;&#123; <span class=\"attr\">msg</span>: string &#125;&gt;() <span class=\"comment\">// Parsing error: Unexpected token )eslint</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法： 配置 vue-eslint-parser，修改 eslint.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> globals <span class=\"keyword\">from</span> <span class=\"string\">&quot;globals&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginJs <span class=\"keyword\">from</span> <span class=\"string\">&quot;@eslint/js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tseslint <span class=\"keyword\">from</span> <span class=\"string\">&quot;typescript-eslint&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pluginPrettierRecommendedConfigs <span class=\"keyword\">from</span> <span class=\"string\">&quot;eslint-plugin-prettier/recommended&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> parserVue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-eslint-parser&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">\t<span class=\"comment\">// eslint 默认推荐规则</span></span><br><span class=\"line\">\tpluginJs.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// ts 默认推荐规则</span></span><br><span class=\"line\">\t...tseslint.<span class=\"property\">configs</span>.<span class=\"property\">recommended</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// vue3 基础推荐规则</span></span><br><span class=\"line\">\t...pluginVue.<span class=\"property\">configs</span>[<span class=\"string\">&quot;flat/recommended&quot;</span>],</span><br><span class=\"line\">\t<span class=\"comment\">// prettier 默认推荐规则</span></span><br><span class=\"line\">\tpluginPrettierRecommendedConfigs,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">languageOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">globals</span>: &#123;</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">browser</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">es2020</span>,</span><br><span class=\"line\">\t\t\t\t...globals.<span class=\"property\">node</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parser</span>: parserVue,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">parser</span>: tseslint.<span class=\"property\">parser</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>添加插件 <code>vite-plugin-eslintpnpm add -D vite-plugin-eslint</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> eslintPlugin <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite-plugin-eslint&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">eslintPlugin</span>()],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块，所以配置 src\\vite-env.d.ts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于 vite-plugin-eslint 库有点落后，导致 vite 高版本不能正确的识别 cjs 模块</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以这里手动定义</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;vite-plugin-eslint&#x27;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Plugin</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ESLint</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;eslint&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** Plugin options, extending from ESlint options */</span></span><br><span class=\"line\">\tinterface <span class=\"title class_\">Options</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ESLint</span>.<span class=\"property\">Options</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Path to ESLint instance that will be used for linting */</span></span><br><span class=\"line\">\t\teslintPath?: string</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Check all matching files on project startup */</span></span><br><span class=\"line\">\t\tlintOnStart?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** A single file, or array of files, to include when linting */</span></span><br><span class=\"line\">\t\tinclude?: string | string[]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** A single file, or array of files, to exclude when linting */</span></span><br><span class=\"line\">\t\texclude?: string | string[]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Custom error formatter or the name of a built-in formatter */</span></span><br><span class=\"line\">\t\tformatter?: string | <span class=\"title class_\">ESLint</span>.<span class=\"property\">Formatter</span>[<span class=\"string\">&#x27;format&#x27;</span>]</span><br><span class=\"line\">\t\t<span class=\"comment\">/** The waring found will be printed */</span></span><br><span class=\"line\">\t\temitWarning?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** The errors found will be printed */</span></span><br><span class=\"line\">\t\temitError?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Will cause the module build to fail if there are any warnings, based on emitWarning */</span></span><br><span class=\"line\">\t\tfailOnWarning?: boolean</span><br><span class=\"line\">\t\t<span class=\"comment\">/** Will cause the module build to fail if there are any errors, based on emitError */</span></span><br><span class=\"line\">\t\tfailOnError?: boolean</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"attr\">content</span>: <span class=\"function\">(<span class=\"params\">rawOptions?: Options</span>) =&gt;</span> <span class=\"title class_\">Plugin</span></span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改配置 tsconfig.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES2020&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ESNext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;ES2020&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;DOM&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;DOM.Iterable&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;skipLibCheck&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Bundler mode */</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bundler&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;allowImportingTsExtensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;isolatedModules&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noEmit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Linting */</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedLocals&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noUnusedParameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;noFallthroughCasesInSwitch&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;types&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 编译过程中被包含进来的类型声明文件</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;vite/client&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">]</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"stylint\"><a href=\"#stylint\" class=\"headerlink\" title=\"stylint\"></a>stylint</h3><p>::: tip<br>stylelint 是一个 CSS 语法检查工具，可以检测 CSS 代码的错误和风格问题。<br>:::</p>\n<p>安装： <code>pnpm add -D stylelint stylelint-config-html stylelint-config-prettier stylelint-config-standard stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-recommended-vue</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylelint    核心库</span><br><span class=\"line\">stylelint-config-html    解析 HTML 文件中的样式</span><br><span class=\"line\">stylelint-config-prettier    结合 Prettier 使用</span><br><span class=\"line\">stylelint-config-standard    StyleLint 的标准可共享配置</span><br><span class=\"line\">stylelint-config-recess-order    提供优化样式顺序的配置</span><br><span class=\"line\">stylelint-config-recommended-scss    扩展 stylelint-config-recommended 共享配置并为 SCSS 配置其规则</span><br><span class=\"line\">stylelint-config-recommended-vue    扩展 stylelint-config-recommended 共享配置并为 Vue 配置其规则</span><br></pre></td></tr></table></figure>\n\n<p>根目录创建.stylelintrc.js 并配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 继承推荐规范配置</span></span><br><span class=\"line\">\t<span class=\"attr\">extends</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-standard&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recommended-vue/scss&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-html/vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;stylelint-config-recess-order&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 指定不同文件对应的解析器</span></span><br><span class=\"line\">\t<span class=\"attr\">overrides</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">files</span>: [<span class=\"string\">&quot;**/*.&#123;vue,html&#125;&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">customSyntax</span>: <span class=\"string\">&quot;postcss-html&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">files</span>: [<span class=\"string\">&quot;**/*.&#123;css,scss&#125;&quot;</span>],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">customSyntax</span>: <span class=\"string\">&quot;postcss-scss&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 自定义规则</span></span><br><span class=\"line\">\t<span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 允许 global 、export 、v-deep等伪类</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;selector-pseudo-class-no-unknown&quot;</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">ignorePseudoClasses</span>: [<span class=\"string\">&quot;global&quot;</span>, <span class=\"string\">&quot;export&quot;</span>, <span class=\"string\">&quot;v-deep&quot;</span>, <span class=\"string\">&quot;deep&quot;</span>],</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>根目录创建 <code>.stylelintignore</code> 文件，配置忽略文件如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">public</span><br><span class=\"line\">.husky</span><br><span class=\"line\">.vscode</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置\"></a>命令配置</h2><p>配置根目录文件<code>package.json</code>的配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;preview&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite preview&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint:eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --fix&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;lint:format&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --write --log-level warn \\&quot;src/**/*.&#123;js,ts,json,tsx,css,less,vue,html,md&#125;\\&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;lint:stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint \\&quot;**/*.&#123;css,scss,vue,html&#125;\\&quot; --fix&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>代码检查和格式化命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm lint:eslint</span><br><span class=\"line\">pnpm lint:format</span><br><span class=\"line\">pnpm lint:stylelint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vscode-编译器保存自动化配置\"><a href=\"#vscode-编译器保存自动化配置\" class=\"headerlink\" title=\"vscode 编译器保存自动化配置\"></a>vscode 编译器保存自动化配置</h2><p>修改根目录.vscode 文件夹下的<code>settings.json</code>(没有的话新建一个)：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;files.eol&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;\\n&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 文件结束符</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;eslint.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 开启保存时自动修复</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.codeLens&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 显示行号</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.tabSize&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 重新设定tabsize</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.detectIndentation&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 禁用自动检测缩进</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将prettier设置为默认格式化程序(在编辑器中有可能被其他Formatter占用，所以将prettier设置为默认Formatter)</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 关闭js/ts的默认format,统一用eslint进行格式化（tslint已经不维护了，所以转eslint吧）</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;javascript.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;typescript.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 保存时自动格式化 (根据根目录下‘.prettierrc文件配置项’)</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// Enable per-language</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[html]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode.html-language-features&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[vue]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 交给 eslint</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[javascript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 什么类型的文件需要遵守stylelint规则</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;stylelint.validate&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;css&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;less&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;postcss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;scss&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;sass&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 为ESLint启用“保存时自动修复”，并且仍然具有格式和快速修复功能</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;source.fixAll&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;always&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;source.fixAll.stylelint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;always&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[markdown]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[json]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[typescript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;[scss]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;stylelint.vscode-stylelint&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/AF2go62o8ueV2rGA1pF-_A\">原文</a></li>\n<li><a href=\"https://eslint.org/\">eslint</a></li>\n<li><a href=\"https://vitejs.dev/\">vite</a></li>\n<li><a href=\"https://stylelint.io/\">stylelint</a></li>\n<li><a href=\"https://prettier.io/\">prettier</a></li>\n<li><a href=\"https://shields.io/badges\">shields</a></li>\n</ul>\n"},{"title":"webpack打包优化?","abbrlink":"7e0eb1ea","date":"2023-11-08T01:05:01.000Z","_content":"\n# 优化?\n\n前端的更新迭代是很快的，从最开始的三件套到现在的响应式开发，在到现在的项目管理化；\n\n于是前端又得学会工程化以及对项目优化的知识，最开始的前端是没有工程这一技能的， 就是把简单的资源区分目录，再从不同的目录调取不同的资源文件;\n\n但是暴露出有很多问题，就好比资源怎么重复利用，每次打开页面资源又要重新加载，而不是读取缓存。这样的情况会导致浏览器的卡顿，影响用户体验。\n\n再者就是代码风格，起初哪有风格就是各写各的，对于团队式开发一直是个头疼的问题；\n\n之后就出现了各式各样的工程化，比如：代码格式化的风格，检验代码的格式，代码压缩与混淆等等；\n\n这样的一个好处就是做到统一，之后的开发全都是以这个为标准；关于如何规范化搭建项目可以参考之前的文章[Vue 项目搭建](/brochure/project/product/init_vue)\n\n通过`webpack5`搭建的`vue3`的项目如何优化呢？ 这里具体说明打包优化; 一些优化的方案可参考[从哪些方面进行性能优化](/brochure/project/direction/direction)\n\n## 简单了解 Webpack\n\n`Webpack` 是一个前端资源打包工具，可以按照模块依赖关系打包项目，将不同模块的依赖关系打包在一起，最终生成一个或多个静态资源，如：js、css、图片等。\n\n`Webpack`就是区分不同的模块，例如：项目打包的入口文件是什么，将打包出来的文件放在哪里，本地服务的配置以及对代码的拆分；其实`webpack`没有什么特殊的意义，可以理解的就是项目底层的建筑，只有吧项目底层搭建完善之后，才能更好的去开发项目。\n\n项目中有一些特定的插件，比如混合式开发`h5`需要查看`networker`，那就需要安装对应版本的`vconsole`；这样的话不管您是本地开发还是其他环境测试都是一个不错的选择；\n\n`Webpack` 的核心功能是：\n\n1. 模块化：将项目拆分成小的模块，每个模块只包含一个功能，方便管理。\n2. 模块化加载：通过模块化加载，可以减少请求数量，提高页面加载速度。\n3. 模块化编译：通过模块化编译，可以减少代码体积，提高运行速度。\n\n优化范围：\n\n1. 缩小打包范围：缩小打包范围，可以减少打包体积。\n2. 优化打包速度：优化打包速度，可以减少打包时间。\n3. 优化打包体积：优化打包体积，可以减少打包体积。\n\n最初的项目就是这样的目录:\n\n```js\njs/*\ncss/*\nhtml/*\n...\n```\n\n但是现在的项目是比较复杂的，引入的资源也是很多的，所以需要将这些资源进行分类，然后进行打包。最后通过打包工具打包出来的问题就类似于最初的项目;\n\n```js\nstatic / css;\nstatic / js;\nstatic / vue;\nindex.html;\n```\n\n## 初始化项目\n\n我们拿`vue`来讲, 先要在全局安装`@vue/cli`, 后面我们会说到为什么要安装全局;\n\n```sh\nnpm i -g @vue/cli\n```\n\n安装成功之后，我们创建一个简单的项目:\n\n```sh\nvue create 项目名称\n```\n\n我们选择`vue3`进行项目测试打包; 安装成功之后`install` 完成之后使用`vue ui`可以通过可视化面板导入项目，这样的化就可以查看自己项目安装的依赖以及对依赖进行更新的操作;\n\n效果如下：\n\n![ui](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-48-15.png)\n\n点开`任务`：\n\n![任务](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-49-34.png)\n\n这里我们就能看到项目的一些资源大小，然后通过`webpack`配置针对于这些依赖项目进行优化;\n\n## 优化\n\n首先要先知道`public/index.html`文件中的`<title><%= htmlWebpackPlugin.options.title %></title>`是怎么来的；\n\n对最开始的版本是需要安装`htmlWebpackPlugin`对应的依赖，然后在`webpack.config.js`中配置`htmlWebpackPlugin`，然后就可以在`public/index.html`中通过`<%= htmlWebpackPlugin.options.title %>`来获取`title`的值了；[html-webpack-plugin](https://www.npmjs.com/package/html-webpack-plugin)\n\n```js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n{\n\tplugins: [\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: \"My App\", // 标题\n\t\t\tfilename: \"assets/admin.html\", // 文件\n\t\t}),\n\t];\n}\n```\n\n## 如何设置 title\n\n但是对于高版本就不需要特别安装插件了；想要设置`title`有俩种方案: 在`vue.config.js`中配置\n\n### 方案一\n\n```js\nmodule.exports = defineConfig({\n transpileDependencies: true,\n pages: {\n  index: {\n   entry: \"src/main.js\",\n   title: \"测试项目\", // 这里就是最终的title\n  },\n },\n}\n```\n\n### 方案二\n\n```js\n{\n\tchainWebpack: config => {\n\t\tconfig.plugin(\"html\").tap(args => {\n\t\t\targs[0].title = \"测试项目\";\n\t\t\treturn args;\n\t\t});\n\t};\n}\n```\n\n这样您就可以定制化标题了;\n\n## 设置打包目录以及静态资源目录\n\n对于配置, 打包目录默认的是`dist`, 静态目录默认的是`static`; 当然您可以自定义\n\n```js\n{\n  // 输出目录\n outputDir: \"dist\",\n // 静态资源目录\n assetsDir: \"static\",\n}\n```\n\n## 简单区分 chainWebpack 和 configureWebpack\n\n1. `configureWebpack`: 通过操作对象的形式，来修改默认的 webpack 配置，该对象将会被 webpack-merge 合并入最终的 webpack 配置\n2. `chainWebpack` 通过链式编程的形式，来修改默认的 webpack 配置\n\n```js\n// configureWebpack 形式\n{\n  configureWebpack:{\n    resolve: {\n      // 别名配置\n      alias: {\n        'assets': '@/assets',\n        'common': '@/common',\n        'components': '@/components',\n        'network': '@/network',\n        'configs': '@/configs',\n        'views': '@/views',\n        'plugins': '@/plugins',\n      }\n    }\n  },\n}\n```\n\n```js\n// chainWebpack形式\n{\n\tchainWebpack: config => {\n\t\tconfig.resolve.alias\n\t\t\t.set(\"@\", resolve(\"src\"))\n\t\t\t.set(\"@v\", resolve(\"src/views\"))\n\t\t\t.set(\"@c\", resolve(\"src/components\"))\n\t\t\t.set(\"@u\", resolve(\"src/util\"))\n\t\t\t.set(\"@h\", resolve(\"src/hooks\"));\n\t};\n}\n```\n\n这里我们通过对象的形式对别名进行配置，当然也可以使用数组的形式，但是数组的形式需要我们自己进行配置；也是通过对象的形式去分包\n\n## 分包优化\n\n我们的项目用的有`ui组件, lodash一些特定的工具，还有axios, vuex或者pinia`等等；但是对于一些插件是很大的，包括自己再写页面的时候没有注意优化的思维那么后期维护起来绝对是很痛苦的；\n\n简单的说分包就是 将一些`install`的依赖进行分包，比如`axios`，`vuex`，`pinia`等等；打包出来的文件如：`chunk-axios.js`，`chunk-vuex.js`，`chunk-pinia.js`等等；这样的话我们就知道这些文件都是什么文件了, 而不是`common.js, vendor.js`；\n\n```js\n{\n  configureWebpack: {\n    optimization: {\n      moduleIds: \"deterministic\",\n      runtimeChunk: \"single\",\n      minimize: true,\n      splitChunks: {\n        // 分割所有类型的chunk（包括异步和同步）\n        chunks: \"all\",\n        // 最小提取文件大小（默认值）\n        minSize: 20000,\n        // maxSize: 0,\n        // 需在两个模块中共享才进行拆分\n        minChunks: 2,\n        // 最大异步请求并发数（默认值）\n        maxAsyncRequests: 5,\n        // 最大初始化请求并发数（默认值）\n        maxInitialRequests: 3,\n        // 缓存组\n        cacheGroups: {\n        // vendor组 存放node_modules下的chunk\n        vendor: {\n          // 匹配node_modules下所有的chunk\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name(module) {\n          let packageName = \"vendors\";\n          const reg = /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/;\n          if (reg.test(module.context)) {\n            packageName = module.context.match(reg)[1];\n          }\n          // 最后以 chunk-lodash 命名\n          return `chunk-${packageName.replace(\"@\", \"\")}`;\n          },\n          // 优先级10 优先将node_modules下的chunk拆分到vendor组\n          priority: 10,\n          // 重用模块，而不是重新生成\n          reuseExistingChunk: true,\n          // 强制拆分\n          enforce: true,\n        },\n        // 默认组 非node_modules下的文件块 将执行default缓存组规则\n        default: {\n          // 重用模块，而不是重新生成\n          reuseExistingChunk: true,\n          // 优先级 -10\n          priority: -10,\n          // 强制拆分\n          enforce: true,\n        },\n        },\n      },\n    }\n  }\n}\n```\n\n这样的话一些基础的公共模块就会被抽离出来， 这样在打包的时候， 就不会生成多个公共模块了。 具体的参数配置可参考文档 [webpack](https://webpack.docschina.org/)\n\n## 插件\n\n但是做到这里还是不够的，就比如打包出来的文件进行`gz`压缩，组件按需加载等等;\n\n```js\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\nconst productionGzipExtensions = [\"js\", \"css\"];\n{\n  configureWebpack: {\n    // 插件\n    plugins: [\n    // 具体查看element-plus文档\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n    // 压缩\n    new CompressionWebpackPlugin({\n      algorithm: \"gzip\",\n      test: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n      threshold: 10240,\n      deleteOriginalAssets: false, // 不删除源文件\n      minRatio: 0.8,\n    }),\n    // 构建预览， 打包分析\n    new BundleAnalyzerPlugin(),\n    ],\n  }\n}\n```\n\n## 忽略打包的依赖\n\n```js\nconst cdn = {\n css: [\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css\"],\n js: [\n  // vue\n  \"https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js\",\n  // ele\n  \"https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js\",\n  \"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js\",\n  // lodash\n  \"https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js\",\n  // router\n  \"https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js\",\n ],\n};\n\n{\n  configureWebpack: {\n    externals: {\n      // 将一些体积比较大的包拆出来，以cdn的链接引入， 这样减少打包体积\n      vue: \"Vue\",\n      \"element-plus\": \"ElementPlus\",\n      \"@element-plus/icons-vue\": \"ElementPlusIconsVue\",\n      \"lodash-es\": \"_\",\n      \"vue-router\": \"VueRouter\",\n    }\n  }\n}\n```\n\n接着在`public/index.html`配置 cdn\n\n```js\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.css) { %>\n  <link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n<% } %>\n\n\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.js) { %>\n  <script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\" ></script>\n<% } %>\n```\n\n## 配置 devserver\n\n```js\n{\n  devServer: {\n    open: true,\n    host: \"localhost\",\n    port: 8080,\n    https: false,\n    client: {\n      // 允许在浏览器中设置日志级别，默认是普通的提示\n      logging: \"info\",\n      // 当出现编译错误或警告时，在浏览器中显示全屏覆盖\n      overlay: true,\n      // 在浏览器中以百分比显示编译进度； 打开控制台就可以看见\n      progress: true,\n      // 限次尝试重新连接\n      reconnect: true,\n    },\n  },\n}\n```\n\n到这里一个简单的`webpack`打包优化就完成了；我们通过`vue ui`打包看一下;\n\n![build](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-18-15.png)\n\n这里的我们就可以看出压缩前与压缩后的文件大小对比，部署项目也可以轻松的实现`CDN`加速， 优化打包速度， 减少服务器压力， 提升用户体验。那这样的是不是可以做到瞬间打开页面呢？\n\n![success](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-20-15.png)\n\n![success](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-21-36.png)\n\n然后我们可以看出一个项目最后所用到的资源大小；\n\n## 最终测试代码\n\n```js\nconst { defineConfig } = require(\"@vue/cli-service\");\nconst CompressionWebpackPlugin = require(\"compression-webpack-plugin\");\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\nconst BundleAnalyzerPlugin =\n\trequire(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\n\nconst path = require(\"path\");\n\n// const isProduction = process.env.NODE_ENV === \"production\";\n\nconst cdn = {\n\tcss: [\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css\"],\n\tjs: [\n\t\t// vue\n\t\t\"https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js\",\n\t\t// ele\n\t\t\"https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js\",\n\t\t\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js\",\n\t\t// lodash\n\t\t\"https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js\",\n\t\t// router\n\t\t\"https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js\",\n\t],\n};\n\nconst externals = {\n\tvue: \"Vue\",\n\t\"element-plus\": \"ElementPlus\",\n\t\"@element-plus/icons-vue\": \"ElementPlusIconsVue\",\n\t\"lodash-es\": \"_\",\n\t\"vue-router\": \"VueRouter\",\n};\n\nconst productionGzipExtensions = [\"js\", \"css\"];\n\nmodule.exports = defineConfig({\n\ttranspileDependencies: true,\n\tpages: {\n\t\tindex: {\n\t\t\tentry: \"src/main.js\",\n\t\t\ttitle: \"测试项目\",\n\t\t\t// cdn: isProduction ? cdn : {},\n\t\t\tcdn,\n\t\t},\n\t},\n\t// 输出目录\n\toutputDir: \"dist\",\n\t// 静态资源目录\n\tassetsDir: \"static\",\n\t// 是否开启eslint保存检测\n\tlintOnSave: true,\n\t// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度\n\tproductionSourceMap: false,\n\n\t// 链式编程 修改默认的webpack配置\n\tchainWebpack: () => {\n\t\t// config.plugin(\"html\").tap(args => {\n\t\t//  args[0].title = \"测试项目\";\n\t\t//  return args\n\t\t// });\n\t},\n\n\t// 对象的形式操作 webpack配置\n\tconfigureWebpack: {\n\t\t// 别名\n\t\tresolve: {\n\t\t\talias: {\n\t\t\t\t\"@\": path.resolve(__dirname, \"src\"),\n\t\t\t},\n\t\t},\n\t\tdevtool: \"inline-source-map\",\n\n\t\t// 分包优化\n\t\toptimization: {\n\t\t\tmoduleIds: \"deterministic\",\n\t\t\truntimeChunk: \"single\",\n\t\t\tminimize: true,\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\", // 分割所有类型的chunk（包括异步和同步）\n\t\t\t\tminSize: 20000, // 最小提取文件大小（默认值）\n\t\t\t\t// maxSize: 0,\n\t\t\t\tminChunks: 2, // 需在两个模块中共享才进行拆分\n\t\t\t\tmaxAsyncRequests: 5, // 最大异步请求并发数（默认值）\n\t\t\t\tmaxInitialRequests: 3, // 最大初始化请求并发数（默认值）\n\t\t\t\tcacheGroups: {\n\t\t\t\t\t// vendor组 存放node_modules下的chunk\n\t\t\t\t\tvendor: {\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/, // 匹配node_modules下所有的chunk\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\tlet packageName = \"vendors\";\n\t\t\t\t\t\t\tconst reg = /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/;\n\t\t\t\t\t\t\tif (reg.test(module.context)) {\n\t\t\t\t\t\t\t\tpackageName = module.context.match(reg)[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconsole.log(module.context, \"==========\");\n\t\t\t\t\t\t\t// 最后以 chunk-lodash 命名\n\t\t\t\t\t\t\treturn `chunk-${packageName.replace(\"@\", \"\")}`;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// name: \"chunk-vendor\",\n\t\t\t\t\t\tpriority: 10, // 优先级10 优先将node_modules下的chunk拆分到vendor组\n\t\t\t\t\t\treuseExistingChunk: true, // 重用模块，而不是重新生成\n\t\t\t\t\t\tenforce: true, // 强制拆分\n\t\t\t\t\t},\n\t\t\t\t\t// 默认组 非node_modules下的文件块 将执行default缓存组规则\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treuseExistingChunk: true, // 重用模块，而不是重新生成\n\t\t\t\t\t\tpriority: -10, // 优先级 -10\n\t\t\t\t\t\tenforce: true, // 强制拆分\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t// 插件\n\t\tplugins: [\n\t\t\tAutoImport({\n\t\t\t\tresolvers: [ElementPlusResolver()],\n\t\t\t}),\n\t\t\tComponents({\n\t\t\t\tresolvers: [ElementPlusResolver()],\n\t\t\t}),\n\t\t\t// 压缩\n\t\t\tnew CompressionWebpackPlugin({\n\t\t\t\talgorithm: \"gzip\",\n\t\t\t\ttest: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n\t\t\t\tthreshold: 10240,\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t\tminRatio: 0.8,\n\t\t\t}),\n\t\t\t// 构建预览\n\t\t\tnew BundleAnalyzerPlugin(),\n\t\t],\n\n\t\t// 忽略的依赖\n\t\t// externals: isProduction ? externals : {},\n\t\texternals,\n\t},\n\n\t// 服务\n\tdevServer: {\n\t\topen: true,\n\t\thost: \"localhost\",\n\t\tport: 8080,\n\t\thttps: false,\n\t\tclient: {\n\t\t\t// 允许在浏览器中设置日志级别，默认是普通的提示\n\t\t\tlogging: \"info\",\n\t\t\t// 当出现编译错误或警告时，在浏览器中显示全屏覆盖\n\t\t\toverlay: true,\n\t\t\t// 在浏览器中以百分比显示编译进度\n\t\t\tprogress: true,\n\t\t\t// 限次尝试重新连接\n\t\t\treconnect: true,\n\t\t},\n\t},\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n\t\t<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n\t\t<title><%= htmlWebpackPlugin.options.title %></title>\n\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.css) { %>\n\t\t<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n\t\t<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"></script>\n\t\t<% } %>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\t<strong\n\t\t\t\t>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n\t\t\t\tproperly without JavaScript enabled. Please enable it to\n\t\t\t\tcontinue.</strong\n\t\t\t>\n\t\t</noscript>\n\t\t<div id=\"app\"></div>\n\t\t<!-- built files will be auto injected -->\n\t</body>\n</html>\n```\n\n## 效果图\n\n![result](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-24-45.png)\n","source":"_posts/技能小册/项目管理/项目优化/webpack打包优化.md","raw":"---\ntitle: webpack打包优化?\nabbrlink: 7e0eb1ea\ndate: 2023-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# 优化?\n\n前端的更新迭代是很快的，从最开始的三件套到现在的响应式开发，在到现在的项目管理化；\n\n于是前端又得学会工程化以及对项目优化的知识，最开始的前端是没有工程这一技能的， 就是把简单的资源区分目录，再从不同的目录调取不同的资源文件;\n\n但是暴露出有很多问题，就好比资源怎么重复利用，每次打开页面资源又要重新加载，而不是读取缓存。这样的情况会导致浏览器的卡顿，影响用户体验。\n\n再者就是代码风格，起初哪有风格就是各写各的，对于团队式开发一直是个头疼的问题；\n\n之后就出现了各式各样的工程化，比如：代码格式化的风格，检验代码的格式，代码压缩与混淆等等；\n\n这样的一个好处就是做到统一，之后的开发全都是以这个为标准；关于如何规范化搭建项目可以参考之前的文章[Vue 项目搭建](/brochure/project/product/init_vue)\n\n通过`webpack5`搭建的`vue3`的项目如何优化呢？ 这里具体说明打包优化; 一些优化的方案可参考[从哪些方面进行性能优化](/brochure/project/direction/direction)\n\n## 简单了解 Webpack\n\n`Webpack` 是一个前端资源打包工具，可以按照模块依赖关系打包项目，将不同模块的依赖关系打包在一起，最终生成一个或多个静态资源，如：js、css、图片等。\n\n`Webpack`就是区分不同的模块，例如：项目打包的入口文件是什么，将打包出来的文件放在哪里，本地服务的配置以及对代码的拆分；其实`webpack`没有什么特殊的意义，可以理解的就是项目底层的建筑，只有吧项目底层搭建完善之后，才能更好的去开发项目。\n\n项目中有一些特定的插件，比如混合式开发`h5`需要查看`networker`，那就需要安装对应版本的`vconsole`；这样的话不管您是本地开发还是其他环境测试都是一个不错的选择；\n\n`Webpack` 的核心功能是：\n\n1. 模块化：将项目拆分成小的模块，每个模块只包含一个功能，方便管理。\n2. 模块化加载：通过模块化加载，可以减少请求数量，提高页面加载速度。\n3. 模块化编译：通过模块化编译，可以减少代码体积，提高运行速度。\n\n优化范围：\n\n1. 缩小打包范围：缩小打包范围，可以减少打包体积。\n2. 优化打包速度：优化打包速度，可以减少打包时间。\n3. 优化打包体积：优化打包体积，可以减少打包体积。\n\n最初的项目就是这样的目录:\n\n```js\njs/*\ncss/*\nhtml/*\n...\n```\n\n但是现在的项目是比较复杂的，引入的资源也是很多的，所以需要将这些资源进行分类，然后进行打包。最后通过打包工具打包出来的问题就类似于最初的项目;\n\n```js\nstatic / css;\nstatic / js;\nstatic / vue;\nindex.html;\n```\n\n## 初始化项目\n\n我们拿`vue`来讲, 先要在全局安装`@vue/cli`, 后面我们会说到为什么要安装全局;\n\n```sh\nnpm i -g @vue/cli\n```\n\n安装成功之后，我们创建一个简单的项目:\n\n```sh\nvue create 项目名称\n```\n\n我们选择`vue3`进行项目测试打包; 安装成功之后`install` 完成之后使用`vue ui`可以通过可视化面板导入项目，这样的化就可以查看自己项目安装的依赖以及对依赖进行更新的操作;\n\n效果如下：\n\n![ui](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-48-15.png)\n\n点开`任务`：\n\n![任务](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-49-34.png)\n\n这里我们就能看到项目的一些资源大小，然后通过`webpack`配置针对于这些依赖项目进行优化;\n\n## 优化\n\n首先要先知道`public/index.html`文件中的`<title><%= htmlWebpackPlugin.options.title %></title>`是怎么来的；\n\n对最开始的版本是需要安装`htmlWebpackPlugin`对应的依赖，然后在`webpack.config.js`中配置`htmlWebpackPlugin`，然后就可以在`public/index.html`中通过`<%= htmlWebpackPlugin.options.title %>`来获取`title`的值了；[html-webpack-plugin](https://www.npmjs.com/package/html-webpack-plugin)\n\n```js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n{\n\tplugins: [\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: \"My App\", // 标题\n\t\t\tfilename: \"assets/admin.html\", // 文件\n\t\t}),\n\t];\n}\n```\n\n## 如何设置 title\n\n但是对于高版本就不需要特别安装插件了；想要设置`title`有俩种方案: 在`vue.config.js`中配置\n\n### 方案一\n\n```js\nmodule.exports = defineConfig({\n transpileDependencies: true,\n pages: {\n  index: {\n   entry: \"src/main.js\",\n   title: \"测试项目\", // 这里就是最终的title\n  },\n },\n}\n```\n\n### 方案二\n\n```js\n{\n\tchainWebpack: config => {\n\t\tconfig.plugin(\"html\").tap(args => {\n\t\t\targs[0].title = \"测试项目\";\n\t\t\treturn args;\n\t\t});\n\t};\n}\n```\n\n这样您就可以定制化标题了;\n\n## 设置打包目录以及静态资源目录\n\n对于配置, 打包目录默认的是`dist`, 静态目录默认的是`static`; 当然您可以自定义\n\n```js\n{\n  // 输出目录\n outputDir: \"dist\",\n // 静态资源目录\n assetsDir: \"static\",\n}\n```\n\n## 简单区分 chainWebpack 和 configureWebpack\n\n1. `configureWebpack`: 通过操作对象的形式，来修改默认的 webpack 配置，该对象将会被 webpack-merge 合并入最终的 webpack 配置\n2. `chainWebpack` 通过链式编程的形式，来修改默认的 webpack 配置\n\n```js\n// configureWebpack 形式\n{\n  configureWebpack:{\n    resolve: {\n      // 别名配置\n      alias: {\n        'assets': '@/assets',\n        'common': '@/common',\n        'components': '@/components',\n        'network': '@/network',\n        'configs': '@/configs',\n        'views': '@/views',\n        'plugins': '@/plugins',\n      }\n    }\n  },\n}\n```\n\n```js\n// chainWebpack形式\n{\n\tchainWebpack: config => {\n\t\tconfig.resolve.alias\n\t\t\t.set(\"@\", resolve(\"src\"))\n\t\t\t.set(\"@v\", resolve(\"src/views\"))\n\t\t\t.set(\"@c\", resolve(\"src/components\"))\n\t\t\t.set(\"@u\", resolve(\"src/util\"))\n\t\t\t.set(\"@h\", resolve(\"src/hooks\"));\n\t};\n}\n```\n\n这里我们通过对象的形式对别名进行配置，当然也可以使用数组的形式，但是数组的形式需要我们自己进行配置；也是通过对象的形式去分包\n\n## 分包优化\n\n我们的项目用的有`ui组件, lodash一些特定的工具，还有axios, vuex或者pinia`等等；但是对于一些插件是很大的，包括自己再写页面的时候没有注意优化的思维那么后期维护起来绝对是很痛苦的；\n\n简单的说分包就是 将一些`install`的依赖进行分包，比如`axios`，`vuex`，`pinia`等等；打包出来的文件如：`chunk-axios.js`，`chunk-vuex.js`，`chunk-pinia.js`等等；这样的话我们就知道这些文件都是什么文件了, 而不是`common.js, vendor.js`；\n\n```js\n{\n  configureWebpack: {\n    optimization: {\n      moduleIds: \"deterministic\",\n      runtimeChunk: \"single\",\n      minimize: true,\n      splitChunks: {\n        // 分割所有类型的chunk（包括异步和同步）\n        chunks: \"all\",\n        // 最小提取文件大小（默认值）\n        minSize: 20000,\n        // maxSize: 0,\n        // 需在两个模块中共享才进行拆分\n        minChunks: 2,\n        // 最大异步请求并发数（默认值）\n        maxAsyncRequests: 5,\n        // 最大初始化请求并发数（默认值）\n        maxInitialRequests: 3,\n        // 缓存组\n        cacheGroups: {\n        // vendor组 存放node_modules下的chunk\n        vendor: {\n          // 匹配node_modules下所有的chunk\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name(module) {\n          let packageName = \"vendors\";\n          const reg = /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/;\n          if (reg.test(module.context)) {\n            packageName = module.context.match(reg)[1];\n          }\n          // 最后以 chunk-lodash 命名\n          return `chunk-${packageName.replace(\"@\", \"\")}`;\n          },\n          // 优先级10 优先将node_modules下的chunk拆分到vendor组\n          priority: 10,\n          // 重用模块，而不是重新生成\n          reuseExistingChunk: true,\n          // 强制拆分\n          enforce: true,\n        },\n        // 默认组 非node_modules下的文件块 将执行default缓存组规则\n        default: {\n          // 重用模块，而不是重新生成\n          reuseExistingChunk: true,\n          // 优先级 -10\n          priority: -10,\n          // 强制拆分\n          enforce: true,\n        },\n        },\n      },\n    }\n  }\n}\n```\n\n这样的话一些基础的公共模块就会被抽离出来， 这样在打包的时候， 就不会生成多个公共模块了。 具体的参数配置可参考文档 [webpack](https://webpack.docschina.org/)\n\n## 插件\n\n但是做到这里还是不够的，就比如打包出来的文件进行`gz`压缩，组件按需加载等等;\n\n```js\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\nconst productionGzipExtensions = [\"js\", \"css\"];\n{\n  configureWebpack: {\n    // 插件\n    plugins: [\n    // 具体查看element-plus文档\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n    // 压缩\n    new CompressionWebpackPlugin({\n      algorithm: \"gzip\",\n      test: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n      threshold: 10240,\n      deleteOriginalAssets: false, // 不删除源文件\n      minRatio: 0.8,\n    }),\n    // 构建预览， 打包分析\n    new BundleAnalyzerPlugin(),\n    ],\n  }\n}\n```\n\n## 忽略打包的依赖\n\n```js\nconst cdn = {\n css: [\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css\"],\n js: [\n  // vue\n  \"https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js\",\n  // ele\n  \"https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js\",\n  \"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js\",\n  // lodash\n  \"https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js\",\n  // router\n  \"https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js\",\n ],\n};\n\n{\n  configureWebpack: {\n    externals: {\n      // 将一些体积比较大的包拆出来，以cdn的链接引入， 这样减少打包体积\n      vue: \"Vue\",\n      \"element-plus\": \"ElementPlus\",\n      \"@element-plus/icons-vue\": \"ElementPlusIconsVue\",\n      \"lodash-es\": \"_\",\n      \"vue-router\": \"VueRouter\",\n    }\n  }\n}\n```\n\n接着在`public/index.html`配置 cdn\n\n```js\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.css) { %>\n  <link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n<% } %>\n\n\n<% for (var i in htmlWebpackPlugin.options.cdn && htmlWebpackPlugin.options.cdn.js) { %>\n  <script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\" ></script>\n<% } %>\n```\n\n## 配置 devserver\n\n```js\n{\n  devServer: {\n    open: true,\n    host: \"localhost\",\n    port: 8080,\n    https: false,\n    client: {\n      // 允许在浏览器中设置日志级别，默认是普通的提示\n      logging: \"info\",\n      // 当出现编译错误或警告时，在浏览器中显示全屏覆盖\n      overlay: true,\n      // 在浏览器中以百分比显示编译进度； 打开控制台就可以看见\n      progress: true,\n      // 限次尝试重新连接\n      reconnect: true,\n    },\n  },\n}\n```\n\n到这里一个简单的`webpack`打包优化就完成了；我们通过`vue ui`打包看一下;\n\n![build](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-18-15.png)\n\n这里的我们就可以看出压缩前与压缩后的文件大小对比，部署项目也可以轻松的实现`CDN`加速， 优化打包速度， 减少服务器压力， 提升用户体验。那这样的是不是可以做到瞬间打开页面呢？\n\n![success](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-20-15.png)\n\n![success](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-21-36.png)\n\n然后我们可以看出一个项目最后所用到的资源大小；\n\n## 最终测试代码\n\n```js\nconst { defineConfig } = require(\"@vue/cli-service\");\nconst CompressionWebpackPlugin = require(\"compression-webpack-plugin\");\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\nconst BundleAnalyzerPlugin =\n\trequire(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin;\n\nconst path = require(\"path\");\n\n// const isProduction = process.env.NODE_ENV === \"production\";\n\nconst cdn = {\n\tcss: [\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css\"],\n\tjs: [\n\t\t// vue\n\t\t\"https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js\",\n\t\t// ele\n\t\t\"https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js\",\n\t\t\"https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js\",\n\t\t// lodash\n\t\t\"https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js\",\n\t\t// router\n\t\t\"https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js\",\n\t],\n};\n\nconst externals = {\n\tvue: \"Vue\",\n\t\"element-plus\": \"ElementPlus\",\n\t\"@element-plus/icons-vue\": \"ElementPlusIconsVue\",\n\t\"lodash-es\": \"_\",\n\t\"vue-router\": \"VueRouter\",\n};\n\nconst productionGzipExtensions = [\"js\", \"css\"];\n\nmodule.exports = defineConfig({\n\ttranspileDependencies: true,\n\tpages: {\n\t\tindex: {\n\t\t\tentry: \"src/main.js\",\n\t\t\ttitle: \"测试项目\",\n\t\t\t// cdn: isProduction ? cdn : {},\n\t\t\tcdn,\n\t\t},\n\t},\n\t// 输出目录\n\toutputDir: \"dist\",\n\t// 静态资源目录\n\tassetsDir: \"static\",\n\t// 是否开启eslint保存检测\n\tlintOnSave: true,\n\t// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度\n\tproductionSourceMap: false,\n\n\t// 链式编程 修改默认的webpack配置\n\tchainWebpack: () => {\n\t\t// config.plugin(\"html\").tap(args => {\n\t\t//  args[0].title = \"测试项目\";\n\t\t//  return args\n\t\t// });\n\t},\n\n\t// 对象的形式操作 webpack配置\n\tconfigureWebpack: {\n\t\t// 别名\n\t\tresolve: {\n\t\t\talias: {\n\t\t\t\t\"@\": path.resolve(__dirname, \"src\"),\n\t\t\t},\n\t\t},\n\t\tdevtool: \"inline-source-map\",\n\n\t\t// 分包优化\n\t\toptimization: {\n\t\t\tmoduleIds: \"deterministic\",\n\t\t\truntimeChunk: \"single\",\n\t\t\tminimize: true,\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\", // 分割所有类型的chunk（包括异步和同步）\n\t\t\t\tminSize: 20000, // 最小提取文件大小（默认值）\n\t\t\t\t// maxSize: 0,\n\t\t\t\tminChunks: 2, // 需在两个模块中共享才进行拆分\n\t\t\t\tmaxAsyncRequests: 5, // 最大异步请求并发数（默认值）\n\t\t\t\tmaxInitialRequests: 3, // 最大初始化请求并发数（默认值）\n\t\t\t\tcacheGroups: {\n\t\t\t\t\t// vendor组 存放node_modules下的chunk\n\t\t\t\t\tvendor: {\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/, // 匹配node_modules下所有的chunk\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\tlet packageName = \"vendors\";\n\t\t\t\t\t\t\tconst reg = /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/;\n\t\t\t\t\t\t\tif (reg.test(module.context)) {\n\t\t\t\t\t\t\t\tpackageName = module.context.match(reg)[1];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconsole.log(module.context, \"==========\");\n\t\t\t\t\t\t\t// 最后以 chunk-lodash 命名\n\t\t\t\t\t\t\treturn `chunk-${packageName.replace(\"@\", \"\")}`;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// name: \"chunk-vendor\",\n\t\t\t\t\t\tpriority: 10, // 优先级10 优先将node_modules下的chunk拆分到vendor组\n\t\t\t\t\t\treuseExistingChunk: true, // 重用模块，而不是重新生成\n\t\t\t\t\t\tenforce: true, // 强制拆分\n\t\t\t\t\t},\n\t\t\t\t\t// 默认组 非node_modules下的文件块 将执行default缓存组规则\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treuseExistingChunk: true, // 重用模块，而不是重新生成\n\t\t\t\t\t\tpriority: -10, // 优先级 -10\n\t\t\t\t\t\tenforce: true, // 强制拆分\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t// 插件\n\t\tplugins: [\n\t\t\tAutoImport({\n\t\t\t\tresolvers: [ElementPlusResolver()],\n\t\t\t}),\n\t\t\tComponents({\n\t\t\t\tresolvers: [ElementPlusResolver()],\n\t\t\t}),\n\t\t\t// 压缩\n\t\t\tnew CompressionWebpackPlugin({\n\t\t\t\talgorithm: \"gzip\",\n\t\t\t\ttest: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n\t\t\t\tthreshold: 10240,\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t\tminRatio: 0.8,\n\t\t\t}),\n\t\t\t// 构建预览\n\t\t\tnew BundleAnalyzerPlugin(),\n\t\t],\n\n\t\t// 忽略的依赖\n\t\t// externals: isProduction ? externals : {},\n\t\texternals,\n\t},\n\n\t// 服务\n\tdevServer: {\n\t\topen: true,\n\t\thost: \"localhost\",\n\t\tport: 8080,\n\t\thttps: false,\n\t\tclient: {\n\t\t\t// 允许在浏览器中设置日志级别，默认是普通的提示\n\t\t\tlogging: \"info\",\n\t\t\t// 当出现编译错误或警告时，在浏览器中显示全屏覆盖\n\t\t\toverlay: true,\n\t\t\t// 在浏览器中以百分比显示编译进度\n\t\t\tprogress: true,\n\t\t\t// 限次尝试重新连接\n\t\t\treconnect: true,\n\t\t},\n\t},\n});\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n\t\t<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n\t\t<title><%= htmlWebpackPlugin.options.title %></title>\n\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.css) { %>\n\t\t<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n\t\t<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"></script>\n\t\t<% } %>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\t<strong\n\t\t\t\t>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n\t\t\t\tproperly without JavaScript enabled. Please enable it to\n\t\t\t\tcontinue.</strong\n\t\t\t>\n\t\t</noscript>\n\t\t<div id=\"app\"></div>\n\t\t<!-- built files will be auto injected -->\n\t</body>\n</html>\n```\n\n## 效果图\n\n![result](https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-24-45.png)\n","slug":"技能小册/项目管理/项目优化/webpack打包优化","published":1,"updated":"2025-03-13T10:16:19.197Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jb0082fg9m5zgm6yha","content":"<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化?\"></a>优化?</h1><p>前端的更新迭代是很快的，从最开始的三件套到现在的响应式开发，在到现在的项目管理化；</p>\n<p>于是前端又得学会工程化以及对项目优化的知识，最开始的前端是没有工程这一技能的， 就是把简单的资源区分目录，再从不同的目录调取不同的资源文件;</p>\n<p>但是暴露出有很多问题，就好比资源怎么重复利用，每次打开页面资源又要重新加载，而不是读取缓存。这样的情况会导致浏览器的卡顿，影响用户体验。</p>\n<p>再者就是代码风格，起初哪有风格就是各写各的，对于团队式开发一直是个头疼的问题；</p>\n<p>之后就出现了各式各样的工程化，比如：代码格式化的风格，检验代码的格式，代码压缩与混淆等等；</p>\n<p>这样的一个好处就是做到统一，之后的开发全都是以这个为标准；关于如何规范化搭建项目可以参考之前的文章<a href=\"/brochure/project/product/init_vue\">Vue 项目搭建</a></p>\n<p>通过<code>webpack5</code>搭建的<code>vue3</code>的项目如何优化呢？ 这里具体说明打包优化; 一些优化的方案可参考<a href=\"/brochure/project/direction/direction\">从哪些方面进行性能优化</a></p>\n<h2 id=\"简单了解-Webpack\"><a href=\"#简单了解-Webpack\" class=\"headerlink\" title=\"简单了解 Webpack\"></a>简单了解 Webpack</h2><p><code>Webpack</code> 是一个前端资源打包工具，可以按照模块依赖关系打包项目，将不同模块的依赖关系打包在一起，最终生成一个或多个静态资源，如：js、css、图片等。</p>\n<p><code>Webpack</code>就是区分不同的模块，例如：项目打包的入口文件是什么，将打包出来的文件放在哪里，本地服务的配置以及对代码的拆分；其实<code>webpack</code>没有什么特殊的意义，可以理解的就是项目底层的建筑，只有吧项目底层搭建完善之后，才能更好的去开发项目。</p>\n<p>项目中有一些特定的插件，比如混合式开发<code>h5</code>需要查看<code>networker</code>，那就需要安装对应版本的<code>vconsole</code>；这样的话不管您是本地开发还是其他环境测试都是一个不错的选择；</p>\n<p><code>Webpack</code> 的核心功能是：</p>\n<ol>\n<li>模块化：将项目拆分成小的模块，每个模块只包含一个功能，方便管理。</li>\n<li>模块化加载：通过模块化加载，可以减少请求数量，提高页面加载速度。</li>\n<li>模块化编译：通过模块化编译，可以减少代码体积，提高运行速度。</li>\n</ol>\n<p>优化范围：</p>\n<ol>\n<li>缩小打包范围：缩小打包范围，可以减少打包体积。</li>\n<li>优化打包速度：优化打包速度，可以减少打包时间。</li>\n<li>优化打包体积：优化打包体积，可以减少打包体积。</li>\n</ol>\n<p>最初的项目就是这样的目录:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">css/*</span></span><br><span class=\"line\"><span class=\"comment\">html/*</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>但是现在的项目是比较复杂的，引入的资源也是很多的，所以需要将这些资源进行分类，然后进行打包。最后通过打包工具打包出来的问题就类似于最初的项目;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> / css;</span><br><span class=\"line\"><span class=\"keyword\">static</span> / js;</span><br><span class=\"line\"><span class=\"keyword\">static</span> / vue;</span><br><span class=\"line\">index.<span class=\"property\">html</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>我们拿<code>vue</code>来讲, 先要在全局安装<code>@vue/cli</code>, 后面我们会说到为什么要安装全局;</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，我们创建一个简单的项目:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create 项目名称</span><br></pre></td></tr></table></figure>\n\n<p>我们选择<code>vue3</code>进行项目测试打包; 安装成功之后<code>install</code> 完成之后使用<code>vue ui</code>可以通过可视化面板导入项目，这样的化就可以查看自己项目安装的依赖以及对依赖进行更新的操作;</p>\n<p>效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-48-15.png\" alt=\"ui\"></p>\n<p>点开<code>任务</code>：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-49-34.png\" alt=\"任务\"></p>\n<p>这里我们就能看到项目的一些资源大小，然后通过<code>webpack</code>配置针对于这些依赖项目进行优化;</p>\n<h2 id=\"优化-1\"><a href=\"#优化-1\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>首先要先知道<code>public/index.html</code>文件中的<code>&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</code>是怎么来的；</p>\n<p>对最开始的版本是需要安装<code>htmlWebpackPlugin</code>对应的依赖，然后在<code>webpack.config.js</code>中配置<code>htmlWebpackPlugin</code>，然后就可以在<code>public/index.html</code>中通过<code>&lt;%= htmlWebpackPlugin.options.title %&gt;</code>来获取<code>title</code>的值了；<a href=\"https://www.npmjs.com/package/html-webpack-plugin\">html-webpack-plugin</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;My App&quot;</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;assets/admin.html&quot;</span>, <span class=\"comment\">// 文件</span></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置-title\"><a href=\"#如何设置-title\" class=\"headerlink\" title=\"如何设置 title\"></a>如何设置 title</h2><p>但是对于高版本就不需要特别安装插件了；想要设置<code>title</code>有俩种方案: 在<code>vue.config.js</code>中配置</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\"> <span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">entry</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">title</span>: <span class=\"string\">&quot;测试项目&quot;</span>, <span class=\"comment\">// 这里就是最终的title</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;html&quot;</span>).<span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">title</span> = <span class=\"string\">&quot;测试项目&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样您就可以定制化标题了;</p>\n<h2 id=\"设置打包目录以及静态资源目录\"><a href=\"#设置打包目录以及静态资源目录\" class=\"headerlink\" title=\"设置打包目录以及静态资源目录\"></a>设置打包目录以及静态资源目录</h2><p>对于配置, 打包目录默认的是<code>dist</code>, 静态目录默认的是<code>static</code>; 当然您可以自定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\"> <span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 静态资源目录</span></span><br><span class=\"line\"> <span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单区分-chainWebpack-和-configureWebpack\"><a href=\"#简单区分-chainWebpack-和-configureWebpack\" class=\"headerlink\" title=\"简单区分 chainWebpack 和 configureWebpack\"></a>简单区分 chainWebpack 和 configureWebpack</h2><ol>\n<li><code>configureWebpack</code>: 通过操作对象的形式，来修改默认的 webpack 配置，该对象将会被 webpack-merge 合并入最终的 webpack 配置</li>\n<li><code>chainWebpack</code> 通过链式编程的形式，来修改默认的 webpack 配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configureWebpack 形式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 别名配置</span></span><br><span class=\"line\">      <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;assets&#x27;</span>: <span class=\"string\">&#x27;@/assets&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;common&#x27;</span>: <span class=\"string\">&#x27;@/common&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;components&#x27;</span>: <span class=\"string\">&#x27;@/components&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;network&#x27;</span>: <span class=\"string\">&#x27;@/network&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;configs&#x27;</span>: <span class=\"string\">&#x27;@/configs&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;views&#x27;</span>: <span class=\"string\">&#x27;@/views&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugins&#x27;</span>: <span class=\"string\">&#x27;@/plugins&#x27;</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chainWebpack形式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span></span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@v&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/views&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@c&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/components&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@u&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/util&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@h&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/hooks&quot;</span>));</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们通过对象的形式对别名进行配置，当然也可以使用数组的形式，但是数组的形式需要我们自己进行配置；也是通过对象的形式去分包</p>\n<h2 id=\"分包优化\"><a href=\"#分包优化\" class=\"headerlink\" title=\"分包优化\"></a>分包优化</h2><p>我们的项目用的有<code>ui组件, lodash一些特定的工具，还有axios, vuex或者pinia</code>等等；但是对于一些插件是很大的，包括自己再写页面的时候没有注意优化的思维那么后期维护起来绝对是很痛苦的；</p>\n<p>简单的说分包就是 将一些<code>install</code>的依赖进行分包，比如<code>axios</code>，<code>vuex</code>，<code>pinia</code>等等；打包出来的文件如：<code>chunk-axios.js</code>，<code>chunk-vuex.js</code>，<code>chunk-pinia.js</code>等等；这样的话我们就知道这些文件都是什么文件了, 而不是<code>common.js, vendor.js</code>；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">moduleIds</span>: <span class=\"string\">&quot;deterministic&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">runtimeChunk</span>: <span class=\"string\">&quot;single&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分割所有类型的chunk（包括异步和同步）</span></span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最小提取文件大小（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">        <span class=\"comment\">// maxSize: 0,</span></span><br><span class=\"line\">        <span class=\"comment\">// 需在两个模块中共享才进行拆分</span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最大异步请求并发数（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最大初始化请求并发数（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 缓存组</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vendor组 存放node_modules下的chunk</span></span><br><span class=\"line\">        <span class=\"attr\">vendor</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 匹配node_modules下所有的chunk</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          <span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> packageName = <span class=\"string\">&quot;vendors&quot;</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (reg.<span class=\"title function_\">test</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>)) &#123;</span><br><span class=\"line\">            packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(reg)[<span class=\"number\">1</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 最后以 chunk-lodash 命名</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`chunk-<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 优先级10 优先将node_modules下的chunk拆分到vendor组</span></span><br><span class=\"line\">          <span class=\"attr\">priority</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">          <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">          <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 默认组 非node_modules下的文件块 将执行default缓存组规则</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">          <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 优先级 -10</span></span><br><span class=\"line\">          <span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">          <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话一些基础的公共模块就会被抽离出来， 这样在打包的时候， 就不会生成多个公共模块了。 具体的参数配置可参考文档 <a href=\"https://webpack.docschina.org/\">webpack</a></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>但是做到这里还是不够的，就比如打包出来的文件进行<code>gz</code>压缩，组件按需加载等等;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插件</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 具体查看element-plus文档</span></span><br><span class=\"line\">    <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">      <span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 构建预览， 打包分析</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略打包的依赖\"><a href=\"#忽略打包的依赖\" class=\"headerlink\" title=\"忽略打包的依赖\"></a>忽略打包的依赖</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\"> <span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css&quot;</span>],</span><br><span class=\"line\"> <span class=\"attr\">js</span>: [</span><br><span class=\"line\">  <span class=\"comment\">// vue</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ele</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// lodash</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// router</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js&quot;</span>,</span><br><span class=\"line\"> ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将一些体积比较大的包拆出来，以cdn的链接引入， 这样减少打包体积</span></span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;element-plus&quot;</span>: <span class=\"string\">&quot;ElementPlus&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;@element-plus/icons-vue&quot;</span>: <span class=\"string\">&quot;ElementPlusIconsVue&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;lodash-es&quot;</span>: <span class=\"string\">&quot;_&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>public/index.html</code>配置 cdn</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span> &amp;&amp; htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span>.<span class=\"property\">css</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span> &amp;&amp; htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span>.<span class=\"property\">js</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-devserver\"><a href=\"#配置-devserver\" class=\"headerlink\" title=\"配置 devserver\"></a>配置 devserver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    <span class=\"attr\">https</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 允许在浏览器中设置日志级别，默认是普通的提示</span></span><br><span class=\"line\">      <span class=\"attr\">logging</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当出现编译错误或警告时，在浏览器中显示全屏覆盖</span></span><br><span class=\"line\">      <span class=\"attr\">overlay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 在浏览器中以百分比显示编译进度； 打开控制台就可以看见</span></span><br><span class=\"line\">      <span class=\"attr\">progress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 限次尝试重新连接</span></span><br><span class=\"line\">      <span class=\"attr\">reconnect</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里一个简单的<code>webpack</code>打包优化就完成了；我们通过<code>vue ui</code>打包看一下;</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-18-15.png\" alt=\"build\"></p>\n<p>这里的我们就可以看出压缩前与压缩后的文件大小对比，部署项目也可以轻松的实现<code>CDN</code>加速， 优化打包速度， 减少服务器压力， 提升用户体验。那这样的是不是可以做到瞬间打开页面呢？</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-20-15.png\" alt=\"success\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-21-36.png\" alt=\"success\"></p>\n<p>然后我们可以看出一个项目最后所用到的资源大小；</p>\n<h2 id=\"最终测试代码\"><a href=\"#最终测试代码\" class=\"headerlink\" title=\"最终测试代码\"></a>最终测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@vue/cli-service&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> =</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const isProduction = process.env.NODE_ENV === &quot;production&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// vue</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// ele</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// lodash</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// router</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> externals = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;element-plus&quot;</span>: <span class=\"string\">&quot;ElementPlus&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;@element-plus/icons-vue&quot;</span>: <span class=\"string\">&quot;ElementPlusIconsVue&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;lodash-es&quot;</span>: <span class=\"string\">&quot;_&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">entry</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;测试项目&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// cdn: isProduction ? cdn : &#123;&#125;,</span></span><br><span class=\"line\">\t\t\tcdn,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">\t<span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 静态资源目录</span></span><br><span class=\"line\">\t<span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否开启eslint保存检测</span></span><br><span class=\"line\">\t<span class=\"attr\">lintOnSave</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度</span></span><br><span class=\"line\">\t<span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 链式编程 修改默认的webpack配置</span></span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// config.plugin(&quot;html&quot;).tap(args =&gt; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//  args[0].title = &quot;测试项目&quot;;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//  return args</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 对象的形式操作 webpack配置</span></span><br><span class=\"line\">\t<span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 别名</span></span><br><span class=\"line\">\t\t<span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">devtool</span>: <span class=\"string\">&quot;inline-source-map&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 分包优化</span></span><br><span class=\"line\">\t\t<span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">moduleIds</span>: <span class=\"string\">&quot;deterministic&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">runtimeChunk</span>: <span class=\"string\">&quot;single&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"comment\">// 分割所有类型的chunk（包括异步和同步）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 最小提取文件大小（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// maxSize: 0,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 需在两个模块中共享才进行拆分</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 最大异步请求并发数（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>, <span class=\"comment\">// 最大初始化请求并发数（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// vendor组 存放node_modules下的chunk</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendor</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>, <span class=\"comment\">// 匹配node_modules下所有的chunk</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">let</span> packageName = <span class=\"string\">&quot;vendors&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (reg.<span class=\"title function_\">test</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpackageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(reg)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>, <span class=\"string\">&quot;==========&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 最后以 chunk-lodash 命名</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`chunk-<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// name: &quot;chunk-vendor&quot;,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 优先级10 优先将node_modules下的chunk拆分到vendor组</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 默认组 非node_modules下的文件块 将执行default缓存组规则</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>, <span class=\"comment\">// 优先级 -10</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插件</span></span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 压缩</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 构建预览</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(),</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略的依赖</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// externals: isProduction ? externals : &#123;&#125;,</span></span><br><span class=\"line\">\t\texternals,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 服务</span></span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">https</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 允许在浏览器中设置日志级别，默认是普通的提示</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">logging</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当出现编译错误或警告时，在浏览器中显示全屏覆盖</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">overlay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在浏览器中以百分比显示编译进度</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">progress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 限次尝试重新连接</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">reconnect</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work</span><br><span class=\"line\">\t\t\t\tproperly without JavaScript enabled. Please enable it to</span><br><span class=\"line\">\t\t\t\tcontinue.&lt;/strong</span><br><span class=\"line\">\t\t\t&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-24-45.png\" alt=\"result\"></p>\n","excerpt":"","more":"<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化?\"></a>优化?</h1><p>前端的更新迭代是很快的，从最开始的三件套到现在的响应式开发，在到现在的项目管理化；</p>\n<p>于是前端又得学会工程化以及对项目优化的知识，最开始的前端是没有工程这一技能的， 就是把简单的资源区分目录，再从不同的目录调取不同的资源文件;</p>\n<p>但是暴露出有很多问题，就好比资源怎么重复利用，每次打开页面资源又要重新加载，而不是读取缓存。这样的情况会导致浏览器的卡顿，影响用户体验。</p>\n<p>再者就是代码风格，起初哪有风格就是各写各的，对于团队式开发一直是个头疼的问题；</p>\n<p>之后就出现了各式各样的工程化，比如：代码格式化的风格，检验代码的格式，代码压缩与混淆等等；</p>\n<p>这样的一个好处就是做到统一，之后的开发全都是以这个为标准；关于如何规范化搭建项目可以参考之前的文章<a href=\"/brochure/project/product/init_vue\">Vue 项目搭建</a></p>\n<p>通过<code>webpack5</code>搭建的<code>vue3</code>的项目如何优化呢？ 这里具体说明打包优化; 一些优化的方案可参考<a href=\"/brochure/project/direction/direction\">从哪些方面进行性能优化</a></p>\n<h2 id=\"简单了解-Webpack\"><a href=\"#简单了解-Webpack\" class=\"headerlink\" title=\"简单了解 Webpack\"></a>简单了解 Webpack</h2><p><code>Webpack</code> 是一个前端资源打包工具，可以按照模块依赖关系打包项目，将不同模块的依赖关系打包在一起，最终生成一个或多个静态资源，如：js、css、图片等。</p>\n<p><code>Webpack</code>就是区分不同的模块，例如：项目打包的入口文件是什么，将打包出来的文件放在哪里，本地服务的配置以及对代码的拆分；其实<code>webpack</code>没有什么特殊的意义，可以理解的就是项目底层的建筑，只有吧项目底层搭建完善之后，才能更好的去开发项目。</p>\n<p>项目中有一些特定的插件，比如混合式开发<code>h5</code>需要查看<code>networker</code>，那就需要安装对应版本的<code>vconsole</code>；这样的话不管您是本地开发还是其他环境测试都是一个不错的选择；</p>\n<p><code>Webpack</code> 的核心功能是：</p>\n<ol>\n<li>模块化：将项目拆分成小的模块，每个模块只包含一个功能，方便管理。</li>\n<li>模块化加载：通过模块化加载，可以减少请求数量，提高页面加载速度。</li>\n<li>模块化编译：通过模块化编译，可以减少代码体积，提高运行速度。</li>\n</ol>\n<p>优化范围：</p>\n<ol>\n<li>缩小打包范围：缩小打包范围，可以减少打包体积。</li>\n<li>优化打包速度：优化打包速度，可以减少打包时间。</li>\n<li>优化打包体积：优化打包体积，可以减少打包体积。</li>\n</ol>\n<p>最初的项目就是这样的目录:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">css/*</span></span><br><span class=\"line\"><span class=\"comment\">html/*</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br></pre></td></tr></table></figure>\n\n<p>但是现在的项目是比较复杂的，引入的资源也是很多的，所以需要将这些资源进行分类，然后进行打包。最后通过打包工具打包出来的问题就类似于最初的项目;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> / css;</span><br><span class=\"line\"><span class=\"keyword\">static</span> / js;</span><br><span class=\"line\"><span class=\"keyword\">static</span> / vue;</span><br><span class=\"line\">index.<span class=\"property\">html</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><p>我们拿<code>vue</code>来讲, 先要在全局安装<code>@vue/cli</code>, 后面我们会说到为什么要安装全局;</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，我们创建一个简单的项目:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create 项目名称</span><br></pre></td></tr></table></figure>\n\n<p>我们选择<code>vue3</code>进行项目测试打包; 安装成功之后<code>install</code> 完成之后使用<code>vue ui</code>可以通过可视化面板导入项目，这样的化就可以查看自己项目安装的依赖以及对依赖进行更新的操作;</p>\n<p>效果如下：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-48-15.png\" alt=\"ui\"></p>\n<p>点开<code>任务</code>：</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_16-49-34.png\" alt=\"任务\"></p>\n<p>这里我们就能看到项目的一些资源大小，然后通过<code>webpack</code>配置针对于这些依赖项目进行优化;</p>\n<h2 id=\"优化-1\"><a href=\"#优化-1\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>首先要先知道<code>public/index.html</code>文件中的<code>&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</code>是怎么来的；</p>\n<p>对最开始的版本是需要安装<code>htmlWebpackPlugin</code>对应的依赖，然后在<code>webpack.config.js</code>中配置<code>htmlWebpackPlugin</code>，然后就可以在<code>public/index.html</code>中通过<code>&lt;%= htmlWebpackPlugin.options.title %&gt;</code>来获取<code>title</code>的值了；<a href=\"https://www.npmjs.com/package/html-webpack-plugin\">html-webpack-plugin</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;html-webpack-plugin&quot;</span>);</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;My App&quot;</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">filename</span>: <span class=\"string\">&quot;assets/admin.html&quot;</span>, <span class=\"comment\">// 文件</span></span><br><span class=\"line\">\t\t&#125;),</span><br><span class=\"line\">\t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何设置-title\"><a href=\"#如何设置-title\" class=\"headerlink\" title=\"如何设置 title\"></a>如何设置 title</h2><p>但是对于高版本就不需要特别安装插件了；想要设置<code>title</code>有俩种方案: 在<code>vue.config.js</code>中配置</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\"> <span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> <span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">entry</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">title</span>: <span class=\"string\">&quot;测试项目&quot;</span>, <span class=\"comment\">// 这里就是最终的title</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;html&quot;</span>).<span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">title</span> = <span class=\"string\">&quot;测试项目&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样您就可以定制化标题了;</p>\n<h2 id=\"设置打包目录以及静态资源目录\"><a href=\"#设置打包目录以及静态资源目录\" class=\"headerlink\" title=\"设置打包目录以及静态资源目录\"></a>设置打包目录以及静态资源目录</h2><p>对于配置, 打包目录默认的是<code>dist</code>, 静态目录默认的是<code>static</code>; 当然您可以自定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出目录</span></span><br><span class=\"line\"> <span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\"> <span class=\"comment\">// 静态资源目录</span></span><br><span class=\"line\"> <span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单区分-chainWebpack-和-configureWebpack\"><a href=\"#简单区分-chainWebpack-和-configureWebpack\" class=\"headerlink\" title=\"简单区分 chainWebpack 和 configureWebpack\"></a>简单区分 chainWebpack 和 configureWebpack</h2><ol>\n<li><code>configureWebpack</code>: 通过操作对象的形式，来修改默认的 webpack 配置，该对象将会被 webpack-merge 合并入最终的 webpack 配置</li>\n<li><code>chainWebpack</code> 通过链式编程的形式，来修改默认的 webpack 配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configureWebpack 形式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 别名配置</span></span><br><span class=\"line\">      <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;assets&#x27;</span>: <span class=\"string\">&#x27;@/assets&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;common&#x27;</span>: <span class=\"string\">&#x27;@/common&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;components&#x27;</span>: <span class=\"string\">&#x27;@/components&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;network&#x27;</span>: <span class=\"string\">&#x27;@/network&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;configs&#x27;</span>: <span class=\"string\">&#x27;@/configs&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;views&#x27;</span>: <span class=\"string\">&#x27;@/views&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugins&#x27;</span>: <span class=\"string\">&#x27;@/plugins&#x27;</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chainWebpack形式</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span></span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@v&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/views&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@c&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/components&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@u&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/util&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@h&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/hooks&quot;</span>));</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们通过对象的形式对别名进行配置，当然也可以使用数组的形式，但是数组的形式需要我们自己进行配置；也是通过对象的形式去分包</p>\n<h2 id=\"分包优化\"><a href=\"#分包优化\" class=\"headerlink\" title=\"分包优化\"></a>分包优化</h2><p>我们的项目用的有<code>ui组件, lodash一些特定的工具，还有axios, vuex或者pinia</code>等等；但是对于一些插件是很大的，包括自己再写页面的时候没有注意优化的思维那么后期维护起来绝对是很痛苦的；</p>\n<p>简单的说分包就是 将一些<code>install</code>的依赖进行分包，比如<code>axios</code>，<code>vuex</code>，<code>pinia</code>等等；打包出来的文件如：<code>chunk-axios.js</code>，<code>chunk-vuex.js</code>，<code>chunk-pinia.js</code>等等；这样的话我们就知道这些文件都是什么文件了, 而不是<code>common.js, vendor.js</code>；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">moduleIds</span>: <span class=\"string\">&quot;deterministic&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">runtimeChunk</span>: <span class=\"string\">&quot;single&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分割所有类型的chunk（包括异步和同步）</span></span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最小提取文件大小（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>,</span><br><span class=\"line\">        <span class=\"comment\">// maxSize: 0,</span></span><br><span class=\"line\">        <span class=\"comment\">// 需在两个模块中共享才进行拆分</span></span><br><span class=\"line\">        <span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最大异步请求并发数（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 最大初始化请求并发数（默认值）</span></span><br><span class=\"line\">        <span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 缓存组</span></span><br><span class=\"line\">        <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// vendor组 存放node_modules下的chunk</span></span><br><span class=\"line\">        <span class=\"attr\">vendor</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 匹配node_modules下所有的chunk</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          <span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> packageName = <span class=\"string\">&quot;vendors&quot;</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (reg.<span class=\"title function_\">test</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>)) &#123;</span><br><span class=\"line\">            packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(reg)[<span class=\"number\">1</span>];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 最后以 chunk-lodash 命名</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`chunk-<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 优先级10 优先将node_modules下的chunk拆分到vendor组</span></span><br><span class=\"line\">          <span class=\"attr\">priority</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">          <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">          <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 默认组 非node_modules下的文件块 将执行default缓存组规则</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">          <span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 优先级 -10</span></span><br><span class=\"line\">          <span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">          <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话一些基础的公共模块就会被抽离出来， 这样在打包的时候， 就不会生成多个公共模块了。 具体的参数配置可参考文档 <a href=\"https://webpack.docschina.org/\">webpack</a></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>但是做到这里还是不够的，就比如打包出来的文件进行<code>gz</code>压缩，组件按需加载等等;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插件</span></span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 具体查看element-plus文档</span></span><br><span class=\"line\">    <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">      <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">      <span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">      <span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 构建预览， 打包分析</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"忽略打包的依赖\"><a href=\"#忽略打包的依赖\" class=\"headerlink\" title=\"忽略打包的依赖\"></a>忽略打包的依赖</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\"> <span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css&quot;</span>],</span><br><span class=\"line\"> <span class=\"attr\">js</span>: [</span><br><span class=\"line\">  <span class=\"comment\">// vue</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ele</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// lodash</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// router</span></span><br><span class=\"line\">  <span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js&quot;</span>,</span><br><span class=\"line\"> ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将一些体积比较大的包拆出来，以cdn的链接引入， 这样减少打包体积</span></span><br><span class=\"line\">      <span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;element-plus&quot;</span>: <span class=\"string\">&quot;ElementPlus&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;@element-plus/icons-vue&quot;</span>: <span class=\"string\">&quot;ElementPlusIconsVue&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;lodash-es&quot;</span>: <span class=\"string\">&quot;_&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在<code>public/index.html</code>配置 cdn</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span> &amp;&amp; htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span>.<span class=\"property\">css</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span> &amp;&amp; htmlWebpackPlugin.<span class=\"property\">options</span>.<span class=\"property\">cdn</span>.<span class=\"property\">js</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-devserver\"><a href=\"#配置-devserver\" class=\"headerlink\" title=\"配置 devserver\"></a>配置 devserver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    <span class=\"attr\">https</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 允许在浏览器中设置日志级别，默认是普通的提示</span></span><br><span class=\"line\">      <span class=\"attr\">logging</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当出现编译错误或警告时，在浏览器中显示全屏覆盖</span></span><br><span class=\"line\">      <span class=\"attr\">overlay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 在浏览器中以百分比显示编译进度； 打开控制台就可以看见</span></span><br><span class=\"line\">      <span class=\"attr\">progress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 限次尝试重新连接</span></span><br><span class=\"line\">      <span class=\"attr\">reconnect</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里一个简单的<code>webpack</code>打包优化就完成了；我们通过<code>vue ui</code>打包看一下;</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-18-15.png\" alt=\"build\"></p>\n<p>这里的我们就可以看出压缩前与压缩后的文件大小对比，部署项目也可以轻松的实现<code>CDN</code>加速， 优化打包速度， 减少服务器压力， 提升用户体验。那这样的是不是可以做到瞬间打开页面呢？</p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-20-15.png\" alt=\"success\"></p>\n<p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-21-36.png\" alt=\"success\"></p>\n<p>然后我们可以看出一个项目最后所用到的资源大小；</p>\n<h2 id=\"最终测试代码\"><a href=\"#最终测试代码\" class=\"headerlink\" title=\"最终测试代码\"></a>最终测试代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;@vue/cli-service&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BundleAnalyzerPlugin</span> =</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-bundle-analyzer&quot;</span>).<span class=\"property\">BundleAnalyzerPlugin</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const isProduction = process.env.NODE_ENV === &quot;production&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.min.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"comment\">// vue</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.13/vue.global.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// ele</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus-icons-vue/2.3.1/global.iife.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/element-plus/2.7.2/index.full.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// lodash</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// router</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.3.2/vue-router.global.min.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> externals = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;element-plus&quot;</span>: <span class=\"string\">&quot;ElementPlus&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;@element-plus/icons-vue&quot;</span>: <span class=\"string\">&quot;ElementPlusIconsVue&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;lodash-es&quot;</span>: <span class=\"string\">&quot;_&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">transpileDependencies</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">entry</span>: <span class=\"string\">&quot;src/main.js&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;测试项目&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// cdn: isProduction ? cdn : &#123;&#125;,</span></span><br><span class=\"line\">\t\t\tcdn,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 输出目录</span></span><br><span class=\"line\">\t<span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 静态资源目录</span></span><br><span class=\"line\">\t<span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否开启eslint保存检测</span></span><br><span class=\"line\">\t<span class=\"attr\">lintOnSave</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度</span></span><br><span class=\"line\">\t<span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 链式编程 修改默认的webpack配置</span></span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// config.plugin(&quot;html&quot;).tap(args =&gt; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//  args[0].title = &quot;测试项目&quot;;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//  return args</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 对象的形式操作 webpack配置</span></span><br><span class=\"line\">\t<span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 别名</span></span><br><span class=\"line\">\t\t<span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">devtool</span>: <span class=\"string\">&quot;inline-source-map&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 分包优化</span></span><br><span class=\"line\">\t\t<span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">moduleIds</span>: <span class=\"string\">&quot;deterministic&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">runtimeChunk</span>: <span class=\"string\">&quot;single&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>, <span class=\"comment\">// 分割所有类型的chunk（包括异步和同步）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 最小提取文件大小（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// maxSize: 0,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 需在两个模块中共享才进行拆分</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 最大异步请求并发数（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>, <span class=\"comment\">// 最大初始化请求并发数（默认值）</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// vendor组 存放node_modules下的chunk</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendor</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>, <span class=\"comment\">// 匹配node_modules下所有的chunk</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">let</span> packageName = <span class=\"string\">&quot;vendors&quot;</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (reg.<span class=\"title function_\">test</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpackageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(reg)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>, <span class=\"string\">&quot;==========&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 最后以 chunk-lodash 命名</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`chunk-<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// name: &quot;chunk-vendor&quot;,</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 优先级10 优先将node_modules下的chunk拆分到vendor组</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 默认组 非node_modules下的文件块 将执行default缓存组规则</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用模块，而不是重新生成</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>, <span class=\"comment\">// 优先级 -10</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">enforce</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 强制拆分</span></span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 插件</span></span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 压缩</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 构建预览</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">BundleAnalyzerPlugin</span>(),</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略的依赖</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// externals: isProduction ? externals : &#123;&#125;,</span></span><br><span class=\"line\">\t\texternals,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 服务</span></span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">https</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">client</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 允许在浏览器中设置日志级别，默认是普通的提示</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">logging</span>: <span class=\"string\">&quot;info&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当出现编译错误或警告时，在浏览器中显示全屏覆盖</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">overlay</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在浏览器中以百分比显示编译进度</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">progress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 限次尝试重新连接</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">reconnect</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work</span><br><span class=\"line\">\t\t\t\tproperly without JavaScript enabled. Please enable it to</span><br><span class=\"line\">\t\t\t\tcontinue.&lt;/strong</span><br><span class=\"line\">\t\t\t&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/Snipaste_2024-04-30_17-24-45.png\" alt=\"result\"></p>\n"},{"title":"webpack打包优化(老版本)","abbrlink":"b27b61d3","date":"2023-11-08T01:05:01.000Z","_content":"\n# 优化背景\n\n前段时间搞了一个新项目, 用的全新 vue3 和 vant3 的框架，访问项目时长 1 分多都没有加载出来, 其实引入的框架就只有 vant 和一些插件， 对于单页面而言，这是有很大的问题的，页面记载缓慢，资源下载慢, 一个 vender.js 文件 达到了 mb，对于一个新项目而言， 怎么会这么大呢？这时就应该先去考虑一下项目如何优化。怎样实现 11s 到 1s 的效果。\n\n## 优化方向\n\n- 文件拆分，代码，图片，文件压缩， Gzip 压缩\n- node_modules 包体积过大的文件拆分，优化分包策略\n- 优化路由懒加载\n- 拆分第三方插件, 改用 cdn 链接\n- loading 动画\n- 骨架屏\n\n## 开始优化\n\n### 体积优化\n\n#### 排查冗余依赖，文件资源，图片\n\n- 删除项目中多余的依赖\n- 静态资源全部放入 assets 文件夹下\n\n#### 图片压缩\n\n- 手动将图片进行压缩, 但是这样比较麻烦\n- 引入插件 image-webpack-loade，进行压缩\n\n```sh\n// install\nnpm i image-webpack-loader -D\n```\n\n```js\n// vue.config.js\nchainWebpack: config => {\n\t// 判断环境\n\tif (isProd) {\n\t\t// 图片压缩处理\n\t\tconst imgRule = config.module.rule(\"images\");\n\t\timgRule\n\t\t\t.test(/\\.(png|jpe?g|gif|webp)(\\?.*)?$/)\n\t\t\t.use(\"image-webpack-loader\")\n\t\t\t.loader(\"image-webpack-loader\")\n\t\t\t.options({ bypassOnDebug: true })\n\t\t\t.end();\n\t}\n};\n```\n\n#### 优化 vant 体积, cdn 加速\n\nvant UI 库全局引入， 会将 vant 打包在 vender 文件中， 我们将它拆出来，使用 cdn 链接\n\n```js\nconst isProcess =\n\tprocess.env.NODE_ENV === \"production\" ||\n\tprocess.env.NODE_ENV === \"test\" ||\n\tprocess.env.NODE_ENV === \"pre\";\n// 使用cdn\nconst cdn = {\n\tcss: [\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css\"],\n\tjs: [\n\t\t\"https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js\",\n\t],\n\t// 第三方插件拆分\n\texternals: {\n\t\tvue: \"Vue\",\n\t\t\"vue-router\": \"VueRouter\",\n\t\tvuex: \"Vuex\",\n\t\taxios: \"axios\",\n\t\tvant: \"vant\",\n\t},\n};\n// 本地不会拆分\nconfigureWebpack: {\n\texternals: {\n\t\tisProcess ? cdn.externals : {};\n\t}\n}\n```\n\n#### 优化 moment 体积\n\n```js\n// 这里使用内置的IgnorePlugin即可做到\nnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n```\n\n#### 优化 core-js 体积\n\n项目中默认是`useBuiltIns: 'entry'`将所有`polyfill`都引入了，导致包比较大。我们可以使用 u`seBuiltIns: 'entry'`调整下策略，按需引入，项目中没使用到的 API 就不做`polyfill`处理了\n\n```js\n// babel.config.js\nmodule.exports = {\n\tpresets: [\n\t\t\"@vue/cli-plugin-babel/preset\",\n\t\t[\n\t\t\t\"@babel/preset-env\",\n\t\t\t{\n\t\t\t\tuseBuiltIns: \"usage\", // entry，usage\n\t\t\t\tcorejs: 3,\n\t\t\t},\n\t\t],\n\t],\n\tplugins,\n};\n```\n\n### 传输优化\n\n#### 优化分包策略\n\nvue-cli3 的默认优化是将所有 npm 依赖都打进 chunk-vendor，但这种做法在依赖多的情况下导致 chunk-vendor 过大\n\n```js\noptimization: isProd\n\t? {\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\",\n\t\t\t\tmaxInitialRequests: Infinity, // 默认为3，调整为允许无限入口资源\n\t\t\t\tminSize: 20000, // 20K以下的依赖不做拆分\n\t\t\t\tcacheGroups: {\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\t// 拆分依赖，避免单文件过大拖慢页面展示\n\t\t\t\t\t\t// 得益于HTTP2多路复用，不用太担心资源请求太多的问题\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\t// 拆包\n\t\t\t\t\t\t\tconst packageName = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n\t\t\t\t\t\t\t)[1];\n\t\t\t\t\t\t\t// 进一步将Ant组件拆分出来,请根据情况来\n\t\t\t\t\t\t\t// const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](?:ant-design-vue[\\\\/]es[\\\\/])?(.*?)([\\\\/]|$)/)[1]\n\t\t\t\t\t\t\treturn `npm.${packageName.replace(\"@\", \"\")}`; // 部分服务器不允许URL带@\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tpriority: -10,\n\t\t\t\t\t\tchunks: \"initial\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\truntimeChunk: { name: entrypoint => `runtime-${entrypoint.name}` },\n\t  }\n\t: {};\n```\n\n#### 路由懒加载\n\nSPA 中一个很重要的提速手段就是路由懒加载，当打开页面时才去加载对应文件，我们利用 Vue 的异步组件和 webpack 的代码分割（import()）就可以轻松实现懒加载了。\n但当路由过多时，请合理地用 webpack 的魔法注释对路由进行分组，太多的 chunk 会影响构建时的速度\n\n```js\n{\n  path: 'register',\n  name: 'register',\n  component: () => import(/* webpackChunkName: \"user\" */ '@/views/user/register'),\n}\n```\n\n#### gzip 压缩\n\nGzip 压缩是一种强力压缩手段，针对文本文件时通常能减少 2/3 的体积。\n\nHTTP 协议中用头部字段 Accept-Encoding 和 Content-Encoding 对「采用何种编码格式传输正文」进行了协定，请求头的 Accept-Encoding 会列出客户端支持的编码格式。当响应头的 Content-Encoding 指定了 gzip 时，浏览器则会进行对应解压\n\n一般浏览器都支持 gzip，所以 Accept-Encoding 也会自动带上 gzip，所以我们需要让资源服务器在 Content-Encoding 指定 gzip，并返回 gzip 文件\n\n- Nginx 配置\n\n```sh\n#开启和关闭gzip模式\ngzip on;\n#gizp压缩起点，文件大于1k才进行压缩\ngzip_min_length 1k;\n# gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间\ngzip_comp_level 6;\n# 进行压缩的文件类型。\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;\n# nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩\ngzip_static on\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\ngzip_vary on;\n# 设置gzip压缩针对的HTTP协议版本\ngzip_http_version 1.1;\n```\n\n- 构建是生成 gzip 文件\n\n```js\n// vue.config.js\nconst CompressionPlugin = require(\"compression-webpack-plugin\");\n// gzip压缩处理\nchainWebpack: config => {\n\tif (isProd) {\n\t\tconfig.plugin(\"compression-webpack-plugin\").use(\n\t\t\tnew CompressionPlugin({\n\t\t\t\ttest: /\\.js$|\\.html$|\\.css$/, // 匹配文件名\n\t\t\t\tthreshold: 10240, // 对超过10k的数据压缩\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t})\n\t\t);\n\t}\n};\n```\n\n#### prefetch ， preload\n\n```html\n<% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.css) { %>\n<link\n\thref=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\"\n\trel=\"preload\"\n\tas=\"style\"\n/>\n<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.js) { %>\n<link\n\thref=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"\n\trel=\"preload\"\n\tas=\"script\"\n/>\n<% } %>\n```\n\n```js\nconfig.plugins.delete(\"prefetch\");\nconfig.plugins.delete(\"preload\");\n```\n\n1. prefetch 是在浏览器空闲时加载，可以减少用户等待时间，但加载时间会更长，因为浏览器会同时加载多个文件。\n2. preload 是在当前页面加载时加载，加载速度会更快，但加载时间会更短，但同时会增加用户流量。\n3. prefetch 和 preload 都是 HTML5 新增的标签，但是 preload 的优先级高于 prefetch。\n4. prefetch 的作用是预加载，而 preload 的作用是预获取。\n\n## 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<script\n\t\t\ttype=\"text/javascript\"\n\t\t\tsrc=\"https://webapi.amap.com/maps?v=1.4.4&key=13df4ba40de83428e30e3031ee61cb59\"\n\t\t></script>\n\t\t<!-- <script type=\"text/javascript\" src=\"../src//util//remogeo.js\"></script> -->\n\t\t<!-- <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\"> -->\n\t\t<!-- <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover\" name=\"viewport\" /> -->\n\t\t<meta\n\t\t\tname=\"viewport\"\n\t\t\tcontent=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, shrink-to-fit=no,user-scalable=no\"\n\t\t/>\n\t\t<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n\t\t<title><%= htmlWebpackPlugin.options.title %></title>\n\t\t<script src=\"https://res.wx.qq.com/open/js/jweixin-1.2.0.js\"></script>\n\t\t<script src=\"https://open.work.weixin.qq.com/wwopen/js/jwxwork-1.0.0.js\"></script>\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.css) { %>\n\t\t<link\n\t\t\thref=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\"\n\t\t\trel=\"preload\"\n\t\t\tas=\"style\"\n\t\t/>\n\t\t<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n\t\t<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<link\n\t\t\thref=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"\n\t\t\trel=\"preload\"\n\t\t\tas=\"script\"\n\t\t/>\n\t\t<% } %>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\t<strong\n\t\t\t\t>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n\t\t\t\tproperly without JavaScript enabled. Please enable it to\n\t\t\t\tcontinue.</strong\n\t\t\t>\n\t\t</noscript>\n\t\t<div id=\"app\"></div>\n\t\t<!-- built files will be auto injected -->\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"></script>\n\t\t<% } %>\n\t</body>\n\t<script></script>\n</html>\n```\n\n```js\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst resolve = dir => path.join(__dirname, dir);\nconst CompressionWebpackPlugin = require(\"compression-webpack-plugin\");\nconst vConsolePlugin = require(\"vconsole-webpack-plugin\");\nconst productionGzipExtensions = [\"js\", \"css\"];\n\nconst isProcess =\n\tprocess.env.NODE_ENV === \"production\" ||\n\tprocess.env.NODE_ENV === \"test\" ||\n\tprocess.env.NODE_ENV === \"pre\";\n\n// 配置 cdn, 拆分模块\nconst cdn = {\n\tcss: [\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css\"],\n\tjs: [\n\t\t\"https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js\",\n\t\t\"https://file.anbangke.com/js/map_index.js\",\n\t],\n\texternals: {\n\t\tvue: \"Vue\",\n\t\t\"vue-router\": \"VueRouter\",\n\t\tvuex: \"Vuex\",\n\t\taxios: \"axios\",\n\t\tvant: \"vant\",\n\t\tAMap: \"AMap\",\n\t},\n};\n\nconst vueConfig = {\n\tconfigureWebpack: {\n\t\toptimization: {\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\",\n\t\t\t\tminSize: 30000,\n\t\t\t\tminChunks: 1,\n\t\t\t\tmaxAsyncRequests: 5,\n\t\t\t\tmaxInitialRequests: 3,\n\t\t\t\tautomaticNameDelimiter: \"~\",\n\t\t\t\tname: true,\n\t\t\t\tcacheGroups: {\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\tchunks: \"all\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\tconst packageName = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n\t\t\t\t\t\t\t)[1];\n\t\t\t\t\t\t\treturn `chunk.${packageName.replace(\"@\", \"\")}`;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpriority: -10,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t\t\"crypto-js\": {\n\t\t\t\t\t\tname: \"chunk-crypto-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?crypto-js(.*)/,\n\t\t\t\t\t\tpriority: 10,\n\t\t\t\t\t},\n\t\t\t\t\tvant: {\n\t\t\t\t\t\tname: \"chunk-vant-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?vant(.*)/,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t},\n\t\t\t\t\t\"core-js\": {\n\t\t\t\t\t\tname: \"chunk-core-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?core-js(.*)/,\n\t\t\t\t\t\tpriority: 25,\n\t\t\t\t\t},\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\t// split async commons chunk\n\t\t\t\t\t\tname: \"chunk-common\",\n\t\t\t\t\t\tminChunks: 2,\n\t\t\t\t\t\tpriority: -20,\n\t\t\t\t\t\tchunks: \"initial\",\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tminChunks: 2,\n\t\t\t\t\t\tpriority: -20,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tplugins: [\n\t\t\t// Ignore all locale files of moment.js\n\t\t\tnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n\t\t\tnew webpack.optimize.LimitChunkCountPlugin({\n\t\t\t\tmaxChunks: 5,\n\t\t\t\tminChunkSize: 100,\n\t\t\t}),\n\t\t\tnew CompressionWebpackPlugin({\n\t\t\t\talgorithm: \"gzip\",\n\t\t\t\ttest: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n\t\t\t\tthreshold: 10240,\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t\tminRatio: 0.8,\n\t\t\t}),\n\t\t\tnew vConsolePlugin({\n\t\t\t\tfilter: [],\n\t\t\t\tenable: process.env.NODE_ENV != \"production\",\n\t\t\t}),\n\t\t],\n\t\t// if prod, add externals\n\t\texternals: isProcess ? cdn.externals : {},\n\t},\n\toutputDir: \"dist\",\n\tassetsDir: \"static\",\n\tlintOnSave: true, // 是否开启eslint保存检测\n\tproductionSourceMap: false, // 是否在构建生产包时生成 sourceMap\n\tchainWebpack: config => {\n\t\tconfig.resolve.alias\n\t\t\t.set(\"@\", resolve(\"src\"))\n\t\t\t.set(\"@v\", resolve(\"src/views\"))\n\t\t\t.set(\"@c\", resolve(\"src/components\"))\n\t\t\t.set(\"@u\", resolve(\"src/util\"));\n\t\tconfig.optimization.runtimeChunk(\"single\");\n\t\tconfig.plugin(\"html\").tap(args => {\n\t\t\targs[0].title = \"\";\n\t\t\t// 配置环境cdn\n\t\t\tif (isProcess) {\n\t\t\t\targs[0].cdn = cdn;\n\t\t\t}\n\t\t\treturn args;\n\t\t});\n\t\t// 预览打包模块\n\t\t// config.plugin('webpack-bundle-analyzer')\n\t\t// \t.use(require('webpack-bundle-analyzer').BundleAnalyzerPlugin)\n\t\t// \t.end()\n\t\t// 关闭Prefetch, 在首屏会把这十几个路由文件，都一口气下载了 删除预加载\n\t\tconfig.plugins.delete(\"prefetch\");\n\t\tconfig.plugins.delete(\"preload\");\n\t\t// 压缩代码\n\t\tconfig.optimization.minimize(true);\n\t},\n\tdevServer: {\n\t\thost: \"0.0.0.0\", //局域网和本地访问\n\t\tport: 80,\n\t\thot: true,\n\t\topen: false,\n\t\toverlay: {\n\t\t\twarning: false,\n\t\t\terror: true,\n\t\t},\n\t\tdisableHostCheck: true,\n\t},\n};\nmodule.exports = vueConfig;\n```\n\n### 打包之后体验 1s 打开项目\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112181708.7zqeietpgn.webp)\n\n## 参考资料\n\n- [🐢11s 到 ⚡1s，性能优化之首屏加载 🚀](https://juejin.cn/post/6949896020788690958?share_token=d0a44d3a-83bf-4b45-8834-4d99ed8b7fac)\n","source":"_posts/技能小册/项目管理/项目优化/webpack打包优化(老版本).md","raw":"---\ntitle: webpack打包优化(老版本)\nabbrlink: b27b61d3\ndate: 2023-11-08 09:05:01\ncategories:\n  - 技能小册\ntags:\n  - 工程化\n---\n\n# 优化背景\n\n前段时间搞了一个新项目, 用的全新 vue3 和 vant3 的框架，访问项目时长 1 分多都没有加载出来, 其实引入的框架就只有 vant 和一些插件， 对于单页面而言，这是有很大的问题的，页面记载缓慢，资源下载慢, 一个 vender.js 文件 达到了 mb，对于一个新项目而言， 怎么会这么大呢？这时就应该先去考虑一下项目如何优化。怎样实现 11s 到 1s 的效果。\n\n## 优化方向\n\n- 文件拆分，代码，图片，文件压缩， Gzip 压缩\n- node_modules 包体积过大的文件拆分，优化分包策略\n- 优化路由懒加载\n- 拆分第三方插件, 改用 cdn 链接\n- loading 动画\n- 骨架屏\n\n## 开始优化\n\n### 体积优化\n\n#### 排查冗余依赖，文件资源，图片\n\n- 删除项目中多余的依赖\n- 静态资源全部放入 assets 文件夹下\n\n#### 图片压缩\n\n- 手动将图片进行压缩, 但是这样比较麻烦\n- 引入插件 image-webpack-loade，进行压缩\n\n```sh\n// install\nnpm i image-webpack-loader -D\n```\n\n```js\n// vue.config.js\nchainWebpack: config => {\n\t// 判断环境\n\tif (isProd) {\n\t\t// 图片压缩处理\n\t\tconst imgRule = config.module.rule(\"images\");\n\t\timgRule\n\t\t\t.test(/\\.(png|jpe?g|gif|webp)(\\?.*)?$/)\n\t\t\t.use(\"image-webpack-loader\")\n\t\t\t.loader(\"image-webpack-loader\")\n\t\t\t.options({ bypassOnDebug: true })\n\t\t\t.end();\n\t}\n};\n```\n\n#### 优化 vant 体积, cdn 加速\n\nvant UI 库全局引入， 会将 vant 打包在 vender 文件中， 我们将它拆出来，使用 cdn 链接\n\n```js\nconst isProcess =\n\tprocess.env.NODE_ENV === \"production\" ||\n\tprocess.env.NODE_ENV === \"test\" ||\n\tprocess.env.NODE_ENV === \"pre\";\n// 使用cdn\nconst cdn = {\n\tcss: [\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css\"],\n\tjs: [\n\t\t\"https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js\",\n\t],\n\t// 第三方插件拆分\n\texternals: {\n\t\tvue: \"Vue\",\n\t\t\"vue-router\": \"VueRouter\",\n\t\tvuex: \"Vuex\",\n\t\taxios: \"axios\",\n\t\tvant: \"vant\",\n\t},\n};\n// 本地不会拆分\nconfigureWebpack: {\n\texternals: {\n\t\tisProcess ? cdn.externals : {};\n\t}\n}\n```\n\n#### 优化 moment 体积\n\n```js\n// 这里使用内置的IgnorePlugin即可做到\nnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n```\n\n#### 优化 core-js 体积\n\n项目中默认是`useBuiltIns: 'entry'`将所有`polyfill`都引入了，导致包比较大。我们可以使用 u`seBuiltIns: 'entry'`调整下策略，按需引入，项目中没使用到的 API 就不做`polyfill`处理了\n\n```js\n// babel.config.js\nmodule.exports = {\n\tpresets: [\n\t\t\"@vue/cli-plugin-babel/preset\",\n\t\t[\n\t\t\t\"@babel/preset-env\",\n\t\t\t{\n\t\t\t\tuseBuiltIns: \"usage\", // entry，usage\n\t\t\t\tcorejs: 3,\n\t\t\t},\n\t\t],\n\t],\n\tplugins,\n};\n```\n\n### 传输优化\n\n#### 优化分包策略\n\nvue-cli3 的默认优化是将所有 npm 依赖都打进 chunk-vendor，但这种做法在依赖多的情况下导致 chunk-vendor 过大\n\n```js\noptimization: isProd\n\t? {\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\",\n\t\t\t\tmaxInitialRequests: Infinity, // 默认为3，调整为允许无限入口资源\n\t\t\t\tminSize: 20000, // 20K以下的依赖不做拆分\n\t\t\t\tcacheGroups: {\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\t// 拆分依赖，避免单文件过大拖慢页面展示\n\t\t\t\t\t\t// 得益于HTTP2多路复用，不用太担心资源请求太多的问题\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\t// 拆包\n\t\t\t\t\t\t\tconst packageName = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n\t\t\t\t\t\t\t)[1];\n\t\t\t\t\t\t\t// 进一步将Ant组件拆分出来,请根据情况来\n\t\t\t\t\t\t\t// const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](?:ant-design-vue[\\\\/]es[\\\\/])?(.*?)([\\\\/]|$)/)[1]\n\t\t\t\t\t\t\treturn `npm.${packageName.replace(\"@\", \"\")}`; // 部分服务器不允许URL带@\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tpriority: -10,\n\t\t\t\t\t\tchunks: \"initial\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\truntimeChunk: { name: entrypoint => `runtime-${entrypoint.name}` },\n\t  }\n\t: {};\n```\n\n#### 路由懒加载\n\nSPA 中一个很重要的提速手段就是路由懒加载，当打开页面时才去加载对应文件，我们利用 Vue 的异步组件和 webpack 的代码分割（import()）就可以轻松实现懒加载了。\n但当路由过多时，请合理地用 webpack 的魔法注释对路由进行分组，太多的 chunk 会影响构建时的速度\n\n```js\n{\n  path: 'register',\n  name: 'register',\n  component: () => import(/* webpackChunkName: \"user\" */ '@/views/user/register'),\n}\n```\n\n#### gzip 压缩\n\nGzip 压缩是一种强力压缩手段，针对文本文件时通常能减少 2/3 的体积。\n\nHTTP 协议中用头部字段 Accept-Encoding 和 Content-Encoding 对「采用何种编码格式传输正文」进行了协定，请求头的 Accept-Encoding 会列出客户端支持的编码格式。当响应头的 Content-Encoding 指定了 gzip 时，浏览器则会进行对应解压\n\n一般浏览器都支持 gzip，所以 Accept-Encoding 也会自动带上 gzip，所以我们需要让资源服务器在 Content-Encoding 指定 gzip，并返回 gzip 文件\n\n- Nginx 配置\n\n```sh\n#开启和关闭gzip模式\ngzip on;\n#gizp压缩起点，文件大于1k才进行压缩\ngzip_min_length 1k;\n# gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间\ngzip_comp_level 6;\n# 进行压缩的文件类型。\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;\n# nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩\ngzip_static on\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\ngzip_vary on;\n# 设置gzip压缩针对的HTTP协议版本\ngzip_http_version 1.1;\n```\n\n- 构建是生成 gzip 文件\n\n```js\n// vue.config.js\nconst CompressionPlugin = require(\"compression-webpack-plugin\");\n// gzip压缩处理\nchainWebpack: config => {\n\tif (isProd) {\n\t\tconfig.plugin(\"compression-webpack-plugin\").use(\n\t\t\tnew CompressionPlugin({\n\t\t\t\ttest: /\\.js$|\\.html$|\\.css$/, // 匹配文件名\n\t\t\t\tthreshold: 10240, // 对超过10k的数据压缩\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t})\n\t\t);\n\t}\n};\n```\n\n#### prefetch ， preload\n\n```html\n<% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.css) { %>\n<link\n\thref=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\"\n\trel=\"preload\"\n\tas=\"style\"\n/>\n<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.js) { %>\n<link\n\thref=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"\n\trel=\"preload\"\n\tas=\"script\"\n/>\n<% } %>\n```\n\n```js\nconfig.plugins.delete(\"prefetch\");\nconfig.plugins.delete(\"preload\");\n```\n\n1. prefetch 是在浏览器空闲时加载，可以减少用户等待时间，但加载时间会更长，因为浏览器会同时加载多个文件。\n2. preload 是在当前页面加载时加载，加载速度会更快，但加载时间会更短，但同时会增加用户流量。\n3. prefetch 和 preload 都是 HTML5 新增的标签，但是 preload 的优先级高于 prefetch。\n4. prefetch 的作用是预加载，而 preload 的作用是预获取。\n\n## 模板\n\n```html\n<!DOCTYPE html>\n<html lang=\"\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<script\n\t\t\ttype=\"text/javascript\"\n\t\t\tsrc=\"https://webapi.amap.com/maps?v=1.4.4&key=13df4ba40de83428e30e3031ee61cb59\"\n\t\t></script>\n\t\t<!-- <script type=\"text/javascript\" src=\"../src//util//remogeo.js\"></script> -->\n\t\t<!-- <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\"> -->\n\t\t<!-- <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover\" name=\"viewport\" /> -->\n\t\t<meta\n\t\t\tname=\"viewport\"\n\t\t\tcontent=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, shrink-to-fit=no,user-scalable=no\"\n\t\t/>\n\t\t<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n\t\t<title><%= htmlWebpackPlugin.options.title %></title>\n\t\t<script src=\"https://res.wx.qq.com/open/js/jweixin-1.2.0.js\"></script>\n\t\t<script src=\"https://open.work.weixin.qq.com/wwopen/js/jwxwork-1.0.0.js\"></script>\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.css) { %>\n\t\t<link\n\t\t\thref=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\"\n\t\t\trel=\"preload\"\n\t\t\tas=\"style\"\n\t\t/>\n\t\t<link href=\"<%= htmlWebpackPlugin.options.cdn.css[i] %>\" rel=\"stylesheet\" />\n\t\t<% } %> <% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<link\n\t\t\thref=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"\n\t\t\trel=\"preload\"\n\t\t\tas=\"script\"\n\t\t/>\n\t\t<% } %>\n\t</head>\n\t<body>\n\t\t<noscript>\n\t\t\t<strong\n\t\t\t\t>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n\t\t\t\tproperly without JavaScript enabled. Please enable it to\n\t\t\t\tcontinue.</strong\n\t\t\t>\n\t\t</noscript>\n\t\t<div id=\"app\"></div>\n\t\t<!-- built files will be auto injected -->\n\t\t<% for (var i in htmlWebpackPlugin.options.cdn &&\n\t\thtmlWebpackPlugin.options.cdn.js) { %>\n\t\t<script src=\"<%= htmlWebpackPlugin.options.cdn.js[i] %>\"></script>\n\t\t<% } %>\n\t</body>\n\t<script></script>\n</html>\n```\n\n```js\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst resolve = dir => path.join(__dirname, dir);\nconst CompressionWebpackPlugin = require(\"compression-webpack-plugin\");\nconst vConsolePlugin = require(\"vconsole-webpack-plugin\");\nconst productionGzipExtensions = [\"js\", \"css\"];\n\nconst isProcess =\n\tprocess.env.NODE_ENV === \"production\" ||\n\tprocess.env.NODE_ENV === \"test\" ||\n\tprocess.env.NODE_ENV === \"pre\";\n\n// 配置 cdn, 拆分模块\nconst cdn = {\n\tcss: [\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css\"],\n\tjs: [\n\t\t\"https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js\",\n\t\t\"https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js\",\n\t\t\"https://file.anbangke.com/js/map_index.js\",\n\t],\n\texternals: {\n\t\tvue: \"Vue\",\n\t\t\"vue-router\": \"VueRouter\",\n\t\tvuex: \"Vuex\",\n\t\taxios: \"axios\",\n\t\tvant: \"vant\",\n\t\tAMap: \"AMap\",\n\t},\n};\n\nconst vueConfig = {\n\tconfigureWebpack: {\n\t\toptimization: {\n\t\t\tsplitChunks: {\n\t\t\t\tchunks: \"all\",\n\t\t\t\tminSize: 30000,\n\t\t\t\tminChunks: 1,\n\t\t\t\tmaxAsyncRequests: 5,\n\t\t\t\tmaxInitialRequests: 3,\n\t\t\t\tautomaticNameDelimiter: \"~\",\n\t\t\t\tname: true,\n\t\t\t\tcacheGroups: {\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\tchunks: \"all\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\tconst packageName = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\n\t\t\t\t\t\t\t)[1];\n\t\t\t\t\t\t\treturn `chunk.${packageName.replace(\"@\", \"\")}`;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpriority: -10,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t\t\"crypto-js\": {\n\t\t\t\t\t\tname: \"chunk-crypto-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?crypto-js(.*)/,\n\t\t\t\t\t\tpriority: 10,\n\t\t\t\t\t},\n\t\t\t\t\tvant: {\n\t\t\t\t\t\tname: \"chunk-vant-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?vant(.*)/,\n\t\t\t\t\t\tpriority: 20,\n\t\t\t\t\t},\n\t\t\t\t\t\"core-js\": {\n\t\t\t\t\t\tname: \"chunk-core-js\",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]_?core-js(.*)/,\n\t\t\t\t\t\tpriority: 25,\n\t\t\t\t\t},\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\t// split async commons chunk\n\t\t\t\t\t\tname: \"chunk-common\",\n\t\t\t\t\t\tminChunks: 2,\n\t\t\t\t\t\tpriority: -20,\n\t\t\t\t\t\tchunks: \"initial\",\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tminChunks: 2,\n\t\t\t\t\t\tpriority: -20,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tplugins: [\n\t\t\t// Ignore all locale files of moment.js\n\t\t\tnew webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n\t\t\tnew webpack.optimize.LimitChunkCountPlugin({\n\t\t\t\tmaxChunks: 5,\n\t\t\t\tminChunkSize: 100,\n\t\t\t}),\n\t\t\tnew CompressionWebpackPlugin({\n\t\t\t\talgorithm: \"gzip\",\n\t\t\t\ttest: new RegExp(\"\\\\.(\" + productionGzipExtensions.join(\"|\") + \")$\"),\n\t\t\t\tthreshold: 10240,\n\t\t\t\tdeleteOriginalAssets: false, // 不删除源文件\n\t\t\t\tminRatio: 0.8,\n\t\t\t}),\n\t\t\tnew vConsolePlugin({\n\t\t\t\tfilter: [],\n\t\t\t\tenable: process.env.NODE_ENV != \"production\",\n\t\t\t}),\n\t\t],\n\t\t// if prod, add externals\n\t\texternals: isProcess ? cdn.externals : {},\n\t},\n\toutputDir: \"dist\",\n\tassetsDir: \"static\",\n\tlintOnSave: true, // 是否开启eslint保存检测\n\tproductionSourceMap: false, // 是否在构建生产包时生成 sourceMap\n\tchainWebpack: config => {\n\t\tconfig.resolve.alias\n\t\t\t.set(\"@\", resolve(\"src\"))\n\t\t\t.set(\"@v\", resolve(\"src/views\"))\n\t\t\t.set(\"@c\", resolve(\"src/components\"))\n\t\t\t.set(\"@u\", resolve(\"src/util\"));\n\t\tconfig.optimization.runtimeChunk(\"single\");\n\t\tconfig.plugin(\"html\").tap(args => {\n\t\t\targs[0].title = \"\";\n\t\t\t// 配置环境cdn\n\t\t\tif (isProcess) {\n\t\t\t\targs[0].cdn = cdn;\n\t\t\t}\n\t\t\treturn args;\n\t\t});\n\t\t// 预览打包模块\n\t\t// config.plugin('webpack-bundle-analyzer')\n\t\t// \t.use(require('webpack-bundle-analyzer').BundleAnalyzerPlugin)\n\t\t// \t.end()\n\t\t// 关闭Prefetch, 在首屏会把这十几个路由文件，都一口气下载了 删除预加载\n\t\tconfig.plugins.delete(\"prefetch\");\n\t\tconfig.plugins.delete(\"preload\");\n\t\t// 压缩代码\n\t\tconfig.optimization.minimize(true);\n\t},\n\tdevServer: {\n\t\thost: \"0.0.0.0\", //局域网和本地访问\n\t\tport: 80,\n\t\thot: true,\n\t\topen: false,\n\t\toverlay: {\n\t\t\twarning: false,\n\t\t\terror: true,\n\t\t},\n\t\tdisableHostCheck: true,\n\t},\n};\nmodule.exports = vueConfig;\n```\n\n### 打包之后体验 1s 打开项目\n\n![x](https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112181708.7zqeietpgn.webp)\n\n## 参考资料\n\n- [🐢11s 到 ⚡1s，性能优化之首屏加载 🚀](https://juejin.cn/post/6949896020788690958?share_token=d0a44d3a-83bf-4b45-8834-4d99ed8b7fac)\n","slug":"技能小册/项目管理/项目优化/webpack打包优化(老版本)","published":1,"updated":"2025-03-13T10:16:19.123Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jb0085fg9m17uy8sdv","content":"<h1 id=\"优化背景\"><a href=\"#优化背景\" class=\"headerlink\" title=\"优化背景\"></a>优化背景</h1><p>前段时间搞了一个新项目, 用的全新 vue3 和 vant3 的框架，访问项目时长 1 分多都没有加载出来, 其实引入的框架就只有 vant 和一些插件， 对于单页面而言，这是有很大的问题的，页面记载缓慢，资源下载慢, 一个 vender.js 文件 达到了 mb，对于一个新项目而言， 怎么会这么大呢？这时就应该先去考虑一下项目如何优化。怎样实现 11s 到 1s 的效果。</p>\n<h2 id=\"优化方向\"><a href=\"#优化方向\" class=\"headerlink\" title=\"优化方向\"></a>优化方向</h2><ul>\n<li>文件拆分，代码，图片，文件压缩， Gzip 压缩</li>\n<li>node_modules 包体积过大的文件拆分，优化分包策略</li>\n<li>优化路由懒加载</li>\n<li>拆分第三方插件, 改用 cdn 链接</li>\n<li>loading 动画</li>\n<li>骨架屏</li>\n</ul>\n<h2 id=\"开始优化\"><a href=\"#开始优化\" class=\"headerlink\" title=\"开始优化\"></a>开始优化</h2><h3 id=\"体积优化\"><a href=\"#体积优化\" class=\"headerlink\" title=\"体积优化\"></a>体积优化</h3><h4 id=\"排查冗余依赖，文件资源，图片\"><a href=\"#排查冗余依赖，文件资源，图片\" class=\"headerlink\" title=\"排查冗余依赖，文件资源，图片\"></a>排查冗余依赖，文件资源，图片</h4><ul>\n<li>删除项目中多余的依赖</li>\n<li>静态资源全部放入 assets 文件夹下</li>\n</ul>\n<h4 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h4><ul>\n<li>手动将图片进行压缩, 但是这样比较麻烦</li>\n<li>引入插件 image-webpack-loade，进行压缩</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// install</span><br><span class=\"line\">npm i image-webpack-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断环境</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 图片压缩处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> imgRule = config.<span class=\"property\">module</span>.<span class=\"title function_\">rule</span>(<span class=\"string\">&quot;images&quot;</span>);</span><br><span class=\"line\">\t\timgRule</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">test</span>(<span class=\"regexp\">/\\.(png|jpe?g|gif|webp)(\\?.*)?$/</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;image-webpack-loader&quot;</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">loader</span>(<span class=\"string\">&quot;image-webpack-loader&quot;</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">options</span>(&#123; <span class=\"attr\">bypassOnDebug</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-vant-体积-cdn-加速\"><a href=\"#优化-vant-体积-cdn-加速\" class=\"headerlink\" title=\"优化 vant 体积, cdn 加速\"></a>优化 vant 体积, cdn 加速</h4><p>vant UI 库全局引入， 会将 vant 打包在 vender 文件中， 我们将它拆出来，使用 cdn 链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isProcess =</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;production&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;test&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用cdn</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 第三方插件拆分</span></span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">axios</span>: <span class=\"string\">&quot;axios&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vant</span>: <span class=\"string\">&quot;vant&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 本地不会拆分</span></span><br><span class=\"line\"><span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\tisProcess ? cdn.<span class=\"property\">externals</span> : &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-moment-体积\"><a href=\"#优化-moment-体积\" class=\"headerlink\" title=\"优化 moment 体积\"></a>优化 moment 体积</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里使用内置的IgnorePlugin即可做到</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"regexp\">/^\\.\\/locale$/</span>, <span class=\"regexp\">/moment$/</span>),</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-core-js-体积\"><a href=\"#优化-core-js-体积\" class=\"headerlink\" title=\"优化 core-js 体积\"></a>优化 core-js 体积</h4><p>项目中默认是<code>useBuiltIns: &#39;entry&#39;</code>将所有<code>polyfill</code>都引入了，导致包比较大。我们可以使用 u<code>seBuiltIns: &#39;entry&#39;</code>调整下策略，按需引入，项目中没使用到的 API 就不做<code>polyfill</code>处理了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">presets</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/cli-plugin-babel/preset&quot;</span>,</span><br><span class=\"line\">\t\t[</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span>, <span class=\"comment\">// entry，usage</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tplugins,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传输优化\"><a href=\"#传输优化\" class=\"headerlink\" title=\"传输优化\"></a>传输优化</h3><h4 id=\"优化分包策略\"><a href=\"#优化分包策略\" class=\"headerlink\" title=\"优化分包策略\"></a>优化分包策略</h4><p>vue-cli3 的默认优化是将所有 npm 依赖都打进 chunk-vendor，但这种做法在依赖多的情况下导致 chunk-vendor 过大</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: isProd</span><br><span class=\"line\">\t? &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"title class_\">Infinity</span>, <span class=\"comment\">// 默认为3，调整为允许无限入口资源</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 20K以下的依赖不做拆分</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 拆分依赖，避免单文件过大拖慢页面展示</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 得益于HTTP2多路复用，不用太担心资源请求太多的问题</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 拆包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 进一步将Ant组件拆分出来,请根据情况来</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](?:ant-design-vue[\\\\/]es[\\\\/])?(.*?)([\\\\/]|$)/)[1]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`npm.<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>; <span class=\"comment\">// 部分服务器不允许URL带@</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">runtimeChunk</span>: &#123; <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">entrypoint</span> =&gt;</span> <span class=\"string\">`runtime-<span class=\"subst\">$&#123;entrypoint.name&#125;</span>`</span> &#125;,</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t: &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h4><p>SPA 中一个很重要的提速手段就是路由懒加载，当打开页面时才去加载对应文件，我们利用 Vue 的异步组件和 webpack 的代码分割（import()）就可以轻松实现懒加载了。<br>但当路由过多时，请合理地用 webpack 的魔法注释对路由进行分组，太多的 chunk 会影响构建时的速度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;user&quot; */</span> <span class=\"string\">&#x27;@/views/user/register&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gzip-压缩\"><a href=\"#gzip-压缩\" class=\"headerlink\" title=\"gzip 压缩\"></a>gzip 压缩</h4><p>Gzip 压缩是一种强力压缩手段，针对文本文件时通常能减少 2&#x2F;3 的体积。</p>\n<p>HTTP 协议中用头部字段 Accept-Encoding 和 Content-Encoding 对「采用何种编码格式传输正文」进行了协定，请求头的 Accept-Encoding 会列出客户端支持的编码格式。当响应头的 Content-Encoding 指定了 gzip 时，浏览器则会进行对应解压</p>\n<p>一般浏览器都支持 gzip，所以 Accept-Encoding 也会自动带上 gzip，所以我们需要让资源服务器在 Content-Encoding 指定 gzip，并返回 gzip 文件</p>\n<ul>\n<li>Nginx 配置</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启和关闭gzip模式</span></span><br><span class=\"line\">gzip on;</span><br><span class=\"line\"><span class=\"comment\">#gizp压缩起点，文件大于1k才进行压缩</span></span><br><span class=\"line\">gzip_min_length 1k;</span><br><span class=\"line\"><span class=\"comment\"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span></span><br><span class=\"line\">gzip_comp_level 6;</span><br><span class=\"line\"><span class=\"comment\"># 进行压缩的文件类型。</span></span><br><span class=\"line\">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;</span><br><span class=\"line\"><span class=\"comment\"># nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span></span><br><span class=\"line\">gzip_static on</span><br><span class=\"line\"><span class=\"comment\"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class=\"line\">gzip_vary on;</span><br><span class=\"line\"><span class=\"comment\"># 设置gzip压缩针对的HTTP协议版本</span></span><br><span class=\"line\">gzip_http_version 1.1;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建是生成 gzip 文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// gzip压缩处理</span></span><br><span class=\"line\"><span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>).<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$|\\.html$|\\.css$/</span>, <span class=\"comment\">// 匹配文件名</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>, <span class=\"comment\">// 对超过10k的数据压缩</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"prefetch-，-preload\"><a href=\"#prefetch-，-preload\" class=\"headerlink\" title=\"prefetch ， preload\"></a>prefetch ， preload</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;style&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;script&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;prefetch&quot;</span>);</span><br><span class=\"line\">config.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;preload&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>prefetch 是在浏览器空闲时加载，可以减少用户等待时间，但加载时间会更长，因为浏览器会同时加载多个文件。</li>\n<li>preload 是在当前页面加载时加载，加载速度会更快，但加载时间会更短，但同时会增加用户流量。</li>\n<li>prefetch 和 preload 都是 HTML5 新增的标签，但是 preload 的优先级高于 prefetch。</li>\n<li>prefetch 的作用是预加载，而 preload 的作用是预获取。</li>\n</ol>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">src</span>=<span class=\"string\">&quot;https://webapi.amap.com/maps?v=1.4.4&amp;key=13df4ba40de83428e30e3031ee61cb59&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;../src//util//remogeo.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover&quot; name=&quot;viewport&quot; /&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, shrink-to-fit=no,user-scalable=no&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://open.work.weixin.qq.com/wwopen/js/jwxwork-1.0.0.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;style&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;script&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work</span><br><span class=\"line\">\t\t\t\tproperly without JavaScript enabled. Please enable it to</span><br><span class=\"line\">\t\t\t\tcontinue.&lt;/strong</span><br><span class=\"line\">\t\t\t&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">resolve</span> = dir =&gt; path.<span class=\"title function_\">join</span>(__dirname, dir);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vConsolePlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;vconsole-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isProcess =</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;production&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;test&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置 cdn, 拆分模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://file.anbangke.com/js/map_index.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">axios</span>: <span class=\"string\">&quot;axios&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vant</span>: <span class=\"string\">&quot;vant&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">AMap</span>: <span class=\"string\">&quot;AMap&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vueConfig = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">30000</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">automaticNameDelimiter</span>: <span class=\"string\">&quot;~&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`chunk.<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;crypto-js&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-crypto-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?crypto-js(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vant</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-vant-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?vant(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;core-js&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-core-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?core-js(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">common</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// split async commons chunk</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-common&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Ignore all locale files of moment.js</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"regexp\">/^\\.\\/locale$/</span>, <span class=\"regexp\">/moment$/</span>),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">LimitChunkCountPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxChunks</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunkSize</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title function_\">vConsolePlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">filter</span>: [],</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enable</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> != <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// if prod, add externals</span></span><br><span class=\"line\">\t\t<span class=\"attr\">externals</span>: isProcess ? cdn.<span class=\"property\">externals</span> : &#123;&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">lintOnSave</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启eslint保存检测</span></span><br><span class=\"line\">\t<span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否在构建生产包时生成 sourceMap</span></span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span></span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@v&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/views&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@c&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/components&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@u&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/util&quot;</span>));</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">optimization</span>.<span class=\"title function_\">runtimeChunk</span>(<span class=\"string\">&quot;single&quot;</span>);</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;html&quot;</span>).<span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">title</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 配置环境cdn</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isProcess) &#123;</span><br><span class=\"line\">\t\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">cdn</span> = cdn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 预览打包模块</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// config.plugin(&#x27;webpack-bundle-analyzer&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t.use(require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t.end()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭Prefetch, 在首屏会把这十几个路由文件，都一口气下载了 删除预加载</span></span><br><span class=\"line\">\t\tconfig.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;prefetch&quot;</span>);</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;preload&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 压缩代码</span></span><br><span class=\"line\">\t\tconfig.<span class=\"property\">optimization</span>.<span class=\"title function_\">minimize</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>, <span class=\"comment\">//局域网和本地访问</span></span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">open</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">overlay</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">warning</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">error</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = vueConfig;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包之后体验-1s-打开项目\"><a href=\"#打包之后体验-1s-打开项目\" class=\"headerlink\" title=\"打包之后体验 1s 打开项目\"></a>打包之后体验 1s 打开项目</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112181708.7zqeietpgn.webp\" alt=\"x\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://juejin.cn/post/6949896020788690958?share_token=d0a44d3a-83bf-4b45-8834-4d99ed8b7fac\">🐢11s 到 ⚡1s，性能优化之首屏加载 🚀</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"优化背景\"><a href=\"#优化背景\" class=\"headerlink\" title=\"优化背景\"></a>优化背景</h1><p>前段时间搞了一个新项目, 用的全新 vue3 和 vant3 的框架，访问项目时长 1 分多都没有加载出来, 其实引入的框架就只有 vant 和一些插件， 对于单页面而言，这是有很大的问题的，页面记载缓慢，资源下载慢, 一个 vender.js 文件 达到了 mb，对于一个新项目而言， 怎么会这么大呢？这时就应该先去考虑一下项目如何优化。怎样实现 11s 到 1s 的效果。</p>\n<h2 id=\"优化方向\"><a href=\"#优化方向\" class=\"headerlink\" title=\"优化方向\"></a>优化方向</h2><ul>\n<li>文件拆分，代码，图片，文件压缩， Gzip 压缩</li>\n<li>node_modules 包体积过大的文件拆分，优化分包策略</li>\n<li>优化路由懒加载</li>\n<li>拆分第三方插件, 改用 cdn 链接</li>\n<li>loading 动画</li>\n<li>骨架屏</li>\n</ul>\n<h2 id=\"开始优化\"><a href=\"#开始优化\" class=\"headerlink\" title=\"开始优化\"></a>开始优化</h2><h3 id=\"体积优化\"><a href=\"#体积优化\" class=\"headerlink\" title=\"体积优化\"></a>体积优化</h3><h4 id=\"排查冗余依赖，文件资源，图片\"><a href=\"#排查冗余依赖，文件资源，图片\" class=\"headerlink\" title=\"排查冗余依赖，文件资源，图片\"></a>排查冗余依赖，文件资源，图片</h4><ul>\n<li>删除项目中多余的依赖</li>\n<li>静态资源全部放入 assets 文件夹下</li>\n</ul>\n<h4 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h4><ul>\n<li>手动将图片进行压缩, 但是这样比较麻烦</li>\n<li>引入插件 image-webpack-loade，进行压缩</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// install</span><br><span class=\"line\">npm i image-webpack-loader -D</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断环境</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 图片压缩处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> imgRule = config.<span class=\"property\">module</span>.<span class=\"title function_\">rule</span>(<span class=\"string\">&quot;images&quot;</span>);</span><br><span class=\"line\">\t\timgRule</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">test</span>(<span class=\"regexp\">/\\.(png|jpe?g|gif|webp)(\\?.*)?$/</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;image-webpack-loader&quot;</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">loader</span>(<span class=\"string\">&quot;image-webpack-loader&quot;</span>)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">options</span>(&#123; <span class=\"attr\">bypassOnDebug</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-vant-体积-cdn-加速\"><a href=\"#优化-vant-体积-cdn-加速\" class=\"headerlink\" title=\"优化 vant 体积, cdn 加速\"></a>优化 vant 体积, cdn 加速</h4><p>vant UI 库全局引入， 会将 vant 打包在 vender 文件中， 我们将它拆出来，使用 cdn 链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isProcess =</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;production&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;test&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 使用cdn</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"comment\">// 第三方插件拆分</span></span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">axios</span>: <span class=\"string\">&quot;axios&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vant</span>: <span class=\"string\">&quot;vant&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 本地不会拆分</span></span><br><span class=\"line\"><span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\tisProcess ? cdn.<span class=\"property\">externals</span> : &#123;&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-moment-体积\"><a href=\"#优化-moment-体积\" class=\"headerlink\" title=\"优化 moment 体积\"></a>优化 moment 体积</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里使用内置的IgnorePlugin即可做到</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"regexp\">/^\\.\\/locale$/</span>, <span class=\"regexp\">/moment$/</span>),</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优化-core-js-体积\"><a href=\"#优化-core-js-体积\" class=\"headerlink\" title=\"优化 core-js 体积\"></a>优化 core-js 体积</h4><p>项目中默认是<code>useBuiltIns: &#39;entry&#39;</code>将所有<code>polyfill</code>都引入了，导致包比较大。我们可以使用 u<code>seBuiltIns: &#39;entry&#39;</code>调整下策略，按需引入，项目中没使用到的 API 就不做<code>polyfill</code>处理了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">presets</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;@vue/cli-plugin-babel/preset&quot;</span>,</span><br><span class=\"line\">\t\t[</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">useBuiltIns</span>: <span class=\"string\">&quot;usage&quot;</span>, <span class=\"comment\">// entry，usage</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">corejs</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\tplugins,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"传输优化\"><a href=\"#传输优化\" class=\"headerlink\" title=\"传输优化\"></a>传输优化</h3><h4 id=\"优化分包策略\"><a href=\"#优化分包策略\" class=\"headerlink\" title=\"优化分包策略\"></a>优化分包策略</h4><p>vue-cli3 的默认优化是将所有 npm 依赖都打进 chunk-vendor，但这种做法在依赖多的情况下导致 chunk-vendor 过大</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">optimization</span>: isProd</span><br><span class=\"line\">\t? &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"title class_\">Infinity</span>, <span class=\"comment\">// 默认为3，调整为允许无限入口资源</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">20000</span>, <span class=\"comment\">// 20K以下的依赖不做拆分</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 拆分依赖，避免单文件过大拖慢页面展示</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 得益于HTTP2多路复用，不用太担心资源请求太多的问题</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 拆包</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 进一步将Ant组件拆分出来,请根据情况来</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// const packageName = module.context.match(/[\\\\/]node_modules[\\\\/](?:ant-design-vue[\\\\/]es[\\\\/])?(.*?)([\\\\/]|$)/)[1]</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`npm.<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>; <span class=\"comment\">// 部分服务器不允许URL带@</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">runtimeChunk</span>: &#123; <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">entrypoint</span> =&gt;</span> <span class=\"string\">`runtime-<span class=\"subst\">$&#123;entrypoint.name&#125;</span>`</span> &#125;,</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t: &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h4><p>SPA 中一个很重要的提速手段就是路由懒加载，当打开页面时才去加载对应文件，我们利用 Vue 的异步组件和 webpack 的代码分割（import()）就可以轻松实现懒加载了。<br>但当路由过多时，请合理地用 webpack 的魔法注释对路由进行分组，太多的 chunk 会影响构建时的速度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;register&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;user&quot; */</span> <span class=\"string\">&#x27;@/views/user/register&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gzip-压缩\"><a href=\"#gzip-压缩\" class=\"headerlink\" title=\"gzip 压缩\"></a>gzip 压缩</h4><p>Gzip 压缩是一种强力压缩手段，针对文本文件时通常能减少 2&#x2F;3 的体积。</p>\n<p>HTTP 协议中用头部字段 Accept-Encoding 和 Content-Encoding 对「采用何种编码格式传输正文」进行了协定，请求头的 Accept-Encoding 会列出客户端支持的编码格式。当响应头的 Content-Encoding 指定了 gzip 时，浏览器则会进行对应解压</p>\n<p>一般浏览器都支持 gzip，所以 Accept-Encoding 也会自动带上 gzip，所以我们需要让资源服务器在 Content-Encoding 指定 gzip，并返回 gzip 文件</p>\n<ul>\n<li>Nginx 配置</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启和关闭gzip模式</span></span><br><span class=\"line\">gzip on;</span><br><span class=\"line\"><span class=\"comment\">#gizp压缩起点，文件大于1k才进行压缩</span></span><br><span class=\"line\">gzip_min_length 1k;</span><br><span class=\"line\"><span class=\"comment\"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span></span><br><span class=\"line\">gzip_comp_level 6;</span><br><span class=\"line\"><span class=\"comment\"># 进行压缩的文件类型。</span></span><br><span class=\"line\">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;</span><br><span class=\"line\"><span class=\"comment\"># nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span></span><br><span class=\"line\">gzip_static on</span><br><span class=\"line\"><span class=\"comment\"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class=\"line\">gzip_vary on;</span><br><span class=\"line\"><span class=\"comment\"># 设置gzip压缩针对的HTTP协议版本</span></span><br><span class=\"line\">gzip_http_version 1.1;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建是生成 gzip 文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// gzip压缩处理</span></span><br><span class=\"line\"><span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>).<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$|\\.html$|\\.css$/</span>, <span class=\"comment\">// 匹配文件名</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>, <span class=\"comment\">// 对超过10k的数据压缩</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"prefetch-，-preload\"><a href=\"#prefetch-，-preload\" class=\"headerlink\" title=\"prefetch ， preload\"></a>prefetch ， preload</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;style&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;script&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;prefetch&quot;</span>);</span><br><span class=\"line\">config.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;preload&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>prefetch 是在浏览器空闲时加载，可以减少用户等待时间，但加载时间会更长，因为浏览器会同时加载多个文件。</li>\n<li>preload 是在当前页面加载时加载，加载速度会更快，但加载时间会更短，但同时会增加用户流量。</li>\n<li>prefetch 和 preload 都是 HTML5 新增的标签，但是 preload 的优先级高于 prefetch。</li>\n<li>prefetch 的作用是预加载，而 preload 的作用是预获取。</li>\n</ol>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">src</span>=<span class=\"string\">&quot;https://webapi.amap.com/maps?v=1.4.4&amp;key=13df4ba40de83428e30e3031ee61cb59&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;../src//util//remogeo.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover&quot; name=&quot;viewport&quot; /&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, shrink-to-fit=no,user-scalable=no&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://res.wx.qq.com/open/js/jweixin-1.2.0.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://open.work.weixin.qq.com/wwopen/js/jwxwork-1.0.0.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;style&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt; &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">rel</span>=<span class=\"string\">&quot;preload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">as</span>=<span class=\"string\">&quot;script&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t/&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work</span><br><span class=\"line\">\t\t\t\tproperly without JavaScript enabled. Please enable it to</span><br><span class=\"line\">\t\t\t\tcontinue.&lt;/strong</span><br><span class=\"line\">\t\t\t&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">\t\t&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class=\"line\">\t\thtmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;% &#125; %&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">resolve</span> = dir =&gt; path.<span class=\"title function_\">join</span>(__dirname, dir);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vConsolePlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;vconsole-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> productionGzipExtensions = [<span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isProcess =</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;production&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;test&quot;</span> ||</span><br><span class=\"line\">\tprocess.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&quot;pre&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置 cdn, 拆分模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">css</span>: [<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/index.css&quot;</span>],</span><br><span class=\"line\">\t<span class=\"attr\">js</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue@3.2.6/dist/vue.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue-router@4.0.11/dist/vue-router.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vuex@4.0.2/dist/vuex.global.prod.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.4/dist/axios.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vant@3.2.3/lib/vant.min.js&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;https://file.anbangke.com/js/map_index.js&quot;</span>,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t<span class=\"attr\">externals</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">vue</span>: <span class=\"string\">&quot;Vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;vue-router&quot;</span>: <span class=\"string\">&quot;VueRouter&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vuex</span>: <span class=\"string\">&quot;Vuex&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">axios</span>: <span class=\"string\">&quot;axios&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">vant</span>: <span class=\"string\">&quot;vant&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"title class_\">AMap</span>: <span class=\"string\">&quot;AMap&quot;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vueConfig = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minSize</span>: <span class=\"number\">30000</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxAsyncRequests</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxInitialRequests</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">automaticNameDelimiter</span>: <span class=\"string\">&quot;~&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">name</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"title function_\">name</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> packageName = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span>.<span class=\"title function_\">match</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"regexp\">/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/</span></span><br><span class=\"line\">\t\t\t\t\t\t\t)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">`chunk.<span class=\"subst\">$&#123;packageName.replace(<span class=\"string\">&quot;@&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;crypto-js&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-crypto-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?crypto-js(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">vant</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-vant-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?vant(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;core-js&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-core-js&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]_?core-js(.*)/</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">common</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// split async commons chunk</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;chunk-common&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">chunks</span>: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">minChunks</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">priority</span>: -<span class=\"number\">20</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"attr\">reuseExistingChunk</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Ignore all locale files of moment.js</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> webpack.<span class=\"title class_\">IgnorePlugin</span>(<span class=\"regexp\">/^\\.\\/locale$/</span>, <span class=\"regexp\">/moment$/</span>),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> webpack.<span class=\"property\">optimize</span>.<span class=\"title class_\">LimitChunkCountPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">maxChunks</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minChunkSize</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">algorithm</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">test</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot;\\\\.(&quot;</span> + productionGzipExtensions.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;|&quot;</span>) + <span class=\"string\">&quot;)$&quot;</span>),</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">threshold</span>: <span class=\"number\">10240</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">deleteOriginalAssets</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 不删除源文件</span></span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">minRatio</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title function_\">vConsolePlugin</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">filter</span>: [],</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">enable</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> != <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">\t\t\t&#125;),</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// if prod, add externals</span></span><br><span class=\"line\">\t\t<span class=\"attr\">externals</span>: isProcess ? cdn.<span class=\"property\">externals</span> : &#123;&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">outputDir</span>: <span class=\"string\">&quot;dist&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">assetsDir</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">lintOnSave</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否开启eslint保存检测</span></span><br><span class=\"line\">\t<span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否在构建生产包时生成 sourceMap</span></span><br><span class=\"line\">\t<span class=\"attr\">chainWebpack</span>: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">resolve</span>.<span class=\"property\">alias</span></span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@v&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/views&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@c&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/components&quot;</span>))</span><br><span class=\"line\">\t\t\t.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;@u&quot;</span>, <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;src/util&quot;</span>));</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">optimization</span>.<span class=\"title function_\">runtimeChunk</span>(<span class=\"string\">&quot;single&quot;</span>);</span><br><span class=\"line\">\t\tconfig.<span class=\"title function_\">plugin</span>(<span class=\"string\">&quot;html&quot;</span>).<span class=\"title function_\">tap</span>(<span class=\"function\"><span class=\"params\">args</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">title</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 配置环境cdn</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isProcess) &#123;</span><br><span class=\"line\">\t\t\t\targs[<span class=\"number\">0</span>].<span class=\"property\">cdn</span> = cdn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 预览打包模块</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// config.plugin(&#x27;webpack-bundle-analyzer&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t.use(require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// \t.end()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭Prefetch, 在首屏会把这十几个路由文件，都一口气下载了 删除预加载</span></span><br><span class=\"line\">\t\tconfig.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;prefetch&quot;</span>);</span><br><span class=\"line\">\t\tconfig.<span class=\"property\">plugins</span>.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;preload&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 压缩代码</span></span><br><span class=\"line\">\t\tconfig.<span class=\"property\">optimization</span>.<span class=\"title function_\">minimize</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">host</span>: <span class=\"string\">&quot;0.0.0.0&quot;</span>, <span class=\"comment\">//局域网和本地访问</span></span><br><span class=\"line\">\t\t<span class=\"attr\">port</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">open</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">overlay</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">warning</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">error</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = vueConfig;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包之后体验-1s-打开项目\"><a href=\"#打包之后体验-1s-打开项目\" class=\"headerlink\" title=\"打包之后体验 1s 打开项目\"></a>打包之后体验 1s 打开项目</h3><p><img src=\"https://wangxiaoze-view.github.io/picx-images-hosting/images/20211112181708.7zqeietpgn.webp\" alt=\"x\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://juejin.cn/post/6949896020788690958?share_token=d0a44d3a-83bf-4b45-8834-4d99ed8b7fac\">🐢11s 到 ⚡1s，性能优化之首屏加载 🚀</a></li>\n</ul>\n"},{"title":"临终前的回溯-第三章：与她初识","abbrlink":"b342ee93","date":"2023-10-08T01:05:01.000Z","_content":"升学了，今天的我就是初中生了！\n\n升学的第一件事情就是分班，当然这里的分班就是学校根据一定的规则去打乱排序的，具体是什么样子的我也不清楚；\n\n第一次见到这么多人，人生地不熟的，还有点小胆怯；因为看的一些香港电视让我觉得不能嚣张，安安静静地做一名美男子就好；\n\n好了，到了班级见到很多人，殊不知我与她的缘分就此展开：\n\n我万万也没想到何德何能我竟然能做第二排，在我印象中，前几排都是优秀学生；那时的同桌就是她，也许这就是缘分吧；\n\n熟悉之后同桌之间的第一次较量，小时候的都有个人领地，如何区分个人领地呢，也就是俩个桌子拼接在一起中间的那个间隔称之为“三八线”，直到今天也想不明白；那次较量到底是谁赢；\n\n对于小学生的我当时的掐架方式就是：你在我的领地挪动一点我在你的领地挪动一点；把人家惹生气了，好了直接在你的胳膊上掐你一下，那时候是真疼，对于没怎么受过伤的我当时就受不了了，如果当时有搬砖我都能觉得将它一分为二了；\n\n俗话说“不打不相识”，慢慢我们就熟悉了彼此，当时咱也不知道那是什么感觉，就是说那个人好有意思，也许和她玩有不一样的感觉；就像过家家似的；\n\n时间长了，对她的感觉就不一样了，那种感觉也就是现在大人们说的“早恋”；\n\n我也在想为什么当是就“早恋呢”， 我安慰着自己：咱也不是什么好人，也不是老师口中说的优秀生，只不过这样的安慰是自欺欺人而已；\n\n每次上课就想下课，当时教室后面挂着钟表，我为什么要经常就过去看时间，你觉得我是再看时间吗，不是因为她再后面，这样我就能偷偷瞄一眼；\n\n初二家里发生了特殊情况（不方便说），当请了一周假期的我回到教室感觉好陌生啊，感觉周围人没有那么熟悉了，我记得当时好像是音乐课，因为我的状态不对，在她眼里就格外显眼，因为请假她知道了来龙去脉，也没说什么，那段时间就默默在我身边；\n\n突然想起来，她写的字好看，会经常在我的语文书上写，那时我又知道了一个个崭新的词“卡哇伊”， 当时咱也不知道是啥意思，只是看到书上总是有类似这样的词，我以为是她写的，当时问她她说没有；后来就不了了之了；\n\n当时最疯狂的举动就是，雨中淋过雨，骑着摩托风驰电掣，坐在肩头举起，当时并不在意别人的眼光，也不知道当时自己是什么感觉；谁还没有过青春呢，\n\n直到现在想起来，我也可以对着他人讲，我的青春没有那么多，只是她给我留了这么大的印记；\n\n短短时间就要中考了，也不知道之后是什么，也许都在想着能坚持下去；\n\n可惜了，之后的路，并不是你我想的那么简单， maybe...\n","source":"_posts/生活日志/小说/临终前的回溯/与她初识.md","raw":"---\ntitle: 临终前的回溯-第三章：与她初识\nabbrlink: b342ee93\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n升学了，今天的我就是初中生了！\n\n升学的第一件事情就是分班，当然这里的分班就是学校根据一定的规则去打乱排序的，具体是什么样子的我也不清楚；\n\n第一次见到这么多人，人生地不熟的，还有点小胆怯；因为看的一些香港电视让我觉得不能嚣张，安安静静地做一名美男子就好；\n\n好了，到了班级见到很多人，殊不知我与她的缘分就此展开：\n\n我万万也没想到何德何能我竟然能做第二排，在我印象中，前几排都是优秀学生；那时的同桌就是她，也许这就是缘分吧；\n\n熟悉之后同桌之间的第一次较量，小时候的都有个人领地，如何区分个人领地呢，也就是俩个桌子拼接在一起中间的那个间隔称之为“三八线”，直到今天也想不明白；那次较量到底是谁赢；\n\n对于小学生的我当时的掐架方式就是：你在我的领地挪动一点我在你的领地挪动一点；把人家惹生气了，好了直接在你的胳膊上掐你一下，那时候是真疼，对于没怎么受过伤的我当时就受不了了，如果当时有搬砖我都能觉得将它一分为二了；\n\n俗话说“不打不相识”，慢慢我们就熟悉了彼此，当时咱也不知道那是什么感觉，就是说那个人好有意思，也许和她玩有不一样的感觉；就像过家家似的；\n\n时间长了，对她的感觉就不一样了，那种感觉也就是现在大人们说的“早恋”；\n\n我也在想为什么当是就“早恋呢”， 我安慰着自己：咱也不是什么好人，也不是老师口中说的优秀生，只不过这样的安慰是自欺欺人而已；\n\n每次上课就想下课，当时教室后面挂着钟表，我为什么要经常就过去看时间，你觉得我是再看时间吗，不是因为她再后面，这样我就能偷偷瞄一眼；\n\n初二家里发生了特殊情况（不方便说），当请了一周假期的我回到教室感觉好陌生啊，感觉周围人没有那么熟悉了，我记得当时好像是音乐课，因为我的状态不对，在她眼里就格外显眼，因为请假她知道了来龙去脉，也没说什么，那段时间就默默在我身边；\n\n突然想起来，她写的字好看，会经常在我的语文书上写，那时我又知道了一个个崭新的词“卡哇伊”， 当时咱也不知道是啥意思，只是看到书上总是有类似这样的词，我以为是她写的，当时问她她说没有；后来就不了了之了；\n\n当时最疯狂的举动就是，雨中淋过雨，骑着摩托风驰电掣，坐在肩头举起，当时并不在意别人的眼光，也不知道当时自己是什么感觉；谁还没有过青春呢，\n\n直到现在想起来，我也可以对着他人讲，我的青春没有那么多，只是她给我留了这么大的印记；\n\n短短时间就要中考了，也不知道之后是什么，也许都在想着能坚持下去；\n\n可惜了，之后的路，并不是你我想的那么简单， maybe...\n","slug":"生活日志/小说/临终前的回溯/与她初识","published":1,"updated":"2025-03-12T10:11:35.425Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jb0089fg9m7i9q9h1t","content":"<p>升学了，今天的我就是初中生了！</p>\n<p>升学的第一件事情就是分班，当然这里的分班就是学校根据一定的规则去打乱排序的，具体是什么样子的我也不清楚；</p>\n<p>第一次见到这么多人，人生地不熟的，还有点小胆怯；因为看的一些香港电视让我觉得不能嚣张，安安静静地做一名美男子就好；</p>\n<p>好了，到了班级见到很多人，殊不知我与她的缘分就此展开：</p>\n<p>我万万也没想到何德何能我竟然能做第二排，在我印象中，前几排都是优秀学生；那时的同桌就是她，也许这就是缘分吧；</p>\n<p>熟悉之后同桌之间的第一次较量，小时候的都有个人领地，如何区分个人领地呢，也就是俩个桌子拼接在一起中间的那个间隔称之为“三八线”，直到今天也想不明白；那次较量到底是谁赢；</p>\n<p>对于小学生的我当时的掐架方式就是：你在我的领地挪动一点我在你的领地挪动一点；把人家惹生气了，好了直接在你的胳膊上掐你一下，那时候是真疼，对于没怎么受过伤的我当时就受不了了，如果当时有搬砖我都能觉得将它一分为二了；</p>\n<p>俗话说“不打不相识”，慢慢我们就熟悉了彼此，当时咱也不知道那是什么感觉，就是说那个人好有意思，也许和她玩有不一样的感觉；就像过家家似的；</p>\n<p>时间长了，对她的感觉就不一样了，那种感觉也就是现在大人们说的“早恋”；</p>\n<p>我也在想为什么当是就“早恋呢”， 我安慰着自己：咱也不是什么好人，也不是老师口中说的优秀生，只不过这样的安慰是自欺欺人而已；</p>\n<p>每次上课就想下课，当时教室后面挂着钟表，我为什么要经常就过去看时间，你觉得我是再看时间吗，不是因为她再后面，这样我就能偷偷瞄一眼；</p>\n<p>初二家里发生了特殊情况（不方便说），当请了一周假期的我回到教室感觉好陌生啊，感觉周围人没有那么熟悉了，我记得当时好像是音乐课，因为我的状态不对，在她眼里就格外显眼，因为请假她知道了来龙去脉，也没说什么，那段时间就默默在我身边；</p>\n<p>突然想起来，她写的字好看，会经常在我的语文书上写，那时我又知道了一个个崭新的词“卡哇伊”， 当时咱也不知道是啥意思，只是看到书上总是有类似这样的词，我以为是她写的，当时问她她说没有；后来就不了了之了；</p>\n<p>当时最疯狂的举动就是，雨中淋过雨，骑着摩托风驰电掣，坐在肩头举起，当时并不在意别人的眼光，也不知道当时自己是什么感觉；谁还没有过青春呢，</p>\n<p>直到现在想起来，我也可以对着他人讲，我的青春没有那么多，只是她给我留了这么大的印记；</p>\n<p>短短时间就要中考了，也不知道之后是什么，也许都在想着能坚持下去；</p>\n<p>可惜了，之后的路，并不是你我想的那么简单， maybe…</p>\n","excerpt":"","more":"<p>升学了，今天的我就是初中生了！</p>\n<p>升学的第一件事情就是分班，当然这里的分班就是学校根据一定的规则去打乱排序的，具体是什么样子的我也不清楚；</p>\n<p>第一次见到这么多人，人生地不熟的，还有点小胆怯；因为看的一些香港电视让我觉得不能嚣张，安安静静地做一名美男子就好；</p>\n<p>好了，到了班级见到很多人，殊不知我与她的缘分就此展开：</p>\n<p>我万万也没想到何德何能我竟然能做第二排，在我印象中，前几排都是优秀学生；那时的同桌就是她，也许这就是缘分吧；</p>\n<p>熟悉之后同桌之间的第一次较量，小时候的都有个人领地，如何区分个人领地呢，也就是俩个桌子拼接在一起中间的那个间隔称之为“三八线”，直到今天也想不明白；那次较量到底是谁赢；</p>\n<p>对于小学生的我当时的掐架方式就是：你在我的领地挪动一点我在你的领地挪动一点；把人家惹生气了，好了直接在你的胳膊上掐你一下，那时候是真疼，对于没怎么受过伤的我当时就受不了了，如果当时有搬砖我都能觉得将它一分为二了；</p>\n<p>俗话说“不打不相识”，慢慢我们就熟悉了彼此，当时咱也不知道那是什么感觉，就是说那个人好有意思，也许和她玩有不一样的感觉；就像过家家似的；</p>\n<p>时间长了，对她的感觉就不一样了，那种感觉也就是现在大人们说的“早恋”；</p>\n<p>我也在想为什么当是就“早恋呢”， 我安慰着自己：咱也不是什么好人，也不是老师口中说的优秀生，只不过这样的安慰是自欺欺人而已；</p>\n<p>每次上课就想下课，当时教室后面挂着钟表，我为什么要经常就过去看时间，你觉得我是再看时间吗，不是因为她再后面，这样我就能偷偷瞄一眼；</p>\n<p>初二家里发生了特殊情况（不方便说），当请了一周假期的我回到教室感觉好陌生啊，感觉周围人没有那么熟悉了，我记得当时好像是音乐课，因为我的状态不对，在她眼里就格外显眼，因为请假她知道了来龙去脉，也没说什么，那段时间就默默在我身边；</p>\n<p>突然想起来，她写的字好看，会经常在我的语文书上写，那时我又知道了一个个崭新的词“卡哇伊”， 当时咱也不知道是啥意思，只是看到书上总是有类似这样的词，我以为是她写的，当时问她她说没有；后来就不了了之了；</p>\n<p>当时最疯狂的举动就是，雨中淋过雨，骑着摩托风驰电掣，坐在肩头举起，当时并不在意别人的眼光，也不知道当时自己是什么感觉；谁还没有过青春呢，</p>\n<p>直到现在想起来，我也可以对着他人讲，我的青春没有那么多，只是她给我留了这么大的印记；</p>\n<p>短短时间就要中考了，也不知道之后是什么，也许都在想着能坚持下去；</p>\n<p>可惜了，之后的路，并不是你我想的那么简单， maybe…</p>\n"},{"title":"临终前的回溯-第六章：我的蜕变","abbrlink":"3f47066d","date":"2023-10-08T01:05:01.000Z","_content":"相比“颓废”的人生，我更喜欢“垃圾”的人生。\n\n为什么要这么说呢，对我而言，“颓废”往往是一个人从不去做自己的选择，而“垃圾”则是一个人做自己选择，但是没有得到想要的结果，但效果往往是比“颓废”好。当然生活就很平常，没有什么特色；\n\n当然没有得到想要的结果就放弃往往不是我的作风；\n\n往往一个人的改变也许就在一瞬间吧：\n\n老人常说的一句话就是：你别怕有人离开，你要知道的是别人只是你人生的过客；当你遇到的每一个人都会一个人生道理交给你；\n\n在“她”离去的时候，跟我说了一句“也许你该学会长大了”，当时我还没这句话存在着什么意思，直到之后的一件事让我明白了这句话的真正含义；\n\n当老 w 首次去 4s 店提车再到合作商贴膜的时候，这一路上的心情可谓是很糟糕；以为着的是一次行会办理好，结果还的个人去最后还是骂骂咧咧的去了；\n\n因为人多就把车停在了门口，于是就在店里等待了，没多一会儿我哥就到了，说什么时候搞好，说还的排队，还的等一会儿；也许是太过于老实了，老 w 直接去找店长说去了；\n\n没多一会儿，就说好了，晚上下班师傅加班优先弄好；\n\n直到这时候我才发现了那句话到底是什么意思了；\n\n26 岁大小伙儿，与他人存在的差异很大，别人知道的为什么自己却不知道呢，仅仅是因为你之前没碰见过吗，我觉得这不能当作你推脱的借口；\n\n于是给自己定下了一个目标，那就是改变自身的弱气；这个年纪明明是最勇敢的年纪，却活成了自己不喜欢的样子；\n\n直到现在过去了一年半载，与自己定制的俩年计划还有一个小阶段，也许在离去之后，从他人眼中看到了属于自己的“失望”，“同情”；\n\n够了，本来不是这样的，也许梦该清醒了；\n\n还是自身的接触面不够，眼界不够，导致自己的这一身弱气，改变自己还是回归那句话“也许你该学会成长了”，\n\n没有什么羞愧性，人生不都是这样子吗，不明白的，不懂的人教人多次不行，事儿教人一次就会；\n\n---\n\n改变了。成长了。\n\n首先你要清楚自己是在做什么？\n\n所谓的无用聚会，玩耍对现阶段的你真的有用吗？从始至终你都不明白自己到底缺什么，是在做什么？\n\n不要让工作去压榨你的生活，你的时间大部分是留给生活的，而不是工作，工作中能教会你什么？所谓的职场规则对你而言有用吗？勾心斗角的争夺对你有用吗？ 既然无用，那就把时间留给生活，留给自身；\n\n你的成长来自于生活，你与别人的交流沟通，那就是对方教给你的道理；\n\n成长不是一件简单的事情；\n\n-------------- 生活小记-你该学会成长了\n","source":"_posts/生活日志/小说/临终前的回溯/我的蜕变.md","raw":"---\ntitle: 临终前的回溯-第六章：我的蜕变\nabbrlink: 3f47066d\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n相比“颓废”的人生，我更喜欢“垃圾”的人生。\n\n为什么要这么说呢，对我而言，“颓废”往往是一个人从不去做自己的选择，而“垃圾”则是一个人做自己选择，但是没有得到想要的结果，但效果往往是比“颓废”好。当然生活就很平常，没有什么特色；\n\n当然没有得到想要的结果就放弃往往不是我的作风；\n\n往往一个人的改变也许就在一瞬间吧：\n\n老人常说的一句话就是：你别怕有人离开，你要知道的是别人只是你人生的过客；当你遇到的每一个人都会一个人生道理交给你；\n\n在“她”离去的时候，跟我说了一句“也许你该学会长大了”，当时我还没这句话存在着什么意思，直到之后的一件事让我明白了这句话的真正含义；\n\n当老 w 首次去 4s 店提车再到合作商贴膜的时候，这一路上的心情可谓是很糟糕；以为着的是一次行会办理好，结果还的个人去最后还是骂骂咧咧的去了；\n\n因为人多就把车停在了门口，于是就在店里等待了，没多一会儿我哥就到了，说什么时候搞好，说还的排队，还的等一会儿；也许是太过于老实了，老 w 直接去找店长说去了；\n\n没多一会儿，就说好了，晚上下班师傅加班优先弄好；\n\n直到这时候我才发现了那句话到底是什么意思了；\n\n26 岁大小伙儿，与他人存在的差异很大，别人知道的为什么自己却不知道呢，仅仅是因为你之前没碰见过吗，我觉得这不能当作你推脱的借口；\n\n于是给自己定下了一个目标，那就是改变自身的弱气；这个年纪明明是最勇敢的年纪，却活成了自己不喜欢的样子；\n\n直到现在过去了一年半载，与自己定制的俩年计划还有一个小阶段，也许在离去之后，从他人眼中看到了属于自己的“失望”，“同情”；\n\n够了，本来不是这样的，也许梦该清醒了；\n\n还是自身的接触面不够，眼界不够，导致自己的这一身弱气，改变自己还是回归那句话“也许你该学会成长了”，\n\n没有什么羞愧性，人生不都是这样子吗，不明白的，不懂的人教人多次不行，事儿教人一次就会；\n\n---\n\n改变了。成长了。\n\n首先你要清楚自己是在做什么？\n\n所谓的无用聚会，玩耍对现阶段的你真的有用吗？从始至终你都不明白自己到底缺什么，是在做什么？\n\n不要让工作去压榨你的生活，你的时间大部分是留给生活的，而不是工作，工作中能教会你什么？所谓的职场规则对你而言有用吗？勾心斗角的争夺对你有用吗？ 既然无用，那就把时间留给生活，留给自身；\n\n你的成长来自于生活，你与别人的交流沟通，那就是对方教给你的道理；\n\n成长不是一件简单的事情；\n\n-------------- 生活小记-你该学会成长了\n","slug":"生活日志/小说/临终前的回溯/我的蜕变","published":1,"updated":"2025-03-12T10:12:22.600Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jb008cfg9m51ebajwv","content":"<p>相比“颓废”的人生，我更喜欢“垃圾”的人生。</p>\n<p>为什么要这么说呢，对我而言，“颓废”往往是一个人从不去做自己的选择，而“垃圾”则是一个人做自己选择，但是没有得到想要的结果，但效果往往是比“颓废”好。当然生活就很平常，没有什么特色；</p>\n<p>当然没有得到想要的结果就放弃往往不是我的作风；</p>\n<p>往往一个人的改变也许就在一瞬间吧：</p>\n<p>老人常说的一句话就是：你别怕有人离开，你要知道的是别人只是你人生的过客；当你遇到的每一个人都会一个人生道理交给你；</p>\n<p>在“她”离去的时候，跟我说了一句“也许你该学会长大了”，当时我还没这句话存在着什么意思，直到之后的一件事让我明白了这句话的真正含义；</p>\n<p>当老 w 首次去 4s 店提车再到合作商贴膜的时候，这一路上的心情可谓是很糟糕；以为着的是一次行会办理好，结果还的个人去最后还是骂骂咧咧的去了；</p>\n<p>因为人多就把车停在了门口，于是就在店里等待了，没多一会儿我哥就到了，说什么时候搞好，说还的排队，还的等一会儿；也许是太过于老实了，老 w 直接去找店长说去了；</p>\n<p>没多一会儿，就说好了，晚上下班师傅加班优先弄好；</p>\n<p>直到这时候我才发现了那句话到底是什么意思了；</p>\n<p>26 岁大小伙儿，与他人存在的差异很大，别人知道的为什么自己却不知道呢，仅仅是因为你之前没碰见过吗，我觉得这不能当作你推脱的借口；</p>\n<p>于是给自己定下了一个目标，那就是改变自身的弱气；这个年纪明明是最勇敢的年纪，却活成了自己不喜欢的样子；</p>\n<p>直到现在过去了一年半载，与自己定制的俩年计划还有一个小阶段，也许在离去之后，从他人眼中看到了属于自己的“失望”，“同情”；</p>\n<p>够了，本来不是这样的，也许梦该清醒了；</p>\n<p>还是自身的接触面不够，眼界不够，导致自己的这一身弱气，改变自己还是回归那句话“也许你该学会成长了”，</p>\n<p>没有什么羞愧性，人生不都是这样子吗，不明白的，不懂的人教人多次不行，事儿教人一次就会；</p>\n<hr>\n<p>改变了。成长了。</p>\n<p>首先你要清楚自己是在做什么？</p>\n<p>所谓的无用聚会，玩耍对现阶段的你真的有用吗？从始至终你都不明白自己到底缺什么，是在做什么？</p>\n<p>不要让工作去压榨你的生活，你的时间大部分是留给生活的，而不是工作，工作中能教会你什么？所谓的职场规则对你而言有用吗？勾心斗角的争夺对你有用吗？ 既然无用，那就把时间留给生活，留给自身；</p>\n<p>你的成长来自于生活，你与别人的交流沟通，那就是对方教给你的道理；</p>\n<p>成长不是一件简单的事情；</p>\n<p>————– 生活小记-你该学会成长了</p>\n","excerpt":"","more":"<p>相比“颓废”的人生，我更喜欢“垃圾”的人生。</p>\n<p>为什么要这么说呢，对我而言，“颓废”往往是一个人从不去做自己的选择，而“垃圾”则是一个人做自己选择，但是没有得到想要的结果，但效果往往是比“颓废”好。当然生活就很平常，没有什么特色；</p>\n<p>当然没有得到想要的结果就放弃往往不是我的作风；</p>\n<p>往往一个人的改变也许就在一瞬间吧：</p>\n<p>老人常说的一句话就是：你别怕有人离开，你要知道的是别人只是你人生的过客；当你遇到的每一个人都会一个人生道理交给你；</p>\n<p>在“她”离去的时候，跟我说了一句“也许你该学会长大了”，当时我还没这句话存在着什么意思，直到之后的一件事让我明白了这句话的真正含义；</p>\n<p>当老 w 首次去 4s 店提车再到合作商贴膜的时候，这一路上的心情可谓是很糟糕；以为着的是一次行会办理好，结果还的个人去最后还是骂骂咧咧的去了；</p>\n<p>因为人多就把车停在了门口，于是就在店里等待了，没多一会儿我哥就到了，说什么时候搞好，说还的排队，还的等一会儿；也许是太过于老实了，老 w 直接去找店长说去了；</p>\n<p>没多一会儿，就说好了，晚上下班师傅加班优先弄好；</p>\n<p>直到这时候我才发现了那句话到底是什么意思了；</p>\n<p>26 岁大小伙儿，与他人存在的差异很大，别人知道的为什么自己却不知道呢，仅仅是因为你之前没碰见过吗，我觉得这不能当作你推脱的借口；</p>\n<p>于是给自己定下了一个目标，那就是改变自身的弱气；这个年纪明明是最勇敢的年纪，却活成了自己不喜欢的样子；</p>\n<p>直到现在过去了一年半载，与自己定制的俩年计划还有一个小阶段，也许在离去之后，从他人眼中看到了属于自己的“失望”，“同情”；</p>\n<p>够了，本来不是这样的，也许梦该清醒了；</p>\n<p>还是自身的接触面不够，眼界不够，导致自己的这一身弱气，改变自己还是回归那句话“也许你该学会成长了”，</p>\n<p>没有什么羞愧性，人生不都是这样子吗，不明白的，不懂的人教人多次不行，事儿教人一次就会；</p>\n<hr>\n<p>改变了。成长了。</p>\n<p>首先你要清楚自己是在做什么？</p>\n<p>所谓的无用聚会，玩耍对现阶段的你真的有用吗？从始至终你都不明白自己到底缺什么，是在做什么？</p>\n<p>不要让工作去压榨你的生活，你的时间大部分是留给生活的，而不是工作，工作中能教会你什么？所谓的职场规则对你而言有用吗？勾心斗角的争夺对你有用吗？ 既然无用，那就把时间留给生活，留给自身；</p>\n<p>你的成长来自于生活，你与别人的交流沟通，那就是对方教给你的道理；</p>\n<p>成长不是一件简单的事情；</p>\n<p>————– 生活小记-你该学会成长了</p>\n"},{"title":"小说-临终前的回溯-第一章：生命之烛摇曳","abbrlink":"ac64186d","date":"2023-10-08T01:05:01.000Z","_content":"\n\n该小说虚假构设，仅供娱乐。请勿代入现实。\n\n这篇短篇小说是老 w 为我提供的的一个小故事, 该小说讲尽了他这一生的人生，以及到暮年之后心中始终纠结的故事；\n\n> 之前开始写文章的那段时间，发现自己珍惜想要的都在慢慢失去，也许到几年之后都没有了那种憧憬，于是我就以我生命即将结束的朦胧间，快速回忆自己的一生，虽然没有那种大起大落，也没有那种风风光光，只是作为普通人，其中有后悔，有悔恨，有遗憾，各种情绪的交织才能组成人的一生；慢慢的记录生活是为了防止那一天我突然想不起来，那就意味着我的生命即将终结，在病床上的朦胧间，我祈祷上天，如果给我一次重来的机会，我会珍惜所有，没有重生者的即视感，也没有穿越者的标配，有的只是一个即将结束生命的小老头；你透过带有黄昏光的窗户，回忆这一生，最后眼角带着泪水中永远的睡去...\n\n开始了...\n\nxxxx 年的下午，我接到了来自 xxxx 医院的电话，那边说： “老 w 在医院快不行了，他手机上只有你的电话，你赶紧来一趟吧!!”\n\n我听到这个消息之后我慌了，因为平时他也没和我说身体不舒服，到现在我都是不相信的，宁愿相信这是个玩笑；立马放下手上的工作，我在马路上打了一辆出租车就往医院敢去，在车上时不时的催促司机快些；\n\n我到病房中，看见他那没有精神的面貌以及无神的眼睛，我才发现他的病情已经跟严重了；为什么这么多年的好友不早点跟我说呢，我并没有埋怨他似乎这一刻他的心里比我还痛苦吧；我没多说走到窗前轻声跟他说，放心我来了；\n\n迟疑了一会，他说话了： “很抱歉让你看到了我囧样，可不要笑话我”， “不会的！你应该早点告诉我你的状况，好在点改善一下啊” 过了一会“能在临终前能和你这个老友唠唠嗑，在路上我也不会有什么遗憾了” 为什么没有告诉我它的情况他没说话了，也许不想让我过度担心，也许有什么难言之隐。\n\n他在临终前给我讲了一个不长不短的故事，这个故事也许在描写老 w 的一生：\n\n在一片静谧而庄重的病房中，生命之烛即将燃尽的老人——老 w，静静地躺在洁白的床单上。他的眼神不再如年轻时那般锐利，却沉淀着岁月赋予的深邃与宁静。医生和护士们在角落里默默关注，低声交谈着关于他病情的最后评估。此刻，老 w 的心跳声与呼吸声交织成一首生命的挽歌，而他的思绪则穿越时空，展开了一场临终前的回溯之旅。\n","source":"_posts/生活日志/小说/临终前的回溯/序章：生命之烛摇曳.md","raw":"---\ntitle: 小说-临终前的回溯-第一章：生命之烛摇曳\nabbrlink: ac64186d\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n\n\n该小说虚假构设，仅供娱乐。请勿代入现实。\n\n这篇短篇小说是老 w 为我提供的的一个小故事, 该小说讲尽了他这一生的人生，以及到暮年之后心中始终纠结的故事；\n\n> 之前开始写文章的那段时间，发现自己珍惜想要的都在慢慢失去，也许到几年之后都没有了那种憧憬，于是我就以我生命即将结束的朦胧间，快速回忆自己的一生，虽然没有那种大起大落，也没有那种风风光光，只是作为普通人，其中有后悔，有悔恨，有遗憾，各种情绪的交织才能组成人的一生；慢慢的记录生活是为了防止那一天我突然想不起来，那就意味着我的生命即将终结，在病床上的朦胧间，我祈祷上天，如果给我一次重来的机会，我会珍惜所有，没有重生者的即视感，也没有穿越者的标配，有的只是一个即将结束生命的小老头；你透过带有黄昏光的窗户，回忆这一生，最后眼角带着泪水中永远的睡去...\n\n开始了...\n\nxxxx 年的下午，我接到了来自 xxxx 医院的电话，那边说： “老 w 在医院快不行了，他手机上只有你的电话，你赶紧来一趟吧!!”\n\n我听到这个消息之后我慌了，因为平时他也没和我说身体不舒服，到现在我都是不相信的，宁愿相信这是个玩笑；立马放下手上的工作，我在马路上打了一辆出租车就往医院敢去，在车上时不时的催促司机快些；\n\n我到病房中，看见他那没有精神的面貌以及无神的眼睛，我才发现他的病情已经跟严重了；为什么这么多年的好友不早点跟我说呢，我并没有埋怨他似乎这一刻他的心里比我还痛苦吧；我没多说走到窗前轻声跟他说，放心我来了；\n\n迟疑了一会，他说话了： “很抱歉让你看到了我囧样，可不要笑话我”， “不会的！你应该早点告诉我你的状况，好在点改善一下啊” 过了一会“能在临终前能和你这个老友唠唠嗑，在路上我也不会有什么遗憾了” 为什么没有告诉我它的情况他没说话了，也许不想让我过度担心，也许有什么难言之隐。\n\n他在临终前给我讲了一个不长不短的故事，这个故事也许在描写老 w 的一生：\n\n在一片静谧而庄重的病房中，生命之烛即将燃尽的老人——老 w，静静地躺在洁白的床单上。他的眼神不再如年轻时那般锐利，却沉淀着岁月赋予的深邃与宁静。医生和护士们在角落里默默关注，低声交谈着关于他病情的最后评估。此刻，老 w 的心跳声与呼吸声交织成一首生命的挽歌，而他的思绪则穿越时空，展开了一场临终前的回溯之旅。\n","slug":"生活日志/小说/临终前的回溯/序章：生命之烛摇曳","published":1,"updated":"2025-03-12T10:13:15.103Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jc008ffg9m8hrd7ehs","content":"<p>该小说虚假构设，仅供娱乐。请勿代入现实。</p>\n<p>这篇短篇小说是老 w 为我提供的的一个小故事, 该小说讲尽了他这一生的人生，以及到暮年之后心中始终纠结的故事；</p>\n<blockquote>\n<p>之前开始写文章的那段时间，发现自己珍惜想要的都在慢慢失去，也许到几年之后都没有了那种憧憬，于是我就以我生命即将结束的朦胧间，快速回忆自己的一生，虽然没有那种大起大落，也没有那种风风光光，只是作为普通人，其中有后悔，有悔恨，有遗憾，各种情绪的交织才能组成人的一生；慢慢的记录生活是为了防止那一天我突然想不起来，那就意味着我的生命即将终结，在病床上的朦胧间，我祈祷上天，如果给我一次重来的机会，我会珍惜所有，没有重生者的即视感，也没有穿越者的标配，有的只是一个即将结束生命的小老头；你透过带有黄昏光的窗户，回忆这一生，最后眼角带着泪水中永远的睡去…</p>\n</blockquote>\n<p>开始了…</p>\n<p>xxxx 年的下午，我接到了来自 xxxx 医院的电话，那边说： “老 w 在医院快不行了，他手机上只有你的电话，你赶紧来一趟吧!!”</p>\n<p>我听到这个消息之后我慌了，因为平时他也没和我说身体不舒服，到现在我都是不相信的，宁愿相信这是个玩笑；立马放下手上的工作，我在马路上打了一辆出租车就往医院敢去，在车上时不时的催促司机快些；</p>\n<p>我到病房中，看见他那没有精神的面貌以及无神的眼睛，我才发现他的病情已经跟严重了；为什么这么多年的好友不早点跟我说呢，我并没有埋怨他似乎这一刻他的心里比我还痛苦吧；我没多说走到窗前轻声跟他说，放心我来了；</p>\n<p>迟疑了一会，他说话了： “很抱歉让你看到了我囧样，可不要笑话我”， “不会的！你应该早点告诉我你的状况，好在点改善一下啊” 过了一会“能在临终前能和你这个老友唠唠嗑，在路上我也不会有什么遗憾了” 为什么没有告诉我它的情况他没说话了，也许不想让我过度担心，也许有什么难言之隐。</p>\n<p>他在临终前给我讲了一个不长不短的故事，这个故事也许在描写老 w 的一生：</p>\n<p>在一片静谧而庄重的病房中，生命之烛即将燃尽的老人——老 w，静静地躺在洁白的床单上。他的眼神不再如年轻时那般锐利，却沉淀着岁月赋予的深邃与宁静。医生和护士们在角落里默默关注，低声交谈着关于他病情的最后评估。此刻，老 w 的心跳声与呼吸声交织成一首生命的挽歌，而他的思绪则穿越时空，展开了一场临终前的回溯之旅。</p>\n","excerpt":"","more":"<p>该小说虚假构设，仅供娱乐。请勿代入现实。</p>\n<p>这篇短篇小说是老 w 为我提供的的一个小故事, 该小说讲尽了他这一生的人生，以及到暮年之后心中始终纠结的故事；</p>\n<blockquote>\n<p>之前开始写文章的那段时间，发现自己珍惜想要的都在慢慢失去，也许到几年之后都没有了那种憧憬，于是我就以我生命即将结束的朦胧间，快速回忆自己的一生，虽然没有那种大起大落，也没有那种风风光光，只是作为普通人，其中有后悔，有悔恨，有遗憾，各种情绪的交织才能组成人的一生；慢慢的记录生活是为了防止那一天我突然想不起来，那就意味着我的生命即将终结，在病床上的朦胧间，我祈祷上天，如果给我一次重来的机会，我会珍惜所有，没有重生者的即视感，也没有穿越者的标配，有的只是一个即将结束生命的小老头；你透过带有黄昏光的窗户，回忆这一生，最后眼角带着泪水中永远的睡去…</p>\n</blockquote>\n<p>开始了…</p>\n<p>xxxx 年的下午，我接到了来自 xxxx 医院的电话，那边说： “老 w 在医院快不行了，他手机上只有你的电话，你赶紧来一趟吧!!”</p>\n<p>我听到这个消息之后我慌了，因为平时他也没和我说身体不舒服，到现在我都是不相信的，宁愿相信这是个玩笑；立马放下手上的工作，我在马路上打了一辆出租车就往医院敢去，在车上时不时的催促司机快些；</p>\n<p>我到病房中，看见他那没有精神的面貌以及无神的眼睛，我才发现他的病情已经跟严重了；为什么这么多年的好友不早点跟我说呢，我并没有埋怨他似乎这一刻他的心里比我还痛苦吧；我没多说走到窗前轻声跟他说，放心我来了；</p>\n<p>迟疑了一会，他说话了： “很抱歉让你看到了我囧样，可不要笑话我”， “不会的！你应该早点告诉我你的状况，好在点改善一下啊” 过了一会“能在临终前能和你这个老友唠唠嗑，在路上我也不会有什么遗憾了” 为什么没有告诉我它的情况他没说话了，也许不想让我过度担心，也许有什么难言之隐。</p>\n<p>他在临终前给我讲了一个不长不短的故事，这个故事也许在描写老 w 的一生：</p>\n<p>在一片静谧而庄重的病房中，生命之烛即将燃尽的老人——老 w，静静地躺在洁白的床单上。他的眼神不再如年轻时那般锐利，却沉淀着岁月赋予的深邃与宁静。医生和护士们在角落里默默关注，低声交谈着关于他病情的最后评估。此刻，老 w 的心跳声与呼吸声交织成一首生命的挽歌，而他的思绪则穿越时空，展开了一场临终前的回溯之旅。</p>\n"},{"title":"临终前的回溯-第五章：现实的鞭打","abbrlink":"51d543e4","date":"2023-10-08T01:05:01.000Z","_content":"大学一笔带过，因为没有什么特殊事情发生，就是一个“废人”，睡觉打游戏，混过的几年...\n\n实习期间虽然也遇到姑娘，他是舞蹈生，但是最后也没有到一起，只是做了几天朋友；\n\n实习期间结束之后就先去了一趟云南，然后直接去了上海...\n\n自己去机场买飞机票，不懂的地方找人问，百度查，当时记得有个姑娘对我说： 不管你走到哪里都要装成一个熟人，啥也会的；\n\n到了云南之后，本想着有朋友接我，但是他要上课，我就打车住了酒店，后来他说我被坑了，因为那里基本都是黑车，住的酒店也许都是坑人的那种，不过我觉得还好，也没发现针对我的一些事情；\n\n第一次出省，人生地不熟的，幸好没有走丢，谢天谢地谢高德拯救了我这么一个路痴；\n\n当时是在云南五华区租了将近一个月的房子，就想着找找工作看看运气，结果一去一个不吱声；\n\n本想着来着旅旅游，最后把自己搞抑郁了；\n\n去面试，被现实狠狠上了一课，学历不行能力不行，没经验没技术处处碰壁，“会 xxx 吗？会 xxx 吗？我们要求的是复合型人才，你并不适合...”\n\n打印那么多的简历也许过往云烟了，一张张的简历记录的并不是我的过去，而是我的未来；自己就想角落里随风飘起的一张纸，随处可见，但并不重视，格外不起眼；\n\n那段时间，我也想了很多，亲戚朋友打来的电话基本都是不接的，那段时间简直就是人间蒸发掉了；\n\n不过还好，我遇到一家公司（对于实习之后的详细速写）：\n\n大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；\n\n过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面 就不接了，学校，朋友的消息也都没回；\n\n机缘巧合，在一番失败之后，面试上了昆明拓鸿科技公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；\n\n在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；\n\n之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；\n\n来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；\n\n上海鸣皋教育科技有限公司, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大志哥人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的 bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上 就是为了学习而来；\n\n那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；\n\n之后，在学习了一年之后，就跟老大提了离职。。。\n\n我来到了上海帘邦信息科技有限公司, 规模人数要比之前的大一点，入职之后，杰哥让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了 node，学习了规范化流程清楚的知道了自己很多的问题与缺陷；\n\n线下时间就去了解 node，并以 node+express 搭建 api 请求，在经历个半个月之后，就自己动手搭建了一个简单的博客系统, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了宝塔布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下 jenkins 不是 node 和 vue 项目，简单说就是将项目拉下来，执行命令，将 dist 文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；\n\n年终总结大会来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；\n\n接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以 node, express 然后简单了解 koa 的基础使用，之后在这基础上又接触了 nest， mqSql，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习 vue 相关的知识，通过 github 项目，掘金，csdn 等等论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；\n\n并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；\n\n之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，dart, flutter，了解其使用，getx 状态管理器, http 的拦截使用简单的请求渲染页面；作为一个技术储备；\n\n在公司发现了一些问题，公司没有 pc,h5 的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想 vue-cli 安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过 npm 发布自己的工具，于是 tem-pro 工具就上线了；起初周下载量也有了 100 左右的下载，慢慢的后面下载量就减少了；\n\n对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；\n\n不过现在还没有这个想法，先继续提升自己的能力吧！\n","source":"_posts/生活日志/小说/临终前的回溯/现实的鞭打.md","raw":"---\ntitle: 临终前的回溯-第五章：现实的鞭打\nabbrlink: 51d543e4\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n大学一笔带过，因为没有什么特殊事情发生，就是一个“废人”，睡觉打游戏，混过的几年...\n\n实习期间虽然也遇到姑娘，他是舞蹈生，但是最后也没有到一起，只是做了几天朋友；\n\n实习期间结束之后就先去了一趟云南，然后直接去了上海...\n\n自己去机场买飞机票，不懂的地方找人问，百度查，当时记得有个姑娘对我说： 不管你走到哪里都要装成一个熟人，啥也会的；\n\n到了云南之后，本想着有朋友接我，但是他要上课，我就打车住了酒店，后来他说我被坑了，因为那里基本都是黑车，住的酒店也许都是坑人的那种，不过我觉得还好，也没发现针对我的一些事情；\n\n第一次出省，人生地不熟的，幸好没有走丢，谢天谢地谢高德拯救了我这么一个路痴；\n\n当时是在云南五华区租了将近一个月的房子，就想着找找工作看看运气，结果一去一个不吱声；\n\n本想着来着旅旅游，最后把自己搞抑郁了；\n\n去面试，被现实狠狠上了一课，学历不行能力不行，没经验没技术处处碰壁，“会 xxx 吗？会 xxx 吗？我们要求的是复合型人才，你并不适合...”\n\n打印那么多的简历也许过往云烟了，一张张的简历记录的并不是我的过去，而是我的未来；自己就想角落里随风飘起的一张纸，随处可见，但并不重视，格外不起眼；\n\n那段时间，我也想了很多，亲戚朋友打来的电话基本都是不接的，那段时间简直就是人间蒸发掉了；\n\n不过还好，我遇到一家公司（对于实习之后的详细速写）：\n\n大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；\n\n过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面 就不接了，学校，朋友的消息也都没回；\n\n机缘巧合，在一番失败之后，面试上了昆明拓鸿科技公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；\n\n在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；\n\n之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；\n\n来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；\n\n上海鸣皋教育科技有限公司, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大志哥人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的 bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上 就是为了学习而来；\n\n那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；\n\n之后，在学习了一年之后，就跟老大提了离职。。。\n\n我来到了上海帘邦信息科技有限公司, 规模人数要比之前的大一点，入职之后，杰哥让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了 node，学习了规范化流程清楚的知道了自己很多的问题与缺陷；\n\n线下时间就去了解 node，并以 node+express 搭建 api 请求，在经历个半个月之后，就自己动手搭建了一个简单的博客系统, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了宝塔布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下 jenkins 不是 node 和 vue 项目，简单说就是将项目拉下来，执行命令，将 dist 文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；\n\n年终总结大会来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；\n\n接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以 node, express 然后简单了解 koa 的基础使用，之后在这基础上又接触了 nest， mqSql，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习 vue 相关的知识，通过 github 项目，掘金，csdn 等等论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；\n\n并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；\n\n之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，dart, flutter，了解其使用，getx 状态管理器, http 的拦截使用简单的请求渲染页面；作为一个技术储备；\n\n在公司发现了一些问题，公司没有 pc,h5 的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想 vue-cli 安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过 npm 发布自己的工具，于是 tem-pro 工具就上线了；起初周下载量也有了 100 左右的下载，慢慢的后面下载量就减少了；\n\n对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；\n\n不过现在还没有这个想法，先继续提升自己的能力吧！\n","slug":"生活日志/小说/临终前的回溯/现实的鞭打","published":1,"updated":"2025-03-12T10:12:03.171Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jc008ifg9m7yri2y28","content":"<p>大学一笔带过，因为没有什么特殊事情发生，就是一个“废人”，睡觉打游戏，混过的几年…</p>\n<p>实习期间虽然也遇到姑娘，他是舞蹈生，但是最后也没有到一起，只是做了几天朋友；</p>\n<p>实习期间结束之后就先去了一趟云南，然后直接去了上海…</p>\n<p>自己去机场买飞机票，不懂的地方找人问，百度查，当时记得有个姑娘对我说： 不管你走到哪里都要装成一个熟人，啥也会的；</p>\n<p>到了云南之后，本想着有朋友接我，但是他要上课，我就打车住了酒店，后来他说我被坑了，因为那里基本都是黑车，住的酒店也许都是坑人的那种，不过我觉得还好，也没发现针对我的一些事情；</p>\n<p>第一次出省，人生地不熟的，幸好没有走丢，谢天谢地谢高德拯救了我这么一个路痴；</p>\n<p>当时是在云南五华区租了将近一个月的房子，就想着找找工作看看运气，结果一去一个不吱声；</p>\n<p>本想着来着旅旅游，最后把自己搞抑郁了；</p>\n<p>去面试，被现实狠狠上了一课，学历不行能力不行，没经验没技术处处碰壁，“会 xxx 吗？会 xxx 吗？我们要求的是复合型人才，你并不适合…”</p>\n<p>打印那么多的简历也许过往云烟了，一张张的简历记录的并不是我的过去，而是我的未来；自己就想角落里随风飘起的一张纸，随处可见，但并不重视，格外不起眼；</p>\n<p>那段时间，我也想了很多，亲戚朋友打来的电话基本都是不接的，那段时间简直就是人间蒸发掉了；</p>\n<p>不过还好，我遇到一家公司（对于实习之后的详细速写）：</p>\n<p>大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；</p>\n<p>过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面 就不接了，学校，朋友的消息也都没回；</p>\n<p>机缘巧合，在一番失败之后，面试上了昆明拓鸿科技公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；</p>\n<p>在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；</p>\n<p>之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；</p>\n<p>来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；</p>\n<p>上海鸣皋教育科技有限公司, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大志哥人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的 bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上 就是为了学习而来；</p>\n<p>那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；</p>\n<p>之后，在学习了一年之后，就跟老大提了离职。。。</p>\n<p>我来到了上海帘邦信息科技有限公司, 规模人数要比之前的大一点，入职之后，杰哥让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了 node，学习了规范化流程清楚的知道了自己很多的问题与缺陷；</p>\n<p>线下时间就去了解 node，并以 node+express 搭建 api 请求，在经历个半个月之后，就自己动手搭建了一个简单的博客系统, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了宝塔布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下 jenkins 不是 node 和 vue 项目，简单说就是将项目拉下来，执行命令，将 dist 文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；</p>\n<p>年终总结大会来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；</p>\n<p>接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以 node, express 然后简单了解 koa 的基础使用，之后在这基础上又接触了 nest， mqSql，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习 vue 相关的知识，通过 github 项目，掘金，csdn 等等论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；</p>\n<p>并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；</p>\n<p>之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，dart, flutter，了解其使用，getx 状态管理器, http 的拦截使用简单的请求渲染页面；作为一个技术储备；</p>\n<p>在公司发现了一些问题，公司没有 pc,h5 的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想 vue-cli 安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过 npm 发布自己的工具，于是 tem-pro 工具就上线了；起初周下载量也有了 100 左右的下载，慢慢的后面下载量就减少了；</p>\n<p>对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；</p>\n<p>不过现在还没有这个想法，先继续提升自己的能力吧！</p>\n","excerpt":"","more":"<p>大学一笔带过，因为没有什么特殊事情发生，就是一个“废人”，睡觉打游戏，混过的几年…</p>\n<p>实习期间虽然也遇到姑娘，他是舞蹈生，但是最后也没有到一起，只是做了几天朋友；</p>\n<p>实习期间结束之后就先去了一趟云南，然后直接去了上海…</p>\n<p>自己去机场买飞机票，不懂的地方找人问，百度查，当时记得有个姑娘对我说： 不管你走到哪里都要装成一个熟人，啥也会的；</p>\n<p>到了云南之后，本想着有朋友接我，但是他要上课，我就打车住了酒店，后来他说我被坑了，因为那里基本都是黑车，住的酒店也许都是坑人的那种，不过我觉得还好，也没发现针对我的一些事情；</p>\n<p>第一次出省，人生地不熟的，幸好没有走丢，谢天谢地谢高德拯救了我这么一个路痴；</p>\n<p>当时是在云南五华区租了将近一个月的房子，就想着找找工作看看运气，结果一去一个不吱声；</p>\n<p>本想着来着旅旅游，最后把自己搞抑郁了；</p>\n<p>去面试，被现实狠狠上了一课，学历不行能力不行，没经验没技术处处碰壁，“会 xxx 吗？会 xxx 吗？我们要求的是复合型人才，你并不适合…”</p>\n<p>打印那么多的简历也许过往云烟了，一张张的简历记录的并不是我的过去，而是我的未来；自己就想角落里随风飘起的一张纸，随处可见，但并不重视，格外不起眼；</p>\n<p>那段时间，我也想了很多，亲戚朋友打来的电话基本都是不接的，那段时间简直就是人间蒸发掉了；</p>\n<p>不过还好，我遇到一家公司（对于实习之后的详细速写）：</p>\n<p>大学毕业之前的事情就不提了，毕业之后在山西实习了短暂的一年，实习完成因为家里的事情，我就出去放松了一段时间，去了云南；云南的景色说实话是真的很美，表面上是以找工作为噱头，其实就是取云南旅游玩耍了一个月左右，山清水秀，不过当时是在五华区短暂的呆了一个月，基本每天都会听到消防车在大街上鸣笛；那会的云南还是太热了，山上的树木都有了自然的现象；</p>\n<p>过了几天之后，就带着自己简历去试了试，很成功的失败了，但是也没怎么反思自己的问题，结果投了将近半个月吧，我心态崩了，连在当地的基础工资的工作都找不上，也许压力大还是自己的无能导致自己走向了轻微抑郁，儿行千里母担忧，当时家里也打过很多电话，刚开始还说道说道，后面 就不接了，学校，朋友的消息也都没回；</p>\n<p>机缘巧合，在一番失败之后，面试上了昆明拓鸿科技公司，当时进去之后，就感慨真不愧是区域大公司，当时好像经历了二次面试，之后与公司的大领导谈了谈，之前是做技术的，说我现在可以考虑一下公司的销售岗位，后期可以调岗；我没有直接拒绝，说了考虑一下；</p>\n<p>在公司呆了一下午，参与了公司的一些小游戏，活动，介绍等；回去之后考虑之后就拒绝了；</p>\n<p>之后，朋友跟我打电话说是要去上海，我想过之后，相对于大城市肯定机会多，二话不说的答应了，并且收拾完之后，就出发了；</p>\n<p>来了上海之后，没地方住，只能住在朋友那里，三世一厅一厨一卫，他们有三个人，再加上我和朋友共五人，朋友去的找睡在了沙发，我去的晚一些，没地方睡，上海朋友说先在这里挤一挤吧，找到工作之后再搬走，他们三室主人，一人一间，朋友睡沙发刚好够他的位置，茶几旁边还有窄窄的过道，我就搬了俩个凳子堆在一起，头下放一个，腰下放一个，脚下放自己的行李箱；就那样在潮湿的环境呆了一个月好像，找到各自的工作，租房之后就买了点水果礼品，拜谢之后就搬走了；</p>\n<p>上海鸣皋教育科技有限公司, 我来了，刚开始进去之后很陌生，也很胆怯；起初是没有项目可以做的，我就在看前辈们做过的项目学习学习；同事也很热情，我老大志哥人很不错，在他的带领下，我算是转正并接触了第一个属于自己搭建的项目，这个过程很繁琐，结果也不是很满意，因为我没有什么工作经验，工作中也总是犯错，刚改好的 bug，改了其他地方有报错了；emm，我很苦恼，不过我对面的后端前辈比我年长几岁，和他调试过程中，我学到了很多，虽然语气不怎么好，但是没放在心上 就是为了学习而来；</p>\n<p>那时候花销也很大，再加上之前手头比较紧，在平台借的一些，导致后俩年都在还；</p>\n<p>之后，在学习了一年之后，就跟老大提了离职。。。</p>\n<p>我来到了上海帘邦信息科技有限公司, 规模人数要比之前的大一点，入职之后，杰哥让我熟悉一下环境，刚开始心里想改变自己活跃起来，一到正经时期就怯场；就那样转正了，接触了 node，学习了规范化流程清楚的知道了自己很多的问题与缺陷；</p>\n<p>线下时间就去了解 node，并以 node+express 搭建 api 请求，在经历个半个月之后，就自己动手搭建了一个简单的博客系统, 这也是第一代博客的产生，因为数据全都是静态的，并且文档的解析方式不一致，后面就废弃了；简单的学习了宝塔布局服务器，刚开始的前端部署还是上传文件，后来考虑到太麻烦就查阅资料，自己简单的学了一下 jenkins 不是 node 和 vue 项目，简单说就是将项目拉下来，执行命令，将 dist 文件内容复制在自己的网站下面， 这样通过命令就可以直接完成了；不过打包和部署过程也是花费了我不少时间；</p>\n<p>年终总结大会来了，因为之前没有参与过不知道性质和作用，抽签抽到了第一名，慌了不知道自己该怎么做，在前辈的带领下，自己说的没有逻辑就说完了；知道了周围同事的优秀，也明白了自己技术不扎实，没有自信；</p>\n<p>接下来的时间就是提升自己，提升自己的自信，在以公司项目为中心，技术范围的学习扩大，不单单是以 node, express 然后简单了解 koa 的基础使用，之后在这基础上又接触了 nest， mqSql，并且简单的增删改查的功能；白天的时间基本都在工作，闲暇时间去学习 vue 相关的知识，通过 github 项目，掘金，csdn 等等论坛，文档的形式补充自己基础上的不足；再一年的总结大会，同事给我的评价: 成长迅速，有自己的想法，与他人沟通多了起来；老大也是看好我的，之后的工作不再花大量时间去学习基础了，在项目的奠基上延伸功能的优化，性能的优化等等；</p>\n<p>并在知识库中，编写文档，项目中经常遇到的问题，解决方案，一些工具的封装使用，规范等等，并提出技术分享会议，将自己的文档，想法讲了出来效果还是不错；不过后来没有继续执行了，大家手里的事情比较多，需求迭代紧急就没有时间了说这个分享；</p>\n<p>之后觉得自己工作中的功能没有太大的问题，就接触了一些其他的语言，dart, flutter，了解其使用，getx 状态管理器, http 的拦截使用简单的请求渲染页面；作为一个技术储备；</p>\n<p>在公司发现了一些问题，公司没有 pc,h5 的模板项目，如果后期编写新的项目只能复制之前的项目进行修改了，在这问题之上我进行考虑，如果能想 vue-cli 安装一样，这样的问题是不是就解决了，线下时间向领导请求仓库的权限，在同意之后花费俩天左右时间了解其运行原理与功能，并通过 npm 发布自己的工具，于是 tem-pro 工具就上线了；起初周下载量也有了 100 左右的下载，慢慢的后面下载量就减少了；</p>\n<p>对于后期是否继续呆在上海还不敢保证，毕竟自身压力，家庭，自身条件，成家等多因素的影响，也有可能后几年就回老家了；</p>\n<p>不过现在还没有这个想法，先继续提升自己的能力吧！</p>\n"},{"title":"临终前的回溯-第七章：步入正轨","abbrlink":"7ce53da5","date":"2023-10-08T01:05:01.000Z","_content":"> 人生最有意思的的是：人生本事佛陀路, 一路艰辛一路成长，到了最后你就会发现不过如此；曾经我以为只要你努力，就会有结果，但结果背道而驰，并不是完全正确的；\n\n时间过得很快，慢慢的生活工作步入正轨，老 w 前段时间跟我说，之前欠的钱已经还的大差不差了，马上我就要进入存钱的阶段了；我当时跟他说，只怪年轻不懂事啊花的钱太超前了，要我说也是那些网上借钱的也是一个坑；\n\n快入 30 的老 w，貌似进入了迷茫，他不清楚现在的他除了工作能干什么，没有一技之长，也没有特别擅长的，难道说只能靠着工资活下去吗，现在没有压不过气的山峰，但是想对压力也是很大的，没有对象他，没有存款的他，也没有房子的他，貌似脱离了社会；\n\n之前跟老 w 说了说老家的情况，现在的老家除了传统工艺，煤矿开发等稳定发展，但是想要大力发展经济是个很大的难题，资源总有濒临匮乏的时候，传统工艺也有断承的时候，那个时候该怎么发展；虽然说现在的总体的经济并不好，房价的下降也是正好可以说明国内的经济也许并不好，大环境的卡动，互联网的发展已经走入饱和期，现在出现了 ai 的经济，ai 带来的影响也是很大的，部分 ai 已经进入了人类的生活，也许在不久的将来慢慢替代人。\n\n是啊，现在这种情况三无情况，后期生活的压力会很大，但是压力大又有什么，那就慢慢的来呗，反正现在的生活也就是有机会看看机会没机会那就慢慢挣钱呗；\n\n不过现在还好，生活工作慢慢步入正轨，一切都在往好的方向发展，现在的我只需要保证自己的状态就好；\n\n前段时间身体出现了一些问题，但是并不是很大的问题，明年抽个时间去养养身体，总不能钱没挣到身体垮了吧；\n\n国庆到了，今年也就不回去了，回去也没啥意思，也没啥事；正好趁着这段时间好好休息，毕竟前段时间一直加班确实很累；\n\n也是时候规划自己的生活了，毕竟马上进入青年了；\n","source":"_posts/生活日志/小说/临终前的回溯/步入正轨.md","raw":"---\ntitle: 临终前的回溯-第七章：步入正轨\nabbrlink: 7ce53da5\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n> 人生最有意思的的是：人生本事佛陀路, 一路艰辛一路成长，到了最后你就会发现不过如此；曾经我以为只要你努力，就会有结果，但结果背道而驰，并不是完全正确的；\n\n时间过得很快，慢慢的生活工作步入正轨，老 w 前段时间跟我说，之前欠的钱已经还的大差不差了，马上我就要进入存钱的阶段了；我当时跟他说，只怪年轻不懂事啊花的钱太超前了，要我说也是那些网上借钱的也是一个坑；\n\n快入 30 的老 w，貌似进入了迷茫，他不清楚现在的他除了工作能干什么，没有一技之长，也没有特别擅长的，难道说只能靠着工资活下去吗，现在没有压不过气的山峰，但是想对压力也是很大的，没有对象他，没有存款的他，也没有房子的他，貌似脱离了社会；\n\n之前跟老 w 说了说老家的情况，现在的老家除了传统工艺，煤矿开发等稳定发展，但是想要大力发展经济是个很大的难题，资源总有濒临匮乏的时候，传统工艺也有断承的时候，那个时候该怎么发展；虽然说现在的总体的经济并不好，房价的下降也是正好可以说明国内的经济也许并不好，大环境的卡动，互联网的发展已经走入饱和期，现在出现了 ai 的经济，ai 带来的影响也是很大的，部分 ai 已经进入了人类的生活，也许在不久的将来慢慢替代人。\n\n是啊，现在这种情况三无情况，后期生活的压力会很大，但是压力大又有什么，那就慢慢的来呗，反正现在的生活也就是有机会看看机会没机会那就慢慢挣钱呗；\n\n不过现在还好，生活工作慢慢步入正轨，一切都在往好的方向发展，现在的我只需要保证自己的状态就好；\n\n前段时间身体出现了一些问题，但是并不是很大的问题，明年抽个时间去养养身体，总不能钱没挣到身体垮了吧；\n\n国庆到了，今年也就不回去了，回去也没啥意思，也没啥事；正好趁着这段时间好好休息，毕竟前段时间一直加班确实很累；\n\n也是时候规划自己的生活了，毕竟马上进入青年了；\n","slug":"生活日志/小说/临终前的回溯/步入正轨","published":1,"updated":"2025-03-12T10:12:35.235Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jc008lfg9m5f1s8eu8","content":"<blockquote>\n<p>人生最有意思的的是：人生本事佛陀路, 一路艰辛一路成长，到了最后你就会发现不过如此；曾经我以为只要你努力，就会有结果，但结果背道而驰，并不是完全正确的；</p>\n</blockquote>\n<p>时间过得很快，慢慢的生活工作步入正轨，老 w 前段时间跟我说，之前欠的钱已经还的大差不差了，马上我就要进入存钱的阶段了；我当时跟他说，只怪年轻不懂事啊花的钱太超前了，要我说也是那些网上借钱的也是一个坑；</p>\n<p>快入 30 的老 w，貌似进入了迷茫，他不清楚现在的他除了工作能干什么，没有一技之长，也没有特别擅长的，难道说只能靠着工资活下去吗，现在没有压不过气的山峰，但是想对压力也是很大的，没有对象他，没有存款的他，也没有房子的他，貌似脱离了社会；</p>\n<p>之前跟老 w 说了说老家的情况，现在的老家除了传统工艺，煤矿开发等稳定发展，但是想要大力发展经济是个很大的难题，资源总有濒临匮乏的时候，传统工艺也有断承的时候，那个时候该怎么发展；虽然说现在的总体的经济并不好，房价的下降也是正好可以说明国内的经济也许并不好，大环境的卡动，互联网的发展已经走入饱和期，现在出现了 ai 的经济，ai 带来的影响也是很大的，部分 ai 已经进入了人类的生活，也许在不久的将来慢慢替代人。</p>\n<p>是啊，现在这种情况三无情况，后期生活的压力会很大，但是压力大又有什么，那就慢慢的来呗，反正现在的生活也就是有机会看看机会没机会那就慢慢挣钱呗；</p>\n<p>不过现在还好，生活工作慢慢步入正轨，一切都在往好的方向发展，现在的我只需要保证自己的状态就好；</p>\n<p>前段时间身体出现了一些问题，但是并不是很大的问题，明年抽个时间去养养身体，总不能钱没挣到身体垮了吧；</p>\n<p>国庆到了，今年也就不回去了，回去也没啥意思，也没啥事；正好趁着这段时间好好休息，毕竟前段时间一直加班确实很累；</p>\n<p>也是时候规划自己的生活了，毕竟马上进入青年了；</p>\n","excerpt":"","more":"<blockquote>\n<p>人生最有意思的的是：人生本事佛陀路, 一路艰辛一路成长，到了最后你就会发现不过如此；曾经我以为只要你努力，就会有结果，但结果背道而驰，并不是完全正确的；</p>\n</blockquote>\n<p>时间过得很快，慢慢的生活工作步入正轨，老 w 前段时间跟我说，之前欠的钱已经还的大差不差了，马上我就要进入存钱的阶段了；我当时跟他说，只怪年轻不懂事啊花的钱太超前了，要我说也是那些网上借钱的也是一个坑；</p>\n<p>快入 30 的老 w，貌似进入了迷茫，他不清楚现在的他除了工作能干什么，没有一技之长，也没有特别擅长的，难道说只能靠着工资活下去吗，现在没有压不过气的山峰，但是想对压力也是很大的，没有对象他，没有存款的他，也没有房子的他，貌似脱离了社会；</p>\n<p>之前跟老 w 说了说老家的情况，现在的老家除了传统工艺，煤矿开发等稳定发展，但是想要大力发展经济是个很大的难题，资源总有濒临匮乏的时候，传统工艺也有断承的时候，那个时候该怎么发展；虽然说现在的总体的经济并不好，房价的下降也是正好可以说明国内的经济也许并不好，大环境的卡动，互联网的发展已经走入饱和期，现在出现了 ai 的经济，ai 带来的影响也是很大的，部分 ai 已经进入了人类的生活，也许在不久的将来慢慢替代人。</p>\n<p>是啊，现在这种情况三无情况，后期生活的压力会很大，但是压力大又有什么，那就慢慢的来呗，反正现在的生活也就是有机会看看机会没机会那就慢慢挣钱呗；</p>\n<p>不过现在还好，生活工作慢慢步入正轨，一切都在往好的方向发展，现在的我只需要保证自己的状态就好；</p>\n<p>前段时间身体出现了一些问题，但是并不是很大的问题，明年抽个时间去养养身体，总不能钱没挣到身体垮了吧；</p>\n<p>国庆到了，今年也就不回去了，回去也没啥意思，也没啥事；正好趁着这段时间好好休息，毕竟前段时间一直加班确实很累；</p>\n<p>也是时候规划自己的生活了，毕竟马上进入青年了；</p>\n"},{"title":"临终前的回溯-第四章：相离","abbrlink":"f7026e5c","date":"2023-10-08T01:05:01.000Z","_content":"中考过后，虽然我也是经常去找她玩，但是自己心中的那点担心也没和她讲...\n\n我们经过了短暂的相离，他去了长治， 我去了高平，来个不同的方向，也许意味着我们将会在某一个节点去往不同方向的人生；\n\n也许之前的单纯没有见到过虚假的人生，满是谣言的背景，直到上了高中，我体会到了这样的感觉...\n\n高中碰见一姑娘，也许背后有人攒动这件事情，也许是自己的情况，并没有明确表达自身观点，导致自己与她慢慢分开，距离越来越远；\n\n也许直到现在是我心中一心结，也许是我的做作导致这最后的结果；如果当时我态度确认一些，不在选择沉默也许不会这样了吧；\n\n高中，我以为是一个很好的开始，但其实并不是，也许是噩耗，也是一个很好的结束；\n\n现实的残酷更让我缩紧风翼，一个学校的管理背后的故事其实并不简单，可能表明是半封闭管理，但是最后管理的结果却差强人意；其实封闭的不是人，却锁不住那些躁动的心；\n\n校园打架，校园霸凌，抽烟等等事件更好的说明也许半封闭并不是最好的管理；\n\n这也是我目睹过的，当时也想不通，为什么会这样？ 一个青春期躁动的心仅仅靠半封闭如何管理，也许是个笑话？\n\n高中时刻，我也遇到过几个姑娘，也许每个都是一个故事，但是对我而言并没有那种感觉；为什么会这样？\n\n也许在没有经历过的事情，有人为你经历了但是这是一种不一样的感觉，也许这样的感觉它就来了；这就是他人所说的：「我曾经见过，我也曾经爱过」。\n\n对于高三而言，也许别人对我很好，可能我心里并不是一样的感觉；也许在一起很好，但是那个时候的我是不是没有那么喜欢呢？心里有事并不想说明；\n\n这也就是造成误会的最大问题之一了，没有人会长时间经历这样；\n\n高中结束之后，在别人的嘴里听到了“道貌岸人”等词，我也不会再去计较，因为我只想着赶紧离开，离开之后再经历世事重新回来，不过重新回来也许就是不一样的感觉了；\n\n大学：她去了河北靠近北京，我去了太原，大学之后的一段时间，我收到了她的电话，是在晚上，舍友都睡了我去了阳台与她说了很多也聊了很多当年的事情，也许是在做最后的告别吧，但是那天晚上之后，我们之间并没有了什么联系了；\n\n也许这也是我的遗憾吧...\n","source":"_posts/生活日志/小说/临终前的回溯/相离.md","raw":"---\ntitle: 临终前的回溯-第四章：相离\nabbrlink: f7026e5c\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n中考过后，虽然我也是经常去找她玩，但是自己心中的那点担心也没和她讲...\n\n我们经过了短暂的相离，他去了长治， 我去了高平，来个不同的方向，也许意味着我们将会在某一个节点去往不同方向的人生；\n\n也许之前的单纯没有见到过虚假的人生，满是谣言的背景，直到上了高中，我体会到了这样的感觉...\n\n高中碰见一姑娘，也许背后有人攒动这件事情，也许是自己的情况，并没有明确表达自身观点，导致自己与她慢慢分开，距离越来越远；\n\n也许直到现在是我心中一心结，也许是我的做作导致这最后的结果；如果当时我态度确认一些，不在选择沉默也许不会这样了吧；\n\n高中，我以为是一个很好的开始，但其实并不是，也许是噩耗，也是一个很好的结束；\n\n现实的残酷更让我缩紧风翼，一个学校的管理背后的故事其实并不简单，可能表明是半封闭管理，但是最后管理的结果却差强人意；其实封闭的不是人，却锁不住那些躁动的心；\n\n校园打架，校园霸凌，抽烟等等事件更好的说明也许半封闭并不是最好的管理；\n\n这也是我目睹过的，当时也想不通，为什么会这样？ 一个青春期躁动的心仅仅靠半封闭如何管理，也许是个笑话？\n\n高中时刻，我也遇到过几个姑娘，也许每个都是一个故事，但是对我而言并没有那种感觉；为什么会这样？\n\n也许在没有经历过的事情，有人为你经历了但是这是一种不一样的感觉，也许这样的感觉它就来了；这就是他人所说的：「我曾经见过，我也曾经爱过」。\n\n对于高三而言，也许别人对我很好，可能我心里并不是一样的感觉；也许在一起很好，但是那个时候的我是不是没有那么喜欢呢？心里有事并不想说明；\n\n这也就是造成误会的最大问题之一了，没有人会长时间经历这样；\n\n高中结束之后，在别人的嘴里听到了“道貌岸人”等词，我也不会再去计较，因为我只想着赶紧离开，离开之后再经历世事重新回来，不过重新回来也许就是不一样的感觉了；\n\n大学：她去了河北靠近北京，我去了太原，大学之后的一段时间，我收到了她的电话，是在晚上，舍友都睡了我去了阳台与她说了很多也聊了很多当年的事情，也许是在做最后的告别吧，但是那天晚上之后，我们之间并没有了什么联系了；\n\n也许这也是我的遗憾吧...\n","slug":"生活日志/小说/临终前的回溯/相离","published":1,"updated":"2025-03-12T10:11:51.278Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jc008ofg9m3s5ncl5p","content":"<p>中考过后，虽然我也是经常去找她玩，但是自己心中的那点担心也没和她讲…</p>\n<p>我们经过了短暂的相离，他去了长治， 我去了高平，来个不同的方向，也许意味着我们将会在某一个节点去往不同方向的人生；</p>\n<p>也许之前的单纯没有见到过虚假的人生，满是谣言的背景，直到上了高中，我体会到了这样的感觉…</p>\n<p>高中碰见一姑娘，也许背后有人攒动这件事情，也许是自己的情况，并没有明确表达自身观点，导致自己与她慢慢分开，距离越来越远；</p>\n<p>也许直到现在是我心中一心结，也许是我的做作导致这最后的结果；如果当时我态度确认一些，不在选择沉默也许不会这样了吧；</p>\n<p>高中，我以为是一个很好的开始，但其实并不是，也许是噩耗，也是一个很好的结束；</p>\n<p>现实的残酷更让我缩紧风翼，一个学校的管理背后的故事其实并不简单，可能表明是半封闭管理，但是最后管理的结果却差强人意；其实封闭的不是人，却锁不住那些躁动的心；</p>\n<p>校园打架，校园霸凌，抽烟等等事件更好的说明也许半封闭并不是最好的管理；</p>\n<p>这也是我目睹过的，当时也想不通，为什么会这样？ 一个青春期躁动的心仅仅靠半封闭如何管理，也许是个笑话？</p>\n<p>高中时刻，我也遇到过几个姑娘，也许每个都是一个故事，但是对我而言并没有那种感觉；为什么会这样？</p>\n<p>也许在没有经历过的事情，有人为你经历了但是这是一种不一样的感觉，也许这样的感觉它就来了；这就是他人所说的：「我曾经见过，我也曾经爱过」。</p>\n<p>对于高三而言，也许别人对我很好，可能我心里并不是一样的感觉；也许在一起很好，但是那个时候的我是不是没有那么喜欢呢？心里有事并不想说明；</p>\n<p>这也就是造成误会的最大问题之一了，没有人会长时间经历这样；</p>\n<p>高中结束之后，在别人的嘴里听到了“道貌岸人”等词，我也不会再去计较，因为我只想着赶紧离开，离开之后再经历世事重新回来，不过重新回来也许就是不一样的感觉了；</p>\n<p>大学：她去了河北靠近北京，我去了太原，大学之后的一段时间，我收到了她的电话，是在晚上，舍友都睡了我去了阳台与她说了很多也聊了很多当年的事情，也许是在做最后的告别吧，但是那天晚上之后，我们之间并没有了什么联系了；</p>\n<p>也许这也是我的遗憾吧…</p>\n","excerpt":"","more":"<p>中考过后，虽然我也是经常去找她玩，但是自己心中的那点担心也没和她讲…</p>\n<p>我们经过了短暂的相离，他去了长治， 我去了高平，来个不同的方向，也许意味着我们将会在某一个节点去往不同方向的人生；</p>\n<p>也许之前的单纯没有见到过虚假的人生，满是谣言的背景，直到上了高中，我体会到了这样的感觉…</p>\n<p>高中碰见一姑娘，也许背后有人攒动这件事情，也许是自己的情况，并没有明确表达自身观点，导致自己与她慢慢分开，距离越来越远；</p>\n<p>也许直到现在是我心中一心结，也许是我的做作导致这最后的结果；如果当时我态度确认一些，不在选择沉默也许不会这样了吧；</p>\n<p>高中，我以为是一个很好的开始，但其实并不是，也许是噩耗，也是一个很好的结束；</p>\n<p>现实的残酷更让我缩紧风翼，一个学校的管理背后的故事其实并不简单，可能表明是半封闭管理，但是最后管理的结果却差强人意；其实封闭的不是人，却锁不住那些躁动的心；</p>\n<p>校园打架，校园霸凌，抽烟等等事件更好的说明也许半封闭并不是最好的管理；</p>\n<p>这也是我目睹过的，当时也想不通，为什么会这样？ 一个青春期躁动的心仅仅靠半封闭如何管理，也许是个笑话？</p>\n<p>高中时刻，我也遇到过几个姑娘，也许每个都是一个故事，但是对我而言并没有那种感觉；为什么会这样？</p>\n<p>也许在没有经历过的事情，有人为你经历了但是这是一种不一样的感觉，也许这样的感觉它就来了；这就是他人所说的：「我曾经见过，我也曾经爱过」。</p>\n<p>对于高三而言，也许别人对我很好，可能我心里并不是一样的感觉；也许在一起很好，但是那个时候的我是不是没有那么喜欢呢？心里有事并不想说明；</p>\n<p>这也就是造成误会的最大问题之一了，没有人会长时间经历这样；</p>\n<p>高中结束之后，在别人的嘴里听到了“道貌岸人”等词，我也不会再去计较，因为我只想着赶紧离开，离开之后再经历世事重新回来，不过重新回来也许就是不一样的感觉了；</p>\n<p>大学：她去了河北靠近北京，我去了太原，大学之后的一段时间，我收到了她的电话，是在晚上，舍友都睡了我去了阳台与她说了很多也聊了很多当年的事情，也许是在做最后的告别吧，但是那天晚上之后，我们之间并没有了什么联系了；</p>\n<p>也许这也是我的遗憾吧…</p>\n"},{"title":"临终前的回溯-第二章：童年时光","abbrlink":"514ce512","date":"2023-10-08T01:05:01.000Z","_content":"再次睁眼，发现自己的身躯小了些，软软糯糯的小手在光辉在显得那么可爱；才发现自己回到了童年；\n\n每个小孩儿都有自己特殊的成长历程，不调皮没有吃过竹笋炒肉的童年不是一个完整的童年；哎对于这个话题我可是有发言权的呢;\n\n小时候对什么都好奇，对什么都喜欢，啥也不懂的年纪也吃过不少的亏；\n\n在我小的时候, 家里有那种碳火炉，一到冬天再整俩个地瓜，那味道是真的香，就是太过于调皮对于火炉上的烧火棍烧了自己嘴角一块肉，到现在疤痕还在，那疼痛感让我哭了一天，知道一个烤地瓜才让我从疼痛感走了出来；\n\n在上幼儿园的时候，我清晰的记得我写的那个字地正方圆，就像是机器打印出来似的，那段时间也是我最开心的时候了；那段时间家里操办了一个小卖部，来来往往的客人也有很多，村里的，村外的以及其它的陌生人，我依然记得晚上家里的小卖部似乎就是最热闹的地方了；\n\n那段时间经常有人会关顾，我就趴在桌子前，一些看着我的叔叔阿姨也会给我夹点肉吃，因为对于吃肉在我小时候基本都是一盆一盆的吃；就是那种脊骨肉剁碎一点类似于肉夹馍的那种肉，在整一点香油，陈醋再搞点酸然后拌一拌那个味道真是一绝!\n\n那段时间我看见我爹用那个毛笔写字我也觉得好奇，因为我看不懂写的是啥，知道现在才之后那是行草；之后我找到一些不用的毛笔，我也模仿着我爹的动作在地上比划了起来；附近的邻居朋友夸我写得好；\n\n因为小时候也是一个好奇的年龄，总是学这学哪；在电视上看那些永远存在于后世的文字，我就在想那些东西是怎么保存到现在的呢？\n\n于是我就尝试着用猪油+墨水在墙上画了一副“喜鹊报春”图，经过多年的风吹雨到现在也模糊了, 就像现在的记忆一样每次回溯一点我的记忆慢慢的模糊了；\n\n小学的时光总是美好的，那段时光遇到了班主任-姬静;\n\n斯是陋室惟吾德馨，这句话正好能说明我小学，虽然带有历史的遗憾，但是对与冬天来讲是我们最开心的时光了；\n\n因为那个年纪的男生怎么会不喜欢生火呢？\n\n因为一开始就是一上午的时间，结果不重要重要的是过程，虽然每个人脸上乌漆麻黑的，但是玩的很开心啊；\n\n老师会经常带着我们去音乐教室听歌，其实那个音乐教室就是一间小房子，正好能站下我们的大小，那段时间 QQ 非常的流行，于是就趁着我的眼睛好将老师的号码记了再来；\n\n我本身是对学习不感兴趣的，小时候经常装病；好记得那么几次在家里装病结果老师带着学生来看望我；\n\n时光一晃，小学结束了，老师也离开了小学...\n","source":"_posts/生活日志/小说/临终前的回溯/童年时光.md","raw":"---\ntitle: 临终前的回溯-第二章：童年时光\nabbrlink: 514ce512\ndate: 2023-10-08 09:05:01\ncategories:\n  - 生活日志\ntags:\n  - 小说\n---\n再次睁眼，发现自己的身躯小了些，软软糯糯的小手在光辉在显得那么可爱；才发现自己回到了童年；\n\n每个小孩儿都有自己特殊的成长历程，不调皮没有吃过竹笋炒肉的童年不是一个完整的童年；哎对于这个话题我可是有发言权的呢;\n\n小时候对什么都好奇，对什么都喜欢，啥也不懂的年纪也吃过不少的亏；\n\n在我小的时候, 家里有那种碳火炉，一到冬天再整俩个地瓜，那味道是真的香，就是太过于调皮对于火炉上的烧火棍烧了自己嘴角一块肉，到现在疤痕还在，那疼痛感让我哭了一天，知道一个烤地瓜才让我从疼痛感走了出来；\n\n在上幼儿园的时候，我清晰的记得我写的那个字地正方圆，就像是机器打印出来似的，那段时间也是我最开心的时候了；那段时间家里操办了一个小卖部，来来往往的客人也有很多，村里的，村外的以及其它的陌生人，我依然记得晚上家里的小卖部似乎就是最热闹的地方了；\n\n那段时间经常有人会关顾，我就趴在桌子前，一些看着我的叔叔阿姨也会给我夹点肉吃，因为对于吃肉在我小时候基本都是一盆一盆的吃；就是那种脊骨肉剁碎一点类似于肉夹馍的那种肉，在整一点香油，陈醋再搞点酸然后拌一拌那个味道真是一绝!\n\n那段时间我看见我爹用那个毛笔写字我也觉得好奇，因为我看不懂写的是啥，知道现在才之后那是行草；之后我找到一些不用的毛笔，我也模仿着我爹的动作在地上比划了起来；附近的邻居朋友夸我写得好；\n\n因为小时候也是一个好奇的年龄，总是学这学哪；在电视上看那些永远存在于后世的文字，我就在想那些东西是怎么保存到现在的呢？\n\n于是我就尝试着用猪油+墨水在墙上画了一副“喜鹊报春”图，经过多年的风吹雨到现在也模糊了, 就像现在的记忆一样每次回溯一点我的记忆慢慢的模糊了；\n\n小学的时光总是美好的，那段时光遇到了班主任-姬静;\n\n斯是陋室惟吾德馨，这句话正好能说明我小学，虽然带有历史的遗憾，但是对与冬天来讲是我们最开心的时光了；\n\n因为那个年纪的男生怎么会不喜欢生火呢？\n\n因为一开始就是一上午的时间，结果不重要重要的是过程，虽然每个人脸上乌漆麻黑的，但是玩的很开心啊；\n\n老师会经常带着我们去音乐教室听歌，其实那个音乐教室就是一间小房子，正好能站下我们的大小，那段时间 QQ 非常的流行，于是就趁着我的眼睛好将老师的号码记了再来；\n\n我本身是对学习不感兴趣的，小时候经常装病；好记得那么几次在家里装病结果老师带着学生来看望我；\n\n时光一晃，小学结束了，老师也离开了小学...\n","slug":"生活日志/小说/临终前的回溯/童年时光","published":1,"updated":"2025-03-12T10:11:18.587Z","comments":1,"layout":"post","photos":[],"_id":"cm887h0jg00bgfg9ma3tjgam0","content":"<p>再次睁眼，发现自己的身躯小了些，软软糯糯的小手在光辉在显得那么可爱；才发现自己回到了童年；</p>\n<p>每个小孩儿都有自己特殊的成长历程，不调皮没有吃过竹笋炒肉的童年不是一个完整的童年；哎对于这个话题我可是有发言权的呢;</p>\n<p>小时候对什么都好奇，对什么都喜欢，啥也不懂的年纪也吃过不少的亏；</p>\n<p>在我小的时候, 家里有那种碳火炉，一到冬天再整俩个地瓜，那味道是真的香，就是太过于调皮对于火炉上的烧火棍烧了自己嘴角一块肉，到现在疤痕还在，那疼痛感让我哭了一天，知道一个烤地瓜才让我从疼痛感走了出来；</p>\n<p>在上幼儿园的时候，我清晰的记得我写的那个字地正方圆，就像是机器打印出来似的，那段时间也是我最开心的时候了；那段时间家里操办了一个小卖部，来来往往的客人也有很多，村里的，村外的以及其它的陌生人，我依然记得晚上家里的小卖部似乎就是最热闹的地方了；</p>\n<p>那段时间经常有人会关顾，我就趴在桌子前，一些看着我的叔叔阿姨也会给我夹点肉吃，因为对于吃肉在我小时候基本都是一盆一盆的吃；就是那种脊骨肉剁碎一点类似于肉夹馍的那种肉，在整一点香油，陈醋再搞点酸然后拌一拌那个味道真是一绝!</p>\n<p>那段时间我看见我爹用那个毛笔写字我也觉得好奇，因为我看不懂写的是啥，知道现在才之后那是行草；之后我找到一些不用的毛笔，我也模仿着我爹的动作在地上比划了起来；附近的邻居朋友夸我写得好；</p>\n<p>因为小时候也是一个好奇的年龄，总是学这学哪；在电视上看那些永远存在于后世的文字，我就在想那些东西是怎么保存到现在的呢？</p>\n<p>于是我就尝试着用猪油+墨水在墙上画了一副“喜鹊报春”图，经过多年的风吹雨到现在也模糊了, 就像现在的记忆一样每次回溯一点我的记忆慢慢的模糊了；</p>\n<p>小学的时光总是美好的，那段时光遇到了班主任-姬静;</p>\n<p>斯是陋室惟吾德馨，这句话正好能说明我小学，虽然带有历史的遗憾，但是对与冬天来讲是我们最开心的时光了；</p>\n<p>因为那个年纪的男生怎么会不喜欢生火呢？</p>\n<p>因为一开始就是一上午的时间，结果不重要重要的是过程，虽然每个人脸上乌漆麻黑的，但是玩的很开心啊；</p>\n<p>老师会经常带着我们去音乐教室听歌，其实那个音乐教室就是一间小房子，正好能站下我们的大小，那段时间 QQ 非常的流行，于是就趁着我的眼睛好将老师的号码记了再来；</p>\n<p>我本身是对学习不感兴趣的，小时候经常装病；好记得那么几次在家里装病结果老师带着学生来看望我；</p>\n<p>时光一晃，小学结束了，老师也离开了小学…</p>\n","excerpt":"","more":"<p>再次睁眼，发现自己的身躯小了些，软软糯糯的小手在光辉在显得那么可爱；才发现自己回到了童年；</p>\n<p>每个小孩儿都有自己特殊的成长历程，不调皮没有吃过竹笋炒肉的童年不是一个完整的童年；哎对于这个话题我可是有发言权的呢;</p>\n<p>小时候对什么都好奇，对什么都喜欢，啥也不懂的年纪也吃过不少的亏；</p>\n<p>在我小的时候, 家里有那种碳火炉，一到冬天再整俩个地瓜，那味道是真的香，就是太过于调皮对于火炉上的烧火棍烧了自己嘴角一块肉，到现在疤痕还在，那疼痛感让我哭了一天，知道一个烤地瓜才让我从疼痛感走了出来；</p>\n<p>在上幼儿园的时候，我清晰的记得我写的那个字地正方圆，就像是机器打印出来似的，那段时间也是我最开心的时候了；那段时间家里操办了一个小卖部，来来往往的客人也有很多，村里的，村外的以及其它的陌生人，我依然记得晚上家里的小卖部似乎就是最热闹的地方了；</p>\n<p>那段时间经常有人会关顾，我就趴在桌子前，一些看着我的叔叔阿姨也会给我夹点肉吃，因为对于吃肉在我小时候基本都是一盆一盆的吃；就是那种脊骨肉剁碎一点类似于肉夹馍的那种肉，在整一点香油，陈醋再搞点酸然后拌一拌那个味道真是一绝!</p>\n<p>那段时间我看见我爹用那个毛笔写字我也觉得好奇，因为我看不懂写的是啥，知道现在才之后那是行草；之后我找到一些不用的毛笔，我也模仿着我爹的动作在地上比划了起来；附近的邻居朋友夸我写得好；</p>\n<p>因为小时候也是一个好奇的年龄，总是学这学哪；在电视上看那些永远存在于后世的文字，我就在想那些东西是怎么保存到现在的呢？</p>\n<p>于是我就尝试着用猪油+墨水在墙上画了一副“喜鹊报春”图，经过多年的风吹雨到现在也模糊了, 就像现在的记忆一样每次回溯一点我的记忆慢慢的模糊了；</p>\n<p>小学的时光总是美好的，那段时光遇到了班主任-姬静;</p>\n<p>斯是陋室惟吾德馨，这句话正好能说明我小学，虽然带有历史的遗憾，但是对与冬天来讲是我们最开心的时光了；</p>\n<p>因为那个年纪的男生怎么会不喜欢生火呢？</p>\n<p>因为一开始就是一上午的时间，结果不重要重要的是过程，虽然每个人脸上乌漆麻黑的，但是玩的很开心啊；</p>\n<p>老师会经常带着我们去音乐教室听歌，其实那个音乐教室就是一间小房子，正好能站下我们的大小，那段时间 QQ 非常的流行，于是就趁着我的眼睛好将老师的号码记了再来；</p>\n<p>我本身是对学习不感兴趣的，小时候经常装病；好记得那么几次在家里装病结果老师带着学生来看望我；</p>\n<p>时光一晃，小学结束了，老师也离开了小学…</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm887h0im0001fg9m6nopb44r","category_id":"cm887h0io0004fg9ma7thhi0x","_id":"cm887h0ir000ffg9mgho7ca9k"},{"post_id":"cm887h0io0003fg9m73kk16a9","category_id":"cm887h0io0004fg9ma7thhi0x","_id":"cm887h0is000kfg9mbb2d3snt"},{"post_id":"cm887h0ip0006fg9m5nnvdcz7","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0it000qfg9m5hth5hj0"},{"post_id":"cm887h0is000nfg9mfh7w0bc1","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0it000wfg9mczb2epzd"},{"post_id":"cm887h0ip0007fg9md3g0bdtn","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0it0010fg9m3fb60qmo"},{"post_id":"cm887h0is000pfg9m4u059p3c","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iu0013fg9mhwwh2xus"},{"post_id":"cm887h0it000tfg9m4lhtcohg","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iu0016fg9matdpe2z3"},{"post_id":"cm887h0iq0008fg9m6t5qedb7","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iu001afg9m83t49upu"},{"post_id":"cm887h0it000vfg9m18g09gif","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iu001efg9mckqkg1e9"},{"post_id":"cm887h0it000zfg9m6vmx15z7","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iv001ifg9mhj7m6rcl"},{"post_id":"cm887h0ir000cfg9mbl9cdeef","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iv001mfg9m2gdoedda"},{"post_id":"cm887h0it0012fg9m4egldg2e","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iv001qfg9mfk0afc3l"},{"post_id":"cm887h0iu0015fg9mgki96l8k","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iv001sfg9m511chmgw"},{"post_id":"cm887h0ir000dfg9m6ejv74ui","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iw001wfg9mb40xh51g"},{"post_id":"cm887h0iu0019fg9mgsxfffof","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iw001yfg9meh7x6421"},{"post_id":"cm887h0iu001dfg9mgzn4af8q","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iw0022fg9m9yjm2n3k"},{"post_id":"cm887h0ir000hfg9mfym17mtc","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iw0024fg9m3scg06ej"},{"post_id":"cm887h0iu001hfg9mciihfy57","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iw0028fg9ma88lhvx1"},{"post_id":"cm887h0iv001lfg9me3uvdxct","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0ix002afg9mg5q3a9mw"},{"post_id":"cm887h0is000jfg9mgzk90fbt","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0ix002efg9mgtze0c4k"},{"post_id":"cm887h0iv001pfg9m061h1yjm","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0ix002hfg9ma5ll83en"},{"post_id":"cm887h0iv001rfg9mdmn24f8g","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0ix002lfg9m2v41befr"},{"post_id":"cm887h0iw001vfg9m7xuggqbt","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0ix002ofg9m5c1oc2sh"},{"post_id":"cm887h0iw001xfg9m5i2t6v89","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iy002sfg9m3rw61kjg"},{"post_id":"cm887h0iw0021fg9m1o0u1fty","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iy002vfg9mdwgdes9a"},{"post_id":"cm887h0iw0023fg9mdnnh9fxk","category_id":"cm887h0is000lfg9m73316x8v","_id":"cm887h0iy0030fg9mgmpafujw"},{"post_id":"cm887h0iw0027fg9mc2o15ynw","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iy0033fg9m03oaecz3"},{"post_id":"cm887h0iw0029fg9mej5c0er9","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iy0038fg9m6vs37h9a"},{"post_id":"cm887h0ix002dfg9m5iha2mrc","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iz003bfg9mcl24c0uu"},{"post_id":"cm887h0ix002gfg9m904u44au","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iz003gfg9mgsho4rq5"},{"post_id":"cm887h0ix002kfg9m01lzgtgg","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iz003jfg9m6v5ehtu6"},{"post_id":"cm887h0ix002nfg9masalcsu2","category_id":"cm887h0ir000efg9ma54mdijw","_id":"cm887h0iz003mfg9m4wmuevtg"},{"post_id":"cm887h0iy0032fg9mao6ifol9","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0iz003pfg9mapu1f2h4"},{"post_id":"cm887h0ix002rfg9mb7ed7kjo","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j0003sfg9m7ui36bwn"},{"post_id":"cm887h0iy0036fg9m1rgz3cgn","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j0003vfg9mggl56d5m"},{"post_id":"cm887h0iy003afg9mdo05f5oh","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j0003yfg9mas5pg5a2"},{"post_id":"cm887h0iy002ufg9mbgar81lv","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j00041fg9m5bwghhlu"},{"post_id":"cm887h0iz003efg9m9x4zareg","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j00044fg9mcueo1by3"},{"post_id":"cm887h0iz003ifg9m498l9j1d","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j10047fg9m8naoavuw"},{"post_id":"cm887h0iy002zfg9m2bk52pd1","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j1004afg9m4tzt5m7w"},{"post_id":"cm887h0iz003lfg9mc0xf3pui","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j1004dfg9mb4afaem7"},{"post_id":"cm887h0iz003ofg9m817c6z08","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j1004gfg9m7bas8bhi"},{"post_id":"cm887h0j0003rfg9mcvtpewhd","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j1004jfg9m0nfc3wpy"},{"post_id":"cm887h0j0003ufg9mdnjwek8v","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j2004mfg9majjpgxfy"},{"post_id":"cm887h0j0003xfg9mecrc2esz","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j2004pfg9m3tar8jar"},{"post_id":"cm887h0j00040fg9m8nwj7tz4","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j2004sfg9mhr36c721"},{"post_id":"cm887h0j00043fg9mgxd9hvjb","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j2004vfg9me0wvcl2f"},{"post_id":"cm887h0j00046fg9m1y1yhh6k","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j2004yfg9mbxbx4df3"},{"post_id":"cm887h0j10049fg9m55pgblq5","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j30051fg9mgrl8exzh"},{"post_id":"cm887h0j1004cfg9m5jjbed8c","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j30055fg9m2243bjgz"},{"post_id":"cm887h0j1004ffg9m0bbygyxf","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j30058fg9me89x48z3"},{"post_id":"cm887h0j1004ifg9md19ye2zo","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j3005cfg9m0nojcqae"},{"post_id":"cm887h0j2004lfg9m7kmb7x8a","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j3005ffg9m4qfqab0i"},{"post_id":"cm887h0j2004ofg9mdpe02cnp","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j4005jfg9memxga8da"},{"post_id":"cm887h0j2004rfg9m8ire5nk3","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j4005mfg9mapkwecn5"},{"post_id":"cm887h0j2004ufg9mho0u47si","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j4005pfg9ma0yv5xep"},{"post_id":"cm887h0j30057fg9m7bsscwkx","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j4005sfg9mb33f1gti"},{"post_id":"cm887h0j2004xfg9m1yjf5w6h","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j4005vfg9mdp0lfdh0"},{"post_id":"cm887h0j3005afg9m12666xqn","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j5005yfg9m1zu66ndc"},{"post_id":"cm887h0j3005efg9m9vbc16pc","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j50061fg9m3rsxd2j3"},{"post_id":"cm887h0j20050fg9m02yq4rj3","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j50064fg9merbbcarw"},{"post_id":"cm887h0j3005hfg9mcloc3qaf","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j50067fg9m01sle215"},{"post_id":"cm887h0j4005lfg9mchq8bxwd","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j6006afg9m3lve68st"},{"post_id":"cm887h0j30054fg9m9ue66cz9","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0j6006dfg9m2x2fb71b"},{"post_id":"cm887h0j4005ofg9magqq1uyj","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j6006gfg9m22xl0xw8"},{"post_id":"cm887h0j4005rfg9m9i41dj61","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j6006jfg9m7ezue5zb"},{"post_id":"cm887h0j4005ufg9m6irxc4r4","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j7006mfg9merq79ssy"},{"post_id":"cm887h0j4005xfg9mghpgdqug","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j7006pfg9m1wu25lwr"},{"post_id":"cm887h0j50060fg9m4edsgnvc","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j7006sfg9mfs876g38"},{"post_id":"cm887h0j50063fg9mgsc47y36","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j7006ufg9m0cmn1tl2"},{"post_id":"cm887h0j50066fg9mbmup6432","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j8006yfg9mf9x4bdgi"},{"post_id":"cm887h0j60069fg9m1nhs313z","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j80070fg9m46qsbmyb"},{"post_id":"cm887h0j6006cfg9mdzqbg6a3","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j80074fg9m77hz9um2"},{"post_id":"cm887h0j6006ffg9mblqb00rz","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j80076fg9m7ieie25u"},{"post_id":"cm887h0j6006ifg9m6jq2dniv","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j9007afg9mep3bgdey"},{"post_id":"cm887h0j6006lfg9mdl6kfej9","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j9007cfg9m325egu2c"},{"post_id":"cm887h0j7006ofg9m3joedpbt","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j9007gfg9mblow1000"},{"post_id":"cm887h0j7006rfg9m8pg4fque","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0j9007ifg9m27c93k3p"},{"post_id":"cm887h0j7006tfg9m6txb6dyg","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0ja007mfg9m99k76d8w"},{"post_id":"cm887h0j7006xfg9m8fn63dzs","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0ja007ofg9md6r59dg3"},{"post_id":"cm887h0j8006zfg9mh61fbuh4","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0ja007rfg9mau7k67rg"},{"post_id":"cm887h0j80073fg9ma3rsg448","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0ja007ufg9m5c5pdyea"},{"post_id":"cm887h0j80075fg9mfgd9abkv","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0ja007xfg9ma2azfk8v"},{"post_id":"cm887h0j90079fg9m525z0ny1","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jb0080fg9m49ifhfke"},{"post_id":"cm887h0j9007bfg9m45j4e1al","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jb0083fg9mfl73fadu"},{"post_id":"cm887h0j9007ffg9m8vvd3k8k","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jb0086fg9melq3cvvn"},{"post_id":"cm887h0j9007hfg9m9mef8n10","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jb008afg9m4btafwl4"},{"post_id":"cm887h0ja007lfg9m8gdl1as3","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jb008dfg9magle5og4"},{"post_id":"cm887h0ja007nfg9mg7dad3l6","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jc008gfg9mbxneakr9"},{"post_id":"cm887h0ja007qfg9m07gk8pvi","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jc008jfg9mhmyt173q"},{"post_id":"cm887h0ja007tfg9mcds39sze","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jc008mfg9m30lv8c5a"},{"post_id":"cm887h0ja007wfg9mahsybot3","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jd008pfg9macnu0hq0"},{"post_id":"cm887h0jb007zfg9m1ces4h49","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jd008rfg9mcq1q7ihu"},{"post_id":"cm887h0jb0082fg9m5zgm6yha","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jd008tfg9m0gke7s0n"},{"post_id":"cm887h0jb0085fg9m17uy8sdv","category_id":"cm887h0iy002xfg9m4j8l6vgw","_id":"cm887h0jd008vfg9m7ini0ssb"},{"post_id":"cm887h0jb0089fg9m7i9q9h1t","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd008xfg9mg6z21alf"},{"post_id":"cm887h0jb008cfg9m51ebajwv","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd008zfg9ma49s1bgr"},{"post_id":"cm887h0jc008ffg9m8hrd7ehs","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd0091fg9m0hqo8vgw"},{"post_id":"cm887h0jc008ifg9m7yri2y28","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd0093fg9mahd4cl2r"},{"post_id":"cm887h0jc008lfg9m5f1s8eu8","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd0095fg9m9c20fkzr"},{"post_id":"cm887h0jc008ofg9m3s5ncl5p","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jd0097fg9mh7osar10"},{"post_id":"cm887h0jg00bgfg9ma3tjgam0","category_id":"cm887h0j30052fg9m7a395o9o","_id":"cm887h0jj00bifg9meammf4g3"}],"PostTag":[{"post_id":"cm887h0im0001fg9m6nopb44r","tag_id":"cm887h0ip0005fg9m18sf9ozj","_id":"cm887h0ir000bfg9m5crs79b3"},{"post_id":"cm887h0io0003fg9m73kk16a9","tag_id":"cm887h0iq000afg9mekxdapjf","_id":"cm887h0is000ifg9mfjkp10ad"},{"post_id":"cm887h0ip0006fg9m5nnvdcz7","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0is000ofg9mhdhmcbvt"},{"post_id":"cm887h0ip0007fg9md3g0bdtn","tag_id":"cm887h0is000mfg9mazl78e5v","_id":"cm887h0it000ufg9m4w54c6so"},{"post_id":"cm887h0iq0008fg9m6t5qedb7","tag_id":"cm887h0is000mfg9mazl78e5v","_id":"cm887h0it0011fg9m7uwp405o"},{"post_id":"cm887h0it0012fg9m4egldg2e","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iu0018fg9m5e5y1hsu"},{"post_id":"cm887h0ir000cfg9mbl9cdeef","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iu001cfg9mf48j2ajf"},{"post_id":"cm887h0iu0015fg9mgki96l8k","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iu001gfg9m00po5i4l"},{"post_id":"cm887h0ir000dfg9m6ejv74ui","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iv001kfg9m73fnhqxm"},{"post_id":"cm887h0ir000hfg9mfym17mtc","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iv001ofg9max43829c"},{"post_id":"cm887h0is000jfg9mgzk90fbt","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iv001ufg9macixbglq"},{"post_id":"cm887h0is000nfg9mfh7w0bc1","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iw0020fg9m34vj8an4"},{"post_id":"cm887h0is000pfg9m4u059p3c","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iw0026fg9m6segdocd"},{"post_id":"cm887h0iw0027fg9mc2o15ynw","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0ix002cfg9mfaowbp8h"},{"post_id":"cm887h0it000tfg9m4lhtcohg","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0ix002ffg9ma4l997ah"},{"post_id":"cm887h0iw0029fg9mej5c0er9","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0ix002jfg9m9f894n8v"},{"post_id":"cm887h0ix002dfg9m5iha2mrc","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0ix002mfg9m09ot5x6i"},{"post_id":"cm887h0it000vfg9m18g09gif","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0ix002qfg9m6htrcwc7"},{"post_id":"cm887h0ix002gfg9m904u44au","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0iy002tfg9m9020adgg"},{"post_id":"cm887h0ix002kfg9m01lzgtgg","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0iy002yfg9mf1i90u2d"},{"post_id":"cm887h0it000zfg9m6vmx15z7","tag_id":"cm887h0it000yfg9meb8zgum8","_id":"cm887h0iy0031fg9m4u6pdugj"},{"post_id":"cm887h0ix002nfg9masalcsu2","tag_id":"cm887h0ir000gfg9m9ffffjlt","_id":"cm887h0iy0035fg9mcv50aljr"},{"post_id":"cm887h0iu0019fg9mgsxfffof","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0iy0039fg9m7qqjglsb"},{"post_id":"cm887h0iu001dfg9mgzn4af8q","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0iz003dfg9m5jok0nzo"},{"post_id":"cm887h0iu001hfg9mciihfy57","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0iz003hfg9m8ix9c222"},{"post_id":"cm887h0iv001lfg9me3uvdxct","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0iz003nfg9mem228h6n"},{"post_id":"cm887h0iv001pfg9m061h1yjm","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j0003tfg9m4tap00wg"},{"post_id":"cm887h0iv001rfg9mdmn24f8g","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j0003zfg9m4d8m50jo"},{"post_id":"cm887h0iw001vfg9m7xuggqbt","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j00045fg9m0rxg1bbl"},{"post_id":"cm887h0iw001xfg9m5i2t6v89","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j1004bfg9m0r3rdgar"},{"post_id":"cm887h0iw0021fg9m1o0u1fty","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j1004hfg9m5haj1lcz"},{"post_id":"cm887h0iw0023fg9mdnnh9fxk","tag_id":"cm887h0ix002pfg9m79sr6lk0","_id":"cm887h0j2004nfg9m05u7cfl1"},{"post_id":"cm887h0ix002rfg9mb7ed7kjo","tag_id":"cm887h0j1004kfg9mdz2ccvez","_id":"cm887h0j2004tfg9m4npzghle"},{"post_id":"cm887h0iy002ufg9mbgar81lv","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j2004zfg9mbszwhjpt"},{"post_id":"cm887h0iy002zfg9m2bk52pd1","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j30056fg9m7xbecj6b"},{"post_id":"cm887h0iy0032fg9mao6ifol9","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j3005dfg9mby2k6e1t"},{"post_id":"cm887h0iy0036fg9m1rgz3cgn","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j4005kfg9m9x24fu4o"},{"post_id":"cm887h0iy003afg9mdo05f5oh","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j4005qfg9maxx4bgdj"},{"post_id":"cm887h0iz003efg9m9x4zareg","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j4005wfg9mfnj7dwoq"},{"post_id":"cm887h0iz003ifg9m498l9j1d","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j50062fg9m8v7he9v2"},{"post_id":"cm887h0iz003lfg9mc0xf3pui","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j60068fg9m63sh6pen"},{"post_id":"cm887h0iz003ofg9m817c6z08","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j6006efg9m4iqlezdd"},{"post_id":"cm887h0j0003rfg9mcvtpewhd","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j6006kfg9m1m4k5kls"},{"post_id":"cm887h0j0003ufg9mdnjwek8v","tag_id":"cm887h0j2004qfg9mapr7g6rd","_id":"cm887h0j7006qfg9m0cji5a5z"},{"post_id":"cm887h0j0003xfg9mecrc2esz","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0j7006wfg9mhlj30f4h"},{"post_id":"cm887h0j00040fg9m8nwj7tz4","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0j80072fg9m6orp8sf5"},{"post_id":"cm887h0j00043fg9mgxd9hvjb","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0j90078fg9me31k3plf"},{"post_id":"cm887h0j00046fg9m1y1yhh6k","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0j9007efg9m8ovh383p"},{"post_id":"cm887h0j10049fg9m55pgblq5","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0ja007kfg9m4d7n42wt"},{"post_id":"cm887h0j1004cfg9m5jjbed8c","tag_id":"cm887h0j9007jfg9m9q32amu1","_id":"cm887h0ja007sfg9m1l4mcv7v"},{"post_id":"cm887h0j1004ffg9m0bbygyxf","tag_id":"cm887h0j9007jfg9m9q32amu1","_id":"cm887h0ja007yfg9md9fgewp4"},{"post_id":"cm887h0j1004ifg9md19ye2zo","tag_id":"cm887h0j9007jfg9m9q32amu1","_id":"cm887h0jb0084fg9m3f8pf7rl"},{"post_id":"cm887h0jb007zfg9m1ces4h49","tag_id":"cm887h0j7006nfg9maosx28qn","_id":"cm887h0jb0087fg9m3zxv5b81"},{"post_id":"cm887h0j2004lfg9m7kmb7x8a","tag_id":"cm887h0jb0081fg9mgslf6kej","_id":"cm887h0jb008bfg9mdq0x8qum"},{"post_id":"cm887h0j2004ofg9mdpe02cnp","tag_id":"cm887h0jb0081fg9mgslf6kej","_id":"cm887h0jc008hfg9m47lb5rfx"},{"post_id":"cm887h0j2004rfg9m8ire5nk3","tag_id":"cm887h0jb0081fg9mgslf6kej","_id":"cm887h0jc008nfg9m9vqmhchg"},{"post_id":"cm887h0j2004ufg9mho0u47si","tag_id":"cm887h0jb0081fg9mgslf6kej","_id":"cm887h0jd008sfg9mfcvdcpml"},{"post_id":"cm887h0j2004xfg9m1yjf5w6h","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd008wfg9m9yyyhljq"},{"post_id":"cm887h0j20050fg9m02yq4rj3","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd0090fg9mgtjzghry"},{"post_id":"cm887h0j30054fg9m9ue66cz9","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd0094fg9mgy0xg6t7"},{"post_id":"cm887h0j30057fg9m7bsscwkx","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd0098fg9maxpmdts0"},{"post_id":"cm887h0j3005afg9m12666xqn","tag_id":"cm887h0jd0096fg9maj1c8oms","_id":"cm887h0jd009afg9m7437d25q"},{"post_id":"cm887h0j3005efg9m9vbc16pc","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd009cfg9mbh01cvd7"},{"post_id":"cm887h0j3005hfg9mcloc3qaf","tag_id":"cm887h0jd008qfg9m1o5pchlt","_id":"cm887h0jd009efg9m0z053hnt"},{"post_id":"cm887h0j4005lfg9mchq8bxwd","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0jd009gfg9m344mecj1"},{"post_id":"cm887h0j4005ofg9magqq1uyj","tag_id":"cm887h0jd009ffg9m8g1n3emj","_id":"cm887h0je009ifg9m355b7epl"},{"post_id":"cm887h0j4005rfg9m9i41dj61","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009kfg9m3nvtb5h6"},{"post_id":"cm887h0j4005ufg9m6irxc4r4","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009mfg9mb05ihirr"},{"post_id":"cm887h0j4005xfg9mghpgdqug","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009ofg9mccjf4clb"},{"post_id":"cm887h0j50060fg9m4edsgnvc","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009qfg9m4imb4m8l"},{"post_id":"cm887h0j50063fg9mgsc47y36","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009sfg9mhoeggzs8"},{"post_id":"cm887h0j50066fg9mbmup6432","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009ufg9m0lbsaf4z"},{"post_id":"cm887h0j60069fg9m1nhs313z","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009wfg9m3r924nqt"},{"post_id":"cm887h0j6006cfg9mdzqbg6a3","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je009yfg9mhkck676l"},{"post_id":"cm887h0j6006ffg9mblqb00rz","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je00a0fg9mgpxzdsoa"},{"post_id":"cm887h0j6006ifg9m6jq2dniv","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je00a2fg9m1bde4udg"},{"post_id":"cm887h0j6006lfg9mdl6kfej9","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je00a4fg9maq0yass7"},{"post_id":"cm887h0j7006ofg9m3joedpbt","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je00a6fg9m0tmtemj5"},{"post_id":"cm887h0j7006rfg9m8pg4fque","tag_id":"cm887h0jd009dfg9m1lt78369","_id":"cm887h0je00a8fg9m6lhr2jmp"},{"post_id":"cm887h0j7006tfg9m6txb6dyg","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0je00aafg9m3tqigzga"},{"post_id":"cm887h0j7006xfg9m8fn63dzs","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0je00acfg9mb68e8csn"},{"post_id":"cm887h0j8006zfg9mh61fbuh4","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00aefg9m5z1x3x1x"},{"post_id":"cm887h0j80073fg9ma3rsg448","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00agfg9m7ewe8a0r"},{"post_id":"cm887h0j80075fg9mfgd9abkv","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00aifg9m1m0w3ots"},{"post_id":"cm887h0j90079fg9m525z0ny1","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00akfg9meejn2b6f"},{"post_id":"cm887h0j9007bfg9m45j4e1al","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00amfg9m84yoc9rl"},{"post_id":"cm887h0j9007ffg9m8vvd3k8k","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00aofg9m5c3a4fmz"},{"post_id":"cm887h0j9007hfg9m9mef8n10","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00aqfg9mczeacgn2"},{"post_id":"cm887h0ja007lfg9m8gdl1as3","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00asfg9mdw4r0a44"},{"post_id":"cm887h0ja007nfg9mg7dad3l6","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00aufg9m62tv96t9"},{"post_id":"cm887h0ja007qfg9m07gk8pvi","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00awfg9mcg0i36o4"},{"post_id":"cm887h0ja007tfg9mcds39sze","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00ayfg9mhvkhcqih"},{"post_id":"cm887h0ja007wfg9mahsybot3","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00b0fg9m3zmk8ilp"},{"post_id":"cm887h0jb0082fg9m5zgm6yha","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00b2fg9mghlaa44c"},{"post_id":"cm887h0jb0085fg9m17uy8sdv","tag_id":"cm887h0je00a7fg9m608ibxfu","_id":"cm887h0jf00b4fg9mbs3ccykx"},{"post_id":"cm887h0jb0089fg9m7i9q9h1t","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jf00b6fg9m6mxve2dn"},{"post_id":"cm887h0jb008cfg9m51ebajwv","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00b8fg9mf8x03tyv"},{"post_id":"cm887h0jc008ffg9m8hrd7ehs","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00bafg9mgntm0ofg"},{"post_id":"cm887h0jc008ifg9m7yri2y28","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00bcfg9mfaaj01pw"},{"post_id":"cm887h0jc008lfg9m5f1s8eu8","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00befg9m8bwa08s8"},{"post_id":"cm887h0jc008ofg9m3s5ncl5p","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00bffg9m4k7o0ezc"},{"post_id":"cm887h0jg00bgfg9ma3tjgam0","tag_id":"cm887h0jf00b3fg9m7lxq0muq","_id":"cm887h0jg00bhfg9m7xky3spp"}],"Tag":[{"name":"关于博主","_id":"cm887h0ip0005fg9m18sf9ozj"},{"name":"升级日志","_id":"cm887h0iq000afg9mekxdapjf"},{"name":"项目","_id":"cm887h0ir000gfg9m9ffffjlt"},{"name":"个人总结","_id":"cm887h0is000mfg9mazl78e5v"},{"name":"技术调研","_id":"cm887h0it000yfg9meb8zgum8"},{"name":"工作内容","_id":"cm887h0ix002pfg9m79sr6lk0"},{"name":"Html","_id":"cm887h0j1004kfg9mdz2ccvez"},{"name":"Nest","_id":"cm887h0j2004qfg9mapr7g6rd"},{"name":"Vue","_id":"cm887h0j7006nfg9maosx28qn"},{"name":"备忘录","_id":"cm887h0j9007jfg9m9q32amu1"},{"name":"服务器/运营","_id":"cm887h0jb0081fg9mgslf6kej"},{"name":"生活","_id":"cm887h0jd008qfg9m1o5pchlt"},{"name":"摄影","_id":"cm887h0jd0096fg9maj1c8oms"},{"name":"JavaScript","_id":"cm887h0jd009dfg9m1lt78369"},{"name":"Css","_id":"cm887h0jd009ffg9m8g1n3emj"},{"name":"工程化","_id":"cm887h0je00a7fg9m608ibxfu"},{"name":"小说","_id":"cm887h0jf00b3fg9m7lxq0muq"}]}}